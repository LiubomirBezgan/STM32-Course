
SKG_IKS02A1_1ST_ML.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  0800cb88  0800cb88  0001cb88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0e0  0800d0e0  000202c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0e0  0800d0e0  0001d0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0e8  0800d0e8  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0e8  0800d0e8  0001d0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0ec  0800d0ec  0001d0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800d0f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  200002c4  0800d3b4  000202c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  0800d3b4  000205cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001a9fb  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00028253  00000000  00000000  0003acef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003238  00000000  00000000  00062f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002030  00000000  00000000  00066180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000981c3  00000000  00000000  000681b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001ef0  00000000  00000000  00100378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018cc1  00000000  00000000  00102268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011af29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f44  00000000  00000000  0011af7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cb6c 	.word	0x0800cb6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800cb6c 	.word	0x0800cb6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f62:	490e      	ldr	r1, [pc, #56]	; (8000f9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f64:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f78:	4c0b      	ldr	r4, [pc, #44]	; (8000fa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f86:	f005 fa53 	bl	8006430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f007 ff65 	bl	8008e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8e:	f000 fb29 	bl	80015e4 <main>
  bx  lr    
 8000f92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8000fa0:	0800d0f0 	.word	0x0800d0f0
  ldr r2, =_sbss
 8000fa4:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8000fa8:	200005cc 	.word	0x200005cc

08000fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC_IRQHandler>

08000fae <MX_MEMS_Init>:
static void Magneto_Sensor_Handler(uint32_t Instance);
static void MX_IKS02A1_DataLogTerminal_Init(void);
static void MX_IKS02A1_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS02A1_DataLogTerminal_Init();
 8000fb2:	f000 f809 	bl	8000fc8 <MX_IKS02A1_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_IKS02A1_DataLogTerminal_Process();
 8000fbe:	f000 f919 	bl	80011f4 <MX_IKS02A1_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <MX_IKS02A1_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS02A1_DataLogTerminal_Init(void)
{
 8000fc8:	b5b0      	push	{r4, r5, r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f005 f8c6 	bl	8006160 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f005 f8dc 	bl	8006194 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f005 f92d 	bl	800623c <BSP_PB_GetState>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	bf0c      	ite	eq
 8000fe8:	2301      	moveq	r3, #1
 8000fea:	2300      	movne	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b70      	ldr	r3, [pc, #448]	; (80011b4 <MX_IKS02A1_DataLogTerminal_Init+0x1ec>)
 8000ff2:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f005 f94b 	bl	8006290 <BSP_COM_Init>

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_ISM330DHCX_0, MOTION_ACCELERO | MOTION_GYRO);
 8000ffa:	2103      	movs	r1, #3
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f004 fc87 	bl	8005910 <IKS02A1_MOTION_SENSOR_Init>

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_IIS2DLPC_0, MOTION_ACCELERO);
 8001002:	2102      	movs	r1, #2
 8001004:	2001      	movs	r0, #1
 8001006:	f004 fc83 	bl	8005910 <IKS02A1_MOTION_SENSOR_Init>

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_IIS2MDC_0, MOTION_MAGNETO);
 800100a:	2104      	movs	r1, #4
 800100c:	2002      	movs	r0, #2
 800100e:	f004 fc7f 	bl	8005910 <IKS02A1_MOTION_SENSOR_Init>

  for(i = 0; i < IKS02A1_MOTION_INSTANCES_NBR; i++)
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	e0c3      	b.n	80011a0 <MX_IKS02A1_DataLogTerminal_Init+0x1d8>
  {
    IKS02A1_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	4613      	mov	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	1a9b      	subs	r3, r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4a64      	ldr	r2, [pc, #400]	; (80011b8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8001026:	4413      	add	r3, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f004 fd6d 	bl	8005b08 <IKS02A1_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800102e:	4962      	ldr	r1, [pc, #392]	; (80011b8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	4613      	mov	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	1a9b      	subs	r3, r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800103e:	4618      	mov	r0, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8001040:	495d      	ldr	r1, [pc, #372]	; (80011b8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	4613      	mov	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	1a9b      	subs	r3, r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	3301      	adds	r3, #1
 8001050:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001052:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8001054:	4958      	ldr	r1, [pc, #352]	; (80011b8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4613      	mov	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	1a9b      	subs	r3, r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	440b      	add	r3, r1
 8001062:	3302      	adds	r3, #2
 8001064:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001066:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8001068:	4953      	ldr	r1, [pc, #332]	; (80011b8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	4613      	mov	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	1a9b      	subs	r3, r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	440b      	add	r3, r1
 8001076:	3303      	adds	r3, #3
 8001078:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800107a:	9303      	str	r3, [sp, #12]
 800107c:	9502      	str	r5, [sp, #8]
 800107e:	9401      	str	r4, [sp, #4]
 8001080:	9000      	str	r0, [sp, #0]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4a4d      	ldr	r2, [pc, #308]	; (80011bc <MX_IKS02A1_DataLogTerminal_Init+0x1f4>)
 8001086:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108a:	484d      	ldr	r0, [pc, #308]	; (80011c0 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 800108c:	f008 fb92 	bl	80097b4 <sniprintf>
    printf("%s", dataOut);
 8001090:	494b      	ldr	r1, [pc, #300]	; (80011c0 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 8001092:	484c      	ldr	r0, [pc, #304]	; (80011c4 <MX_IKS02A1_DataLogTerminal_Init+0x1fc>)
 8001094:	f008 fb76 	bl	8009784 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 8001098:	4947      	ldr	r1, [pc, #284]	; (80011b8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	3314      	adds	r3, #20
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	463b      	mov	r3, r7
 80010ae:	2103      	movs	r1, #3
 80010b0:	4618      	mov	r0, r3
 80010b2:	eeb0 0a67 	vmov.f32	s0, s15
 80010b6:	f000 f8fb 	bl	80012b0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 80010be:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 80010c0:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 80010c2:	493d      	ldr	r1, [pc, #244]	; (80011b8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	4613      	mov	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	1a9b      	subs	r3, r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	440b      	add	r3, r1
 80010d0:	3308      	adds	r3, #8
 80010d2:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 80010d4:	9301      	str	r3, [sp, #4]
 80010d6:	9000      	str	r0, [sp, #0]
 80010d8:	4623      	mov	r3, r4
 80010da:	4a3b      	ldr	r2, [pc, #236]	; (80011c8 <MX_IKS02A1_DataLogTerminal_Init+0x200>)
 80010dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e0:	4837      	ldr	r0, [pc, #220]	; (80011c0 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 80010e2:	f008 fb67 	bl	80097b4 <sniprintf>
    printf("%s", dataOut);
 80010e6:	4936      	ldr	r1, [pc, #216]	; (80011c0 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 80010e8:	4836      	ldr	r0, [pc, #216]	; (80011c4 <MX_IKS02A1_DataLogTerminal_Init+0x1fc>)
 80010ea:	f008 fb4b 	bl	8009784 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 80010ee:	4932      	ldr	r1, [pc, #200]	; (80011b8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4613      	mov	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	1a9b      	subs	r3, r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	3310      	adds	r3, #16
 80010fe:	edd3 7a00 	vldr	s15, [r3]
 8001102:	463b      	mov	r3, r7
 8001104:	2103      	movs	r1, #3
 8001106:	4618      	mov	r0, r3
 8001108:	eeb0 0a67 	vmov.f32	s0, s15
 800110c:	f000 f8d0 	bl	80012b0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8001114:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8001116:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8001118:	4927      	ldr	r1, [pc, #156]	; (80011b8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4613      	mov	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	1a9b      	subs	r3, r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	3304      	adds	r3, #4
 8001128:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	9000      	str	r0, [sp, #0]
 800112e:	4623      	mov	r3, r4
 8001130:	4a26      	ldr	r2, [pc, #152]	; (80011cc <MX_IKS02A1_DataLogTerminal_Init+0x204>)
 8001132:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001136:	4822      	ldr	r0, [pc, #136]	; (80011c0 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 8001138:	f008 fb3c 	bl	80097b4 <sniprintf>
    printf("%s", dataOut);
 800113c:	4920      	ldr	r1, [pc, #128]	; (80011c0 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 800113e:	4821      	ldr	r0, [pc, #132]	; (80011c4 <MX_IKS02A1_DataLogTerminal_Init+0x1fc>)
 8001140:	f008 fb20 	bl	8009784 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 8001144:	491c      	ldr	r1, [pc, #112]	; (80011b8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	4613      	mov	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	3318      	adds	r3, #24
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	463b      	mov	r3, r7
 800115a:	2103      	movs	r1, #3
 800115c:	4618      	mov	r0, r3
 800115e:	eeb0 0a67 	vmov.f32	s0, s15
 8001162:	f000 f8a5 	bl	80012b0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800116a:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800116c:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800116e:	4912      	ldr	r1, [pc, #72]	; (80011b8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4613      	mov	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	1a9b      	subs	r3, r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	330c      	adds	r3, #12
 800117e:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	9000      	str	r0, [sp, #0]
 8001184:	4623      	mov	r3, r4
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <MX_IKS02A1_DataLogTerminal_Init+0x208>)
 8001188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 800118e:	f008 fb11 	bl	80097b4 <sniprintf>
    printf("%s", dataOut);
 8001192:	490b      	ldr	r1, [pc, #44]	; (80011c0 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <MX_IKS02A1_DataLogTerminal_Init+0x1fc>)
 8001196:	f008 faf5 	bl	8009784 <iprintf>
  for(i = 0; i < IKS02A1_MOTION_INSTANCES_NBR; i++)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	3301      	adds	r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	f67f af38 	bls.w	8001018 <MX_IKS02A1_DataLogTerminal_Init+0x50>
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bdb0      	pop	{r4, r5, r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000438 	.word	0x20000438
 80011b8:	200002e4 	.word	0x200002e4
 80011bc:	0800cb88 	.word	0x0800cb88
 80011c0:	20000338 	.word	0x20000338
 80011c4:	0800cbfc 	.word	0x0800cbfc
 80011c8:	0800cc00 	.word	0x0800cc00
 80011cc:	0800cc2c 	.word	0x0800cc2c
 80011d0:	0800cc5c 	.word	0x0800cc5c

080011d4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <BSP_PB_Callback+0x1c>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	200002e0 	.word	0x200002e0

080011f4 <MX_IKS02A1_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS02A1_DataLogTerminal_Process(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  int i;

  if (PushButtonDetected != 0U)
 80011fa:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <MX_IKS02A1_DataLogTerminal_Process+0xac>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d011      	beq.n	8001228 <MX_IKS02A1_DataLogTerminal_Process+0x34>
  {
    /* Debouncing */
    HAL_Delay(50);
 8001204:	2032      	movs	r0, #50	; 0x32
 8001206:	f005 f997 	bl	8006538 <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 800120a:	bf00      	nop
 800120c:	2000      	movs	r0, #0
 800120e:	f005 f815 	bl	800623c <BSP_PB_GetState>
 8001212:	4602      	mov	r2, r0
 8001214:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <MX_IKS02A1_DataLogTerminal_Process+0xb0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d0f7      	beq.n	800120c <MX_IKS02A1_DataLogTerminal_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 800121c:	2032      	movs	r0, #50	; 0x32
 800121e:	f005 f98b 	bl	8006538 <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <MX_IKS02A1_DataLogTerminal_Process+0xac>)
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]

    /* Do nothing */
  }

  for(i = 0; i < IKS02A1_MOTION_INSTANCES_NBR; i++)
 8001228:	2300      	movs	r3, #0
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	e02d      	b.n	800128a <MX_IKS02A1_DataLogTerminal_Process+0x96>
  {
    if(MotionCapabilities[i].Acc)
 800122e:	491e      	ldr	r1, [pc, #120]	; (80012a8 <MX_IKS02A1_DataLogTerminal_Process+0xb4>)
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	1a9b      	subs	r3, r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	440b      	add	r3, r1
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <MX_IKS02A1_DataLogTerminal_Process+0x54>
    {
      //Accelero_Sensor_Handler(i);
    	Accelero_Sensor_Handler(0);
 8001242:	2000      	movs	r0, #0
 8001244:	f000 f8be 	bl	80013c4 <Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 8001248:	4917      	ldr	r1, [pc, #92]	; (80012a8 <MX_IKS02A1_DataLogTerminal_Process+0xb4>)
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	1a9b      	subs	r3, r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	3301      	adds	r3, #1
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <MX_IKS02A1_DataLogTerminal_Process+0x72>
    {
      Gyro_Sensor_Handler(i);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4618      	mov	r0, r3
 8001262:	f000 f909 	bl	8001478 <Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 8001266:	4910      	ldr	r1, [pc, #64]	; (80012a8 <MX_IKS02A1_DataLogTerminal_Process+0xb4>)
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	1a9b      	subs	r3, r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	440b      	add	r3, r1
 8001274:	3302      	adds	r3, #2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <MX_IKS02A1_DataLogTerminal_Process+0x90>
    {
      Magneto_Sensor_Handler(i);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f930 	bl	80014e4 <Magneto_Sensor_Handler>
  for(i = 0; i < IKS02A1_MOTION_INSTANCES_NBR; i++)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3301      	adds	r3, #1
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b02      	cmp	r3, #2
 800128e:	d9ce      	bls.n	800122e <MX_IKS02A1_DataLogTerminal_Process+0x3a>
    }
  }

  HAL_Delay( 1000 );
 8001290:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001294:	f005 f950 	bl	8006538 <HAL_Delay>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200002e0 	.word	0x200002e0
 80012a4:	20000438 	.word	0x20000438
 80012a8:	200002e4 	.word	0x200002e4
 80012ac:	00000000 	.word	0x00000000

080012b0 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	ed87 0a03 	vstr	s0, [r7, #12]
 80012ba:	60b8      	str	r0, [r7, #8]
 80012bc:	6079      	str	r1, [r7, #4]
  if(in >= 0.0f)
 80012be:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ca:	db03      	blt.n	80012d4 <floatToInt+0x24>
  {
    out_value->sign = 0;
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
 80012d2:	e008      	b.n	80012e6 <floatToInt+0x36>
  }else
  {
    out_value->sign = 1;
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
    in = -in;
 80012da:	edd7 7a03 	vldr	s15, [r7, #12]
 80012de:	eef1 7a67 	vneg.f32	s15, s15
 80012e2:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / pow(10, dec_prec));
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f7ff f936 	bl	8000558 <__aeabi_f2d>
 80012ec:	4604      	mov	r4, r0
 80012ee:	460d      	mov	r5, r1
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff f91f 	bl	8000534 <__aeabi_i2d>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	ec43 2b11 	vmov	d1, r2, r3
 80012fe:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 80013b8 <floatToInt+0x108>
 8001302:	f00a fd19 	bl	800bd38 <pow>
 8001306:	ec53 2b10 	vmov	r2, r3, d0
 800130a:	f04f 0000 	mov.w	r0, #0
 800130e:	492c      	ldr	r1, [pc, #176]	; (80013c0 <floatToInt+0x110>)
 8001310:	f7ff faa4 	bl	800085c <__aeabi_ddiv>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4620      	mov	r0, r4
 800131a:	4629      	mov	r1, r5
 800131c:	f7fe ffbe 	bl	800029c <__adddf3>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f7ff fc46 	bl	8000bb8 <__aeabi_d2f>
 800132c:	4603      	mov	r3, r0
 800132e:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 8001330:	edd7 7a03 	vldr	s15, [r7, #12]
 8001334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001338:	ee17 2a90 	vmov	r2, s15
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800134c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001354:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f7ff f8fd 	bl	8000558 <__aeabi_f2d>
 800135e:	4604      	mov	r4, r0
 8001360:	460d      	mov	r5, r1
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff f8e6 	bl	8000534 <__aeabi_i2d>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	ec43 2b11 	vmov	d1, r2, r3
 8001370:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80013b8 <floatToInt+0x108>
 8001374:	f00a fce0 	bl	800bd38 <pow>
 8001378:	ec53 2b10 	vmov	r2, r3, d0
 800137c:	4620      	mov	r0, r4
 800137e:	4629      	mov	r1, r5
 8001380:	f7ff f942 	bl	8000608 <__aeabi_dmul>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	ec43 2b17 	vmov	d7, r2, r3
 800138c:	eeb0 0a47 	vmov.f32	s0, s14
 8001390:	eef0 0a67 	vmov.f32	s1, s15
 8001394:	f00a fc9e 	bl	800bcd4 <trunc>
 8001398:	ec53 2b10 	vmov	r2, r3, d0
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fbe2 	bl	8000b68 <__aeabi_d2iz>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	609a      	str	r2, [r3, #8]
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bdb0      	pop	{r4, r5, r7, pc}
 80013b4:	f3af 8000 	nop.w
 80013b8:	00000000 	.word	0x00000000
 80013bc:	40240000 	.word	0x40240000
 80013c0:	3fe00000 	.word	0x3fe00000

080013c4 <Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08e      	sub	sp, #56	; 0x38
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS02A1_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS02A1_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	461a      	mov	r2, r3
 80013d2:	2102      	movs	r1, #2
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f004 fbeb 	bl	8005bb0 <IKS02A1_MOTION_SENSOR_GetAxes>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d007      	beq.n	80013f0 <Accelero_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a20      	ldr	r2, [pc, #128]	; (8001464 <Accelero_Sensor_Handler+0xa0>)
 80013e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e8:	481f      	ldr	r0, [pc, #124]	; (8001468 <Accelero_Sensor_Handler+0xa4>)
 80013ea:	f008 f9e3 	bl	80097b4 <sniprintf>
 80013ee:	e00b      	b.n	8001408 <Accelero_Sensor_Handler+0x44>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r%d,%d,%d\n", (int)acceleration.x, (int)acceleration.y, (int)acceleration.z);
 80013f0:	69f9      	ldr	r1, [r7, #28]
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f6:	9201      	str	r2, [sp, #4]
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	460b      	mov	r3, r1
 80013fc:	4a1b      	ldr	r2, [pc, #108]	; (800146c <Accelero_Sensor_Handler+0xa8>)
 80013fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001402:	4819      	ldr	r0, [pc, #100]	; (8001468 <Accelero_Sensor_Handler+0xa4>)
 8001404:	f008 f9d6 	bl	80097b4 <sniprintf>
    //snprintf(dataOut, MAX_BUF_SIZE, "\r%f,%f,%f\n", (double)(acceleration.x/100), (double)(acceleration.y/100), (double)(acceleration.z/100));
  }

  printf("%s", dataOut);
 8001408:	4917      	ldr	r1, [pc, #92]	; (8001468 <Accelero_Sensor_Handler+0xa4>)
 800140a:	4819      	ldr	r0, [pc, #100]	; (8001470 <Accelero_Sensor_Handler+0xac>)
 800140c:	f008 f9ba 	bl	8009784 <iprintf>


  if (verbose == 1)
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <Accelero_Sensor_Handler+0xb0>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d120      	bne.n	800145a <Accelero_Sensor_Handler+0x96>
  {
    if (IKS02A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8001418:	f107 030f 	add.w	r3, r7, #15
 800141c:	4619      	mov	r1, r3
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f004 fb9c 	bl	8005b5c <IKS02A1_MOTION_SENSOR_ReadID>
      //snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
    }

    //printf("%s", dataOut);

    if (IKS02A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_ACCELERO, &odr))
 8001424:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001428:	461a      	mov	r2, r3
 800142a:	2102      	movs	r1, #2
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f004 fc03 	bl	8005c38 <IKS02A1_MOTION_SENSOR_GetOutputDataRate>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d109      	bne.n	800144c <Accelero_Sensor_Handler+0x88>
    {
      //snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8001438:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	2103      	movs	r1, #3
 8001442:	4618      	mov	r0, r3
 8001444:	eeb0 0a67 	vmov.f32	s0, s15
 8001448:	f7ff ff32 	bl	80012b0 <floatToInt>
      //         (int)out_value.out_dec);
    }

    //printf("%s", dataOut);

    if (IKS02A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_ACCELERO, &fullScale))
 800144c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001450:	461a      	mov	r2, r3
 8001452:	2102      	movs	r1, #2
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f004 fc33 	bl	8005cc0 <IKS02A1_MOTION_SENSOR_GetFullScale>
      //snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
    }

    //printf("%s", dataOut);
  }
}
 800145a:	bf00      	nop
 800145c:	3730      	adds	r7, #48	; 0x30
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	0800cc88 	.word	0x0800cc88
 8001468:	20000338 	.word	0x20000338
 800146c:	0800cc9c 	.word	0x0800cc9c
 8001470:	0800cbfc 	.word	0x0800cbfc
 8001474:	20000000 	.word	0x20000000

08001478 <Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS02A1_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS02A1_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	461a      	mov	r2, r3
 8001486:	2101      	movs	r1, #1
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f004 fb91 	bl	8005bb0 <IKS02A1_MOTION_SENSOR_GetAxes>
    //         (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
  }

  //printf("%s", dataOut);

  if (verbose == 1)
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <Gyro_Sensor_Handler+0x68>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d120      	bne.n	80014d8 <Gyro_Sensor_Handler+0x60>
  {
    if (IKS02A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8001496:	f107 030f 	add.w	r3, r7, #15
 800149a:	4619      	mov	r1, r3
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f004 fb5d 	bl	8005b5c <IKS02A1_MOTION_SENSOR_ReadID>
      //snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
    }

    //printf("%s", dataOut);

    if (IKS02A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_GYRO, &odr))
 80014a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a6:	461a      	mov	r2, r3
 80014a8:	2101      	movs	r1, #1
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f004 fbc4 	bl	8005c38 <IKS02A1_MOTION_SENSOR_GetOutputDataRate>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d109      	bne.n	80014ca <Gyro_Sensor_Handler+0x52>
    {
      //snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 80014b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	2103      	movs	r1, #3
 80014c0:	4618      	mov	r0, r3
 80014c2:	eeb0 0a67 	vmov.f32	s0, s15
 80014c6:	f7ff fef3 	bl	80012b0 <floatToInt>
      //         (int)out_value.out_dec);
    }

    //printf("%s", dataOut);

    if (IKS02A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_GYRO, &fullScale))
 80014ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ce:	461a      	mov	r2, r3
 80014d0:	2101      	movs	r1, #1
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f004 fbf4 	bl	8005cc0 <IKS02A1_MOTION_SENSOR_GetFullScale>
      //snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
    }

    //printf("%s", dataOut);
  }
}
 80014d8:	bf00      	nop
 80014da:	3730      	adds	r7, #48	; 0x30
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000000 	.word	0x20000000

080014e4 <Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	; 0x30
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS02A1_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS02A1_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	461a      	mov	r2, r3
 80014f2:	2104      	movs	r1, #4
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f004 fb5b 	bl	8005bb0 <IKS02A1_MOTION_SENSOR_GetAxes>
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);*/
  }

  //printf("%s", dataOut);

  if (verbose == 1)
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <Magneto_Sensor_Handler+0x68>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d120      	bne.n	8001544 <Magneto_Sensor_Handler+0x60>
  {
    if (IKS02A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8001502:	f107 030f 	add.w	r3, r7, #15
 8001506:	4619      	mov	r1, r3
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f004 fb27 	bl	8005b5c <IKS02A1_MOTION_SENSOR_ReadID>
      //snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
    }

    //printf("%s", dataOut);

    if (IKS02A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_MAGNETO, &odr))
 800150e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001512:	461a      	mov	r2, r3
 8001514:	2104      	movs	r1, #4
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f004 fb8e 	bl	8005c38 <IKS02A1_MOTION_SENSOR_GetOutputDataRate>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d109      	bne.n	8001536 <Magneto_Sensor_Handler+0x52>
    {
      //snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8001522:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001526:	f107 0310 	add.w	r3, r7, #16
 800152a:	2103      	movs	r1, #3
 800152c:	4618      	mov	r0, r3
 800152e:	eeb0 0a67 	vmov.f32	s0, s15
 8001532:	f7ff febd 	bl	80012b0 <floatToInt>
      //         (int)out_value.out_dec);
    }

    //printf("%s", dataOut);

    if (IKS02A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_MAGNETO, &fullScale))
 8001536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153a:	461a      	mov	r2, r3
 800153c:	2104      	movs	r1, #4
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f004 fbbe 	bl	8005cc0 <IKS02A1_MOTION_SENSOR_GetFullScale>
      //snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
    }

    //printf("%s", dataOut);
  }
}
 8001544:	bf00      	nop
 8001546:	3730      	adds	r7, #48	; 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000000 	.word	0x20000000

08001550 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <MX_GPIO_Init+0x90>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a20      	ldr	r2, [pc, #128]	; (80015e0 <MX_GPIO_Init+0x90>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <MX_GPIO_Init+0x90>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_GPIO_Init+0x90>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <MX_GPIO_Init+0x90>)
 800157c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <MX_GPIO_Init+0x90>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <MX_GPIO_Init+0x90>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <MX_GPIO_Init+0x90>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MX_GPIO_Init+0x90>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_GPIO_Init+0x90>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <MX_GPIO_Init+0x90>)
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_GPIO_Init+0x90>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	2028      	movs	r0, #40	; 0x28
 80015cc:	f005 f8b3 	bl	8006736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015d0:	2028      	movs	r0, #40	; 0x28
 80015d2:	f005 f8cc 	bl	800676e <HAL_NVIC_EnableIRQ>

}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e8:	f004 ff34 	bl	8006454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ec:	f000 f808 	bl	8001600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f0:	f7ff ffae 	bl	8001550 <MX_GPIO_Init>
  MX_MEMS_Init();
 80015f4:	f7ff fcdb 	bl	8000fae <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 80015f8:	f7ff fcdf 	bl	8000fba <MX_MEMS_Process>
 80015fc:	e7fc      	b.n	80015f8 <main+0x14>
	...

08001600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b094      	sub	sp, #80	; 0x50
 8001604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001606:	f107 0320 	add.w	r3, r7, #32
 800160a:	2230      	movs	r2, #48	; 0x30
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f007 fc46 	bl	8008ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	4b28      	ldr	r3, [pc, #160]	; (80016cc <SystemClock_Config+0xcc>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <SystemClock_Config+0xcc>)
 800162e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001632:	6413      	str	r3, [r2, #64]	; 0x40
 8001634:	4b25      	ldr	r3, [pc, #148]	; (80016cc <SystemClock_Config+0xcc>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001640:	2300      	movs	r3, #0
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <SystemClock_Config+0xd0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a21      	ldr	r2, [pc, #132]	; (80016d0 <SystemClock_Config+0xd0>)
 800164a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <SystemClock_Config+0xd0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800165c:	2302      	movs	r3, #2
 800165e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001660:	2301      	movs	r3, #1
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001664:	2310      	movs	r3, #16
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001668:	2302      	movs	r3, #2
 800166a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800166c:	2300      	movs	r3, #0
 800166e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001670:	2310      	movs	r3, #16
 8001672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001674:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800167a:	2304      	movs	r3, #4
 800167c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800167e:	2304      	movs	r3, #4
 8001680:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001682:	f107 0320 	add.w	r3, r7, #32
 8001686:	4618      	mov	r0, r3
 8001688:	f006 fb7c 	bl	8007d84 <HAL_RCC_OscConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001692:	f000 f81f 	bl	80016d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001696:	230f      	movs	r3, #15
 8001698:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800169a:	2302      	movs	r3, #2
 800169c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	2102      	movs	r1, #2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f006 fdde 	bl	8008274 <HAL_RCC_ClockConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016be:	f000 f809 	bl	80016d4 <Error_Handler>
  }
}
 80016c2:	bf00      	nop
 80016c4:	3750      	adds	r7, #80	; 0x50
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40007000 	.word	0x40007000

080016d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
}
 80016da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016dc:	e7fe      	b.n	80016dc <Error_Handler+0x8>
	...

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <HAL_MspInit+0x4c>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	4a0f      	ldr	r2, [pc, #60]	; (800172c <HAL_MspInit+0x4c>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <HAL_MspInit+0x4c>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_MspInit+0x4c>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a08      	ldr	r2, [pc, #32]	; (800172c <HAL_MspInit+0x4c>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_MspInit+0x4c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800171e:	2007      	movs	r0, #7
 8001720:	f004 fffe 	bl	8006720 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40023800 	.word	0x40023800

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <NMI_Handler+0x4>

08001736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <MemManage_Handler+0x4>

08001742 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <BusFault_Handler+0x4>

08001748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <UsageFault_Handler+0x4>

0800174e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177c:	f004 febc 	bl	80064f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}

08001784 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <EXTI15_10_IRQHandler+0x10>)
 800178a:	f005 f839 	bl	8006800 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200000dc 	.word	0x200000dc

08001798 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <BSP_I2C1_Init+0x58>)
 80017a4:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <BSP_I2C1_Init+0x5c>)
 80017a6:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <BSP_I2C1_Init+0x60>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	4912      	ldr	r1, [pc, #72]	; (80017f8 <BSP_I2C1_Init+0x60>)
 80017b0:	600a      	str	r2, [r1, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d117      	bne.n	80017e6 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80017b6:	480e      	ldr	r0, [pc, #56]	; (80017f0 <BSP_I2C1_Init+0x58>)
 80017b8:	f005 ff6e 	bl	8007698 <HAL_I2C_GetState>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d111      	bne.n	80017e6 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80017c2:	480b      	ldr	r0, [pc, #44]	; (80017f0 <BSP_I2C1_Init+0x58>)
 80017c4:	f000 f8e2 	bl	800198c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10b      	bne.n	80017e6 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80017ce:	4808      	ldr	r0, [pc, #32]	; (80017f0 <BSP_I2C1_Init+0x58>)
 80017d0:	f000 f8a8 	bl	8001924 <MX_I2C1_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80017da:	f06f 0307 	mvn.w	r3, #7
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	e001      	b.n	80017e6 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80017e6:	687b      	ldr	r3, [r7, #4]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	2000043c 	.word	0x2000043c
 80017f4:	40005400 	.word	0x40005400
 80017f8:	20000490 	.word	0x20000490

080017fc <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <BSP_I2C1_DeInit+0x48>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d014      	beq.n	8001838 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800180e:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <BSP_I2C1_DeInit+0x48>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	3b01      	subs	r3, #1
 8001814:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <BSP_I2C1_DeInit+0x48>)
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <BSP_I2C1_DeInit+0x48>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10b      	bne.n	8001838 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001820:	4809      	ldr	r0, [pc, #36]	; (8001848 <BSP_I2C1_DeInit+0x4c>)
 8001822:	f000 f8fd 	bl	8001a20 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001826:	4808      	ldr	r0, [pc, #32]	; (8001848 <BSP_I2C1_DeInit+0x4c>)
 8001828:	f005 fbd2 	bl	8006fd0 <HAL_I2C_DeInit>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001832:	f06f 0307 	mvn.w	r3, #7
 8001836:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001838:	687b      	ldr	r3, [r7, #4]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000490 	.word	0x20000490
 8001848:	2000043c 	.word	0x2000043c

0800184c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af04      	add	r7, sp, #16
 8001852:	60ba      	str	r2, [r7, #8]
 8001854:	461a      	mov	r2, r3
 8001856:	4603      	mov	r3, r0
 8001858:	81fb      	strh	r3, [r7, #14]
 800185a:	460b      	mov	r3, r1
 800185c:	81bb      	strh	r3, [r7, #12]
 800185e:	4613      	mov	r3, r2
 8001860:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001866:	89ba      	ldrh	r2, [r7, #12]
 8001868:	89f9      	ldrh	r1, [r7, #14]
 800186a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186e:	9302      	str	r3, [sp, #8]
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2301      	movs	r3, #1
 800187a:	480c      	ldr	r0, [pc, #48]	; (80018ac <BSP_I2C1_WriteReg+0x60>)
 800187c:	f005 fbec 	bl	8007058 <HAL_I2C_Mem_Write>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00c      	beq.n	80018a0 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001886:	4809      	ldr	r0, [pc, #36]	; (80018ac <BSP_I2C1_WriteReg+0x60>)
 8001888:	f005 ff14 	bl	80076b4 <HAL_I2C_GetError>
 800188c:	4603      	mov	r3, r0
 800188e:	2b04      	cmp	r3, #4
 8001890:	d103      	bne.n	800189a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001892:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	e002      	b.n	80018a0 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800189a:	f06f 0303 	mvn.w	r3, #3
 800189e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80018a0:	697b      	ldr	r3, [r7, #20]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000043c 	.word	0x2000043c

080018b0 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af04      	add	r7, sp, #16
 80018b6:	60ba      	str	r2, [r7, #8]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4603      	mov	r3, r0
 80018bc:	81fb      	strh	r3, [r7, #14]
 80018be:	460b      	mov	r3, r1
 80018c0:	81bb      	strh	r3, [r7, #12]
 80018c2:	4613      	mov	r3, r2
 80018c4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80018ca:	89ba      	ldrh	r2, [r7, #12]
 80018cc:	89f9      	ldrh	r1, [r7, #14]
 80018ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	88fb      	ldrh	r3, [r7, #6]
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2301      	movs	r3, #1
 80018de:	480c      	ldr	r0, [pc, #48]	; (8001910 <BSP_I2C1_ReadReg+0x60>)
 80018e0:	f005 fcb4 	bl	800724c <HAL_I2C_Mem_Read>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00c      	beq.n	8001904 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80018ea:	4809      	ldr	r0, [pc, #36]	; (8001910 <BSP_I2C1_ReadReg+0x60>)
 80018ec:	f005 fee2 	bl	80076b4 <HAL_I2C_GetError>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d103      	bne.n	80018fe <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80018f6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	e002      	b.n	8001904 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80018fe:	f06f 0303 	mvn.w	r3, #3
 8001902:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001904:	697b      	ldr	r3, [r7, #20]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000043c 	.word	0x2000043c

08001914 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001918:	f004 fe02 	bl	8006520 <HAL_GetTick>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a14      	ldr	r2, [pc, #80]	; (8001984 <MX_I2C1_Init+0x60>)
 8001934:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a13      	ldr	r2, [pc, #76]	; (8001988 <MX_I2C1_Init+0x64>)
 800193a:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800194e:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f005 f9ed 	bl	8006d48 <HAL_I2C_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40005400 	.word	0x40005400
 8001988:	00061a80 	.word	0x00061a80

0800198c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <I2C1_MspInit+0x8c>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	4a1e      	ldr	r2, [pc, #120]	; (8001a18 <I2C1_MspInit+0x8c>)
 800199e:	f043 0302 	orr.w	r3, r3, #2
 80019a2:	6313      	str	r3, [r2, #48]	; 0x30
 80019a4:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <I2C1_MspInit+0x8c>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80019b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b6:	2312      	movs	r3, #18
 80019b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80019c2:	2304      	movs	r3, #4
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	4813      	ldr	r0, [pc, #76]	; (8001a1c <I2C1_MspInit+0x90>)
 80019ce:	f004 ff3b 	bl	8006848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80019d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d8:	2312      	movs	r3, #18
 80019da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80019e4:	2304      	movs	r3, #4
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4619      	mov	r1, r3
 80019ee:	480b      	ldr	r0, [pc, #44]	; (8001a1c <I2C1_MspInit+0x90>)
 80019f0:	f004 ff2a 	bl	8006848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <I2C1_MspInit+0x8c>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	4a06      	ldr	r2, [pc, #24]	; (8001a18 <I2C1_MspInit+0x8c>)
 80019fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a02:	6413      	str	r3, [r2, #64]	; 0x40
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <I2C1_MspInit+0x8c>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001a10:	bf00      	nop
 8001a12:	3728      	adds	r7, #40	; 0x28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020400 	.word	0x40020400

08001a20 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <I2C1_MspDeInit+0x30>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <I2C1_MspDeInit+0x30>)
 8001a2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a32:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001a34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a38:	4806      	ldr	r0, [pc, #24]	; (8001a54 <I2C1_MspDeInit+0x34>)
 8001a3a:	f005 f889 	bl	8006b50 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001a3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a42:	4804      	ldr	r0, [pc, #16]	; (8001a54 <I2C1_MspDeInit+0x34>)
 8001a44:	f005 f884 	bl	8006b50 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020400 	.word	0x40020400

08001a58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
	return 1;
 8001a5c:	2301      	movs	r3, #1
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <_kill>:

int _kill(int pid, int sig)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a72:	f007 f9eb 	bl	8008e4c <__errno>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2216      	movs	r2, #22
 8001a7a:	601a      	str	r2, [r3, #0]
	return -1;
 8001a7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_exit>:

void _exit (int status)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ffe7 	bl	8001a68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a9a:	e7fe      	b.n	8001a9a <_exit+0x12>

08001a9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	e00a      	b.n	8001ac4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aae:	f3af 8000 	nop.w
 8001ab2:	4601      	mov	r1, r0
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	60ba      	str	r2, [r7, #8]
 8001aba:	b2ca      	uxtb	r2, r1
 8001abc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	dbf0      	blt.n	8001aae <_read+0x12>
	}

return len;
 8001acc:	687b      	ldr	r3, [r7, #4]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	e009      	b.n	8001afc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	60ba      	str	r2, [r7, #8]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f004 fc39 	bl	8006368 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	3301      	adds	r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	dbf1      	blt.n	8001ae8 <_write+0x12>
	}
	return len;
 8001b04:	687b      	ldr	r3, [r7, #4]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <_close>:

int _close(int file)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
	return -1;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b36:	605a      	str	r2, [r3, #4]
	return 0;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <_isatty>:

int _isatty(int file)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b4e:	2301      	movs	r3, #1
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
	return 0;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b80:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <_sbrk+0x5c>)
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <_sbrk+0x60>)
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <_sbrk+0x64>)
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <_sbrk+0x68>)
 8001b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d207      	bcs.n	8001bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba8:	f007 f950 	bl	8008e4c <__errno>
 8001bac:	4603      	mov	r3, r0
 8001bae:	220c      	movs	r2, #12
 8001bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	e009      	b.n	8001bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <_sbrk+0x64>)
 8001bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bca:	68fb      	ldr	r3, [r7, #12]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20020000 	.word	0x20020000
 8001bd8:	00000400 	.word	0x00000400
 8001bdc:	20000494 	.word	0x20000494
 8001be0:	200005d0 	.word	0x200005d0

08001be4 <IIS2DLPC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_RegisterBusIO(IIS2DLPC_Object_t *pObj, IIS2DLPC_IO_t *pIO)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d103      	bne.n	8001c00 <IIS2DLPC_RegisterBusIO+0x1c>
  {
    ret = IIS2DLPC_ERROR;
 8001bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	e04d      	b.n	8001c9c <IIS2DLPC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	7b1a      	ldrb	r2, [r3, #12]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	699a      	ldr	r2, [r3, #24]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <IIS2DLPC_RegisterBusIO+0xc4>)
 8001c3c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a1a      	ldr	r2, [pc, #104]	; (8001cac <IIS2DLPC_RegisterBusIO+0xc8>)
 8001c42:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d103      	bne.n	8001c5a <IIS2DLPC_RegisterBusIO+0x76>
    {
      ret = IIS2DLPC_ERROR;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	e020      	b.n	8001c9c <IIS2DLPC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != IIS2DLPC_OK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4798      	blx	r3
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <IIS2DLPC_RegisterBusIO+0x8a>
    {
      ret = IIS2DLPC_ERROR;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	e016      	b.n	8001c9c <IIS2DLPC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == IIS2DLPC_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d112      	bne.n	8001c9c <IIS2DLPC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10d      	bne.n	8001c9c <IIS2DLPC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001c80:	2305      	movs	r3, #5
 8001c82:	72fb      	strb	r3, [r7, #11]

          if (IIS2DLPC_Write_Reg(pObj, IIS2DLPC_CTRL2, data) != IIS2DLPC_OK)
 8001c84:	7afb      	ldrb	r3, [r7, #11]
 8001c86:	461a      	mov	r2, r3
 8001c88:	2121      	movs	r1, #33	; 0x21
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 fd67 	bl	800275e <IIS2DLPC_Write_Reg>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <IIS2DLPC_RegisterBusIO+0xb8>
          {
            ret = IIS2DLPC_ERROR;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	08002af1 	.word	0x08002af1
 8001cac:	08002b27 	.word	0x08002b27

08001cb0 <IIS2DLPC_Init>:
  * @brief  Initialize the IIS2DLPC sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_Init(IIS2DLPC_Object_t *pObj)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (iis2dlpc_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DLPC_OK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	331c      	adds	r3, #28
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f001 fa52 	bl	8003168 <iis2dlpc_auto_increment_set>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <IIS2DLPC_Init+0x20>
  {
    return IIS2DLPC_ERROR;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	e04b      	b.n	8001d68 <IIS2DLPC_Init+0xb8>
  }

  /* Enable BDU */
  if (iis2dlpc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DLPC_OK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	331c      	adds	r3, #28
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f001 f966 	bl	8002fa8 <iis2dlpc_block_data_update_set>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <IIS2DLPC_Init+0x38>
  {
    return IIS2DLPC_ERROR;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	e03f      	b.n	8001d68 <IIS2DLPC_Init+0xb8>
  }

  /* FIFO mode selection */
  if (iis2dlpc_fifo_mode_set(&(pObj->Ctx), IIS2DLPC_BYPASS_MODE) != IIS2DLPC_OK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	331c      	adds	r3, #28
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f001 fa60 	bl	80031b4 <iis2dlpc_fifo_mode_set>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <IIS2DLPC_Init+0x50>
  {
    return IIS2DLPC_ERROR;
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfe:	e033      	b.n	8001d68 <IIS2DLPC_Init+0xb8>
  }

  /* Power mode selection */
  if (iis2dlpc_power_mode_set(&(pObj->Ctx), IIS2DLPC_HIGH_PERFORMANCE) != IIS2DLPC_OK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	331c      	adds	r3, #28
 8001d04:	2104      	movs	r1, #4
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 ff58 	bl	8002bbc <iis2dlpc_power_mode_set>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <IIS2DLPC_Init+0x68>
  {
    return IIS2DLPC_ERROR;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
 8001d16:	e027      	b.n	8001d68 <IIS2DLPC_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <IIS2DLPC_Init+0xc0>)
 8001d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = IIS2DLPC_HIGH_PERFORMANCE_MODE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = IIS2DLPC_LOW_NOISE_DISABLE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), IIS2DLPC_XL_ODR_OFF) != IIS2DLPC_OK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	331c      	adds	r3, #28
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f001 f849 	bl	8002dcc <iis2dlpc_data_rate_set>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <IIS2DLPC_Init+0x96>
  {
    return IIS2DLPC_ERROR;
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
 8001d44:	e010      	b.n	8001d68 <IIS2DLPC_Init+0xb8>
  }

  /* Full scale selection. */
  if (iis2dlpc_full_scale_set(&(pObj->Ctx), IIS2DLPC_2g) != IIS2DLPC_OK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	331c      	adds	r3, #28
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f001 f951 	bl	8002ff4 <iis2dlpc_full_scale_set>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <IIS2DLPC_Init+0xae>
  {
    return IIS2DLPC_ERROR;
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5c:	e004      	b.n	8001d68 <IIS2DLPC_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2DLPC_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	42c80000 	.word	0x42c80000

08001d74 <IIS2DLPC_DeInit>:
  * @brief  Deinitialize the IIS2DLPC sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_DeInit(IIS2DLPC_Object_t *pObj)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2DLPC_ACC_Disable(pObj) != IIS2DLPC_OK)
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f888 	bl	8001e92 <IIS2DLPC_ACC_Disable>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <IIS2DLPC_DeInit+0x1a>
  {
    return IIS2DLPC_ERROR;
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8c:	e010      	b.n	8001db0 <IIS2DLPC_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = IIS2DLPC_HIGH_PERFORMANCE_MODE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = IIS2DLPC_LOW_NOISE_DISABLE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2DLPC_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <IIS2DLPC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ReadID(IIS2DLPC_Object_t *pObj, uint8_t *Id)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  if (iis2dlpc_device_id_get(&(pObj->Ctx), Id) != IIS2DLPC_OK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	331c      	adds	r3, #28
 8001dc6:	6839      	ldr	r1, [r7, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f001 f9bc 	bl	8003146 <iis2dlpc_device_id_get>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <IIS2DLPC_ReadID+0x22>
  {
    return IIS2DLPC_ERROR;
 8001dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd8:	e000      	b.n	8001ddc <IIS2DLPC_ReadID+0x24>
  }

  return IIS2DLPC_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <IIS2DLPC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to IIS2DLPC sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_GetCapabilities(IIS2DLPC_Object_t *pObj, IIS2DLPC_Capabilities_t *Capabilities)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2200      	movs	r2, #0
 8001df8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	2200      	movs	r2, #0
 8001e04:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	2210      	movs	r2, #16
 8001e10:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2200      	movs	r2, #0
 8001e16:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <IIS2DLPC_GetCapabilities+0x58>)
 8001e24:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	619a      	str	r2, [r3, #24]
  return IIS2DLPC_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	44c80000 	.word	0x44c80000

08001e40 <IIS2DLPC_ACC_Enable>:
  * @brief  Enable the IIS2DLPC accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_Enable(IIS2DLPC_Object_t *pObj)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <IIS2DLPC_ACC_Enable+0x16>
  {
    return IIS2DLPC_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e019      	b.n	8001e8a <IIS2DLPC_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001e68:	461a      	mov	r2, r3
 8001e6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fc90 	bl	8002794 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <IIS2DLPC_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != IIS2DLPC_OK)
  {
    return IIS2DLPC_ERROR;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	e004      	b.n	8001e8a <IIS2DLPC_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2DLPC_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <IIS2DLPC_ACC_Disable>:
  * @brief  Disable the IIS2DLPC accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_Disable(IIS2DLPC_Object_t *pObj)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <IIS2DLPC_ACC_Disable+0x16>
  {
    return IIS2DLPC_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e010      	b.n	8001eca <IIS2DLPC_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), IIS2DLPC_XL_ODR_OFF) != IIS2DLPC_OK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	331c      	adds	r3, #28
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 ff8c 	bl	8002dcc <iis2dlpc_data_rate_set>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <IIS2DLPC_ACC_Disable+0x2e>
  {
    return IIS2DLPC_ERROR;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebe:	e004      	b.n	8001eca <IIS2DLPC_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2DLPC_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <IIS2DLPC_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetSensitivity(IIS2DLPC_Object_t *pObj, float *Sensitivity)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
  iis2dlpc_fs_t full_scale;
  iis2dlpc_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (iis2dlpc_full_scale_get(&(pObj->Ctx), &full_scale) != IIS2DLPC_OK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	331c      	adds	r3, #28
 8001ee6:	f107 020b 	add.w	r2, r7, #11
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f001 f8a7 	bl	8003040 <iis2dlpc_full_scale_get>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <IIS2DLPC_ACC_GetSensitivity+0x2a>
  {
    return IIS2DLPC_ERROR;
 8001ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8001efc:	e0a0      	b.n	8002040 <IIS2DLPC_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	331c      	adds	r3, #28
 8001f02:	f107 020a 	add.w	r2, r7, #10
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fea5 	bl	8002c58 <iis2dlpc_power_mode_get>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <IIS2DLPC_ACC_GetSensitivity+0x46>
  {
    return IIS2DLPC_ERROR;
 8001f14:	f04f 33ff 	mov.w	r3, #4294967295
 8001f18:	e092      	b.n	8002040 <IIS2DLPC_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 8001f1a:	7abb      	ldrb	r3, [r7, #10]
 8001f1c:	2b1b      	cmp	r3, #27
 8001f1e:	f200 8087 	bhi.w	8002030 <IIS2DLPC_ACC_GetSensitivity+0x15c>
 8001f22:	a201      	add	r2, pc, #4	; (adr r2, 8001f28 <IIS2DLPC_ACC_GetSensitivity+0x54>)
 8001f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f28:	08001f99 	.word	0x08001f99
 8001f2c:	08001fe5 	.word	0x08001fe5
 8001f30:	08001fe5 	.word	0x08001fe5
 8001f34:	08001fe5 	.word	0x08001fe5
 8001f38:	08001fe5 	.word	0x08001fe5
 8001f3c:	08002031 	.word	0x08002031
 8001f40:	08002031 	.word	0x08002031
 8001f44:	08002031 	.word	0x08002031
 8001f48:	08001f99 	.word	0x08001f99
 8001f4c:	08001fe5 	.word	0x08001fe5
 8001f50:	08001fe5 	.word	0x08001fe5
 8001f54:	08001fe5 	.word	0x08001fe5
 8001f58:	08002031 	.word	0x08002031
 8001f5c:	08002031 	.word	0x08002031
 8001f60:	08002031 	.word	0x08002031
 8001f64:	08002031 	.word	0x08002031
 8001f68:	08001f99 	.word	0x08001f99
 8001f6c:	08001fe5 	.word	0x08001fe5
 8001f70:	08001fe5 	.word	0x08001fe5
 8001f74:	08001fe5 	.word	0x08001fe5
 8001f78:	08001fe5 	.word	0x08001fe5
 8001f7c:	08002031 	.word	0x08002031
 8001f80:	08002031 	.word	0x08002031
 8001f84:	08002031 	.word	0x08002031
 8001f88:	08001f99 	.word	0x08001f99
 8001f8c:	08001fe5 	.word	0x08001fe5
 8001f90:	08001fe5 	.word	0x08001fe5
 8001f94:	08001fe5 	.word	0x08001fe5
  {
    case IIS2DLPC_CONT_LOW_PWR_12bit:
    case IIS2DLPC_SINGLE_LOW_PWR_12bit:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
    case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8001f98:	7afb      	ldrb	r3, [r7, #11]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d81a      	bhi.n	8001fd4 <IIS2DLPC_ACC_GetSensitivity+0x100>
 8001f9e:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <IIS2DLPC_ACC_GetSensitivity+0xd0>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fbd 	.word	0x08001fbd
 8001fac:	08001fc5 	.word	0x08001fc5
 8001fb0:	08001fcd 	.word	0x08001fcd
      {
        case IIS2DLPC_2g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4a24      	ldr	r2, [pc, #144]	; (8002048 <IIS2DLPC_ACC_GetSensitivity+0x174>)
 8001fb8:	601a      	str	r2, [r3, #0]
          break;
 8001fba:	e012      	b.n	8001fe2 <IIS2DLPC_ACC_GetSensitivity+0x10e>

        case IIS2DLPC_4g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4a23      	ldr	r2, [pc, #140]	; (800204c <IIS2DLPC_ACC_GetSensitivity+0x178>)
 8001fc0:	601a      	str	r2, [r3, #0]
          break;
 8001fc2:	e00e      	b.n	8001fe2 <IIS2DLPC_ACC_GetSensitivity+0x10e>

        case IIS2DLPC_8g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4a22      	ldr	r2, [pc, #136]	; (8002050 <IIS2DLPC_ACC_GetSensitivity+0x17c>)
 8001fc8:	601a      	str	r2, [r3, #0]
          break;
 8001fca:	e00a      	b.n	8001fe2 <IIS2DLPC_ACC_GetSensitivity+0x10e>

        case IIS2DLPC_16g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	4a21      	ldr	r2, [pc, #132]	; (8002054 <IIS2DLPC_ACC_GetSensitivity+0x180>)
 8001fd0:	601a      	str	r2, [r3, #0]
          break;
 8001fd2:	e006      	b.n	8001fe2 <IIS2DLPC_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4a20      	ldr	r2, [pc, #128]	; (8002058 <IIS2DLPC_ACC_GetSensitivity+0x184>)
 8001fd8:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	60fb      	str	r3, [r7, #12]
          break;
 8001fe0:	bf00      	nop
      }
      break;
 8001fe2:	e02c      	b.n	800203e <IIS2DLPC_ACC_GetSensitivity+0x16a>
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8001fe4:	7afb      	ldrb	r3, [r7, #11]
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d81a      	bhi.n	8002020 <IIS2DLPC_ACC_GetSensitivity+0x14c>
 8001fea:	a201      	add	r2, pc, #4	; (adr r2, 8001ff0 <IIS2DLPC_ACC_GetSensitivity+0x11c>)
 8001fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff0:	08002001 	.word	0x08002001
 8001ff4:	08002009 	.word	0x08002009
 8001ff8:	08002011 	.word	0x08002011
 8001ffc:	08002019 	.word	0x08002019
      {
        case IIS2DLPC_2g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	4a16      	ldr	r2, [pc, #88]	; (800205c <IIS2DLPC_ACC_GetSensitivity+0x188>)
 8002004:	601a      	str	r2, [r3, #0]
          break;
 8002006:	e012      	b.n	800202e <IIS2DLPC_ACC_GetSensitivity+0x15a>

        case IIS2DLPC_4g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4a15      	ldr	r2, [pc, #84]	; (8002060 <IIS2DLPC_ACC_GetSensitivity+0x18c>)
 800200c:	601a      	str	r2, [r3, #0]
          break;
 800200e:	e00e      	b.n	800202e <IIS2DLPC_ACC_GetSensitivity+0x15a>

        case IIS2DLPC_8g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	4a0d      	ldr	r2, [pc, #52]	; (8002048 <IIS2DLPC_ACC_GetSensitivity+0x174>)
 8002014:	601a      	str	r2, [r3, #0]
          break;
 8002016:	e00a      	b.n	800202e <IIS2DLPC_ACC_GetSensitivity+0x15a>

        case IIS2DLPC_16g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	4a0c      	ldr	r2, [pc, #48]	; (800204c <IIS2DLPC_ACC_GetSensitivity+0x178>)
 800201c:	601a      	str	r2, [r3, #0]
          break;
 800201e:	e006      	b.n	800202e <IIS2DLPC_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4a0d      	ldr	r2, [pc, #52]	; (8002058 <IIS2DLPC_ACC_GetSensitivity+0x184>)
 8002024:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
 800202a:	60fb      	str	r3, [r7, #12]
          break;
 800202c:	bf00      	nop
      }
      break;
 800202e:	e006      	b.n	800203e <IIS2DLPC_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4a09      	ldr	r2, [pc, #36]	; (8002058 <IIS2DLPC_ACC_GetSensitivity+0x184>)
 8002034:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	60fb      	str	r3, [r7, #12]
      break;
 800203c:	bf00      	nop
  }

  return ret;
 800203e:	68fb      	ldr	r3, [r7, #12]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	3f79db23 	.word	0x3f79db23
 800204c:	3ff9db23 	.word	0x3ff9db23
 8002050:	4079db23 	.word	0x4079db23
 8002054:	40f9db23 	.word	0x40f9db23
 8002058:	bf800000 	.word	0xbf800000
 800205c:	3e79db23 	.word	0x3e79db23
 8002060:	3ef9db23 	.word	0x3ef9db23

08002064 <IIS2DLPC_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetOutputDataRate(IIS2DLPC_Object_t *pObj, float *Odr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
  iis2dlpc_odr_t odr_low_level;
  iis2dlpc_mode_t mode;

  /* Get current output data rate. */
  if (iis2dlpc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2DLPC_OK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	331c      	adds	r3, #28
 8002076:	f107 020b 	add.w	r2, r7, #11
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f000 feeb 	bl	8002e58 <iis2dlpc_data_rate_get>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <IIS2DLPC_ACC_GetOutputDataRate+0x2a>
  {
    return IIS2DLPC_ERROR;
 8002088:	f04f 33ff 	mov.w	r3, #4294967295
 800208c:	e1b4      	b.n	80023f8 <IIS2DLPC_ACC_GetOutputDataRate+0x394>
  }

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	331c      	adds	r3, #28
 8002092:	f107 020a 	add.w	r2, r7, #10
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f000 fddd 	bl	8002c58 <iis2dlpc_power_mode_get>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <IIS2DLPC_ACC_GetOutputDataRate+0x46>
  {
    return IIS2DLPC_ERROR;
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
 80020a8:	e1a6      	b.n	80023f8 <IIS2DLPC_ACC_GetOutputDataRate+0x394>
  }

  switch (odr_low_level)
 80020aa:	7afb      	ldrb	r3, [r7, #11]
 80020ac:	2b22      	cmp	r3, #34	; 0x22
 80020ae:	f200 819b 	bhi.w	80023e8 <IIS2DLPC_ACC_GetOutputDataRate+0x384>
 80020b2:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <IIS2DLPC_ACC_GetOutputDataRate+0x54>)
 80020b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b8:	08002145 	.word	0x08002145
 80020bc:	0800214f 	.word	0x0800214f
 80020c0:	080021ed 	.word	0x080021ed
 80020c4:	080021f5 	.word	0x080021f5
 80020c8:	080021fd 	.word	0x080021fd
 80020cc:	08002205 	.word	0x08002205
 80020d0:	0800220d 	.word	0x0800220d
 80020d4:	08002215 	.word	0x08002215
 80020d8:	080022b1 	.word	0x080022b1
 80020dc:	0800234d 	.word	0x0800234d
 80020e0:	080023e9 	.word	0x080023e9
 80020e4:	080023e9 	.word	0x080023e9
 80020e8:	080023e9 	.word	0x080023e9
 80020ec:	080023e9 	.word	0x080023e9
 80020f0:	080023e9 	.word	0x080023e9
 80020f4:	080023e9 	.word	0x080023e9
 80020f8:	080023e9 	.word	0x080023e9
 80020fc:	080023e9 	.word	0x080023e9
 8002100:	08002145 	.word	0x08002145
 8002104:	080023e9 	.word	0x080023e9
 8002108:	080023e9 	.word	0x080023e9
 800210c:	080023e9 	.word	0x080023e9
 8002110:	080023e9 	.word	0x080023e9
 8002114:	080023e9 	.word	0x080023e9
 8002118:	080023e9 	.word	0x080023e9
 800211c:	080023e9 	.word	0x080023e9
 8002120:	080023e9 	.word	0x080023e9
 8002124:	080023e9 	.word	0x080023e9
 8002128:	080023e9 	.word	0x080023e9
 800212c:	080023e9 	.word	0x080023e9
 8002130:	080023e9 	.word	0x080023e9
 8002134:	080023e9 	.word	0x080023e9
 8002138:	080023e9 	.word	0x080023e9
 800213c:	080023e9 	.word	0x080023e9
 8002140:	08002145 	.word	0x08002145
  {
    case IIS2DLPC_XL_ODR_OFF:
    case IIS2DLPC_XL_SET_SW_TRIG:
    case IIS2DLPC_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
      break;
 800214c:	e153      	b.n	80023f6 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 800214e:	7abb      	ldrb	r3, [r7, #10]
 8002150:	2b1b      	cmp	r3, #27
 8002152:	d843      	bhi.n	80021dc <IIS2DLPC_ACC_GetOutputDataRate+0x178>
 8002154:	a201      	add	r2, pc, #4	; (adr r2, 800215c <IIS2DLPC_ACC_GetOutputDataRate+0xf8>)
 8002156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215a:	bf00      	nop
 800215c:	080021d5 	.word	0x080021d5
 8002160:	080021d5 	.word	0x080021d5
 8002164:	080021d5 	.word	0x080021d5
 8002168:	080021d5 	.word	0x080021d5
 800216c:	080021cd 	.word	0x080021cd
 8002170:	080021dd 	.word	0x080021dd
 8002174:	080021dd 	.word	0x080021dd
 8002178:	080021dd 	.word	0x080021dd
 800217c:	080021d5 	.word	0x080021d5
 8002180:	080021d5 	.word	0x080021d5
 8002184:	080021d5 	.word	0x080021d5
 8002188:	080021d5 	.word	0x080021d5
 800218c:	080021dd 	.word	0x080021dd
 8002190:	080021dd 	.word	0x080021dd
 8002194:	080021dd 	.word	0x080021dd
 8002198:	080021dd 	.word	0x080021dd
 800219c:	080021d5 	.word	0x080021d5
 80021a0:	080021d5 	.word	0x080021d5
 80021a4:	080021d5 	.word	0x080021d5
 80021a8:	080021d5 	.word	0x080021d5
 80021ac:	080021cd 	.word	0x080021cd
 80021b0:	080021dd 	.word	0x080021dd
 80021b4:	080021dd 	.word	0x080021dd
 80021b8:	080021dd 	.word	0x080021dd
 80021bc:	080021d5 	.word	0x080021d5
 80021c0:	080021d5 	.word	0x080021d5
 80021c4:	080021d5 	.word	0x080021d5
 80021c8:	080021d5 	.word	0x080021d5
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4a8c      	ldr	r2, [pc, #560]	; (8002400 <IIS2DLPC_ACC_GetOutputDataRate+0x39c>)
 80021d0:	601a      	str	r2, [r3, #0]
          break;
 80021d2:	e00a      	b.n	80021ea <IIS2DLPC_ACC_GetOutputDataRate+0x186>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	4a8b      	ldr	r2, [pc, #556]	; (8002404 <IIS2DLPC_ACC_GetOutputDataRate+0x3a0>)
 80021d8:	601a      	str	r2, [r3, #0]
          break;
 80021da:	e006      	b.n	80021ea <IIS2DLPC_ACC_GetOutputDataRate+0x186>

        default:
          *Odr = -1.0f;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	4a8a      	ldr	r2, [pc, #552]	; (8002408 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 80021e0:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
 80021e6:	60fb      	str	r3, [r7, #12]
          break;
 80021e8:	bf00      	nop
      }
      break;
 80021ea:	e104      	b.n	80023f6 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	4a84      	ldr	r2, [pc, #528]	; (8002400 <IIS2DLPC_ACC_GetOutputDataRate+0x39c>)
 80021f0:	601a      	str	r2, [r3, #0]
      break;
 80021f2:	e100      	b.n	80023f6 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_25Hz:
      *Odr = 25.0f;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	4a85      	ldr	r2, [pc, #532]	; (800240c <IIS2DLPC_ACC_GetOutputDataRate+0x3a8>)
 80021f8:	601a      	str	r2, [r3, #0]
      break;
 80021fa:	e0fc      	b.n	80023f6 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_50Hz:
      *Odr = 50.0f;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	4a84      	ldr	r2, [pc, #528]	; (8002410 <IIS2DLPC_ACC_GetOutputDataRate+0x3ac>)
 8002200:	601a      	str	r2, [r3, #0]
      break;
 8002202:	e0f8      	b.n	80023f6 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_100Hz:
      *Odr = 100.0f;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4a83      	ldr	r2, [pc, #524]	; (8002414 <IIS2DLPC_ACC_GetOutputDataRate+0x3b0>)
 8002208:	601a      	str	r2, [r3, #0]
      break;
 800220a:	e0f4      	b.n	80023f6 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_200Hz:
      *Odr = 200.0f;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	4a82      	ldr	r2, [pc, #520]	; (8002418 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 8002210:	601a      	str	r2, [r3, #0]
      break;
 8002212:	e0f0      	b.n	80023f6 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_400Hz:
      switch (mode)
 8002214:	7abb      	ldrb	r3, [r7, #10]
 8002216:	2b1b      	cmp	r3, #27
 8002218:	d842      	bhi.n	80022a0 <IIS2DLPC_ACC_GetOutputDataRate+0x23c>
 800221a:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <IIS2DLPC_ACC_GetOutputDataRate+0x1bc>)
 800221c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002220:	08002299 	.word	0x08002299
 8002224:	08002299 	.word	0x08002299
 8002228:	08002299 	.word	0x08002299
 800222c:	08002299 	.word	0x08002299
 8002230:	08002291 	.word	0x08002291
 8002234:	080022a1 	.word	0x080022a1
 8002238:	080022a1 	.word	0x080022a1
 800223c:	080022a1 	.word	0x080022a1
 8002240:	08002299 	.word	0x08002299
 8002244:	08002299 	.word	0x08002299
 8002248:	08002299 	.word	0x08002299
 800224c:	08002299 	.word	0x08002299
 8002250:	080022a1 	.word	0x080022a1
 8002254:	080022a1 	.word	0x080022a1
 8002258:	080022a1 	.word	0x080022a1
 800225c:	080022a1 	.word	0x080022a1
 8002260:	08002299 	.word	0x08002299
 8002264:	08002299 	.word	0x08002299
 8002268:	08002299 	.word	0x08002299
 800226c:	08002299 	.word	0x08002299
 8002270:	08002291 	.word	0x08002291
 8002274:	080022a1 	.word	0x080022a1
 8002278:	080022a1 	.word	0x080022a1
 800227c:	080022a1 	.word	0x080022a1
 8002280:	08002299 	.word	0x08002299
 8002284:	08002299 	.word	0x08002299
 8002288:	08002299 	.word	0x08002299
 800228c:	08002299 	.word	0x08002299
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4a62      	ldr	r2, [pc, #392]	; (800241c <IIS2DLPC_ACC_GetOutputDataRate+0x3b8>)
 8002294:	601a      	str	r2, [r3, #0]
          break;
 8002296:	e00a      	b.n	80022ae <IIS2DLPC_ACC_GetOutputDataRate+0x24a>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	4a5f      	ldr	r2, [pc, #380]	; (8002418 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 800229c:	601a      	str	r2, [r3, #0]
          break;
 800229e:	e006      	b.n	80022ae <IIS2DLPC_ACC_GetOutputDataRate+0x24a>

        default:
          *Odr = -1.0f;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	4a59      	ldr	r2, [pc, #356]	; (8002408 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 80022a4:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	60fb      	str	r3, [r7, #12]
          break;
 80022ac:	bf00      	nop
      }
      break;
 80022ae:	e0a2      	b.n	80023f6 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_800Hz:
      switch (mode)
 80022b0:	7abb      	ldrb	r3, [r7, #10]
 80022b2:	2b1b      	cmp	r3, #27
 80022b4:	d842      	bhi.n	800233c <IIS2DLPC_ACC_GetOutputDataRate+0x2d8>
 80022b6:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <IIS2DLPC_ACC_GetOutputDataRate+0x258>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	08002335 	.word	0x08002335
 80022c0:	08002335 	.word	0x08002335
 80022c4:	08002335 	.word	0x08002335
 80022c8:	08002335 	.word	0x08002335
 80022cc:	0800232d 	.word	0x0800232d
 80022d0:	0800233d 	.word	0x0800233d
 80022d4:	0800233d 	.word	0x0800233d
 80022d8:	0800233d 	.word	0x0800233d
 80022dc:	08002335 	.word	0x08002335
 80022e0:	08002335 	.word	0x08002335
 80022e4:	08002335 	.word	0x08002335
 80022e8:	08002335 	.word	0x08002335
 80022ec:	0800233d 	.word	0x0800233d
 80022f0:	0800233d 	.word	0x0800233d
 80022f4:	0800233d 	.word	0x0800233d
 80022f8:	0800233d 	.word	0x0800233d
 80022fc:	08002335 	.word	0x08002335
 8002300:	08002335 	.word	0x08002335
 8002304:	08002335 	.word	0x08002335
 8002308:	08002335 	.word	0x08002335
 800230c:	0800232d 	.word	0x0800232d
 8002310:	0800233d 	.word	0x0800233d
 8002314:	0800233d 	.word	0x0800233d
 8002318:	0800233d 	.word	0x0800233d
 800231c:	08002335 	.word	0x08002335
 8002320:	08002335 	.word	0x08002335
 8002324:	08002335 	.word	0x08002335
 8002328:	08002335 	.word	0x08002335
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	4a3c      	ldr	r2, [pc, #240]	; (8002420 <IIS2DLPC_ACC_GetOutputDataRate+0x3bc>)
 8002330:	601a      	str	r2, [r3, #0]
          break;
 8002332:	e00a      	b.n	800234a <IIS2DLPC_ACC_GetOutputDataRate+0x2e6>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	4a38      	ldr	r2, [pc, #224]	; (8002418 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 8002338:	601a      	str	r2, [r3, #0]
          break;
 800233a:	e006      	b.n	800234a <IIS2DLPC_ACC_GetOutputDataRate+0x2e6>

        default:
          *Odr = -1.0f;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	4a32      	ldr	r2, [pc, #200]	; (8002408 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8002340:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
 8002346:	60fb      	str	r3, [r7, #12]
          break;
 8002348:	bf00      	nop
      }
      break;
 800234a:	e054      	b.n	80023f6 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_1k6Hz:
      switch (mode)
 800234c:	7abb      	ldrb	r3, [r7, #10]
 800234e:	2b1b      	cmp	r3, #27
 8002350:	d842      	bhi.n	80023d8 <IIS2DLPC_ACC_GetOutputDataRate+0x374>
 8002352:	a201      	add	r2, pc, #4	; (adr r2, 8002358 <IIS2DLPC_ACC_GetOutputDataRate+0x2f4>)
 8002354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002358:	080023d1 	.word	0x080023d1
 800235c:	080023d1 	.word	0x080023d1
 8002360:	080023d1 	.word	0x080023d1
 8002364:	080023d1 	.word	0x080023d1
 8002368:	080023c9 	.word	0x080023c9
 800236c:	080023d9 	.word	0x080023d9
 8002370:	080023d9 	.word	0x080023d9
 8002374:	080023d9 	.word	0x080023d9
 8002378:	080023d1 	.word	0x080023d1
 800237c:	080023d1 	.word	0x080023d1
 8002380:	080023d1 	.word	0x080023d1
 8002384:	080023d1 	.word	0x080023d1
 8002388:	080023d9 	.word	0x080023d9
 800238c:	080023d9 	.word	0x080023d9
 8002390:	080023d9 	.word	0x080023d9
 8002394:	080023d9 	.word	0x080023d9
 8002398:	080023d1 	.word	0x080023d1
 800239c:	080023d1 	.word	0x080023d1
 80023a0:	080023d1 	.word	0x080023d1
 80023a4:	080023d1 	.word	0x080023d1
 80023a8:	080023c9 	.word	0x080023c9
 80023ac:	080023d9 	.word	0x080023d9
 80023b0:	080023d9 	.word	0x080023d9
 80023b4:	080023d9 	.word	0x080023d9
 80023b8:	080023d1 	.word	0x080023d1
 80023bc:	080023d1 	.word	0x080023d1
 80023c0:	080023d1 	.word	0x080023d1
 80023c4:	080023d1 	.word	0x080023d1
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4a16      	ldr	r2, [pc, #88]	; (8002424 <IIS2DLPC_ACC_GetOutputDataRate+0x3c0>)
 80023cc:	601a      	str	r2, [r3, #0]
          break;
 80023ce:	e00a      	b.n	80023e6 <IIS2DLPC_ACC_GetOutputDataRate+0x382>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	4a11      	ldr	r2, [pc, #68]	; (8002418 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 80023d4:	601a      	str	r2, [r3, #0]
          break;
 80023d6:	e006      	b.n	80023e6 <IIS2DLPC_ACC_GetOutputDataRate+0x382>

        default:
          *Odr = -1.0f;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 80023dc:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	60fb      	str	r3, [r7, #12]
          break;
 80023e4:	bf00      	nop
      }
      break;
 80023e6:	e006      	b.n	80023f6 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    default:
      *Odr = -1.0f;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	4a07      	ldr	r2, [pc, #28]	; (8002408 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 80023ec:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
 80023f2:	60fb      	str	r3, [r7, #12]
      break;
 80023f4:	bf00      	nop
  }

  return ret;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	41480000 	.word	0x41480000
 8002404:	3fcccccd 	.word	0x3fcccccd
 8002408:	bf800000 	.word	0xbf800000
 800240c:	41c80000 	.word	0x41c80000
 8002410:	42480000 	.word	0x42480000
 8002414:	42c80000 	.word	0x42c80000
 8002418:	43480000 	.word	0x43480000
 800241c:	43c80000 	.word	0x43c80000
 8002420:	44480000 	.word	0x44480000
 8002424:	44c80000 	.word	0x44c80000

08002428 <IIS2DLPC_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_SetOutputDataRate(IIS2DLPC_Object_t *pObj, float Odr)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return IIS2DLPC_ACC_SetOutputDataRate_With_Mode(pObj, Odr, IIS2DLPC_HIGH_PERFORMANCE_MODE, IIS2DLPC_LOW_NOISE_DISABLE);
 8002434:	2200      	movs	r2, #0
 8002436:	2100      	movs	r1, #0
 8002438:	ed97 0a00 	vldr	s0, [r7]
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f805 	bl	800244c <IIS2DLPC_ACC_SetOutputDataRate_With_Mode>
 8002442:	4603      	mov	r3, r0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <IIS2DLPC_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_SetOutputDataRate_With_Mode(IIS2DLPC_Object_t *pObj, float Odr, IIS2DLPC_Operating_Mode_t Mode,
                                                 IIS2DLPC_Low_Noise_t Noise)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	ed87 0a02 	vstr	s0, [r7, #8]
 8002458:	460b      	mov	r3, r1
 800245a:	71fb      	strb	r3, [r7, #7]
 800245c:	4613      	mov	r3, r2
 800245e:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002466:	2b01      	cmp	r3, #1
 8002468:	d109      	bne.n	800247e <IIS2DLPC_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 800246a:	79ba      	ldrb	r2, [r7, #6]
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	4619      	mov	r1, r3
 8002470:	ed97 0a02 	vldr	s0, [r7, #8]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f98d 	bl	8002794 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>
 800247a:	4603      	mov	r3, r0
 800247c:	e008      	b.n	8002490 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return IIS2DLPC_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 800247e:	79ba      	ldrb	r2, [r7, #6]
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	4619      	mov	r1, r3
 8002484:	ed97 0a02 	vldr	s0, [r7, #8]
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 fa9f 	bl	80029cc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled>
 800248e:	4603      	mov	r3, r0
  }
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <IIS2DLPC_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetFullScale(IIS2DLPC_Object_t *pObj, int32_t *FullScale)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
  iis2dlpc_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (iis2dlpc_full_scale_get(&(pObj->Ctx), &fs_low_level) != IIS2DLPC_OK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	331c      	adds	r3, #28
 80024aa:	f107 020b 	add.w	r2, r7, #11
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fdc5 	bl	8003040 <iis2dlpc_full_scale_get>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <IIS2DLPC_ACC_GetFullScale+0x2a>
  {
    return IIS2DLPC_ERROR;
 80024bc:	f04f 33ff 	mov.w	r3, #4294967295
 80024c0:	e027      	b.n	8002512 <IIS2DLPC_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 80024c2:	7afb      	ldrb	r3, [r7, #11]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d81b      	bhi.n	8002500 <IIS2DLPC_ACC_GetFullScale+0x68>
 80024c8:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <IIS2DLPC_ACC_GetFullScale+0x38>)
 80024ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ce:	bf00      	nop
 80024d0:	080024e1 	.word	0x080024e1
 80024d4:	080024e9 	.word	0x080024e9
 80024d8:	080024f1 	.word	0x080024f1
 80024dc:	080024f9 	.word	0x080024f9
  {
    case IIS2DLPC_2g:
      *FullScale =  2;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	2202      	movs	r2, #2
 80024e4:	601a      	str	r2, [r3, #0]
      break;
 80024e6:	e013      	b.n	8002510 <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_4g:
      *FullScale =  4;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2204      	movs	r2, #4
 80024ec:	601a      	str	r2, [r3, #0]
      break;
 80024ee:	e00f      	b.n	8002510 <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_8g:
      *FullScale =  8;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	2208      	movs	r2, #8
 80024f4:	601a      	str	r2, [r3, #0]
      break;
 80024f6:	e00b      	b.n	8002510 <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_16g:
      *FullScale = 16;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2210      	movs	r2, #16
 80024fc:	601a      	str	r2, [r3, #0]
      break;
 80024fe:	e007      	b.n	8002510 <IIS2DLPC_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	f04f 32ff 	mov.w	r2, #4294967295
 8002506:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 8002508:	f04f 33ff 	mov.w	r3, #4294967295
 800250c:	60fb      	str	r3, [r7, #12]
      break;
 800250e:	bf00      	nop
  }

  return ret;
 8002510:	68fb      	ldr	r3, [r7, #12]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop

0800251c <IIS2DLPC_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_SetFullScale(IIS2DLPC_Object_t *pObj, int32_t FullScale)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  iis2dlpc_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? IIS2DLPC_2g
           : (FullScale <= 4) ? IIS2DLPC_4g
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b02      	cmp	r3, #2
 800252a:	dd0b      	ble.n	8002544 <IIS2DLPC_ACC_SetFullScale+0x28>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b04      	cmp	r3, #4
 8002530:	dd06      	ble.n	8002540 <IIS2DLPC_ACC_SetFullScale+0x24>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b08      	cmp	r3, #8
 8002536:	dc01      	bgt.n	800253c <IIS2DLPC_ACC_SetFullScale+0x20>
 8002538:	2302      	movs	r3, #2
 800253a:	e004      	b.n	8002546 <IIS2DLPC_ACC_SetFullScale+0x2a>
 800253c:	2303      	movs	r3, #3
 800253e:	e002      	b.n	8002546 <IIS2DLPC_ACC_SetFullScale+0x2a>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <IIS2DLPC_ACC_SetFullScale+0x2a>
 8002544:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? IIS2DLPC_2g
 8002546:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? IIS2DLPC_8g
           :                    IIS2DLPC_16g;

  if (iis2dlpc_full_scale_set(&(pObj->Ctx), new_fs) != IIS2DLPC_OK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	331c      	adds	r3, #28
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	4611      	mov	r1, r2
 8002550:	4618      	mov	r0, r3
 8002552:	f000 fd4f 	bl	8002ff4 <iis2dlpc_full_scale_set>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <IIS2DLPC_ACC_SetFullScale+0x46>
  {
    return IIS2DLPC_ERROR;
 800255c:	f04f 33ff 	mov.w	r3, #4294967295
 8002560:	e000      	b.n	8002564 <IIS2DLPC_ACC_SetFullScale+0x48>
  }

  return IIS2DLPC_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <IIS2DLPC_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetAxesRaw(IIS2DLPC_Object_t *pObj, IIS2DLPC_AxesRaw_t *Value)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  iis2dlpc_axis3bit16_t data_raw;
  iis2dlpc_mode_t mode;
  int32_t ret = IIS2DLPC_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	331c      	adds	r3, #28
 800257e:	f107 020b 	add.w	r2, r7, #11
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fb67 	bl	8002c58 <iis2dlpc_power_mode_get>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <IIS2DLPC_ACC_GetAxesRaw+0x2a>
  {
    return IIS2DLPC_ERROR;
 8002590:	f04f 33ff 	mov.w	r3, #4294967295
 8002594:	e089      	b.n	80026aa <IIS2DLPC_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (iis2dlpc_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2DLPC_OK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	331c      	adds	r3, #28
 800259a:	f107 020c 	add.w	r2, r7, #12
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fd85 	bl	80030b0 <iis2dlpc_acceleration_raw_get>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <IIS2DLPC_ACC_GetAxesRaw+0x46>
  {
    return IIS2DLPC_ERROR;
 80025ac:	f04f 33ff 	mov.w	r3, #4294967295
 80025b0:	e07b      	b.n	80026aa <IIS2DLPC_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 80025b2:	7afb      	ldrb	r3, [r7, #11]
 80025b4:	2b1b      	cmp	r3, #27
 80025b6:	d873      	bhi.n	80026a0 <IIS2DLPC_ACC_GetAxesRaw+0x134>
 80025b8:	a201      	add	r2, pc, #4	; (adr r2, 80025c0 <IIS2DLPC_ACC_GetAxesRaw+0x54>)
 80025ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025be:	bf00      	nop
 80025c0:	08002631 	.word	0x08002631
 80025c4:	08002669 	.word	0x08002669
 80025c8:	08002669 	.word	0x08002669
 80025cc:	08002669 	.word	0x08002669
 80025d0:	08002669 	.word	0x08002669
 80025d4:	080026a1 	.word	0x080026a1
 80025d8:	080026a1 	.word	0x080026a1
 80025dc:	080026a1 	.word	0x080026a1
 80025e0:	08002631 	.word	0x08002631
 80025e4:	08002669 	.word	0x08002669
 80025e8:	08002669 	.word	0x08002669
 80025ec:	08002669 	.word	0x08002669
 80025f0:	080026a1 	.word	0x080026a1
 80025f4:	080026a1 	.word	0x080026a1
 80025f8:	080026a1 	.word	0x080026a1
 80025fc:	080026a1 	.word	0x080026a1
 8002600:	08002631 	.word	0x08002631
 8002604:	08002669 	.word	0x08002669
 8002608:	08002669 	.word	0x08002669
 800260c:	08002669 	.word	0x08002669
 8002610:	08002669 	.word	0x08002669
 8002614:	080026a1 	.word	0x080026a1
 8002618:	080026a1 	.word	0x080026a1
 800261c:	080026a1 	.word	0x080026a1
 8002620:	08002631 	.word	0x08002631
 8002624:	08002669 	.word	0x08002669
 8002628:	08002669 	.word	0x08002669
 800262c:	08002669 	.word	0x08002669
    case IIS2DLPC_CONT_LOW_PWR_12bit:
    case IIS2DLPC_SINGLE_LOW_PWR_12bit:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
    case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8002630:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	da00      	bge.n	800263a <IIS2DLPC_ACC_GetAxesRaw+0xce>
 8002638:	330f      	adds	r3, #15
 800263a:	111b      	asrs	r3, r3, #4
 800263c:	b21a      	sxth	r2, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8002642:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002646:	2b00      	cmp	r3, #0
 8002648:	da00      	bge.n	800264c <IIS2DLPC_ACC_GetAxesRaw+0xe0>
 800264a:	330f      	adds	r3, #15
 800264c:	111b      	asrs	r3, r3, #4
 800264e:	b21a      	sxth	r2, r3
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8002654:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	da00      	bge.n	800265e <IIS2DLPC_ACC_GetAxesRaw+0xf2>
 800265c:	330f      	adds	r3, #15
 800265e:	111b      	asrs	r3, r3, #4
 8002660:	b21a      	sxth	r2, r3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	809a      	strh	r2, [r3, #4]
      break;
 8002666:	e01f      	b.n	80026a8 <IIS2DLPC_ACC_GetAxesRaw+0x13c>
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8002668:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	da00      	bge.n	8002672 <IIS2DLPC_ACC_GetAxesRaw+0x106>
 8002670:	3303      	adds	r3, #3
 8002672:	109b      	asrs	r3, r3, #2
 8002674:	b21a      	sxth	r2, r3
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 800267a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800267e:	2b00      	cmp	r3, #0
 8002680:	da00      	bge.n	8002684 <IIS2DLPC_ACC_GetAxesRaw+0x118>
 8002682:	3303      	adds	r3, #3
 8002684:	109b      	asrs	r3, r3, #2
 8002686:	b21a      	sxth	r2, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 800268c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	da00      	bge.n	8002696 <IIS2DLPC_ACC_GetAxesRaw+0x12a>
 8002694:	3303      	adds	r3, #3
 8002696:	109b      	asrs	r3, r3, #2
 8002698:	b21a      	sxth	r2, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	809a      	strh	r2, [r3, #4]
      break;
 800269e:	e003      	b.n	80026a8 <IIS2DLPC_ACC_GetAxesRaw+0x13c>

    default:
      ret = IIS2DLPC_ERROR;
 80026a0:	f04f 33ff 	mov.w	r3, #4294967295
 80026a4:	617b      	str	r3, [r7, #20]
      break;
 80026a6:	bf00      	nop
  }

  return ret;
 80026a8:	697b      	ldr	r3, [r7, #20]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop

080026b4 <IIS2DLPC_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetAxes(IIS2DLPC_Object_t *pObj, IIS2DLPC_Axes_t *Acceleration)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  IIS2DLPC_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (IIS2DLPC_ACC_GetAxesRaw(pObj, &data_raw) != IIS2DLPC_OK)
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	4619      	mov	r1, r3
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff ff4e 	bl	800256c <IIS2DLPC_ACC_GetAxesRaw>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <IIS2DLPC_ACC_GetAxes+0x28>
  {
    return IIS2DLPC_ERROR;
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295
 80026da:	e03c      	b.n	8002756 <IIS2DLPC_ACC_GetAxes+0xa2>
  }

  /* Get IIS2DLPC actual sensitivity. */
  if (IIS2DLPC_ACC_GetSensitivity(pObj, &sensitivity) != IIS2DLPC_OK)
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	4619      	mov	r1, r3
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff fbf6 	bl	8001ed4 <IIS2DLPC_ACC_GetSensitivity>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <IIS2DLPC_ACC_GetAxes+0x40>
  {
    return IIS2DLPC_ERROR;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
 80026f2:	e030      	b.n	8002756 <IIS2DLPC_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80026f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80026f8:	ee07 3a90 	vmov	s15, r3
 80026fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002700:	edd7 7a03 	vldr	s15, [r7, #12]
 8002704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800270c:	ee17 2a90 	vmov	r2, s15
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002714:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002718:	ee07 3a90 	vmov	s15, r3
 800271c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002720:	edd7 7a03 	vldr	s15, [r7, #12]
 8002724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800272c:	ee17 2a90 	vmov	r2, s15
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002734:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002738:	ee07 3a90 	vmov	s15, r3
 800273c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002740:	edd7 7a03 	vldr	s15, [r7, #12]
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800274c:	ee17 2a90 	vmov	r2, s15
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	609a      	str	r2, [r3, #8]

  return IIS2DLPC_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <IIS2DLPC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_Write_Reg(IIS2DLPC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	70fb      	strb	r3, [r7, #3]
 800276a:	4613      	mov	r3, r2
 800276c:	70bb      	strb	r3, [r7, #2]
  if (iis2dlpc_write_reg(&(pObj->Ctx), Reg, &Data, 1) != IIS2DLPC_OK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f103 001c 	add.w	r0, r3, #28
 8002774:	1cba      	adds	r2, r7, #2
 8002776:	78f9      	ldrb	r1, [r7, #3]
 8002778:	2301      	movs	r3, #1
 800277a:	f000 fa07 	bl	8002b8c <iis2dlpc_write_reg>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <IIS2DLPC_Write_Reg+0x2c>
  {
    return IIS2DLPC_ERROR;
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
 8002788:	e000      	b.n	800278c <IIS2DLPC_Write_Reg+0x2e>
  }

  return IIS2DLPC_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(IIS2DLPC_Object_t *pObj, float Odr,
                                                           IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	ed87 0a02 	vstr	s0, [r7, #8]
 80027a0:	460b      	mov	r3, r1
 80027a2:	71fb      	strb	r3, [r7, #7]
 80027a4:	4613      	mov	r3, r2
 80027a6:	71bb      	strb	r3, [r7, #6]
  iis2dlpc_odr_t new_odr;
  iis2dlpc_mode_t new_power_mode;

  switch (Mode)
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d80b      	bhi.n	80027c8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x34>
 80027b0:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x24>)
 80027b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b6:	bf00      	nop
 80027b8:	080027f5 	.word	0x080027f5
 80027bc:	08002821 	.word	0x08002821
 80027c0:	0800284d 	.word	0x0800284d
 80027c4:	08002879 	.word	0x08002879
  {
    case IIS2DLPC_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 80027c8:	79bb      	ldrb	r3, [r7, #6]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d002      	beq.n	80027d4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_HIGH_PERFORMANCE;
 80027ce:	2304      	movs	r3, #4
 80027d0:	75fb      	strb	r3, [r7, #23]
          break;
 80027d2:	e002      	b.n	80027da <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x46>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE;
 80027d4:	2314      	movs	r3, #20
 80027d6:	75fb      	strb	r3, [r7, #23]
          break;
 80027d8:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 80027da:	edd7 7a02 	vldr	s15, [r7, #8]
 80027de:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80027e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ea:	d400      	bmi.n	80027ee <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 80027ec:	e05a      	b.n	80028a4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 80027ee:	4b6f      	ldr	r3, [pc, #444]	; (80029ac <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80027f0:	60bb      	str	r3, [r7, #8]
      break;
 80027f2:	e057      	b.n	80028a4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE4:
      switch (Noise)
 80027f4:	79bb      	ldrb	r3, [r7, #6]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d002      	beq.n	8002800 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_4;
 80027fa:	2303      	movs	r3, #3
 80027fc:	75fb      	strb	r3, [r7, #23]
          break;
 80027fe:	e002      	b.n	8002806 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x72>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4;
 8002800:	2313      	movs	r3, #19
 8002802:	75fb      	strb	r3, [r7, #23]
          break;
 8002804:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002806:	edd7 7a02 	vldr	s15, [r7, #8]
 800280a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80029b0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800280e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002816:	dc00      	bgt.n	800281a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8002818:	e044      	b.n	80028a4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800281a:	4b66      	ldr	r3, [pc, #408]	; (80029b4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800281c:	60bb      	str	r3, [r7, #8]
      break;
 800281e:	e041      	b.n	80028a4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE3:
      switch (Noise)
 8002820:	79bb      	ldrb	r3, [r7, #6]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d002      	beq.n	800282c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_3;
 8002826:	2302      	movs	r3, #2
 8002828:	75fb      	strb	r3, [r7, #23]
          break;
 800282a:	e002      	b.n	8002832 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3;
 800282c:	2312      	movs	r3, #18
 800282e:	75fb      	strb	r3, [r7, #23]
          break;
 8002830:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002832:	edd7 7a02 	vldr	s15, [r7, #8]
 8002836:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80029b0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800283a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	dc00      	bgt.n	8002846 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8002844:	e02e      	b.n	80028a4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002846:	4b5b      	ldr	r3, [pc, #364]	; (80029b4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002848:	60bb      	str	r3, [r7, #8]
      break;
 800284a:	e02b      	b.n	80028a4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE2:
      switch (Noise)
 800284c:	79bb      	ldrb	r3, [r7, #6]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d002      	beq.n	8002858 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_2;
 8002852:	2301      	movs	r3, #1
 8002854:	75fb      	strb	r3, [r7, #23]
          break;
 8002856:	e002      	b.n	800285e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xca>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2;
 8002858:	2311      	movs	r3, #17
 800285a:	75fb      	strb	r3, [r7, #23]
          break;
 800285c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800285e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002862:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80029b0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286e:	dc00      	bgt.n	8002872 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8002870:	e018      	b.n	80028a4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002872:	4b50      	ldr	r3, [pc, #320]	; (80029b4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002874:	60bb      	str	r3, [r7, #8]
      break;
 8002876:	e015      	b.n	80028a4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE1:
      switch (Noise)
 8002878:	79bb      	ldrb	r3, [r7, #6]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d002      	beq.n	8002884 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_12bit;
 800287e:	2300      	movs	r3, #0
 8002880:	75fb      	strb	r3, [r7, #23]
          break;
 8002882:	e002      	b.n	800288a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002884:	2310      	movs	r3, #16
 8002886:	75fb      	strb	r3, [r7, #23]
          break;
 8002888:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800288a:	edd7 7a02 	vldr	s15, [r7, #8]
 800288e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80029b0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289a:	dc00      	bgt.n	800289e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 800289c:	e001      	b.n	80028a2 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 800289e:	4b45      	ldr	r3, [pc, #276]	; (80029b4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80028a0:	60bb      	str	r3, [r7, #8]
      break;
 80028a2:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? IIS2DLPC_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? IIS2DLPC_XL_ODR_12Hz5
 80028a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80028a8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80029b8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x224>
 80028ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b4:	d801      	bhi.n	80028ba <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x126>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e04d      	b.n	8002956 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80028ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80028be:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80028c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ca:	d801      	bhi.n	80028d0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e042      	b.n	8002956 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80028d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80028d4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80028d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	d801      	bhi.n	80028e6 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x152>
 80028e2:	2303      	movs	r3, #3
 80028e4:	e037      	b.n	8002956 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80028e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80028ea:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80029bc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x228>
 80028ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f6:	d801      	bhi.n	80028fc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x168>
 80028f8:	2304      	movs	r3, #4
 80028fa:	e02c      	b.n	8002956 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80028fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002900:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80029c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8002904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290c:	d801      	bhi.n	8002912 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x17e>
 800290e:	2305      	movs	r3, #5
 8002910:	e021      	b.n	8002956 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002912:	edd7 7a02 	vldr	s15, [r7, #8]
 8002916:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80029b0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800291a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800291e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002922:	d801      	bhi.n	8002928 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x194>
 8002924:	2306      	movs	r3, #6
 8002926:	e016      	b.n	8002956 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002928:	edd7 7a02 	vldr	s15, [r7, #8]
 800292c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80029c4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x230>
 8002930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002938:	d801      	bhi.n	800293e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 800293a:	2307      	movs	r3, #7
 800293c:	e00b      	b.n	8002956 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800293e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002942:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80029c8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x234>
 8002946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294e:	d801      	bhi.n	8002954 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8002950:	2308      	movs	r3, #8
 8002952:	e000      	b.n	8002956 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002954:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? IIS2DLPC_XL_ODR_1Hz6_LP_ONLY
 8002956:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? IIS2DLPC_XL_ODR_400Hz
            : (Odr <=  800.0f) ? IIS2DLPC_XL_ODR_800Hz
            :                    IIS2DLPC_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2DLPC_OK)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	331c      	adds	r3, #28
 800295c:	7dba      	ldrb	r2, [r7, #22]
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fa33 	bl	8002dcc <iis2dlpc_data_rate_set>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return IIS2DLPC_ERROR;
 800296c:	f04f 33ff 	mov.w	r3, #4294967295
 8002970:	e018      	b.n	80029a4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (iis2dlpc_power_mode_set(&(pObj->Ctx), new_power_mode) != IIS2DLPC_OK)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	331c      	adds	r3, #28
 8002976:	7dfa      	ldrb	r2, [r7, #23]
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f91e 	bl	8002bbc <iis2dlpc_power_mode_set>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return IIS2DLPC_ERROR;
 8002986:	f04f 33ff 	mov.w	r3, #4294967295
 800298a:	e00b      	b.n	80029a4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	79fa      	ldrb	r2, [r7, #7]
 8002996:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	79ba      	ldrb	r2, [r7, #6]
 800299e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2DLPC_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	41480000 	.word	0x41480000
 80029b0:	43480000 	.word	0x43480000
 80029b4:	43480000 	.word	0x43480000
 80029b8:	3fcccccd 	.word	0x3fcccccd
 80029bc:	42480000 	.word	0x42480000
 80029c0:	42c80000 	.word	0x42c80000
 80029c4:	43c80000 	.word	0x43c80000
 80029c8:	44480000 	.word	0x44480000

080029cc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t IIS2DLPC_ACC_SetOutputDataRate_When_Disabled(IIS2DLPC_Object_t *pObj, float Odr,
                                                            IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80029d8:	460b      	mov	r3, r1
 80029da:	71fb      	strb	r3, [r7, #7]
 80029dc:	4613      	mov	r3, r2
 80029de:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	79fa      	ldrb	r2, [r7, #7]
 80029e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	79ba      	ldrb	r2, [r7, #6]
 80029ec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 80029f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80029f4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002ab4 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80029f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a00:	d801      	bhi.n	8002a06 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8002a02:	4b2d      	ldr	r3, [pc, #180]	; (8002ab8 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8002a04:	e04d      	b.n	8002aa2 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8002a06:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a0a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002a0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a16:	d801      	bhi.n	8002a1c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x50>
 8002a18:	4b28      	ldr	r3, [pc, #160]	; (8002abc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8002a1a:	e042      	b.n	8002aa2 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8002a1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a20:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002a24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2c:	d801      	bhi.n	8002a32 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x66>
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8002a30:	e037      	b.n	8002aa2 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8002a32:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a36:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002ac4 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a42:	d801      	bhi.n	8002a48 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002a44:	4b20      	ldr	r3, [pc, #128]	; (8002ac8 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8002a46:	e02c      	b.n	8002aa2 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8002a48:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a4c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002acc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a58:	d801      	bhi.n	8002a5e <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002a5c:	e021      	b.n	8002aa2 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8002a5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a62:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002ad4 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x108>
 8002a66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6e:	d801      	bhi.n	8002a74 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002a70:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8002a72:	e016      	b.n	8002aa2 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8002a74:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a78:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002adc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a84:	d801      	bhi.n	8002a8a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8002a86:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002a88:	e00b      	b.n	8002aa2 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8002a8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a8e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002ae4 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x118>
 8002a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9a:	d801      	bhi.n	8002aa0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002a9e:	e000      	b.n	8002aa2 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

  return IIS2DLPC_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	3fcccccd 	.word	0x3fcccccd
 8002ab8:	3fcccccd 	.word	0x3fcccccd
 8002abc:	41480000 	.word	0x41480000
 8002ac0:	41c80000 	.word	0x41c80000
 8002ac4:	42480000 	.word	0x42480000
 8002ac8:	42480000 	.word	0x42480000
 8002acc:	42c80000 	.word	0x42c80000
 8002ad0:	42c80000 	.word	0x42c80000
 8002ad4:	43480000 	.word	0x43480000
 8002ad8:	43480000 	.word	0x43480000
 8002adc:	43c80000 	.word	0x43c80000
 8002ae0:	43c80000 	.word	0x43c80000
 8002ae4:	44480000 	.word	0x44480000
 8002ae8:	44480000 	.word	0x44480000
 8002aec:	44c80000 	.word	0x44c80000

08002af0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	461a      	mov	r2, r3
 8002afc:	460b      	mov	r3, r1
 8002afe:	72fb      	strb	r3, [r7, #11]
 8002b00:	4613      	mov	r3, r2
 8002b02:	813b      	strh	r3, [r7, #8]
  IIS2DLPC_Object_t *pObj = (IIS2DLPC_Object_t *)Handle;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	695c      	ldr	r4, [r3, #20]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	7b1b      	ldrb	r3, [r3, #12]
 8002b10:	b298      	uxth	r0, r3
 8002b12:	7afb      	ldrb	r3, [r7, #11]
 8002b14:	b299      	uxth	r1, r3
 8002b16:	893b      	ldrh	r3, [r7, #8]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	47a0      	blx	r4
 8002b1c:	4603      	mov	r3, r0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd90      	pop	{r4, r7, pc}

08002b26 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b26:	b590      	push	{r4, r7, lr}
 8002b28:	b087      	sub	sp, #28
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	461a      	mov	r2, r3
 8002b32:	460b      	mov	r3, r1
 8002b34:	72fb      	strb	r3, [r7, #11]
 8002b36:	4613      	mov	r3, r2
 8002b38:	813b      	strh	r3, [r7, #8]
  IIS2DLPC_Object_t *pObj = (IIS2DLPC_Object_t *)Handle;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	691c      	ldr	r4, [r3, #16]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	7b1b      	ldrb	r3, [r3, #12]
 8002b46:	b298      	uxth	r0, r3
 8002b48:	7afb      	ldrb	r3, [r7, #11]
 8002b4a:	b299      	uxth	r1, r3
 8002b4c:	893b      	ldrh	r3, [r7, #8]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	47a0      	blx	r4
 8002b52:	4603      	mov	r3, r0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	371c      	adds	r7, #28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd90      	pop	{r4, r7, pc}

08002b5c <iis2dlpc_read_reg>:
  *
  */
int32_t iis2dlpc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	461a      	mov	r2, r3
 8002b68:	460b      	mov	r3, r1
 8002b6a:	72fb      	strb	r3, [r7, #11]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	685c      	ldr	r4, [r3, #4]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6898      	ldr	r0, [r3, #8]
 8002b78:	893b      	ldrh	r3, [r7, #8]
 8002b7a:	7af9      	ldrb	r1, [r7, #11]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	47a0      	blx	r4
 8002b80:	6178      	str	r0, [r7, #20]

  return ret;
 8002b82:	697b      	ldr	r3, [r7, #20]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd90      	pop	{r4, r7, pc}

08002b8c <iis2dlpc_write_reg>:
  *
  */
int32_t iis2dlpc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002b8c:	b590      	push	{r4, r7, lr}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	461a      	mov	r2, r3
 8002b98:	460b      	mov	r3, r1
 8002b9a:	72fb      	strb	r3, [r7, #11]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681c      	ldr	r4, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6898      	ldr	r0, [r3, #8]
 8002ba8:	893b      	ldrh	r3, [r7, #8]
 8002baa:	7af9      	ldrb	r1, [r7, #11]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	47a0      	blx	r4
 8002bb0:	6178      	str	r0, [r7, #20]

  return ret;
 8002bb2:	697b      	ldr	r3, [r7, #20]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	371c      	adds	r7, #28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd90      	pop	{r4, r7, pc}

08002bbc <iis2dlpc_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_set(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t val)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002bc8:	f107 0210 	add.w	r2, r7, #16
 8002bcc:	2301      	movs	r3, #1
 8002bce:	2120      	movs	r1, #32
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ffc3 	bl	8002b5c <iis2dlpc_read_reg>
 8002bd6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d118      	bne.n	8002c10 <iis2dlpc_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	7c3b      	ldrb	r3, [r7, #16]
 8002bea:	f362 0383 	bfi	r3, r2, #2, #2
 8002bee:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	7c3b      	ldrb	r3, [r7, #16]
 8002bfa:	f362 0301 	bfi	r3, r2, #0, #2
 8002bfe:	743b      	strb	r3, [r7, #16]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002c00:	f107 0210 	add.w	r2, r7, #16
 8002c04:	2301      	movs	r3, #1
 8002c06:	2120      	movs	r1, #32
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ffbf 	bl	8002b8c <iis2dlpc_write_reg>
 8002c0e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d107      	bne.n	8002c26 <iis2dlpc_power_mode_set+0x6a>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8002c16:	f107 020c 	add.w	r2, r7, #12
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	2125      	movs	r1, #37	; 0x25
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ff9c 	bl	8002b5c <iis2dlpc_read_reg>
 8002c24:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d110      	bne.n	8002c4e <iis2dlpc_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	7b3b      	ldrb	r3, [r7, #12]
 8002c38:	f362 0382 	bfi	r3, r2, #2, #1
 8002c3c:	733b      	strb	r3, [r7, #12]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8002c3e:	f107 020c 	add.w	r2, r7, #12
 8002c42:	2301      	movs	r3, #1
 8002c44:	2125      	movs	r1, #37	; 0x25
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ffa0 	bl	8002b8c <iis2dlpc_write_reg>
 8002c4c:	6178      	str	r0, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 8002c4e:	697b      	ldr	r3, [r7, #20]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <iis2dlpc_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_get(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t *val)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002c62:	f107 0210 	add.w	r2, r7, #16
 8002c66:	2301      	movs	r3, #1
 8002c68:	2120      	movs	r1, #32
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff ff76 	bl	8002b5c <iis2dlpc_read_reg>
 8002c70:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f040 80a3 	bne.w	8002dc0 <iis2dlpc_power_mode_get+0x168>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8002c7a:	f107 020c 	add.w	r2, r7, #12
 8002c7e:	2301      	movs	r3, #1
 8002c80:	2125      	movs	r1, #37	; 0x25
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ff6a 	bl	8002b5c <iis2dlpc_read_reg>
 8002c88:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002c8a:	7b3b      	ldrb	r3, [r7, #12]
 8002c8c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	011a      	lsls	r2, r3, #4
 8002c94:	7c3b      	ldrb	r3, [r7, #16]
 8002c96:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8002ca0:	7c3a      	ldrb	r2, [r7, #16]
 8002ca2:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8002ca6:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002ca8:	4413      	add	r3, r2
 8002caa:	2b1b      	cmp	r3, #27
 8002cac:	f200 8084 	bhi.w	8002db8 <iis2dlpc_power_mode_get+0x160>
 8002cb0:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <iis2dlpc_power_mode_get+0x60>)
 8002cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb6:	bf00      	nop
 8002cb8:	08002d49 	.word	0x08002d49
 8002cbc:	08002d41 	.word	0x08002d41
 8002cc0:	08002d39 	.word	0x08002d39
 8002cc4:	08002d31 	.word	0x08002d31
 8002cc8:	08002d29 	.word	0x08002d29
 8002ccc:	08002db9 	.word	0x08002db9
 8002cd0:	08002db9 	.word	0x08002db9
 8002cd4:	08002db9 	.word	0x08002db9
 8002cd8:	08002d69 	.word	0x08002d69
 8002cdc:	08002d61 	.word	0x08002d61
 8002ce0:	08002d59 	.word	0x08002d59
 8002ce4:	08002d51 	.word	0x08002d51
 8002ce8:	08002db9 	.word	0x08002db9
 8002cec:	08002db9 	.word	0x08002db9
 8002cf0:	08002db9 	.word	0x08002db9
 8002cf4:	08002db9 	.word	0x08002db9
 8002cf8:	08002d91 	.word	0x08002d91
 8002cfc:	08002d89 	.word	0x08002d89
 8002d00:	08002d81 	.word	0x08002d81
 8002d04:	08002d79 	.word	0x08002d79
 8002d08:	08002d71 	.word	0x08002d71
 8002d0c:	08002db9 	.word	0x08002db9
 8002d10:	08002db9 	.word	0x08002db9
 8002d14:	08002db9 	.word	0x08002db9
 8002d18:	08002db1 	.word	0x08002db1
 8002d1c:	08002da9 	.word	0x08002da9
 8002d20:	08002da1 	.word	0x08002da1
 8002d24:	08002d99 	.word	0x08002d99
    {
      case IIS2DLPC_HIGH_PERFORMANCE:
        *val = IIS2DLPC_HIGH_PERFORMANCE;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	701a      	strb	r2, [r3, #0]
        break;
 8002d2e:	e048      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_4:
        *val = IIS2DLPC_CONT_LOW_PWR_4;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	2203      	movs	r2, #3
 8002d34:	701a      	strb	r2, [r3, #0]
        break;
 8002d36:	e044      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_3:
        *val = IIS2DLPC_CONT_LOW_PWR_3;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	701a      	strb	r2, [r3, #0]
        break;
 8002d3e:	e040      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_2:
        *val = IIS2DLPC_CONT_LOW_PWR_2;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
        break;
 8002d46:	e03c      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_12bit:
        *val = IIS2DLPC_CONT_LOW_PWR_12bit;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]
        break;
 8002d4e:	e038      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_4:
        *val = IIS2DLPC_SINGLE_LOW_PWR_4;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	220b      	movs	r2, #11
 8002d54:	701a      	strb	r2, [r3, #0]
        break;
 8002d56:	e034      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_3:
        *val = IIS2DLPC_SINGLE_LOW_PWR_3;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	220a      	movs	r2, #10
 8002d5c:	701a      	strb	r2, [r3, #0]
        break;
 8002d5e:	e030      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_2:
        *val = IIS2DLPC_SINGLE_LOW_PWR_2;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2209      	movs	r2, #9
 8002d64:	701a      	strb	r2, [r3, #0]
        break;
 8002d66:	e02c      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_12bit:
        *val = IIS2DLPC_SINGLE_LOW_PWR_12bit;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	701a      	strb	r2, [r3, #0]
        break;
 8002d6e:	e028      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
        *val = IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2214      	movs	r2, #20
 8002d74:	701a      	strb	r2, [r3, #0]
        break;
 8002d76:	e024      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2213      	movs	r2, #19
 8002d7c:	701a      	strb	r2, [r3, #0]
        break;
 8002d7e:	e020      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2212      	movs	r2, #18
 8002d84:	701a      	strb	r2, [r3, #0]
        break;
 8002d86:	e01c      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2211      	movs	r2, #17
 8002d8c:	701a      	strb	r2, [r3, #0]
        break;
 8002d8e:	e018      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2210      	movs	r2, #16
 8002d94:	701a      	strb	r2, [r3, #0]
        break;
 8002d96:	e014      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	221b      	movs	r2, #27
 8002d9c:	701a      	strb	r2, [r3, #0]
        break;
 8002d9e:	e010      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	221a      	movs	r2, #26
 8002da4:	701a      	strb	r2, [r3, #0]
        break;
 8002da6:	e00c      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	2219      	movs	r2, #25
 8002dac:	701a      	strb	r2, [r3, #0]
        break;
 8002dae:	e008      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2218      	movs	r2, #24
 8002db4:	701a      	strb	r2, [r3, #0]
        break;
 8002db6:	e004      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>

      default:
        *val = IIS2DLPC_HIGH_PERFORMANCE;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2204      	movs	r2, #4
 8002dbc:	701a      	strb	r2, [r3, #0]
        break;
 8002dbe:	e000      	b.n	8002dc2 <iis2dlpc_power_mode_get+0x16a>
    }
  }
 8002dc0:	bf00      	nop

  return ret;
 8002dc2:	697b      	ldr	r3, [r7, #20]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <iis2dlpc_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_set(stmdev_ctx_t *ctx, iis2dlpc_odr_t val)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002dd8:	f107 0210 	add.w	r2, r7, #16
 8002ddc:	2301      	movs	r3, #1
 8002dde:	2120      	movs	r1, #32
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff febb 	bl	8002b5c <iis2dlpc_read_reg>
 8002de6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10f      	bne.n	8002e0e <iis2dlpc_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	7c3b      	ldrb	r3, [r7, #16]
 8002df8:	f362 1307 	bfi	r3, r2, #4, #4
 8002dfc:	743b      	strb	r3, [r7, #16]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002dfe:	f107 0210 	add.w	r2, r7, #16
 8002e02:	2301      	movs	r3, #1
 8002e04:	2120      	movs	r1, #32
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff fec0 	bl	8002b8c <iis2dlpc_write_reg>
 8002e0c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d107      	bne.n	8002e24 <iis2dlpc_data_rate_set+0x58>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8002e14:	f107 020c 	add.w	r2, r7, #12
 8002e18:	2301      	movs	r3, #1
 8002e1a:	2122      	movs	r1, #34	; 0x22
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7ff fe9d 	bl	8002b5c <iis2dlpc_read_reg>
 8002e22:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d110      	bne.n	8002e4c <iis2dlpc_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	7b3b      	ldrb	r3, [r7, #12]
 8002e36:	f362 0301 	bfi	r3, r2, #0, #2
 8002e3a:	733b      	strb	r3, [r7, #12]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8002e3c:	f107 020c 	add.w	r2, r7, #12
 8002e40:	2301      	movs	r3, #1
 8002e42:	2122      	movs	r1, #34	; 0x22
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff fea1 	bl	8002b8c <iis2dlpc_write_reg>
 8002e4a:	6178      	str	r0, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 8002e4c:	697b      	ldr	r3, [r7, #20]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <iis2dlpc_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_get(stmdev_ctx_t *ctx, iis2dlpc_odr_t *val)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002e62:	f107 0210 	add.w	r2, r7, #16
 8002e66:	2301      	movs	r3, #1
 8002e68:	2120      	movs	r1, #32
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff fe76 	bl	8002b5c <iis2dlpc_read_reg>
 8002e70:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f040 8091 	bne.w	8002f9c <iis2dlpc_data_rate_get+0x144>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8002e7a:	f107 020c 	add.w	r2, r7, #12
 8002e7e:	2301      	movs	r3, #1
 8002e80:	2122      	movs	r1, #34	; 0x22
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff fe6a 	bl	8002b5c <iis2dlpc_read_reg>
 8002e88:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8002e8a:	7b3b      	ldrb	r3, [r7, #12]
 8002e8c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	7c3a      	ldrb	r2, [r7, #16]
 8002e96:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	2b22      	cmp	r3, #34	; 0x22
 8002ea0:	d878      	bhi.n	8002f94 <iis2dlpc_data_rate_get+0x13c>
 8002ea2:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <iis2dlpc_data_rate_get+0x50>)
 8002ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea8:	08002f35 	.word	0x08002f35
 8002eac:	08002f3d 	.word	0x08002f3d
 8002eb0:	08002f45 	.word	0x08002f45
 8002eb4:	08002f4d 	.word	0x08002f4d
 8002eb8:	08002f55 	.word	0x08002f55
 8002ebc:	08002f5d 	.word	0x08002f5d
 8002ec0:	08002f65 	.word	0x08002f65
 8002ec4:	08002f6d 	.word	0x08002f6d
 8002ec8:	08002f75 	.word	0x08002f75
 8002ecc:	08002f7d 	.word	0x08002f7d
 8002ed0:	08002f95 	.word	0x08002f95
 8002ed4:	08002f95 	.word	0x08002f95
 8002ed8:	08002f95 	.word	0x08002f95
 8002edc:	08002f95 	.word	0x08002f95
 8002ee0:	08002f95 	.word	0x08002f95
 8002ee4:	08002f95 	.word	0x08002f95
 8002ee8:	08002f95 	.word	0x08002f95
 8002eec:	08002f95 	.word	0x08002f95
 8002ef0:	08002f85 	.word	0x08002f85
 8002ef4:	08002f95 	.word	0x08002f95
 8002ef8:	08002f95 	.word	0x08002f95
 8002efc:	08002f95 	.word	0x08002f95
 8002f00:	08002f95 	.word	0x08002f95
 8002f04:	08002f95 	.word	0x08002f95
 8002f08:	08002f95 	.word	0x08002f95
 8002f0c:	08002f95 	.word	0x08002f95
 8002f10:	08002f95 	.word	0x08002f95
 8002f14:	08002f95 	.word	0x08002f95
 8002f18:	08002f95 	.word	0x08002f95
 8002f1c:	08002f95 	.word	0x08002f95
 8002f20:	08002f95 	.word	0x08002f95
 8002f24:	08002f95 	.word	0x08002f95
 8002f28:	08002f95 	.word	0x08002f95
 8002f2c:	08002f95 	.word	0x08002f95
 8002f30:	08002f8d 	.word	0x08002f8d
    {
      case IIS2DLPC_XL_ODR_OFF:
        *val = IIS2DLPC_XL_ODR_OFF;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]
        break;
 8002f3a:	e030      	b.n	8002f9e <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_1Hz6_LP_ONLY:
        *val = IIS2DLPC_XL_ODR_1Hz6_LP_ONLY;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	701a      	strb	r2, [r3, #0]
        break;
 8002f42:	e02c      	b.n	8002f9e <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_12Hz5:
        *val = IIS2DLPC_XL_ODR_12Hz5;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2202      	movs	r2, #2
 8002f48:	701a      	strb	r2, [r3, #0]
        break;
 8002f4a:	e028      	b.n	8002f9e <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_25Hz:
        *val = IIS2DLPC_XL_ODR_25Hz;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2203      	movs	r2, #3
 8002f50:	701a      	strb	r2, [r3, #0]
        break;
 8002f52:	e024      	b.n	8002f9e <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_50Hz:
        *val = IIS2DLPC_XL_ODR_50Hz;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2204      	movs	r2, #4
 8002f58:	701a      	strb	r2, [r3, #0]
        break;
 8002f5a:	e020      	b.n	8002f9e <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_100Hz:
        *val = IIS2DLPC_XL_ODR_100Hz;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2205      	movs	r2, #5
 8002f60:	701a      	strb	r2, [r3, #0]
        break;
 8002f62:	e01c      	b.n	8002f9e <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_200Hz:
        *val = IIS2DLPC_XL_ODR_200Hz;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2206      	movs	r2, #6
 8002f68:	701a      	strb	r2, [r3, #0]
        break;
 8002f6a:	e018      	b.n	8002f9e <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_400Hz:
        *val = IIS2DLPC_XL_ODR_400Hz;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2207      	movs	r2, #7
 8002f70:	701a      	strb	r2, [r3, #0]
        break;
 8002f72:	e014      	b.n	8002f9e <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_800Hz:
        *val = IIS2DLPC_XL_ODR_800Hz;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2208      	movs	r2, #8
 8002f78:	701a      	strb	r2, [r3, #0]
        break;
 8002f7a:	e010      	b.n	8002f9e <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_1k6Hz:
        *val = IIS2DLPC_XL_ODR_1k6Hz;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2209      	movs	r2, #9
 8002f80:	701a      	strb	r2, [r3, #0]
        break;
 8002f82:	e00c      	b.n	8002f9e <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_SET_SW_TRIG:
        *val = IIS2DLPC_XL_SET_SW_TRIG;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2212      	movs	r2, #18
 8002f88:	701a      	strb	r2, [r3, #0]
        break;
 8002f8a:	e008      	b.n	8002f9e <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_SET_PIN_TRIG:
        *val = IIS2DLPC_XL_SET_PIN_TRIG;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2222      	movs	r2, #34	; 0x22
 8002f90:	701a      	strb	r2, [r3, #0]
        break;
 8002f92:	e004      	b.n	8002f9e <iis2dlpc_data_rate_get+0x146>

      default:
        *val = IIS2DLPC_XL_ODR_OFF;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
        break;
 8002f9a:	e000      	b.n	8002f9e <iis2dlpc_data_rate_get+0x146>
    }
  }
 8002f9c:	bf00      	nop

  return ret;
 8002f9e:	697b      	ldr	r3, [r7, #20]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <iis2dlpc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002fb4:	f107 0208 	add.w	r2, r7, #8
 8002fb8:	2301      	movs	r3, #1
 8002fba:	2121      	movs	r1, #33	; 0x21
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff fdcd 	bl	8002b5c <iis2dlpc_read_reg>
 8002fc2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10f      	bne.n	8002fea <iis2dlpc_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	7a3b      	ldrb	r3, [r7, #8]
 8002fd4:	f362 03c3 	bfi	r3, r2, #3, #1
 8002fd8:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002fda:	f107 0208 	add.w	r2, r7, #8
 8002fde:	2301      	movs	r3, #1
 8002fe0:	2121      	movs	r1, #33	; 0x21
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff fdd2 	bl	8002b8c <iis2dlpc_write_reg>
 8002fe8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002fea:	68fb      	ldr	r3, [r7, #12]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <iis2dlpc_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_set(stmdev_ctx_t *ctx, iis2dlpc_fs_t val)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl6_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8003000:	f107 0208 	add.w	r2, r7, #8
 8003004:	2301      	movs	r3, #1
 8003006:	2125      	movs	r1, #37	; 0x25
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff fda7 	bl	8002b5c <iis2dlpc_read_reg>
 800300e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10f      	bne.n	8003036 <iis2dlpc_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	b2da      	uxtb	r2, r3
 800301e:	7a3b      	ldrb	r3, [r7, #8]
 8003020:	f362 1305 	bfi	r3, r2, #4, #2
 8003024:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8003026:	f107 0208 	add.w	r2, r7, #8
 800302a:	2301      	movs	r3, #1
 800302c:	2125      	movs	r1, #37	; 0x25
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff fdac 	bl	8002b8c <iis2dlpc_write_reg>
 8003034:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003036:	68fb      	ldr	r3, [r7, #12]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <iis2dlpc_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_get(stmdev_ctx_t *ctx, iis2dlpc_fs_t *val)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl6_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 800304a:	f107 0208 	add.w	r2, r7, #8
 800304e:	2301      	movs	r3, #1
 8003050:	2125      	movs	r1, #37	; 0x25
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff fd82 	bl	8002b5c <iis2dlpc_read_reg>
 8003058:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 800305a:	7a3b      	ldrb	r3, [r7, #8]
 800305c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b03      	cmp	r3, #3
 8003064:	d81a      	bhi.n	800309c <iis2dlpc_full_scale_get+0x5c>
 8003066:	a201      	add	r2, pc, #4	; (adr r2, 800306c <iis2dlpc_full_scale_get+0x2c>)
 8003068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306c:	0800307d 	.word	0x0800307d
 8003070:	08003085 	.word	0x08003085
 8003074:	0800308d 	.word	0x0800308d
 8003078:	08003095 	.word	0x08003095
  {
    case IIS2DLPC_2g:
      *val = IIS2DLPC_2g;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
      break;
 8003082:	e00f      	b.n	80030a4 <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_4g:
      *val = IIS2DLPC_4g;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2201      	movs	r2, #1
 8003088:	701a      	strb	r2, [r3, #0]
      break;
 800308a:	e00b      	b.n	80030a4 <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_8g:
      *val = IIS2DLPC_8g;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2202      	movs	r2, #2
 8003090:	701a      	strb	r2, [r3, #0]
      break;
 8003092:	e007      	b.n	80030a4 <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_16g:
      *val = IIS2DLPC_16g;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2203      	movs	r2, #3
 8003098:	701a      	strb	r2, [r3, #0]
      break;
 800309a:	e003      	b.n	80030a4 <iis2dlpc_full_scale_get+0x64>

    default:
      *val = IIS2DLPC_2g;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
      break;
 80030a2:	bf00      	nop
  }

  return ret;
 80030a4:	68fb      	ldr	r3, [r7, #12]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop

080030b0 <iis2dlpc_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_OUT_X_L, buff, 6);
 80030ba:	f107 020c 	add.w	r2, r7, #12
 80030be:	2306      	movs	r3, #6
 80030c0:	2128      	movs	r1, #40	; 0x28
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff fd4a 	bl	8002b5c <iis2dlpc_read_reg>
 80030c8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80030ca:	7b7b      	ldrb	r3, [r7, #13]
 80030cc:	b21a      	sxth	r2, r3
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	b29a      	uxth	r2, r3
 80030de:	7b3b      	ldrb	r3, [r7, #12]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	b21a      	sxth	r2, r3
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80030ec:	7bfa      	ldrb	r2, [r7, #15]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	3302      	adds	r3, #2
 80030f2:	b212      	sxth	r2, r2
 80030f4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	3302      	adds	r3, #2
 80030fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	b29a      	uxth	r2, r3
 8003104:	7bbb      	ldrb	r3, [r7, #14]
 8003106:	b29b      	uxth	r3, r3
 8003108:	4413      	add	r3, r2
 800310a:	b29a      	uxth	r2, r3
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	3302      	adds	r3, #2
 8003110:	b212      	sxth	r2, r2
 8003112:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003114:	7c7a      	ldrb	r2, [r7, #17]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	3304      	adds	r3, #4
 800311a:	b212      	sxth	r2, r2
 800311c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	3304      	adds	r3, #4
 8003122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003126:	b29b      	uxth	r3, r3
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	b29a      	uxth	r2, r3
 800312c:	7c3b      	ldrb	r3, [r7, #16]
 800312e:	b29b      	uxth	r3, r3
 8003130:	4413      	add	r3, r2
 8003132:	b29a      	uxth	r2, r3
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	3304      	adds	r3, #4
 8003138:	b212      	sxth	r2, r2
 800313a:	801a      	strh	r2, [r3, #0]

  return ret;
 800313c:	697b      	ldr	r3, [r7, #20]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <iis2dlpc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WHO_AM_I, buff, 1);
 8003150:	2301      	movs	r3, #1
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	210f      	movs	r1, #15
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff fd00 	bl	8002b5c <iis2dlpc_read_reg>
 800315c:	60f8      	str	r0, [r7, #12]

  return ret;
 800315e:	68fb      	ldr	r3, [r7, #12]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <iis2dlpc_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8003174:	f107 0208 	add.w	r2, r7, #8
 8003178:	2301      	movs	r3, #1
 800317a:	2121      	movs	r1, #33	; 0x21
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff fced 	bl	8002b5c <iis2dlpc_read_reg>
 8003182:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10f      	bne.n	80031aa <iis2dlpc_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	b2da      	uxtb	r2, r3
 8003192:	7a3b      	ldrb	r3, [r7, #8]
 8003194:	f362 0382 	bfi	r3, r2, #2, #1
 8003198:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 800319a:	f107 0208 	add.w	r2, r7, #8
 800319e:	2301      	movs	r3, #1
 80031a0:	2121      	movs	r1, #33	; 0x21
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff fcf2 	bl	8002b8c <iis2dlpc_write_reg>
 80031a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031aa:	68fb      	ldr	r3, [r7, #12]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <iis2dlpc_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_fifo_mode_set(stmdev_ctx_t *ctx,
                               iis2dlpc_fmode_t val)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_fifo_ctrl_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg, 1);
 80031c0:	f107 0208 	add.w	r2, r7, #8
 80031c4:	2301      	movs	r3, #1
 80031c6:	212e      	movs	r1, #46	; 0x2e
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff fcc7 	bl	8002b5c <iis2dlpc_read_reg>
 80031ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10f      	bne.n	80031f6 <iis2dlpc_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	7a3b      	ldrb	r3, [r7, #8]
 80031e0:	f362 1347 	bfi	r3, r2, #5, #3
 80031e4:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg, 1);
 80031e6:	f107 0208 	add.w	r2, r7, #8
 80031ea:	2301      	movs	r3, #1
 80031ec:	212e      	movs	r1, #46	; 0x2e
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff fccc 	bl	8002b8c <iis2dlpc_write_reg>
 80031f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031f6:	68fb      	ldr	r3, [r7, #12]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <IIS2MDC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d103      	bne.n	800321c <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 8003214:	f04f 33ff 	mov.w	r3, #4294967295
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	e04b      	b.n	80032b4 <IIS2MDC_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	7b1a      	ldrb	r2, [r3, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	699a      	ldr	r2, [r3, #24]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a1a      	ldr	r2, [pc, #104]	; (80032c0 <IIS2MDC_RegisterBusIO+0xc0>)
 8003258:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a19      	ldr	r2, [pc, #100]	; (80032c4 <IIS2MDC_RegisterBusIO+0xc4>)
 800325e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d103      	bne.n	8003276 <IIS2MDC_RegisterBusIO+0x76>
    {
      ret = IIS2MDC_ERROR;
 800326e:	f04f 33ff 	mov.w	r3, #4294967295
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	e01e      	b.n	80032b4 <IIS2MDC_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4798      	blx	r3
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <IIS2MDC_RegisterBusIO+0x8a>
    {
      ret = IIS2MDC_ERROR;
 8003282:	f04f 33ff 	mov.w	r3, #4294967295
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	e014      	b.n	80032b4 <IIS2MDC_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d010      	beq.n	80032b4 <IIS2MDC_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <IIS2MDC_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	331c      	adds	r3, #28
 80032a0:	2101      	movs	r1, #1
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fbc8 	bl	8003a38 <iis2mdc_i2c_interface_set>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <IIS2MDC_RegisterBusIO+0xb4>
          {
            ret = IIS2MDC_ERROR;
 80032ae:	f04f 33ff 	mov.w	r3, #4294967295
 80032b2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80032b4:	68fb      	ldr	r3, [r7, #12]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	080036bb 	.word	0x080036bb
 80032c4:	0800371d 	.word	0x0800371d

080032c8 <IIS2MDC_Init>:
  * @brief  Initialize the IIS2MDC sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	331c      	adds	r3, #28
 80032d4:	2101      	movs	r1, #1
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fb06 	bl	80038e8 <iis2mdc_block_data_update_set>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 80032e2:	f04f 33ff 	mov.w	r3, #4294967295
 80032e6:	e028      	b.n	800333a <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	331c      	adds	r3, #28
 80032ec:	2102      	movs	r1, #2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fa75 	bl	80037de <iis2mdc_operating_mode_set>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 80032fa:	f04f 33ff 	mov.w	r3, #4294967295
 80032fe:	e01c      	b.n	800333a <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	331c      	adds	r3, #28
 8003304:	2103      	movs	r1, #3
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fa8f 	bl	800382a <iis2mdc_data_rate_set>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 8003312:	f04f 33ff 	mov.w	r3, #4294967295
 8003316:	e010      	b.n	800333a <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	331c      	adds	r3, #28
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fb64 	bl	80039ec <iis2mdc_self_test_set>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 800332a:	f04f 33ff 	mov.w	r3, #4294967295
 800332e:	e004      	b.n	800333a <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <IIS2MDC_DeInit>:
  * @brief  Deinitialize the IIS2MDC magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_DeInit(IIS2MDC_Object_t *pObj)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f874 	bl	8003438 <IIS2MDC_MAG_Disable>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <IIS2MDC_DeInit+0x1a>
  {
    return IIS2MDC_ERROR;
 8003356:	f04f 33ff 	mov.w	r3, #4294967295
 800335a:	e004      	b.n	8003366 <IIS2MDC_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <IIS2MDC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_ReadID(IIS2MDC_Object_t *pObj, uint8_t *Id)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	331c      	adds	r3, #28
 800337c:	6839      	ldr	r1, [r7, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fb23 	bl	80039ca <iis2mdc_device_id_get>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <IIS2MDC_ReadID+0x22>
  {
    return IIS2MDC_ERROR;
 800338a:	f04f 33ff 	mov.w	r3, #4294967295
 800338e:	e000      	b.n	8003392 <IIS2MDC_ReadID+0x24>
  }

  return IIS2MDC_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <IIS2MDC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
  * @retval Component status
  */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2200      	movs	r2, #0
 80033b0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2201      	movs	r2, #1
 80033b6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2200      	movs	r2, #0
 80033bc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2200      	movs	r2, #0
 80033c2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2232      	movs	r2, #50	; 0x32
 80033ce:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4a04      	ldr	r2, [pc, #16]	; (80033f4 <IIS2MDC_GetCapabilities+0x58>)
 80033e4:	619a      	str	r2, [r3, #24]
  return IIS2MDC_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	42c80000 	.word	0x42c80000

080033f8 <IIS2MDC_MAG_Enable>:
  * @brief Enable the IIS2MDC magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	e010      	b.n	8003430 <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	331c      	adds	r3, #28
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f000 f9e2 	bl	80037de <iis2mdc_operating_mode_set>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 8003420:	f04f 33ff 	mov.w	r3, #4294967295
 8003424:	e004      	b.n	8003430 <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <IIS2MDC_MAG_Disable>:
  * @brief Disable the IIS2MDC magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_Disable(IIS2MDC_Object_t *pObj)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <IIS2MDC_MAG_Disable+0x16>
  {
    return IIS2MDC_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	e010      	b.n	8003470 <IIS2MDC_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	331c      	adds	r3, #28
 8003452:	2102      	movs	r1, #2
 8003454:	4618      	mov	r0, r3
 8003456:	f000 f9c2 	bl	80037de <iis2mdc_operating_mode_set>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <IIS2MDC_MAG_Disable+0x2e>
  {
    return IIS2MDC_ERROR;
 8003460:	f04f 33ff 	mov.w	r3, #4294967295
 8003464:	e004      	b.n	8003470 <IIS2MDC_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <IIS2MDC_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003488:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <IIS2MDC_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetOutputDataRate(IIS2MDC_Object_t *pObj, float *Odr)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
  iis2mdc_odr_t odr_low_level;

  /* Get current output data rate. */
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	331c      	adds	r3, #28
 80034aa:	f107 020b 	add.w	r2, r7, #11
 80034ae:	4611      	mov	r1, r2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 f9e1 	bl	8003878 <iis2mdc_data_rate_get>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <IIS2MDC_MAG_GetOutputDataRate+0x2a>
  {
    return IIS2MDC_ERROR;
 80034bc:	f04f 33ff 	mov.w	r3, #4294967295
 80034c0:	e023      	b.n	800350a <IIS2MDC_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80034c2:	7afb      	ldrb	r3, [r7, #11]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d81b      	bhi.n	8003500 <IIS2MDC_MAG_GetOutputDataRate+0x68>
 80034c8:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <IIS2MDC_MAG_GetOutputDataRate+0x38>)
 80034ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ce:	bf00      	nop
 80034d0:	080034e1 	.word	0x080034e1
 80034d4:	080034e9 	.word	0x080034e9
 80034d8:	080034f1 	.word	0x080034f1
 80034dc:	080034f9 	.word	0x080034f9
  {
    case IIS2MDC_ODR_10Hz:
      *Odr = 10.0f;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	4a0c      	ldr	r2, [pc, #48]	; (8003514 <IIS2MDC_MAG_GetOutputDataRate+0x7c>)
 80034e4:	601a      	str	r2, [r3, #0]
      break;
 80034e6:	e00f      	b.n	8003508 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_20Hz:
      *Odr = 20.0f;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	4a0b      	ldr	r2, [pc, #44]	; (8003518 <IIS2MDC_MAG_GetOutputDataRate+0x80>)
 80034ec:	601a      	str	r2, [r3, #0]
      break;
 80034ee:	e00b      	b.n	8003508 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_50Hz:
      *Odr = 50.0f;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <IIS2MDC_MAG_GetOutputDataRate+0x84>)
 80034f4:	601a      	str	r2, [r3, #0]
      break;
 80034f6:	e007      	b.n	8003508 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_100Hz:
      *Odr = 100.0f;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	4a09      	ldr	r2, [pc, #36]	; (8003520 <IIS2MDC_MAG_GetOutputDataRate+0x88>)
 80034fc:	601a      	str	r2, [r3, #0]
      break;
 80034fe:	e003      	b.n	8003508 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    default:
      ret = IIS2MDC_ERROR;
 8003500:	f04f 33ff 	mov.w	r3, #4294967295
 8003504:	60fb      	str	r3, [r7, #12]
      break;
 8003506:	bf00      	nop
  }

  return ret;
 8003508:	68fb      	ldr	r3, [r7, #12]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	41200000 	.word	0x41200000
 8003518:	41a00000 	.word	0x41a00000
 800351c:	42480000 	.word	0x42480000
 8003520:	42c80000 	.word	0x42c80000

08003524 <IIS2MDC_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_SetOutputDataRate(IIS2MDC_Object_t *pObj, float Odr)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	ed87 0a00 	vstr	s0, [r7]
  iis2mdc_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8003530:	edd7 7a00 	vldr	s15, [r7]
 8003534:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003540:	d801      	bhi.n	8003546 <IIS2MDC_MAG_SetOutputDataRate+0x22>
 8003542:	2300      	movs	r3, #0
 8003544:	e016      	b.n	8003574 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8003546:	edd7 7a00 	vldr	s15, [r7]
 800354a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800354e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003556:	d801      	bhi.n	800355c <IIS2MDC_MAG_SetOutputDataRate+0x38>
 8003558:	2301      	movs	r3, #1
 800355a:	e00b      	b.n	8003574 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 800355c:	edd7 7a00 	vldr	s15, [r7]
 8003560:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800359c <IIS2MDC_MAG_SetOutputDataRate+0x78>
 8003564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356c:	d801      	bhi.n	8003572 <IIS2MDC_MAG_SetOutputDataRate+0x4e>
 800356e:	2302      	movs	r3, #2
 8003570:	e000      	b.n	8003574 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8003572:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
 8003574:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? IIS2MDC_ODR_50Hz
            :                    IIS2MDC_ODR_100Hz;

  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	331c      	adds	r3, #28
 800357a:	7bfa      	ldrb	r2, [r7, #15]
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f000 f953 	bl	800382a <iis2mdc_data_rate_set>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <IIS2MDC_MAG_SetOutputDataRate+0x6c>
  {
    return IIS2MDC_ERROR;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
 800358e:	e000      	b.n	8003592 <IIS2MDC_MAG_SetOutputDataRate+0x6e>
  }

  return IIS2MDC_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	42480000 	.word	0x42480000

080035a0 <IIS2MDC_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *FullScale = 50;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2232      	movs	r2, #50	; 0x32
 80035ae:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <IIS2MDC_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <IIS2MDC_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	331c      	adds	r3, #28
 80035e4:	f107 0208 	add.w	r2, r7, #8
 80035e8:	4611      	mov	r1, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 f9a2 	bl	8003934 <iis2mdc_magnetic_raw_get>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <IIS2MDC_MAG_GetAxesRaw+0x26>
  {
    return IIS2MDC_ERROR;
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295
 80035fa:	e00c      	b.n	8003616 <IIS2MDC_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80035fc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003604:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800360c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	809a      	strh	r2, [r3, #4]

  return IIS2MDC_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <IIS2MDC_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b086      	sub	sp, #24
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	331c      	adds	r3, #28
 800362c:	f107 0210 	add.w	r2, r7, #16
 8003630:	4611      	mov	r1, r2
 8003632:	4618      	mov	r0, r3
 8003634:	f000 f97e 	bl	8003934 <iis2mdc_magnetic_raw_get>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 800363e:	f04f 33ff 	mov.w	r3, #4294967295
 8003642:	e036      	b.n	80036b2 <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 8003644:	f107 030c 	add.w	r3, r7, #12
 8003648:	4619      	mov	r1, r3
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff ff14 	bl	8003478 <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003650:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003654:	ee07 3a90 	vmov	s15, r3
 8003658:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800365c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003668:	ee17 2a90 	vmov	r2, s15
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003670:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003674:	ee07 3a90 	vmov	s15, r3
 8003678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800367c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003688:	ee17 2a90 	vmov	r2, s15
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003690:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003694:	ee07 3a90 	vmov	s15, r3
 8003698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800369c:	edd7 7a03 	vldr	s15, [r7, #12]
 80036a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036a8:	ee17 2a90 	vmov	r2, s15
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80036ba:	b590      	push	{r4, r7, lr}
 80036bc:	b087      	sub	sp, #28
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	461a      	mov	r2, r3
 80036c6:	460b      	mov	r3, r1
 80036c8:	72fb      	strb	r3, [r7, #11]
 80036ca:	4613      	mov	r3, r2
 80036cc:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10e      	bne.n	80036f8 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	695c      	ldr	r4, [r3, #20]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	7b1b      	ldrb	r3, [r3, #12]
 80036e2:	b298      	uxth	r0, r3
 80036e4:	7afb      	ldrb	r3, [r7, #11]
 80036e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	b299      	uxth	r1, r3
 80036ee:	893b      	ldrh	r3, [r7, #8]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	47a0      	blx	r4
 80036f4:	4603      	mov	r3, r0
 80036f6:	e00d      	b.n	8003714 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	695c      	ldr	r4, [r3, #20]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	7b1b      	ldrb	r3, [r3, #12]
 8003700:	b298      	uxth	r0, r3
 8003702:	7afb      	ldrb	r3, [r7, #11]
 8003704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003708:	b2db      	uxtb	r3, r3
 800370a:	b299      	uxth	r1, r3
 800370c:	893b      	ldrh	r3, [r7, #8]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	47a0      	blx	r4
 8003712:	4603      	mov	r3, r0
  }
}
 8003714:	4618      	mov	r0, r3
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	bd90      	pop	{r4, r7, pc}

0800371c <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800371c:	b590      	push	{r4, r7, lr}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	461a      	mov	r2, r3
 8003728:	460b      	mov	r3, r1
 800372a:	72fb      	strb	r3, [r7, #11]
 800372c:	4613      	mov	r3, r2
 800372e:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10e      	bne.n	800375a <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	691c      	ldr	r4, [r3, #16]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	7b1b      	ldrb	r3, [r3, #12]
 8003744:	b298      	uxth	r0, r3
 8003746:	7afb      	ldrb	r3, [r7, #11]
 8003748:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800374c:	b2db      	uxtb	r3, r3
 800374e:	b299      	uxth	r1, r3
 8003750:	893b      	ldrh	r3, [r7, #8]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	47a0      	blx	r4
 8003756:	4603      	mov	r3, r0
 8003758:	e00d      	b.n	8003776 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	691c      	ldr	r4, [r3, #16]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	7b1b      	ldrb	r3, [r3, #12]
 8003762:	b298      	uxth	r0, r3
 8003764:	7afb      	ldrb	r3, [r7, #11]
 8003766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800376a:	b2db      	uxtb	r3, r3
 800376c:	b299      	uxth	r1, r3
 800376e:	893b      	ldrh	r3, [r7, #8]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	47a0      	blx	r4
 8003774:	4603      	mov	r3, r0
  }
}
 8003776:	4618      	mov	r0, r3
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	bd90      	pop	{r4, r7, pc}

0800377e <iis2mdc_read_reg>:
  *
  */
int32_t iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800377e:	b590      	push	{r4, r7, lr}
 8003780:	b087      	sub	sp, #28
 8003782:	af00      	add	r7, sp, #0
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	461a      	mov	r2, r3
 800378a:	460b      	mov	r3, r1
 800378c:	72fb      	strb	r3, [r7, #11]
 800378e:	4613      	mov	r3, r2
 8003790:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685c      	ldr	r4, [r3, #4]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6898      	ldr	r0, [r3, #8]
 800379a:	893b      	ldrh	r3, [r7, #8]
 800379c:	7af9      	ldrb	r1, [r7, #11]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	47a0      	blx	r4
 80037a2:	6178      	str	r0, [r7, #20]

  return ret;
 80037a4:	697b      	ldr	r3, [r7, #20]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	371c      	adds	r7, #28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd90      	pop	{r4, r7, pc}

080037ae <iis2mdc_write_reg>:
  *
  */
int32_t iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80037ae:	b590      	push	{r4, r7, lr}
 80037b0:	b087      	sub	sp, #28
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	461a      	mov	r2, r3
 80037ba:	460b      	mov	r3, r1
 80037bc:	72fb      	strb	r3, [r7, #11]
 80037be:	4613      	mov	r3, r2
 80037c0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681c      	ldr	r4, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6898      	ldr	r0, [r3, #8]
 80037ca:	893b      	ldrh	r3, [r7, #8]
 80037cc:	7af9      	ldrb	r1, [r7, #11]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	47a0      	blx	r4
 80037d2:	6178      	str	r0, [r7, #20]

  return ret;
 80037d4:	697b      	ldr	r3, [r7, #20]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd90      	pop	{r4, r7, pc}

080037de <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80037ea:	f107 0208 	add.w	r2, r7, #8
 80037ee:	2301      	movs	r3, #1
 80037f0:	2160      	movs	r1, #96	; 0x60
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff ffc3 	bl	800377e <iis2mdc_read_reg>
 80037f8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10f      	bne.n	8003820 <iis2mdc_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	b2da      	uxtb	r2, r3
 8003808:	7a3b      	ldrb	r3, [r7, #8]
 800380a:	f362 0301 	bfi	r3, r2, #0, #2
 800380e:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003810:	f107 0208 	add.w	r2, r7, #8
 8003814:	2301      	movs	r3, #1
 8003816:	2160      	movs	r1, #96	; 0x60
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff ffc8 	bl	80037ae <iis2mdc_write_reg>
 800381e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003820:	68fb      	ldr	r3, [r7, #12]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	460b      	mov	r3, r1
 8003834:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003836:	f107 0208 	add.w	r2, r7, #8
 800383a:	2301      	movs	r3, #1
 800383c:	2160      	movs	r1, #96	; 0x60
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff ff9d 	bl	800377e <iis2mdc_read_reg>
 8003844:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10f      	bne.n	800386c <iis2mdc_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	b2da      	uxtb	r2, r3
 8003854:	7a3b      	ldrb	r3, [r7, #8]
 8003856:	f362 0383 	bfi	r3, r2, #2, #2
 800385a:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800385c:	f107 0208 	add.w	r2, r7, #8
 8003860:	2301      	movs	r3, #1
 8003862:	2160      	movs	r1, #96	; 0x60
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff ffa2 	bl	80037ae <iis2mdc_write_reg>
 800386a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800386c:	68fb      	ldr	r3, [r7, #12]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003882:	f107 0208 	add.w	r2, r7, #8
 8003886:	2301      	movs	r3, #1
 8003888:	2160      	movs	r1, #96	; 0x60
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff ff77 	bl	800377e <iis2mdc_read_reg>
 8003890:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8003892:	7a3b      	ldrb	r3, [r7, #8]
 8003894:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b03      	cmp	r3, #3
 800389c:	d81a      	bhi.n	80038d4 <iis2mdc_data_rate_get+0x5c>
 800389e:	a201      	add	r2, pc, #4	; (adr r2, 80038a4 <iis2mdc_data_rate_get+0x2c>)
 80038a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a4:	080038b5 	.word	0x080038b5
 80038a8:	080038bd 	.word	0x080038bd
 80038ac:	080038c5 	.word	0x080038c5
 80038b0:	080038cd 	.word	0x080038cd
  {
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2200      	movs	r2, #0
 80038b8:	701a      	strb	r2, [r3, #0]
      break;
 80038ba:	e00f      	b.n	80038dc <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_20Hz:
      *val = IIS2MDC_ODR_20Hz;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2201      	movs	r2, #1
 80038c0:	701a      	strb	r2, [r3, #0]
      break;
 80038c2:	e00b      	b.n	80038dc <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_50Hz:
      *val = IIS2MDC_ODR_50Hz;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2202      	movs	r2, #2
 80038c8:	701a      	strb	r2, [r3, #0]
      break;
 80038ca:	e007      	b.n	80038dc <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_100Hz:
      *val = IIS2MDC_ODR_100Hz;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2203      	movs	r2, #3
 80038d0:	701a      	strb	r2, [r3, #0]
      break;
 80038d2:	e003      	b.n	80038dc <iis2mdc_data_rate_get+0x64>

    default:
      *val = IIS2MDC_ODR_10Hz;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
      break;
 80038da:	bf00      	nop
  }

  return ret;
 80038dc:	68fb      	ldr	r3, [r7, #12]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop

080038e8 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80038f4:	f107 0208 	add.w	r2, r7, #8
 80038f8:	2301      	movs	r3, #1
 80038fa:	2162      	movs	r1, #98	; 0x62
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff3e 	bl	800377e <iis2mdc_read_reg>
 8003902:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10f      	bne.n	800392a <iis2mdc_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	b2da      	uxtb	r2, r3
 8003912:	7a3b      	ldrb	r3, [r7, #8]
 8003914:	f362 1304 	bfi	r3, r2, #4, #1
 8003918:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800391a:	f107 0208 	add.w	r2, r7, #8
 800391e:	2301      	movs	r3, #1
 8003920:	2162      	movs	r1, #98	; 0x62
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff ff43 	bl	80037ae <iis2mdc_write_reg>
 8003928:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800392a:	68fb      	ldr	r3, [r7, #12]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 800393e:	f107 020c 	add.w	r2, r7, #12
 8003942:	2306      	movs	r3, #6
 8003944:	2168      	movs	r1, #104	; 0x68
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff ff19 	bl	800377e <iis2mdc_read_reg>
 800394c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800394e:	7b7b      	ldrb	r3, [r7, #13]
 8003950:	b21a      	sxth	r2, r3
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800395c:	b29b      	uxth	r3, r3
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	b29a      	uxth	r2, r3
 8003962:	7b3b      	ldrb	r3, [r7, #12]
 8003964:	b29b      	uxth	r3, r3
 8003966:	4413      	add	r3, r2
 8003968:	b29b      	uxth	r3, r3
 800396a:	b21a      	sxth	r2, r3
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003970:	7bfa      	ldrb	r2, [r7, #15]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	3302      	adds	r3, #2
 8003976:	b212      	sxth	r2, r2
 8003978:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	3302      	adds	r3, #2
 800397e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003982:	b29b      	uxth	r3, r3
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	b29a      	uxth	r2, r3
 8003988:	7bbb      	ldrb	r3, [r7, #14]
 800398a:	b29b      	uxth	r3, r3
 800398c:	4413      	add	r3, r2
 800398e:	b29a      	uxth	r2, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	3302      	adds	r3, #2
 8003994:	b212      	sxth	r2, r2
 8003996:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003998:	7c7a      	ldrb	r2, [r7, #17]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	3304      	adds	r3, #4
 800399e:	b212      	sxth	r2, r2
 80039a0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	3304      	adds	r3, #4
 80039a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	7c3b      	ldrb	r3, [r7, #16]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	4413      	add	r3, r2
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	3304      	adds	r3, #4
 80039bc:	b212      	sxth	r2, r2
 80039be:	801a      	strh	r2, [r3, #0]

  return ret;
 80039c0:	697b      	ldr	r3, [r7, #20]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 80039d4:	2301      	movs	r3, #1
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	214f      	movs	r1, #79	; 0x4f
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff fecf 	bl	800377e <iis2mdc_read_reg>
 80039e0:	60f8      	str	r0, [r7, #12]

  return ret;
 80039e2:	68fb      	ldr	r3, [r7, #12]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80039f8:	f107 0208 	add.w	r2, r7, #8
 80039fc:	2301      	movs	r3, #1
 80039fe:	2162      	movs	r1, #98	; 0x62
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff febc 	bl	800377e <iis2mdc_read_reg>
 8003a06:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10f      	bne.n	8003a2e <iis2mdc_self_test_set+0x42>
  {
    reg.self_test = val;
 8003a0e:	78fb      	ldrb	r3, [r7, #3]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	7a3b      	ldrb	r3, [r7, #8]
 8003a18:	f362 0341 	bfi	r3, r2, #1, #1
 8003a1c:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003a1e:	f107 0208 	add.w	r2, r7, #8
 8003a22:	2301      	movs	r3, #1
 8003a24:	2162      	movs	r1, #98	; 0x62
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff fec1 	bl	80037ae <iis2mdc_write_reg>
 8003a2c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003a44:	f107 0208 	add.w	r2, r7, #8
 8003a48:	2301      	movs	r3, #1
 8003a4a:	2162      	movs	r1, #98	; 0x62
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff fe96 	bl	800377e <iis2mdc_read_reg>
 8003a52:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10f      	bne.n	8003a7a <iis2mdc_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	7a3b      	ldrb	r3, [r7, #8]
 8003a64:	f362 1345 	bfi	r3, r2, #5, #1
 8003a68:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003a6a:	f107 0208 	add.w	r2, r7, #8
 8003a6e:	2301      	movs	r3, #1
 8003a70:	2162      	movs	r1, #98	; 0x62
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff fe9b 	bl	80037ae <iis2mdc_write_reg>
 8003a78:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <ISM330DHCX_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d103      	bne.n	8003aa0 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 8003a98:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	e04d      	b.n	8003b3c <ISM330DHCX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	7b1a      	ldrb	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	699a      	ldr	r2, [r3, #24]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a1b      	ldr	r2, [pc, #108]	; (8003b48 <ISM330DHCX_RegisterBusIO+0xc4>)
 8003adc:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a1a      	ldr	r2, [pc, #104]	; (8003b4c <ISM330DHCX_RegisterBusIO+0xc8>)
 8003ae2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <ISM330DHCX_RegisterBusIO+0x76>
    {
      ret = ISM330DHCX_ERROR;
 8003af2:	f04f 33ff 	mov.w	r3, #4294967295
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	e020      	b.n	8003b3c <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4798      	blx	r3
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <ISM330DHCX_RegisterBusIO+0x8a>
    {
      ret = ISM330DHCX_ERROR;
 8003b06:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	e016      	b.n	8003b3c <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d112      	bne.n	8003b3c <ISM330DHCX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10d      	bne.n	8003b3c <ISM330DHCX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003b20:	230c      	movs	r3, #12
 8003b22:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 8003b24:	7afb      	ldrb	r3, [r7, #11]
 8003b26:	461a      	mov	r2, r3
 8003b28:	2112      	movs	r1, #18
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fd61 	bl	80045f2 <ISM330DHCX_Write_Reg>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <ISM330DHCX_RegisterBusIO+0xb8>
          {
            ret = ISM330DHCX_ERROR;
 8003b36:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	08004a61 	.word	0x08004a61
 8003b4c:	08004a97 	.word	0x08004a97

08003b50 <ISM330DHCX_Init>:
  * @brief  Initialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	331c      	adds	r3, #28
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f001 fd20 	bl	80055a4 <ism330dhcx_device_conf_set>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6e:	e078      	b.n	8003c62 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	331c      	adds	r3, #28
 8003b74:	2101      	movs	r1, #1
 8003b76:	4618      	mov	r0, r3
 8003b78:	f001 fd97 	bl	80056aa <ism330dhcx_auto_increment_set>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 8003b82:	f04f 33ff 	mov.w	r3, #4294967295
 8003b86:	e06c      	b.n	8003c62 <ISM330DHCX_Init+0x112>
  }

  /* SW reset */
  if (ism330dhcx_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	331c      	adds	r3, #28
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f001 fd65 	bl	800565e <ism330dhcx_reset_set>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 8003b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9e:	e060      	b.n	8003c62 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	331c      	adds	r3, #28
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f001 fd7f 	bl	80056aa <ism330dhcx_auto_increment_set>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 8003bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb6:	e054      	b.n	8003c62 <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	331c      	adds	r3, #28
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 fc34 	bl	800542c <ism330dhcx_block_data_update_set>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 8003bca:	f04f 33ff 	mov.w	r3, #4294967295
 8003bce:	e048      	b.n	8003c62 <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	331c      	adds	r3, #28
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f001 fd8d 	bl	80056f6 <ism330dhcx_fifo_mode_set>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295
 8003be6:	e03c      	b.n	8003c62 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2204      	movs	r2, #4
 8003bec:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	331c      	adds	r3, #28
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fff6 	bl	8004be8 <ism330dhcx_xl_data_rate_set>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 8003c02:	f04f 33ff 	mov.w	r3, #4294967295
 8003c06:	e02c      	b.n	8003c62 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	331c      	adds	r3, #28
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 ff8c 	bl	8004b2c <ism330dhcx_xl_full_scale_set>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 8003c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1e:	e020      	b.n	8003c62 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2204      	movs	r2, #4
 8003c24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	331c      	adds	r3, #28
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 fa2a 	bl	8005088 <ism330dhcx_gy_data_rate_set>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 8003c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3e:	e010      	b.n	8003c62 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	331c      	adds	r3, #28
 8003c44:	210c      	movs	r1, #12
 8003c46:	4618      	mov	r0, r3
 8003c48:	f001 f9a6 	bl	8004f98 <ism330dhcx_gy_full_scale_set>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 8003c52:	f04f 33ff 	mov.w	r3, #4294967295
 8003c56:	e004      	b.n	8003c62 <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <ISM330DHCX_DeInit>:
  * @brief  Deinitialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f888 	bl	8003d88 <ISM330DHCX_ACC_Disable>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 8003c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c82:	e015      	b.n	8003cb0 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fa92 	bl	80041ae <ISM330DHCX_GYRO_Disable>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 8003c90:	f04f 33ff 	mov.w	r3, #4294967295
 8003c94:	e00c      	b.n	8003cb0 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <ISM330DHCX_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	331c      	adds	r3, #28
 8003cc6:	6839      	ldr	r1, [r7, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f001 fcb7 	bl	800563c <ism330dhcx_device_id_get>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 8003cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd8:	e000      	b.n	8003cdc <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <ISM330DHCX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to ISM330DHCX sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2200      	movs	r2, #0
 8003d04:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003d0c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2210      	movs	r2, #16
 8003d12:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2200      	movs	r2, #0
 8003d18:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	4a07      	ldr	r2, [pc, #28]	; (8003d3c <ISM330DHCX_GetCapabilities+0x58>)
 8003d1e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	4a06      	ldr	r2, [pc, #24]	; (8003d3c <ISM330DHCX_GetCapabilities+0x58>)
 8003d24:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	45d05800 	.word	0x45d05800

08003d40 <ISM330DHCX_ACC_Enable>:
  * @brief  Enable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	e014      	b.n	8003d80 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f103 021c 	add.w	r2, r3, #28
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003d62:	4619      	mov	r1, r3
 8003d64:	4610      	mov	r0, r2
 8003d66:	f000 ff3f 	bl	8004be8 <ism330dhcx_xl_data_rate_set>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8003d70:	f04f 33ff 	mov.w	r3, #4294967295
 8003d74:	e004      	b.n	8003d80 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <ISM330DHCX_ACC_Disable>:
  * @brief  Disable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e01f      	b.n	8003dde <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f103 021c 	add.w	r2, r3, #28
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	332b      	adds	r3, #43	; 0x2b
 8003da8:	4619      	mov	r1, r3
 8003daa:	4610      	mov	r0, r2
 8003dac:	f001 f88c 	bl	8004ec8 <ism330dhcx_xl_data_rate_get>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8003db6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dba:	e010      	b.n	8003dde <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	331c      	adds	r3, #28
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 ff10 	bl	8004be8 <ism330dhcx_xl_data_rate_set>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8003dce:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd2:	e004      	b.n	8003dde <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <ISM330DHCX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	331c      	adds	r3, #28
 8003dfa:	f107 020b 	add.w	r2, r7, #11
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 feb9 	bl	8004b78 <ism330dhcx_xl_full_scale_get>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e10:	e023      	b.n	8003e5a <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003e12:	7afb      	ldrb	r3, [r7, #11]
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d81b      	bhi.n	8003e50 <ISM330DHCX_ACC_GetSensitivity+0x68>
 8003e18:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 8003e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1e:	bf00      	nop
 8003e20:	08003e31 	.word	0x08003e31
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e39 	.word	0x08003e39
 8003e2c:	08003e41 	.word	0x08003e41
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	4a0c      	ldr	r2, [pc, #48]	; (8003e64 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8003e34:	601a      	str	r2, [r3, #0]
      break;
 8003e36:	e00f      	b.n	8003e58 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	4a0b      	ldr	r2, [pc, #44]	; (8003e68 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 8003e3c:	601a      	str	r2, [r3, #0]
      break;
 8003e3e:	e00b      	b.n	8003e58 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <ISM330DHCX_ACC_GetSensitivity+0x84>)
 8003e44:	601a      	str	r2, [r3, #0]
      break;
 8003e46:	e007      	b.n	8003e58 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	4a09      	ldr	r2, [pc, #36]	; (8003e70 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 8003e4c:	601a      	str	r2, [r3, #0]
      break;
 8003e4e:	e003      	b.n	8003e58 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8003e50:	f04f 33ff 	mov.w	r3, #4294967295
 8003e54:	60fb      	str	r3, [r7, #12]
      break;
 8003e56:	bf00      	nop
  }

  return ret;
 8003e58:	68fb      	ldr	r3, [r7, #12]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	3d79db23 	.word	0x3d79db23
 8003e68:	3df9db23 	.word	0x3df9db23
 8003e6c:	3e79db23 	.word	0x3e79db23
 8003e70:	3ef9db23 	.word	0x3ef9db23

08003e74 <ISM330DHCX_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	331c      	adds	r3, #28
 8003e86:	f107 020b 	add.w	r2, r7, #11
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 f81b 	bl	8004ec8 <ism330dhcx_xl_data_rate_get>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003e98:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9c:	e04e      	b.n	8003f3c <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003e9e:	7afb      	ldrb	r3, [r7, #11]
 8003ea0:	2b0a      	cmp	r3, #10
 8003ea2:	d846      	bhi.n	8003f32 <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 8003ea4:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ed9 	.word	0x08003ed9
 8003eb0:	08003ee3 	.word	0x08003ee3
 8003eb4:	08003eeb 	.word	0x08003eeb
 8003eb8:	08003ef3 	.word	0x08003ef3
 8003ebc:	08003efb 	.word	0x08003efb
 8003ec0:	08003f03 	.word	0x08003f03
 8003ec4:	08003f0b 	.word	0x08003f0b
 8003ec8:	08003f13 	.word	0x08003f13
 8003ecc:	08003f1b 	.word	0x08003f1b
 8003ed0:	08003f23 	.word	0x08003f23
 8003ed4:	08003f2b 	.word	0x08003f2b
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
      break;
 8003ee0:	e02b      	b.n	8003f3a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	4a17      	ldr	r2, [pc, #92]	; (8003f44 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 8003ee6:	601a      	str	r2, [r3, #0]
      break;
 8003ee8:	e027      	b.n	8003f3a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	4a16      	ldr	r2, [pc, #88]	; (8003f48 <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 8003eee:	601a      	str	r2, [r3, #0]
      break;
 8003ef0:	e023      	b.n	8003f3a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	4a15      	ldr	r2, [pc, #84]	; (8003f4c <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 8003ef6:	601a      	str	r2, [r3, #0]
      break;
 8003ef8:	e01f      	b.n	8003f3a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	4a14      	ldr	r2, [pc, #80]	; (8003f50 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 8003efe:	601a      	str	r2, [r3, #0]
      break;
 8003f00:	e01b      	b.n	8003f3a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	4a13      	ldr	r2, [pc, #76]	; (8003f54 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 8003f06:	601a      	str	r2, [r3, #0]
      break;
 8003f08:	e017      	b.n	8003f3a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_416Hz:
      *Odr = 416.0f;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 8003f0e:	601a      	str	r2, [r3, #0]
      break;
 8003f10:	e013      	b.n	8003f3a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	4a11      	ldr	r2, [pc, #68]	; (8003f5c <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 8003f16:	601a      	str	r2, [r3, #0]
      break;
 8003f18:	e00f      	b.n	8003f3a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1666Hz:
      *Odr = 1666.0f;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	4a10      	ldr	r2, [pc, #64]	; (8003f60 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 8003f1e:	601a      	str	r2, [r3, #0]
      break;
 8003f20:	e00b      	b.n	8003f3a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3332Hz:
      *Odr = 3332.0f;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	4a0f      	ldr	r2, [pc, #60]	; (8003f64 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 8003f26:	601a      	str	r2, [r3, #0]
      break;
 8003f28:	e007      	b.n	8003f3a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	4a0e      	ldr	r2, [pc, #56]	; (8003f68 <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 8003f2e:	601a      	str	r2, [r3, #0]
      break;
 8003f30:	e003      	b.n	8003f3a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8003f32:	f04f 33ff 	mov.w	r3, #4294967295
 8003f36:	60fb      	str	r3, [r7, #12]
      break;
 8003f38:	bf00      	nop
  }

  return ret;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	41480000 	.word	0x41480000
 8003f48:	41d00000 	.word	0x41d00000
 8003f4c:	42500000 	.word	0x42500000
 8003f50:	42d00000 	.word	0x42d00000
 8003f54:	43500000 	.word	0x43500000
 8003f58:	43d00000 	.word	0x43d00000
 8003f5c:	44504000 	.word	0x44504000
 8003f60:	44d04000 	.word	0x44d04000
 8003f64:	45504000 	.word	0x45504000
 8003f68:	45d05800 	.word	0x45d05800

08003f6c <ISM330DHCX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d106      	bne.n	8003f90 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003f82:	ed97 0a00 	vldr	s0, [r7]
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fb4e 	bl	8004628 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	e005      	b.n	8003f9c <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003f90:	ed97 0a00 	vldr	s0, [r7]
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fbd3 	bl	8004740 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 8003f9a:	4603      	mov	r3, r0
  }
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <ISM330DHCX_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	331c      	adds	r3, #28
 8003fb6:	f107 020b 	add.w	r2, r7, #11
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fddb 	bl	8004b78 <ism330dhcx_xl_full_scale_get>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fcc:	e023      	b.n	8004016 <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003fce:	7afb      	ldrb	r3, [r7, #11]
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d81b      	bhi.n	800400c <ISM330DHCX_ACC_GetFullScale+0x68>
 8003fd4:	a201      	add	r2, pc, #4	; (adr r2, 8003fdc <ISM330DHCX_ACC_GetFullScale+0x38>)
 8003fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fda:	bf00      	nop
 8003fdc:	08003fed 	.word	0x08003fed
 8003fe0:	08004005 	.word	0x08004005
 8003fe4:	08003ff5 	.word	0x08003ff5
 8003fe8:	08003ffd 	.word	0x08003ffd
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	601a      	str	r2, [r3, #0]
      break;
 8003ff2:	e00f      	b.n	8004014 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2204      	movs	r2, #4
 8003ff8:	601a      	str	r2, [r3, #0]
      break;
 8003ffa:	e00b      	b.n	8004014 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2208      	movs	r2, #8
 8004000:	601a      	str	r2, [r3, #0]
      break;
 8004002:	e007      	b.n	8004014 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2210      	movs	r2, #16
 8004008:	601a      	str	r2, [r3, #0]
      break;
 800400a:	e003      	b.n	8004014 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 800400c:	f04f 33ff 	mov.w	r3, #4294967295
 8004010:	60fb      	str	r3, [r7, #12]
      break;
 8004012:	bf00      	nop
  }

  return ret;
 8004014:	68fb      	ldr	r3, [r7, #12]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop

08004020 <ISM330DHCX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b02      	cmp	r3, #2
 800402e:	dd0b      	ble.n	8004048 <ISM330DHCX_ACC_SetFullScale+0x28>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b04      	cmp	r3, #4
 8004034:	dd06      	ble.n	8004044 <ISM330DHCX_ACC_SetFullScale+0x24>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b08      	cmp	r3, #8
 800403a:	dc01      	bgt.n	8004040 <ISM330DHCX_ACC_SetFullScale+0x20>
 800403c:	2303      	movs	r3, #3
 800403e:	e004      	b.n	800404a <ISM330DHCX_ACC_SetFullScale+0x2a>
 8004040:	2301      	movs	r3, #1
 8004042:	e002      	b.n	800404a <ISM330DHCX_ACC_SetFullScale+0x2a>
 8004044:	2302      	movs	r3, #2
 8004046:	e000      	b.n	800404a <ISM330DHCX_ACC_SetFullScale+0x2a>
 8004048:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 800404a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	331c      	adds	r3, #28
 8004050:	7bfa      	ldrb	r2, [r7, #15]
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fd69 	bl	8004b2c <ism330dhcx_xl_full_scale_set>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 8004060:	f04f 33ff 	mov.w	r3, #4294967295
 8004064:	e000      	b.n	8004068 <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <ISM330DHCX_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	331c      	adds	r3, #28
 800407e:	f107 0208 	add.w	r2, r7, #8
 8004082:	4611      	mov	r1, r2
 8004084:	4618      	mov	r0, r3
 8004086:	f001 fa42 	bl	800550e <ism330dhcx_acceleration_raw_get>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8004090:	f04f 33ff 	mov.w	r3, #4294967295
 8004094:	e00c      	b.n	80040b0 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004096:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800409e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80040a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <ISM330DHCX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	331c      	adds	r3, #28
 80040cc:	f107 0210 	add.w	r2, r7, #16
 80040d0:	4611      	mov	r1, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f001 fa1b 	bl	800550e <ism330dhcx_acceleration_raw_get>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 80040de:	f04f 33ff 	mov.w	r3, #4294967295
 80040e2:	e03c      	b.n	800415e <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 80040e4:	f107 030c 	add.w	r3, r7, #12
 80040e8:	4619      	mov	r1, r3
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff fe7c 	bl	8003de8 <ISM330DHCX_ACC_GetSensitivity>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 80040f6:	f04f 33ff 	mov.w	r3, #4294967295
 80040fa:	e030      	b.n	800415e <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80040fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004100:	ee07 3a90 	vmov	s15, r3
 8004104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004108:	edd7 7a03 	vldr	s15, [r7, #12]
 800410c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004114:	ee17 2a90 	vmov	r2, s15
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800411c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004120:	ee07 3a90 	vmov	s15, r3
 8004124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004128:	edd7 7a03 	vldr	s15, [r7, #12]
 800412c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004134:	ee17 2a90 	vmov	r2, s15
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800413c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004140:	ee07 3a90 	vmov	s15, r3
 8004144:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004148:	edd7 7a03 	vldr	s15, [r7, #12]
 800414c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004154:	ee17 2a90 	vmov	r2, s15
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <ISM330DHCX_GYRO_Enable>:
  * @brief  Enable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	e014      	b.n	80041a6 <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f103 021c 	add.w	r2, r3, #28
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004188:	4619      	mov	r1, r3
 800418a:	4610      	mov	r0, r2
 800418c:	f000 ff7c 	bl	8005088 <ism330dhcx_gy_data_rate_set>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8004196:	f04f 33ff 	mov.w	r3, #4294967295
 800419a:	e004      	b.n	80041a6 <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <ISM330DHCX_GYRO_Disable>:
  * @brief  Disable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b082      	sub	sp, #8
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	e01f      	b.n	8004204 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f103 021c 	add.w	r2, r3, #28
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	332c      	adds	r3, #44	; 0x2c
 80041ce:	4619      	mov	r1, r3
 80041d0:	4610      	mov	r0, r2
 80041d2:	f001 f8c9 	bl	8005368 <ism330dhcx_gy_data_rate_get>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 80041dc:	f04f 33ff 	mov.w	r3, #4294967295
 80041e0:	e010      	b.n	8004204 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	331c      	adds	r3, #28
 80041e6:	2100      	movs	r1, #0
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 ff4d 	bl	8005088 <ism330dhcx_gy_data_rate_set>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 80041f4:	f04f 33ff 	mov.w	r3, #4294967295
 80041f8:	e004      	b.n	8004204 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <ISM330DHCX_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	331c      	adds	r3, #28
 800421e:	f107 020b 	add.w	r2, r7, #11
 8004222:	4611      	mov	r1, r2
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fedd 	bl	8004fe4 <ism330dhcx_gy_full_scale_get>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004230:	f04f 33ff 	mov.w	r3, #4294967295
 8004234:	e039      	b.n	80042aa <ISM330DHCX_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004236:	7afb      	ldrb	r3, [r7, #11]
 8004238:	2b0c      	cmp	r3, #12
 800423a:	d831      	bhi.n	80042a0 <ISM330DHCX_GYRO_GetSensitivity+0x94>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004281 	.word	0x08004281
 8004248:	080042a1 	.word	0x080042a1
 800424c:	08004279 	.word	0x08004279
 8004250:	080042a1 	.word	0x080042a1
 8004254:	08004289 	.word	0x08004289
 8004258:	080042a1 	.word	0x080042a1
 800425c:	080042a1 	.word	0x080042a1
 8004260:	080042a1 	.word	0x080042a1
 8004264:	08004291 	.word	0x08004291
 8004268:	080042a1 	.word	0x080042a1
 800426c:	080042a1 	.word	0x080042a1
 8004270:	080042a1 	.word	0x080042a1
 8004274:	08004299 	.word	0x08004299
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	4a0e      	ldr	r2, [pc, #56]	; (80042b4 <ISM330DHCX_GYRO_GetSensitivity+0xa8>)
 800427c:	601a      	str	r2, [r3, #0]
      break;
 800427e:	e013      	b.n	80042a8 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	4a0d      	ldr	r2, [pc, #52]	; (80042b8 <ISM330DHCX_GYRO_GetSensitivity+0xac>)
 8004284:	601a      	str	r2, [r3, #0]
      break;
 8004286:	e00f      	b.n	80042a8 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	4a0c      	ldr	r2, [pc, #48]	; (80042bc <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 800428c:	601a      	str	r2, [r3, #0]
      break;
 800428e:	e00b      	b.n	80042a8 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	4a0b      	ldr	r2, [pc, #44]	; (80042c0 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 8004294:	601a      	str	r2, [r3, #0]
      break;
 8004296:	e007      	b.n	80042a8 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	4a0a      	ldr	r2, [pc, #40]	; (80042c4 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 800429c:	601a      	str	r2, [r3, #0]
      break;
 800429e:	e003      	b.n	80042a8 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    default:
      ret = ISM330DHCX_ERROR;
 80042a0:	f04f 33ff 	mov.w	r3, #4294967295
 80042a4:	60fb      	str	r3, [r7, #12]
      break;
 80042a6:	bf00      	nop
  }

  return ret;
 80042a8:	68fb      	ldr	r3, [r7, #12]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	408c0000 	.word	0x408c0000
 80042b8:	410c0000 	.word	0x410c0000
 80042bc:	418c0000 	.word	0x418c0000
 80042c0:	420c0000 	.word	0x420c0000
 80042c4:	428c0000 	.word	0x428c0000

080042c8 <ISM330DHCX_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	331c      	adds	r3, #28
 80042da:	f107 020b 	add.w	r2, r7, #11
 80042de:	4611      	mov	r1, r2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 f841 	bl	8005368 <ism330dhcx_gy_data_rate_get>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 80042ec:	f04f 33ff 	mov.w	r3, #4294967295
 80042f0:	e04e      	b.n	8004390 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80042f2:	7afb      	ldrb	r3, [r7, #11]
 80042f4:	2b0a      	cmp	r3, #10
 80042f6:	d846      	bhi.n	8004386 <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 80042f8:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	0800432d 	.word	0x0800432d
 8004304:	08004337 	.word	0x08004337
 8004308:	0800433f 	.word	0x0800433f
 800430c:	08004347 	.word	0x08004347
 8004310:	0800434f 	.word	0x0800434f
 8004314:	08004357 	.word	0x08004357
 8004318:	0800435f 	.word	0x0800435f
 800431c:	08004367 	.word	0x08004367
 8004320:	0800436f 	.word	0x0800436f
 8004324:	08004377 	.word	0x08004377
 8004328:	0800437f 	.word	0x0800437f
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
      break;
 8004334:	e02b      	b.n	800438e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	4a17      	ldr	r2, [pc, #92]	; (8004398 <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 800433a:	601a      	str	r2, [r3, #0]
      break;
 800433c:	e027      	b.n	800438e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	4a16      	ldr	r2, [pc, #88]	; (800439c <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 8004342:	601a      	str	r2, [r3, #0]
      break;
 8004344:	e023      	b.n	800438e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	4a15      	ldr	r2, [pc, #84]	; (80043a0 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 800434a:	601a      	str	r2, [r3, #0]
      break;
 800434c:	e01f      	b.n	800438e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	4a14      	ldr	r2, [pc, #80]	; (80043a4 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 8004352:	601a      	str	r2, [r3, #0]
      break;
 8004354:	e01b      	b.n	800438e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	4a13      	ldr	r2, [pc, #76]	; (80043a8 <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 800435a:	601a      	str	r2, [r3, #0]
      break;
 800435c:	e017      	b.n	800438e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_416Hz:
      *Odr = 416.0f;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	4a12      	ldr	r2, [pc, #72]	; (80043ac <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 8004362:	601a      	str	r2, [r3, #0]
      break;
 8004364:	e013      	b.n	800438e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	4a11      	ldr	r2, [pc, #68]	; (80043b0 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 800436a:	601a      	str	r2, [r3, #0]
      break;
 800436c:	e00f      	b.n	800438e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1666Hz:
      *Odr =  1666.0f;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	4a10      	ldr	r2, [pc, #64]	; (80043b4 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 8004372:	601a      	str	r2, [r3, #0]
      break;
 8004374:	e00b      	b.n	800438e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3332Hz:
      *Odr =  3332.0f;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	4a0f      	ldr	r2, [pc, #60]	; (80043b8 <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 800437a:	601a      	str	r2, [r3, #0]
      break;
 800437c:	e007      	b.n	800438e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	4a0e      	ldr	r2, [pc, #56]	; (80043bc <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 8004382:	601a      	str	r2, [r3, #0]
      break;
 8004384:	e003      	b.n	800438e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8004386:	f04f 33ff 	mov.w	r3, #4294967295
 800438a:	60fb      	str	r3, [r7, #12]
      break;
 800438c:	bf00      	nop
  }

  return ret;
 800438e:	68fb      	ldr	r3, [r7, #12]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	41480000 	.word	0x41480000
 800439c:	41d00000 	.word	0x41d00000
 80043a0:	42500000 	.word	0x42500000
 80043a4:	42d00000 	.word	0x42d00000
 80043a8:	43500000 	.word	0x43500000
 80043ac:	43d00000 	.word	0x43d00000
 80043b0:	44504000 	.word	0x44504000
 80043b4:	44d04000 	.word	0x44d04000
 80043b8:	45504000 	.word	0x45504000
 80043bc:	45d05800 	.word	0x45d05800

080043c0 <ISM330DHCX_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d106      	bne.n	80043e4 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80043d6:	ed97 0a00 	vldr	s0, [r7]
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fa32 	bl	8004844 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 80043e0:	4603      	mov	r3, r0
 80043e2:	e005      	b.n	80043f0 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80043e4:	ed97 0a00 	vldr	s0, [r7]
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fab7 	bl	800495c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 80043ee:	4603      	mov	r3, r0
  }
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <ISM330DHCX_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	331c      	adds	r3, #28
 800440a:	f107 020b 	add.w	r2, r7, #11
 800440e:	4611      	mov	r1, r2
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fde7 	bl	8004fe4 <ism330dhcx_gy_full_scale_get>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 800441c:	f04f 33ff 	mov.w	r3, #4294967295
 8004420:	e03c      	b.n	800449c <ISM330DHCX_GYRO_GetFullScale+0xa4>
  }

  switch (fs_low_level)
 8004422:	7afb      	ldrb	r3, [r7, #11]
 8004424:	2b0c      	cmp	r3, #12
 8004426:	d834      	bhi.n	8004492 <ISM330DHCX_GYRO_GetFullScale+0x9a>
 8004428:	a201      	add	r2, pc, #4	; (adr r2, 8004430 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 800442a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442e:	bf00      	nop
 8004430:	0800446d 	.word	0x0800446d
 8004434:	08004493 	.word	0x08004493
 8004438:	08004465 	.word	0x08004465
 800443c:	08004493 	.word	0x08004493
 8004440:	08004475 	.word	0x08004475
 8004444:	08004493 	.word	0x08004493
 8004448:	08004493 	.word	0x08004493
 800444c:	08004493 	.word	0x08004493
 8004450:	0800447f 	.word	0x0800447f
 8004454:	08004493 	.word	0x08004493
 8004458:	08004493 	.word	0x08004493
 800445c:	08004493 	.word	0x08004493
 8004460:	08004489 	.word	0x08004489
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	227d      	movs	r2, #125	; 0x7d
 8004468:	601a      	str	r2, [r3, #0]
      break;
 800446a:	e016      	b.n	800449a <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	22fa      	movs	r2, #250	; 0xfa
 8004470:	601a      	str	r2, [r3, #0]
      break;
 8004472:	e012      	b.n	800449a <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800447a:	601a      	str	r2, [r3, #0]
      break;
 800447c:	e00d      	b.n	800449a <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004484:	601a      	str	r2, [r3, #0]
      break;
 8004486:	e008      	b.n	800449a <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800448e:	601a      	str	r2, [r3, #0]
      break;
 8004490:	e003      	b.n	800449a <ISM330DHCX_GYRO_GetFullScale+0xa2>

    default:
      ret = ISM330DHCX_ERROR;
 8004492:	f04f 33ff 	mov.w	r3, #4294967295
 8004496:	60fb      	str	r3, [r7, #12]
      break;
 8004498:	bf00      	nop
  }

  return ret;
 800449a:	68fb      	ldr	r3, [r7, #12]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <ISM330DHCX_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b7d      	cmp	r3, #125	; 0x7d
 80044b2:	dd12      	ble.n	80044da <ISM330DHCX_GYRO_SetFullScale+0x36>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2bfa      	cmp	r3, #250	; 0xfa
 80044b8:	dd0d      	ble.n	80044d6 <ISM330DHCX_GYRO_SetFullScale+0x32>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044c0:	dd07      	ble.n	80044d2 <ISM330DHCX_GYRO_SetFullScale+0x2e>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044c8:	dc01      	bgt.n	80044ce <ISM330DHCX_GYRO_SetFullScale+0x2a>
 80044ca:	2308      	movs	r3, #8
 80044cc:	e006      	b.n	80044dc <ISM330DHCX_GYRO_SetFullScale+0x38>
 80044ce:	230c      	movs	r3, #12
 80044d0:	e004      	b.n	80044dc <ISM330DHCX_GYRO_SetFullScale+0x38>
 80044d2:	2304      	movs	r3, #4
 80044d4:	e002      	b.n	80044dc <ISM330DHCX_GYRO_SetFullScale+0x38>
 80044d6:	2300      	movs	r3, #0
 80044d8:	e000      	b.n	80044dc <ISM330DHCX_GYRO_SetFullScale+0x38>
 80044da:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 80044dc:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           :                       ISM330DHCX_2000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	331c      	adds	r3, #28
 80044e2:	7bfa      	ldrb	r2, [r7, #15]
 80044e4:	4611      	mov	r1, r2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fd56 	bl	8004f98 <ism330dhcx_gy_full_scale_set>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <ISM330DHCX_GYRO_SetFullScale+0x54>
  {
    return ISM330DHCX_ERROR;
 80044f2:	f04f 33ff 	mov.w	r3, #4294967295
 80044f6:	e000      	b.n	80044fa <ISM330DHCX_GYRO_SetFullScale+0x56>
  }

  return ISM330DHCX_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <ISM330DHCX_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	331c      	adds	r3, #28
 8004510:	f107 0208 	add.w	r2, r7, #8
 8004514:	4611      	mov	r1, r2
 8004516:	4618      	mov	r0, r3
 8004518:	f000 ffae 	bl	8005478 <ism330dhcx_angular_rate_raw_get>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8004522:	f04f 33ff 	mov.w	r3, #4294967295
 8004526:	e00c      	b.n	8004542 <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004528:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004530:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004538:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <ISM330DHCX_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b086      	sub	sp, #24
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	331c      	adds	r3, #28
 8004558:	f107 0210 	add.w	r2, r7, #16
 800455c:	4611      	mov	r1, r2
 800455e:	4618      	mov	r0, r3
 8004560:	f000 ff8a 	bl	8005478 <ism330dhcx_angular_rate_raw_get>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 800456a:	f04f 33ff 	mov.w	r3, #4294967295
 800456e:	e03c      	b.n	80045ea <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8004570:	f107 030c 	add.w	r3, r7, #12
 8004574:	4619      	mov	r1, r3
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff fe48 	bl	800420c <ISM330DHCX_GYRO_GetSensitivity>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 8004582:	f04f 33ff 	mov.w	r3, #4294967295
 8004586:	e030      	b.n	80045ea <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004588:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800458c:	ee07 3a90 	vmov	s15, r3
 8004590:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004594:	edd7 7a03 	vldr	s15, [r7, #12]
 8004598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045a0:	ee17 2a90 	vmov	r2, s15
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80045a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80045ac:	ee07 3a90 	vmov	s15, r3
 80045b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80045b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045c0:	ee17 2a90 	vmov	r2, s15
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80045c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80045cc:	ee07 3a90 	vmov	s15, r3
 80045d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80045d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045e0:	ee17 2a90 	vmov	r2, s15
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <ISM330DHCX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	460b      	mov	r3, r1
 80045fc:	70fb      	strb	r3, [r7, #3]
 80045fe:	4613      	mov	r3, r2
 8004600:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f103 001c 	add.w	r0, r3, #28
 8004608:	1cba      	adds	r2, r7, #2
 800460a:	78f9      	ldrb	r1, [r7, #3]
 800460c:	2301      	movs	r3, #1
 800460e:	f000 fa75 	bl	8004afc <ism330dhcx_write_reg>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004618:	f04f 33ff 	mov.w	r3, #4294967295
 800461c:	e000      	b.n	8004620 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8004634:	edd7 7a00 	vldr	s15, [r7]
 8004638:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800463c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004644:	d801      	bhi.n	800464a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004646:	2301      	movs	r3, #1
 8004648:	e058      	b.n	80046fc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800464a:	edd7 7a00 	vldr	s15, [r7]
 800464e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465a:	d801      	bhi.n	8004660 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 800465c:	2302      	movs	r3, #2
 800465e:	e04d      	b.n	80046fc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004660:	edd7 7a00 	vldr	s15, [r7]
 8004664:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004724 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800466c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004670:	d801      	bhi.n	8004676 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004672:	2303      	movs	r3, #3
 8004674:	e042      	b.n	80046fc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004676:	edd7 7a00 	vldr	s15, [r7]
 800467a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004728 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 800467e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004686:	d801      	bhi.n	800468c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004688:	2304      	movs	r3, #4
 800468a:	e037      	b.n	80046fc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800468c:	edd7 7a00 	vldr	s15, [r7]
 8004690:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800472c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469c:	d801      	bhi.n	80046a2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800469e:	2305      	movs	r3, #5
 80046a0:	e02c      	b.n	80046fc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80046a2:	edd7 7a00 	vldr	s15, [r7]
 80046a6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004730 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 80046aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b2:	d801      	bhi.n	80046b8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 80046b4:	2306      	movs	r3, #6
 80046b6:	e021      	b.n	80046fc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80046b8:	edd7 7a00 	vldr	s15, [r7]
 80046bc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004734 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80046c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c8:	d801      	bhi.n	80046ce <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80046ca:	2307      	movs	r3, #7
 80046cc:	e016      	b.n	80046fc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80046ce:	edd7 7a00 	vldr	s15, [r7]
 80046d2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004738 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 80046d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046de:	d801      	bhi.n	80046e4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80046e0:	2308      	movs	r3, #8
 80046e2:	e00b      	b.n	80046fc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80046e4:	edd7 7a00 	vldr	s15, [r7]
 80046e8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800473c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 80046ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f4:	d801      	bhi.n	80046fa <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80046f6:	2309      	movs	r3, #9
 80046f8:	e000      	b.n	80046fc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80046fa:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80046fc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
            :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	331c      	adds	r3, #28
 8004702:	7bfa      	ldrb	r2, [r7, #15]
 8004704:	4611      	mov	r1, r2
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fa6e 	bl	8004be8 <ism330dhcx_xl_data_rate_set>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8004712:	f04f 33ff 	mov.w	r3, #4294967295
 8004716:	e000      	b.n	800471a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	42500000 	.word	0x42500000
 8004728:	42d00000 	.word	0x42d00000
 800472c:	43500000 	.word	0x43500000
 8004730:	43d00000 	.word	0x43d00000
 8004734:	44504000 	.word	0x44504000
 8004738:	44d04000 	.word	0x44d04000
 800473c:	45504000 	.word	0x45504000

08004740 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 800474c:	edd7 7a00 	vldr	s15, [r7]
 8004750:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475c:	d801      	bhi.n	8004762 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 800475e:	2301      	movs	r3, #1
 8004760:	e058      	b.n	8004814 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004762:	edd7 7a00 	vldr	s15, [r7]
 8004766:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800476a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800476e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004772:	d801      	bhi.n	8004778 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004774:	2302      	movs	r3, #2
 8004776:	e04d      	b.n	8004814 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004778:	edd7 7a00 	vldr	s15, [r7]
 800477c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004828 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004788:	d801      	bhi.n	800478e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800478a:	2303      	movs	r3, #3
 800478c:	e042      	b.n	8004814 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800478e:	edd7 7a00 	vldr	s15, [r7]
 8004792:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800482c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800479a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800479e:	d801      	bhi.n	80047a4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 80047a0:	2304      	movs	r3, #4
 80047a2:	e037      	b.n	8004814 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80047a4:	edd7 7a00 	vldr	s15, [r7]
 80047a8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004830 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80047ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b4:	d801      	bhi.n	80047ba <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80047b6:	2305      	movs	r3, #5
 80047b8:	e02c      	b.n	8004814 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80047ba:	edd7 7a00 	vldr	s15, [r7]
 80047be:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004834 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80047c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ca:	d801      	bhi.n	80047d0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 80047cc:	2306      	movs	r3, #6
 80047ce:	e021      	b.n	8004814 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80047d0:	edd7 7a00 	vldr	s15, [r7]
 80047d4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004838 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80047d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e0:	d801      	bhi.n	80047e6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80047e2:	2307      	movs	r3, #7
 80047e4:	e016      	b.n	8004814 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80047e6:	edd7 7a00 	vldr	s15, [r7]
 80047ea:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800483c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80047ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f6:	d801      	bhi.n	80047fc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80047f8:	2308      	movs	r3, #8
 80047fa:	e00b      	b.n	8004814 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80047fc:	edd7 7a00 	vldr	s15, [r7]
 8004800:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004840 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480c:	d801      	bhi.n	8004812 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800480e:	2309      	movs	r3, #9
 8004810:	e000      	b.n	8004814 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004812:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                  : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                  : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
                  : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
                  :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	42500000 	.word	0x42500000
 800482c:	42d00000 	.word	0x42d00000
 8004830:	43500000 	.word	0x43500000
 8004834:	43d00000 	.word	0x43d00000
 8004838:	44504000 	.word	0x44504000
 800483c:	44d04000 	.word	0x44d04000
 8004840:	45504000 	.word	0x45504000

08004844 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8004850:	edd7 7a00 	vldr	s15, [r7]
 8004854:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800485c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004860:	d801      	bhi.n	8004866 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004862:	2301      	movs	r3, #1
 8004864:	e058      	b.n	8004918 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004866:	edd7 7a00 	vldr	s15, [r7]
 800486a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800486e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004876:	d801      	bhi.n	800487c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004878:	2302      	movs	r3, #2
 800487a:	e04d      	b.n	8004918 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800487c:	edd7 7a00 	vldr	s15, [r7]
 8004880:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004940 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800488c:	d801      	bhi.n	8004892 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800488e:	2303      	movs	r3, #3
 8004890:	e042      	b.n	8004918 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004892:	edd7 7a00 	vldr	s15, [r7]
 8004896:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004944 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800489a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800489e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a2:	d801      	bhi.n	80048a8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80048a4:	2304      	movs	r3, #4
 80048a6:	e037      	b.n	8004918 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048a8:	edd7 7a00 	vldr	s15, [r7]
 80048ac:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004948 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80048b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b8:	d801      	bhi.n	80048be <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80048ba:	2305      	movs	r3, #5
 80048bc:	e02c      	b.n	8004918 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048be:	edd7 7a00 	vldr	s15, [r7]
 80048c2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800494c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80048c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ce:	d801      	bhi.n	80048d4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80048d0:	2306      	movs	r3, #6
 80048d2:	e021      	b.n	8004918 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048d4:	edd7 7a00 	vldr	s15, [r7]
 80048d8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004950 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80048dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e4:	d801      	bhi.n	80048ea <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80048e6:	2307      	movs	r3, #7
 80048e8:	e016      	b.n	8004918 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048ea:	edd7 7a00 	vldr	s15, [r7]
 80048ee:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004954 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80048f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048fa:	d801      	bhi.n	8004900 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80048fc:	2308      	movs	r3, #8
 80048fe:	e00b      	b.n	8004918 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004900:	edd7 7a00 	vldr	s15, [r7]
 8004904:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004958 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800490c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004910:	d801      	bhi.n	8004916 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004912:	2309      	movs	r3, #9
 8004914:	e000      	b.n	8004918 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004916:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8004918:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
            :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	331c      	adds	r3, #28
 800491e:	7bfa      	ldrb	r2, [r7, #15]
 8004920:	4611      	mov	r1, r2
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fbb0 	bl	8005088 <ism330dhcx_gy_data_rate_set>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 800492e:	f04f 33ff 	mov.w	r3, #4294967295
 8004932:	e000      	b.n	8004936 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	42500000 	.word	0x42500000
 8004944:	42d00000 	.word	0x42d00000
 8004948:	43500000 	.word	0x43500000
 800494c:	43d00000 	.word	0x43d00000
 8004950:	44504000 	.word	0x44504000
 8004954:	44d04000 	.word	0x44d04000
 8004958:	45504000 	.word	0x45504000

0800495c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8004968:	edd7 7a00 	vldr	s15, [r7]
 800496c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004978:	d801      	bhi.n	800497e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800497a:	2301      	movs	r3, #1
 800497c:	e058      	b.n	8004a30 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800497e:	edd7 7a00 	vldr	s15, [r7]
 8004982:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800498a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800498e:	d801      	bhi.n	8004994 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004990:	2302      	movs	r3, #2
 8004992:	e04d      	b.n	8004a30 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004994:	edd7 7a00 	vldr	s15, [r7]
 8004998:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004a44 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800499c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a4:	d801      	bhi.n	80049aa <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80049a6:	2303      	movs	r3, #3
 80049a8:	e042      	b.n	8004a30 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049aa:	edd7 7a00 	vldr	s15, [r7]
 80049ae:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004a48 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80049b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ba:	d801      	bhi.n	80049c0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80049bc:	2304      	movs	r3, #4
 80049be:	e037      	b.n	8004a30 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049c0:	edd7 7a00 	vldr	s15, [r7]
 80049c4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004a4c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80049c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d0:	d801      	bhi.n	80049d6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80049d2:	2305      	movs	r3, #5
 80049d4:	e02c      	b.n	8004a30 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049d6:	edd7 7a00 	vldr	s15, [r7]
 80049da:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004a50 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80049de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e6:	d801      	bhi.n	80049ec <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80049e8:	2306      	movs	r3, #6
 80049ea:	e021      	b.n	8004a30 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049ec:	edd7 7a00 	vldr	s15, [r7]
 80049f0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004a54 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80049f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049fc:	d801      	bhi.n	8004a02 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80049fe:	2307      	movs	r3, #7
 8004a00:	e016      	b.n	8004a30 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a02:	edd7 7a00 	vldr	s15, [r7]
 8004a06:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004a58 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a12:	d801      	bhi.n	8004a18 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004a14:	2308      	movs	r3, #8
 8004a16:	e00b      	b.n	8004a30 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a18:	edd7 7a00 	vldr	s15, [r7]
 8004a1c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004a5c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a28:	d801      	bhi.n	8004a2e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004a2a:	2309      	movs	r3, #9
 8004a2c:	e000      	b.n	8004a30 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a2e:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                   : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                   : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
                   : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
                   :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	42500000 	.word	0x42500000
 8004a48:	42d00000 	.word	0x42d00000
 8004a4c:	43500000 	.word	0x43500000
 8004a50:	43d00000 	.word	0x43d00000
 8004a54:	44504000 	.word	0x44504000
 8004a58:	44d04000 	.word	0x44d04000
 8004a5c:	45504000 	.word	0x45504000

08004a60 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a60:	b590      	push	{r4, r7, lr}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	607a      	str	r2, [r7, #4]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	72fb      	strb	r3, [r7, #11]
 8004a70:	4613      	mov	r3, r2
 8004a72:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	695c      	ldr	r4, [r3, #20]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	7b1b      	ldrb	r3, [r3, #12]
 8004a80:	b298      	uxth	r0, r3
 8004a82:	7afb      	ldrb	r3, [r7, #11]
 8004a84:	b299      	uxth	r1, r3
 8004a86:	893b      	ldrh	r3, [r7, #8]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	47a0      	blx	r4
 8004a8c:	4603      	mov	r3, r0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd90      	pop	{r4, r7, pc}

08004a96 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a96:	b590      	push	{r4, r7, lr}
 8004a98:	b087      	sub	sp, #28
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	72fb      	strb	r3, [r7, #11]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	691c      	ldr	r4, [r3, #16]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	7b1b      	ldrb	r3, [r3, #12]
 8004ab6:	b298      	uxth	r0, r3
 8004ab8:	7afb      	ldrb	r3, [r7, #11]
 8004aba:	b299      	uxth	r1, r3
 8004abc:	893b      	ldrh	r3, [r7, #8]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	47a0      	blx	r4
 8004ac2:	4603      	mov	r3, r0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd90      	pop	{r4, r7, pc}

08004acc <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8004acc:	b590      	push	{r4, r7, lr}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	607a      	str	r2, [r7, #4]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	460b      	mov	r3, r1
 8004ada:	72fb      	strb	r3, [r7, #11]
 8004adc:	4613      	mov	r3, r2
 8004ade:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	685c      	ldr	r4, [r3, #4]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6898      	ldr	r0, [r3, #8]
 8004ae8:	893b      	ldrh	r3, [r7, #8]
 8004aea:	7af9      	ldrb	r1, [r7, #11]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	47a0      	blx	r4
 8004af0:	6178      	str	r0, [r7, #20]

  return ret;
 8004af2:	697b      	ldr	r3, [r7, #20]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	371c      	adds	r7, #28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd90      	pop	{r4, r7, pc}

08004afc <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 8004afc:	b590      	push	{r4, r7, lr}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	607a      	str	r2, [r7, #4]
 8004b06:	461a      	mov	r2, r3
 8004b08:	460b      	mov	r3, r1
 8004b0a:	72fb      	strb	r3, [r7, #11]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681c      	ldr	r4, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6898      	ldr	r0, [r3, #8]
 8004b18:	893b      	ldrh	r3, [r7, #8]
 8004b1a:	7af9      	ldrb	r1, [r7, #11]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	47a0      	blx	r4
 8004b20:	6178      	str	r0, [r7, #20]

  return ret;
 8004b22:	697b      	ldr	r3, [r7, #20]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	371c      	adds	r7, #28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd90      	pop	{r4, r7, pc}

08004b2c <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004b38:	f107 0208 	add.w	r2, r7, #8
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	2110      	movs	r1, #16
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ffc3 	bl	8004acc <ism330dhcx_read_reg>
 8004b46:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10f      	bne.n	8004b6e <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	7a3b      	ldrb	r3, [r7, #8]
 8004b58:	f362 0383 	bfi	r3, r2, #2, #2
 8004b5c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004b5e:	f107 0208 	add.w	r2, r7, #8
 8004b62:	2301      	movs	r3, #1
 8004b64:	2110      	movs	r1, #16
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff ffc8 	bl	8004afc <ism330dhcx_write_reg>
 8004b6c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004b82:	f107 0208 	add.w	r2, r7, #8
 8004b86:	2301      	movs	r3, #1
 8004b88:	2110      	movs	r1, #16
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff ff9e 	bl	8004acc <ism330dhcx_read_reg>
 8004b90:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 8004b92:	7a3b      	ldrb	r3, [r7, #8]
 8004b94:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d81a      	bhi.n	8004bd4 <ism330dhcx_xl_full_scale_get+0x5c>
 8004b9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <ism330dhcx_xl_full_scale_get+0x2c>)
 8004ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba4:	08004bb5 	.word	0x08004bb5
 8004ba8:	08004bbd 	.word	0x08004bbd
 8004bac:	08004bc5 	.word	0x08004bc5
 8004bb0:	08004bcd 	.word	0x08004bcd
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	701a      	strb	r2, [r3, #0]
      break;
 8004bba:	e00f      	b.n	8004bdc <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	701a      	strb	r2, [r3, #0]
      break;
 8004bc2:	e00b      	b.n	8004bdc <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	701a      	strb	r2, [r3, #0]
      break;
 8004bca:	e007      	b.n	8004bdc <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2203      	movs	r2, #3
 8004bd0:	701a      	strb	r2, [r3, #0]
      break;
 8004bd2:	e003      	b.n	8004bdc <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	701a      	strb	r2, [r3, #0]
      break;
 8004bda:	bf00      	nop
  }

  return ret;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop

08004be8 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8004bf8:	f107 030c 	add.w	r3, r7, #12
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fd9f 	bl	8005742 <ism330dhcx_fsm_enable_get>
 8004c04:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f040 80c4 	bne.w	8004d96 <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c0e:	7b3b      	ldrb	r3, [r7, #12]
 8004c10:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004c16:	7b3b      	ldrb	r3, [r7, #12]
 8004c18:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004c1c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004c22:	7b3b      	ldrb	r3, [r7, #12]
 8004c24:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004c28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004c2e:	7b3b      	ldrb	r3, [r7, #12]
 8004c30:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004c34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004c36:	4313      	orrs	r3, r2
 8004c38:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004c3a:	7b3b      	ldrb	r3, [r7, #12]
 8004c3c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004c40:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004c42:	4313      	orrs	r3, r2
 8004c44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004c46:	7b3b      	ldrb	r3, [r7, #12]
 8004c48:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004c4c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004c52:	7b3b      	ldrb	r3, [r7, #12]
 8004c54:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004c58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004c5e:	7b3b      	ldrb	r3, [r7, #12]
 8004c60:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004c64:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004c66:	4313      	orrs	r3, r2
 8004c68:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004c6a:	7b7b      	ldrb	r3, [r7, #13]
 8004c6c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c70:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004c72:	4313      	orrs	r3, r2
 8004c74:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004c76:	7b7b      	ldrb	r3, [r7, #13]
 8004c78:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004c7c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004c82:	7b7b      	ldrb	r3, [r7, #13]
 8004c84:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004c88:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004c8e:	7b7b      	ldrb	r3, [r7, #13]
 8004c90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004c94:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004c96:	4313      	orrs	r3, r2
 8004c98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004c9a:	7b7b      	ldrb	r3, [r7, #13]
 8004c9c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004ca0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004ca6:	7b7b      	ldrb	r3, [r7, #13]
 8004ca8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004cac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004cb2:	7b7b      	ldrb	r3, [r7, #13]
 8004cb4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004cb8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004cbe:	7b7b      	ldrb	r3, [r7, #13]
 8004cc0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004cc4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d163      	bne.n	8004d96 <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8004cce:	f107 030b 	add.w	r3, r7, #11
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fd61 	bl	800579c <ism330dhcx_fsm_data_rate_get>
 8004cda:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d159      	bne.n	8004d96 <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004ce2:	7afb      	ldrb	r3, [r7, #11]
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d853      	bhi.n	8004d90 <ism330dhcx_xl_data_rate_set+0x1a8>
 8004ce8:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <ism330dhcx_xl_data_rate_set+0x108>)
 8004cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cee:	bf00      	nop
 8004cf0:	08004d01 	.word	0x08004d01
 8004cf4:	08004d13 	.word	0x08004d13
 8004cf8:	08004d31 	.word	0x08004d31
 8004cfc:	08004d5b 	.word	0x08004d5b
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d102      	bne.n	8004d0c <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8004d06:	2301      	movs	r3, #1
 8004d08:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004d0a:	e045      	b.n	8004d98 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	75fb      	strb	r3, [r7, #23]
            break;
 8004d10:	e042      	b.n	8004d98 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004d12:	78fb      	ldrb	r3, [r7, #3]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8004d18:	2302      	movs	r3, #2
 8004d1a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004d1c:	e03c      	b.n	8004d98 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d102      	bne.n	8004d2a <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8004d24:	2302      	movs	r3, #2
 8004d26:	75fb      	strb	r3, [r7, #23]
            break;
 8004d28:	e036      	b.n	8004d98 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	75fb      	strb	r3, [r7, #23]
            break;
 8004d2e:	e033      	b.n	8004d98 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d102      	bne.n	8004d3c <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004d36:	2303      	movs	r3, #3
 8004d38:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004d3a:	e02d      	b.n	8004d98 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d102      	bne.n	8004d48 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004d42:	2303      	movs	r3, #3
 8004d44:	75fb      	strb	r3, [r7, #23]
            break;
 8004d46:	e027      	b.n	8004d98 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d102      	bne.n	8004d54 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	75fb      	strb	r3, [r7, #23]
            break;
 8004d52:	e021      	b.n	8004d98 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	75fb      	strb	r3, [r7, #23]
            break;
 8004d58:	e01e      	b.n	8004d98 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004d60:	2304      	movs	r3, #4
 8004d62:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004d64:	e018      	b.n	8004d98 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d102      	bne.n	8004d72 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	75fb      	strb	r3, [r7, #23]
            break;
 8004d70:	e012      	b.n	8004d98 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d102      	bne.n	8004d7e <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004d78:	2304      	movs	r3, #4
 8004d7a:	75fb      	strb	r3, [r7, #23]
            break;
 8004d7c:	e00c      	b.n	8004d98 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d102      	bne.n	8004d8a <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004d84:	2304      	movs	r3, #4
 8004d86:	75fb      	strb	r3, [r7, #23]
            break;
 8004d88:	e006      	b.n	8004d98 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004d8a:	78fb      	ldrb	r3, [r7, #3]
 8004d8c:	75fb      	strb	r3, [r7, #23]
            break;
 8004d8e:	e003      	b.n	8004d98 <ism330dhcx_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	75fb      	strb	r3, [r7, #23]
            break;
 8004d94:	e000      	b.n	8004d98 <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 8004d96:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d16d      	bne.n	8004e7e <ism330dhcx_xl_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8004da2:	f107 030a 	add.w	r3, r7, #10
 8004da6:	4619      	mov	r1, r3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fd3f 	bl	800582c <ism330dhcx_mlc_get>
 8004dae:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8004db0:	7abb      	ldrb	r3, [r7, #10]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d163      	bne.n	8004e7e <ism330dhcx_xl_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8004db6:	f107 0309 	add.w	r3, r7, #9
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fd5f 	bl	8005880 <ism330dhcx_mlc_data_rate_get>
 8004dc2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d159      	bne.n	8004e7e <ism330dhcx_xl_data_rate_set+0x296>
      {
        switch (mlc_odr)
 8004dca:	7a7b      	ldrb	r3, [r7, #9]
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d853      	bhi.n	8004e78 <ism330dhcx_xl_data_rate_set+0x290>
 8004dd0:	a201      	add	r2, pc, #4	; (adr r2, 8004dd8 <ism330dhcx_xl_data_rate_set+0x1f0>)
 8004dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd6:	bf00      	nop
 8004dd8:	08004de9 	.word	0x08004de9
 8004ddc:	08004dfb 	.word	0x08004dfb
 8004de0:	08004e19 	.word	0x08004e19
 8004de4:	08004e43 	.word	0x08004e43
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d102      	bne.n	8004df4 <ism330dhcx_xl_data_rate_set+0x20c>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8004dee:	2301      	movs	r3, #1
 8004df0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004df2:	e045      	b.n	8004e80 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	75fb      	strb	r3, [r7, #23]
            break;
 8004df8:	e042      	b.n	8004e80 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d102      	bne.n	8004e06 <ism330dhcx_xl_data_rate_set+0x21e>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8004e00:	2302      	movs	r3, #2
 8004e02:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004e04:	e03c      	b.n	8004e80 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004e06:	78fb      	ldrb	r3, [r7, #3]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d102      	bne.n	8004e12 <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	75fb      	strb	r3, [r7, #23]
            break;
 8004e10:	e036      	b.n	8004e80 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	75fb      	strb	r3, [r7, #23]
            break;
 8004e16:	e033      	b.n	8004e80 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004e18:	78fb      	ldrb	r3, [r7, #3]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d102      	bne.n	8004e24 <ism330dhcx_xl_data_rate_set+0x23c>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004e22:	e02d      	b.n	8004e80 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d102      	bne.n	8004e30 <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	75fb      	strb	r3, [r7, #23]
            break;
 8004e2e:	e027      	b.n	8004e80 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d102      	bne.n	8004e3c <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004e36:	2303      	movs	r3, #3
 8004e38:	75fb      	strb	r3, [r7, #23]
            break;
 8004e3a:	e021      	b.n	8004e80 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	75fb      	strb	r3, [r7, #23]
            break;
 8004e40:	e01e      	b.n	8004e80 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d102      	bne.n	8004e4e <ism330dhcx_xl_data_rate_set+0x266>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004e48:	2304      	movs	r3, #4
 8004e4a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004e4c:	e018      	b.n	8004e80 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004e4e:	78fb      	ldrb	r3, [r7, #3]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d102      	bne.n	8004e5a <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004e54:	2304      	movs	r3, #4
 8004e56:	75fb      	strb	r3, [r7, #23]
            break;
 8004e58:	e012      	b.n	8004e80 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8004e5a:	78fb      	ldrb	r3, [r7, #3]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d102      	bne.n	8004e66 <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004e60:	2304      	movs	r3, #4
 8004e62:	75fb      	strb	r3, [r7, #23]
            break;
 8004e64:	e00c      	b.n	8004e80 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d102      	bne.n	8004e72 <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004e6c:	2304      	movs	r3, #4
 8004e6e:	75fb      	strb	r3, [r7, #23]
            break;
 8004e70:	e006      	b.n	8004e80 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8004e72:	78fb      	ldrb	r3, [r7, #3]
 8004e74:	75fb      	strb	r3, [r7, #23]
            break;
 8004e76:	e003      	b.n	8004e80 <ism330dhcx_xl_data_rate_set+0x298>

          default:
            odr_xl = val;
 8004e78:	78fb      	ldrb	r3, [r7, #3]
 8004e7a:	75fb      	strb	r3, [r7, #23]
            break;
 8004e7c:	e000      	b.n	8004e80 <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 8004e7e:	bf00      	nop
    }
  }

  if (ret == 0)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d107      	bne.n	8004e96 <ism330dhcx_xl_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004e86:	f107 0208 	add.w	r2, r7, #8
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	2110      	movs	r1, #16
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff fe1c 	bl	8004acc <ism330dhcx_read_reg>
 8004e94:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10f      	bne.n	8004ebc <ism330dhcx_xl_data_rate_set+0x2d4>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8004e9c:	7dfb      	ldrb	r3, [r7, #23]
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	7a3b      	ldrb	r3, [r7, #8]
 8004ea6:	f362 1307 	bfi	r3, r2, #4, #4
 8004eaa:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004eac:	f107 0208 	add.w	r2, r7, #8
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	2110      	movs	r1, #16
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff fe21 	bl	8004afc <ism330dhcx_write_reg>
 8004eba:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004ebc:	693b      	ldr	r3, [r7, #16]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop

08004ec8 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004ed2:	f107 0208 	add.w	r2, r7, #8
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	2110      	movs	r1, #16
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff fdf6 	bl	8004acc <ism330dhcx_read_reg>
 8004ee0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl)
 8004ee2:	7a3b      	ldrb	r3, [r7, #8]
 8004ee4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b0b      	cmp	r3, #11
 8004eec:	d84a      	bhi.n	8004f84 <ism330dhcx_xl_data_rate_get+0xbc>
 8004eee:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <ism330dhcx_xl_data_rate_get+0x2c>)
 8004ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef4:	08004f25 	.word	0x08004f25
 8004ef8:	08004f2d 	.word	0x08004f2d
 8004efc:	08004f35 	.word	0x08004f35
 8004f00:	08004f3d 	.word	0x08004f3d
 8004f04:	08004f45 	.word	0x08004f45
 8004f08:	08004f4d 	.word	0x08004f4d
 8004f0c:	08004f55 	.word	0x08004f55
 8004f10:	08004f5d 	.word	0x08004f5d
 8004f14:	08004f65 	.word	0x08004f65
 8004f18:	08004f6d 	.word	0x08004f6d
 8004f1c:	08004f75 	.word	0x08004f75
 8004f20:	08004f7d 	.word	0x08004f7d
  {
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2200      	movs	r2, #0
 8004f28:	701a      	strb	r2, [r3, #0]
      break;
 8004f2a:	e02f      	b.n	8004f8c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	701a      	strb	r2, [r3, #0]
      break;
 8004f32:	e02b      	b.n	8004f8c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2202      	movs	r2, #2
 8004f38:	701a      	strb	r2, [r3, #0]
      break;
 8004f3a:	e027      	b.n	8004f8c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2203      	movs	r2, #3
 8004f40:	701a      	strb	r2, [r3, #0]
      break;
 8004f42:	e023      	b.n	8004f8c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2204      	movs	r2, #4
 8004f48:	701a      	strb	r2, [r3, #0]
      break;
 8004f4a:	e01f      	b.n	8004f8c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2205      	movs	r2, #5
 8004f50:	701a      	strb	r2, [r3, #0]
      break;
 8004f52:	e01b      	b.n	8004f8c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_416Hz:
      *val = ISM330DHCX_XL_ODR_416Hz;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2206      	movs	r2, #6
 8004f58:	701a      	strb	r2, [r3, #0]
      break;
 8004f5a:	e017      	b.n	8004f8c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2207      	movs	r2, #7
 8004f60:	701a      	strb	r2, [r3, #0]
      break;
 8004f62:	e013      	b.n	8004f8c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1666Hz:
      *val = ISM330DHCX_XL_ODR_1666Hz;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2208      	movs	r2, #8
 8004f68:	701a      	strb	r2, [r3, #0]
      break;
 8004f6a:	e00f      	b.n	8004f8c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3332Hz:
      *val = ISM330DHCX_XL_ODR_3332Hz;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2209      	movs	r2, #9
 8004f70:	701a      	strb	r2, [r3, #0]
      break;
 8004f72:	e00b      	b.n	8004f8c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	220a      	movs	r2, #10
 8004f78:	701a      	strb	r2, [r3, #0]
      break;
 8004f7a:	e007      	b.n	8004f8c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1Hz6:
      *val = ISM330DHCX_XL_ODR_1Hz6;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	220b      	movs	r2, #11
 8004f80:	701a      	strb	r2, [r3, #0]
      break;
 8004f82:	e003      	b.n	8004f8c <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
      break;
 8004f8a:	bf00      	nop
  }

  return ret;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop

08004f98 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004fa4:	f107 0208 	add.w	r2, r7, #8
 8004fa8:	2301      	movs	r3, #1
 8004faa:	2111      	movs	r1, #17
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7ff fd8d 	bl	8004acc <ism330dhcx_read_reg>
 8004fb2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10f      	bne.n	8004fda <ism330dhcx_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8004fba:	78fb      	ldrb	r3, [r7, #3]
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	7a3b      	ldrb	r3, [r7, #8]
 8004fc4:	f362 0303 	bfi	r3, r2, #0, #4
 8004fc8:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8004fca:	f107 0208 	add.w	r2, r7, #8
 8004fce:	2301      	movs	r3, #1
 8004fd0:	2111      	movs	r1, #17
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff fd92 	bl	8004afc <ism330dhcx_write_reg>
 8004fd8:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8004fda:	68fb      	ldr	r3, [r7, #12]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004fee:	f107 0208 	add.w	r2, r7, #8
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	2111      	movs	r1, #17
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff fd68 	bl	8004acc <ism330dhcx_read_reg>
 8004ffc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g)
 8004ffe:	7a3b      	ldrb	r3, [r7, #8]
 8005000:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b0c      	cmp	r3, #12
 8005008:	d834      	bhi.n	8005074 <ism330dhcx_gy_full_scale_get+0x90>
 800500a:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <ism330dhcx_gy_full_scale_get+0x2c>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	0800504d 	.word	0x0800504d
 8005014:	0800506d 	.word	0x0800506d
 8005018:	08005045 	.word	0x08005045
 800501c:	08005075 	.word	0x08005075
 8005020:	08005055 	.word	0x08005055
 8005024:	08005075 	.word	0x08005075
 8005028:	08005075 	.word	0x08005075
 800502c:	08005075 	.word	0x08005075
 8005030:	0800505d 	.word	0x0800505d
 8005034:	08005075 	.word	0x08005075
 8005038:	08005075 	.word	0x08005075
 800503c:	08005075 	.word	0x08005075
 8005040:	08005065 	.word	0x08005065
  {
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2202      	movs	r2, #2
 8005048:	701a      	strb	r2, [r3, #0]
      break;
 800504a:	e017      	b.n	800507c <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2200      	movs	r2, #0
 8005050:	701a      	strb	r2, [r3, #0]
      break;
 8005052:	e013      	b.n	800507c <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2204      	movs	r2, #4
 8005058:	701a      	strb	r2, [r3, #0]
      break;
 800505a:	e00f      	b.n	800507c <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2208      	movs	r2, #8
 8005060:	701a      	strb	r2, [r3, #0]
      break;
 8005062:	e00b      	b.n	800507c <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	220c      	movs	r2, #12
 8005068:	701a      	strb	r2, [r3, #0]
      break;
 800506a:	e007      	b.n	800507c <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2201      	movs	r2, #1
 8005070:	701a      	strb	r2, [r3, #0]
      break;
 8005072:	e003      	b.n	800507c <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2202      	movs	r2, #2
 8005078:	701a      	strb	r2, [r3, #0]
      break;
 800507a:	bf00      	nop
  }

  return ret;
 800507c:	68fb      	ldr	r3, [r7, #12]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop

08005088 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8005098:	f107 030c 	add.w	r3, r7, #12
 800509c:	4619      	mov	r1, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fb4f 	bl	8005742 <ism330dhcx_fsm_enable_get>
 80050a4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f040 80c4 	bne.w	8005236 <ism330dhcx_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80050ae:	7b3b      	ldrb	r3, [r7, #12]
 80050b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80050b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80050b6:	7b3b      	ldrb	r3, [r7, #12]
 80050b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80050bc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80050be:	4313      	orrs	r3, r2
 80050c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80050c2:	7b3b      	ldrb	r3, [r7, #12]
 80050c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80050c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80050ca:	4313      	orrs	r3, r2
 80050cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80050ce:	7b3b      	ldrb	r3, [r7, #12]
 80050d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80050d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80050d6:	4313      	orrs	r3, r2
 80050d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80050da:	7b3b      	ldrb	r3, [r7, #12]
 80050dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80050e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80050e2:	4313      	orrs	r3, r2
 80050e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80050e6:	7b3b      	ldrb	r3, [r7, #12]
 80050e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80050ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80050ee:	4313      	orrs	r3, r2
 80050f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80050f2:	7b3b      	ldrb	r3, [r7, #12]
 80050f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80050f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80050fa:	4313      	orrs	r3, r2
 80050fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80050fe:	7b3b      	ldrb	r3, [r7, #12]
 8005100:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005104:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005106:	4313      	orrs	r3, r2
 8005108:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800510a:	7b7b      	ldrb	r3, [r7, #13]
 800510c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005110:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005112:	4313      	orrs	r3, r2
 8005114:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005116:	7b7b      	ldrb	r3, [r7, #13]
 8005118:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800511c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800511e:	4313      	orrs	r3, r2
 8005120:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005122:	7b7b      	ldrb	r3, [r7, #13]
 8005124:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005128:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800512a:	4313      	orrs	r3, r2
 800512c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800512e:	7b7b      	ldrb	r3, [r7, #13]
 8005130:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005134:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005136:	4313      	orrs	r3, r2
 8005138:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800513a:	7b7b      	ldrb	r3, [r7, #13]
 800513c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005140:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005142:	4313      	orrs	r3, r2
 8005144:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005146:	7b7b      	ldrb	r3, [r7, #13]
 8005148:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800514c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800514e:	4313      	orrs	r3, r2
 8005150:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005152:	7b7b      	ldrb	r3, [r7, #13]
 8005154:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005158:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800515a:	4313      	orrs	r3, r2
 800515c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800515e:	7b7b      	ldrb	r3, [r7, #13]
 8005160:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005164:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005166:	4313      	orrs	r3, r2
 8005168:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800516a:	2b01      	cmp	r3, #1
 800516c:	d163      	bne.n	8005236 <ism330dhcx_gy_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 800516e:	f107 030b 	add.w	r3, r7, #11
 8005172:	4619      	mov	r1, r3
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fb11 	bl	800579c <ism330dhcx_fsm_data_rate_get>
 800517a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d159      	bne.n	8005236 <ism330dhcx_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005182:	7afb      	ldrb	r3, [r7, #11]
 8005184:	2b03      	cmp	r3, #3
 8005186:	d853      	bhi.n	8005230 <ism330dhcx_gy_data_rate_set+0x1a8>
 8005188:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <ism330dhcx_gy_data_rate_set+0x108>)
 800518a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518e:	bf00      	nop
 8005190:	080051a1 	.word	0x080051a1
 8005194:	080051b3 	.word	0x080051b3
 8005198:	080051d1 	.word	0x080051d1
 800519c:	080051fb 	.word	0x080051fb
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <ism330dhcx_gy_data_rate_set+0x124>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 80051a6:	2301      	movs	r3, #1
 80051a8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80051aa:	e045      	b.n	8005238 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	75fb      	strb	r3, [r7, #23]
            break;
 80051b0:	e042      	b.n	8005238 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d102      	bne.n	80051be <ism330dhcx_gy_data_rate_set+0x136>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80051b8:	2302      	movs	r3, #2
 80051ba:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80051bc:	e03c      	b.n	8005238 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d102      	bne.n	80051ca <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80051c4:	2302      	movs	r3, #2
 80051c6:	75fb      	strb	r3, [r7, #23]
            break;
 80051c8:	e036      	b.n	8005238 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80051ca:	78fb      	ldrb	r3, [r7, #3]
 80051cc:	75fb      	strb	r3, [r7, #23]
            break;
 80051ce:	e033      	b.n	8005238 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d102      	bne.n	80051dc <ism330dhcx_gy_data_rate_set+0x154>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80051d6:	2303      	movs	r3, #3
 80051d8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80051da:	e02d      	b.n	8005238 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d102      	bne.n	80051e8 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80051e2:	2303      	movs	r3, #3
 80051e4:	75fb      	strb	r3, [r7, #23]
            break;
 80051e6:	e027      	b.n	8005238 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d102      	bne.n	80051f4 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80051ee:	2303      	movs	r3, #3
 80051f0:	75fb      	strb	r3, [r7, #23]
            break;
 80051f2:	e021      	b.n	8005238 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	75fb      	strb	r3, [r7, #23]
            break;
 80051f8:	e01e      	b.n	8005238 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80051fa:	78fb      	ldrb	r3, [r7, #3]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <ism330dhcx_gy_data_rate_set+0x17e>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005200:	2304      	movs	r3, #4
 8005202:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005204:	e018      	b.n	8005238 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005206:	78fb      	ldrb	r3, [r7, #3]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d102      	bne.n	8005212 <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800520c:	2304      	movs	r3, #4
 800520e:	75fb      	strb	r3, [r7, #23]
            break;
 8005210:	e012      	b.n	8005238 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	2b02      	cmp	r3, #2
 8005216:	d102      	bne.n	800521e <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005218:	2304      	movs	r3, #4
 800521a:	75fb      	strb	r3, [r7, #23]
            break;
 800521c:	e00c      	b.n	8005238 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 800521e:	78fb      	ldrb	r3, [r7, #3]
 8005220:	2b03      	cmp	r3, #3
 8005222:	d102      	bne.n	800522a <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005224:	2304      	movs	r3, #4
 8005226:	75fb      	strb	r3, [r7, #23]
            break;
 8005228:	e006      	b.n	8005238 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800522a:	78fb      	ldrb	r3, [r7, #3]
 800522c:	75fb      	strb	r3, [r7, #23]
            break;
 800522e:	e003      	b.n	8005238 <ism330dhcx_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	75fb      	strb	r3, [r7, #23]
            break;
 8005234:	e000      	b.n	8005238 <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 8005236:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8005238:	2300      	movs	r3, #0
 800523a:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d16d      	bne.n	800531e <ism330dhcx_gy_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8005242:	f107 030a 	add.w	r3, r7, #10
 8005246:	4619      	mov	r1, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 faef 	bl	800582c <ism330dhcx_mlc_get>
 800524e:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8005250:	7abb      	ldrb	r3, [r7, #10]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d163      	bne.n	800531e <ism330dhcx_gy_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8005256:	f107 0309 	add.w	r3, r7, #9
 800525a:	4619      	mov	r1, r3
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fb0f 	bl	8005880 <ism330dhcx_mlc_data_rate_get>
 8005262:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d159      	bne.n	800531e <ism330dhcx_gy_data_rate_set+0x296>
      {
        switch (mlc_odr)
 800526a:	7a7b      	ldrb	r3, [r7, #9]
 800526c:	2b03      	cmp	r3, #3
 800526e:	d853      	bhi.n	8005318 <ism330dhcx_gy_data_rate_set+0x290>
 8005270:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <ism330dhcx_gy_data_rate_set+0x1f0>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	08005289 	.word	0x08005289
 800527c:	0800529b 	.word	0x0800529b
 8005280:	080052b9 	.word	0x080052b9
 8005284:	080052e3 	.word	0x080052e3
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d102      	bne.n	8005294 <ism330dhcx_gy_data_rate_set+0x20c>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 800528e:	2301      	movs	r3, #1
 8005290:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005292:	e045      	b.n	8005320 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	75fb      	strb	r3, [r7, #23]
            break;
 8005298:	e042      	b.n	8005320 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d102      	bne.n	80052a6 <ism330dhcx_gy_data_rate_set+0x21e>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80052a0:	2302      	movs	r3, #2
 80052a2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80052a4:	e03c      	b.n	8005320 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80052a6:	78fb      	ldrb	r3, [r7, #3]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d102      	bne.n	80052b2 <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80052ac:	2302      	movs	r3, #2
 80052ae:	75fb      	strb	r3, [r7, #23]
            break;
 80052b0:	e036      	b.n	8005320 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 80052b2:	78fb      	ldrb	r3, [r7, #3]
 80052b4:	75fb      	strb	r3, [r7, #23]
            break;
 80052b6:	e033      	b.n	8005320 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d102      	bne.n	80052c4 <ism330dhcx_gy_data_rate_set+0x23c>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80052be:	2303      	movs	r3, #3
 80052c0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80052c2:	e02d      	b.n	8005320 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d102      	bne.n	80052d0 <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80052ca:	2303      	movs	r3, #3
 80052cc:	75fb      	strb	r3, [r7, #23]
            break;
 80052ce:	e027      	b.n	8005320 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d102      	bne.n	80052dc <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80052d6:	2303      	movs	r3, #3
 80052d8:	75fb      	strb	r3, [r7, #23]
            break;
 80052da:	e021      	b.n	8005320 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 80052dc:	78fb      	ldrb	r3, [r7, #3]
 80052de:	75fb      	strb	r3, [r7, #23]
            break;
 80052e0:	e01e      	b.n	8005320 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d102      	bne.n	80052ee <ism330dhcx_gy_data_rate_set+0x266>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80052e8:	2304      	movs	r3, #4
 80052ea:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80052ec:	e018      	b.n	8005320 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80052ee:	78fb      	ldrb	r3, [r7, #3]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d102      	bne.n	80052fa <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80052f4:	2304      	movs	r3, #4
 80052f6:	75fb      	strb	r3, [r7, #23]
            break;
 80052f8:	e012      	b.n	8005320 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 80052fa:	78fb      	ldrb	r3, [r7, #3]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d102      	bne.n	8005306 <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005300:	2304      	movs	r3, #4
 8005302:	75fb      	strb	r3, [r7, #23]
            break;
 8005304:	e00c      	b.n	8005320 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8005306:	78fb      	ldrb	r3, [r7, #3]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d102      	bne.n	8005312 <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800530c:	2304      	movs	r3, #4
 800530e:	75fb      	strb	r3, [r7, #23]
            break;
 8005310:	e006      	b.n	8005320 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005312:	78fb      	ldrb	r3, [r7, #3]
 8005314:	75fb      	strb	r3, [r7, #23]
            break;
 8005316:	e003      	b.n	8005320 <ism330dhcx_gy_data_rate_set+0x298>

          default:
            odr_gy = val;
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	75fb      	strb	r3, [r7, #23]
            break;
 800531c:	e000      	b.n	8005320 <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 800531e:	bf00      	nop
    }
  }

  if (ret == 0)
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d107      	bne.n	8005336 <ism330dhcx_gy_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005326:	f107 0208 	add.w	r2, r7, #8
 800532a:	2301      	movs	r3, #1
 800532c:	2111      	movs	r1, #17
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff fbcc 	bl	8004acc <ism330dhcx_read_reg>
 8005334:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10f      	bne.n	800535c <ism330dhcx_gy_data_rate_set+0x2d4>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 800533c:	7dfb      	ldrb	r3, [r7, #23]
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	b2da      	uxtb	r2, r3
 8005344:	7a3b      	ldrb	r3, [r7, #8]
 8005346:	f362 1307 	bfi	r3, r2, #4, #4
 800534a:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 800534c:	f107 0208 	add.w	r2, r7, #8
 8005350:	2301      	movs	r3, #1
 8005352:	2111      	movs	r1, #17
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff fbd1 	bl	8004afc <ism330dhcx_write_reg>
 800535a:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 800535c:	693b      	ldr	r3, [r7, #16]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop

08005368 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005372:	f107 0208 	add.w	r2, r7, #8
 8005376:	2301      	movs	r3, #1
 8005378:	2111      	movs	r1, #17
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff fba6 	bl	8004acc <ism330dhcx_read_reg>
 8005380:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g)
 8005382:	7a3b      	ldrb	r3, [r7, #8]
 8005384:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b0a      	cmp	r3, #10
 800538c:	d844      	bhi.n	8005418 <ism330dhcx_gy_data_rate_get+0xb0>
 800538e:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <ism330dhcx_gy_data_rate_get+0x2c>)
 8005390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005394:	080053c1 	.word	0x080053c1
 8005398:	080053c9 	.word	0x080053c9
 800539c:	080053d1 	.word	0x080053d1
 80053a0:	080053d9 	.word	0x080053d9
 80053a4:	080053e1 	.word	0x080053e1
 80053a8:	080053e9 	.word	0x080053e9
 80053ac:	080053f1 	.word	0x080053f1
 80053b0:	080053f9 	.word	0x080053f9
 80053b4:	08005401 	.word	0x08005401
 80053b8:	08005409 	.word	0x08005409
 80053bc:	08005411 	.word	0x08005411
  {
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2200      	movs	r2, #0
 80053c4:	701a      	strb	r2, [r3, #0]
      break;
 80053c6:	e02b      	b.n	8005420 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	2201      	movs	r2, #1
 80053cc:	701a      	strb	r2, [r3, #0]
      break;
 80053ce:	e027      	b.n	8005420 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2202      	movs	r2, #2
 80053d4:	701a      	strb	r2, [r3, #0]
      break;
 80053d6:	e023      	b.n	8005420 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2203      	movs	r2, #3
 80053dc:	701a      	strb	r2, [r3, #0]
      break;
 80053de:	e01f      	b.n	8005420 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2204      	movs	r2, #4
 80053e4:	701a      	strb	r2, [r3, #0]
      break;
 80053e6:	e01b      	b.n	8005420 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2205      	movs	r2, #5
 80053ec:	701a      	strb	r2, [r3, #0]
      break;
 80053ee:	e017      	b.n	8005420 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_416Hz:
      *val = ISM330DHCX_GY_ODR_416Hz;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2206      	movs	r2, #6
 80053f4:	701a      	strb	r2, [r3, #0]
      break;
 80053f6:	e013      	b.n	8005420 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2207      	movs	r2, #7
 80053fc:	701a      	strb	r2, [r3, #0]
      break;
 80053fe:	e00f      	b.n	8005420 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1666Hz:
      *val = ISM330DHCX_GY_ODR_1666Hz;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2208      	movs	r2, #8
 8005404:	701a      	strb	r2, [r3, #0]
      break;
 8005406:	e00b      	b.n	8005420 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3332Hz:
      *val = ISM330DHCX_GY_ODR_3332Hz;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2209      	movs	r2, #9
 800540c:	701a      	strb	r2, [r3, #0]
      break;
 800540e:	e007      	b.n	8005420 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	220a      	movs	r2, #10
 8005414:	701a      	strb	r2, [r3, #0]
      break;
 8005416:	e003      	b.n	8005420 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2200      	movs	r2, #0
 800541c:	701a      	strb	r2, [r3, #0]
      break;
 800541e:	bf00      	nop
  }

  return ret;
 8005420:	68fb      	ldr	r3, [r7, #12]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop

0800542c <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005438:	f107 0208 	add.w	r2, r7, #8
 800543c:	2301      	movs	r3, #1
 800543e:	2112      	movs	r1, #18
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff fb43 	bl	8004acc <ism330dhcx_read_reg>
 8005446:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10f      	bne.n	800546e <ism330dhcx_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 800544e:	78fb      	ldrb	r3, [r7, #3]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	b2da      	uxtb	r2, r3
 8005456:	7a3b      	ldrb	r3, [r7, #8]
 8005458:	f362 1386 	bfi	r3, r2, #6, #1
 800545c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800545e:	f107 0208 	add.w	r2, r7, #8
 8005462:	2301      	movs	r3, #1
 8005464:	2112      	movs	r1, #18
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff fb48 	bl	8004afc <ism330dhcx_write_reg>
 800546c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 800546e:	68fb      	ldr	r3, [r7, #12]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8005482:	f107 020c 	add.w	r2, r7, #12
 8005486:	2306      	movs	r3, #6
 8005488:	2122      	movs	r1, #34	; 0x22
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff fb1e 	bl	8004acc <ism330dhcx_read_reg>
 8005490:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005492:	7b7b      	ldrb	r3, [r7, #13]
 8005494:	b21a      	sxth	r2, r3
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	7b3b      	ldrb	r3, [r7, #12]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	4413      	add	r3, r2
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	b21a      	sxth	r2, r3
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80054b4:	7bfa      	ldrb	r2, [r7, #15]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	3302      	adds	r3, #2
 80054ba:	b212      	sxth	r2, r2
 80054bc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	3302      	adds	r3, #2
 80054c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	021b      	lsls	r3, r3, #8
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	7bbb      	ldrb	r3, [r7, #14]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	4413      	add	r3, r2
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	3302      	adds	r3, #2
 80054d8:	b212      	sxth	r2, r2
 80054da:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80054dc:	7c7a      	ldrb	r2, [r7, #17]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	3304      	adds	r3, #4
 80054e2:	b212      	sxth	r2, r2
 80054e4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	3304      	adds	r3, #4
 80054ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	7c3b      	ldrb	r3, [r7, #16]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	4413      	add	r3, r2
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	3304      	adds	r3, #4
 8005500:	b212      	sxth	r2, r2
 8005502:	801a      	strh	r2, [r3, #0]

  return ret;
 8005504:	697b      	ldr	r3, [r7, #20]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b086      	sub	sp, #24
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8005518:	f107 020c 	add.w	r2, r7, #12
 800551c:	2306      	movs	r3, #6
 800551e:	2128      	movs	r1, #40	; 0x28
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff fad3 	bl	8004acc <ism330dhcx_read_reg>
 8005526:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005528:	7b7b      	ldrb	r3, [r7, #13]
 800552a:	b21a      	sxth	r2, r3
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005536:	b29b      	uxth	r3, r3
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	b29a      	uxth	r2, r3
 800553c:	7b3b      	ldrb	r3, [r7, #12]
 800553e:	b29b      	uxth	r3, r3
 8005540:	4413      	add	r3, r2
 8005542:	b29b      	uxth	r3, r3
 8005544:	b21a      	sxth	r2, r3
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800554a:	7bfa      	ldrb	r2, [r7, #15]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	3302      	adds	r3, #2
 8005550:	b212      	sxth	r2, r2
 8005552:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	3302      	adds	r3, #2
 8005558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800555c:	b29b      	uxth	r3, r3
 800555e:	021b      	lsls	r3, r3, #8
 8005560:	b29a      	uxth	r2, r3
 8005562:	7bbb      	ldrb	r3, [r7, #14]
 8005564:	b29b      	uxth	r3, r3
 8005566:	4413      	add	r3, r2
 8005568:	b29a      	uxth	r2, r3
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	3302      	adds	r3, #2
 800556e:	b212      	sxth	r2, r2
 8005570:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005572:	7c7a      	ldrb	r2, [r7, #17]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	3304      	adds	r3, #4
 8005578:	b212      	sxth	r2, r2
 800557a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	3304      	adds	r3, #4
 8005580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005584:	b29b      	uxth	r3, r3
 8005586:	021b      	lsls	r3, r3, #8
 8005588:	b29a      	uxth	r2, r3
 800558a:	7c3b      	ldrb	r3, [r7, #16]
 800558c:	b29b      	uxth	r3, r3
 800558e:	4413      	add	r3, r2
 8005590:	b29a      	uxth	r2, r3
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	3304      	adds	r3, #4
 8005596:	b212      	sxth	r2, r2
 8005598:	801a      	strh	r2, [r3, #0]

  return ret;
 800559a:	697b      	ldr	r3, [r7, #20]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 80055b0:	f107 0208 	add.w	r2, r7, #8
 80055b4:	2301      	movs	r3, #1
 80055b6:	2118      	movs	r1, #24
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff fa87 	bl	8004acc <ism330dhcx_read_reg>
 80055be:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10f      	bne.n	80055e6 <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	7a3b      	ldrb	r3, [r7, #8]
 80055d0:	f362 0341 	bfi	r3, r2, #1, #1
 80055d4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 80055d6:	f107 0208 	add.w	r2, r7, #8
 80055da:	2301      	movs	r3, #1
 80055dc:	2118      	movs	r1, #24
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff fa8c 	bl	8004afc <ism330dhcx_write_reg>
 80055e4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 80055e6:	68fb      	ldr	r3, [r7, #12]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	460b      	mov	r3, r1
 80055fa:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 80055fc:	f107 0208 	add.w	r2, r7, #8
 8005600:	2301      	movs	r3, #1
 8005602:	2101      	movs	r1, #1
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff fa61 	bl	8004acc <ism330dhcx_read_reg>
 800560a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10f      	bne.n	8005632 <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	f003 0303 	and.w	r3, r3, #3
 8005618:	b2da      	uxtb	r2, r3
 800561a:	7a3b      	ldrb	r3, [r7, #8]
 800561c:	f362 1387 	bfi	r3, r2, #6, #2
 8005620:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8005622:	f107 0208 	add.w	r2, r7, #8
 8005626:	2301      	movs	r3, #1
 8005628:	2101      	movs	r1, #1
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff fa66 	bl	8004afc <ism330dhcx_write_reg>
 8005630:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8005632:	68fb      	ldr	r3, [r7, #12]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 8005646:	2301      	movs	r3, #1
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	210f      	movs	r1, #15
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff fa3d 	bl	8004acc <ism330dhcx_read_reg>
 8005652:	60f8      	str	r0, [r7, #12]

  return ret;
 8005654:	68fb      	ldr	r3, [r7, #12]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	460b      	mov	r3, r1
 8005668:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800566a:	f107 0208 	add.w	r2, r7, #8
 800566e:	2301      	movs	r3, #1
 8005670:	2112      	movs	r1, #18
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff fa2a 	bl	8004acc <ism330dhcx_read_reg>
 8005678:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10f      	bne.n	80056a0 <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	b2da      	uxtb	r2, r3
 8005688:	7a3b      	ldrb	r3, [r7, #8]
 800568a:	f362 0300 	bfi	r3, r2, #0, #1
 800568e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8005690:	f107 0208 	add.w	r2, r7, #8
 8005694:	2301      	movs	r3, #1
 8005696:	2112      	movs	r1, #18
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff fa2f 	bl	8004afc <ism330dhcx_write_reg>
 800569e:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80056a0:	68fb      	ldr	r3, [r7, #12]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	460b      	mov	r3, r1
 80056b4:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80056b6:	f107 0208 	add.w	r2, r7, #8
 80056ba:	2301      	movs	r3, #1
 80056bc:	2112      	movs	r1, #18
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff fa04 	bl	8004acc <ism330dhcx_read_reg>
 80056c4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10f      	bne.n	80056ec <ism330dhcx_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = (uint8_t)val;
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	7a3b      	ldrb	r3, [r7, #8]
 80056d6:	f362 0382 	bfi	r3, r2, #2, #1
 80056da:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80056dc:	f107 0208 	add.w	r2, r7, #8
 80056e0:	2301      	movs	r3, #1
 80056e2:	2112      	movs	r1, #18
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff fa09 	bl	8004afc <ism330dhcx_write_reg>
 80056ea:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80056ec:	68fb      	ldr	r3, [r7, #12]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	460b      	mov	r3, r1
 8005700:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8005702:	f107 0208 	add.w	r2, r7, #8
 8005706:	2301      	movs	r3, #1
 8005708:	210a      	movs	r1, #10
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff f9de 	bl	8004acc <ism330dhcx_read_reg>
 8005710:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10f      	bne.n	8005738 <ism330dhcx_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8005718:	78fb      	ldrb	r3, [r7, #3]
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	b2da      	uxtb	r2, r3
 8005720:	7a3b      	ldrb	r3, [r7, #8]
 8005722:	f362 0302 	bfi	r3, r2, #0, #3
 8005726:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8005728:	f107 0208 	add.w	r2, r7, #8
 800572c:	2301      	movs	r3, #1
 800572e:	210a      	movs	r1, #10
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff f9e3 	bl	8004afc <ism330dhcx_write_reg>
 8005736:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8005738:	68fb      	ldr	r3, [r7, #12]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b084      	sub	sp, #16
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800574c:	2102      	movs	r1, #2
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff ff4e 	bl	80055f0 <ism330dhcx_mem_bank_set>
 8005754:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d106      	bne.n	800576a <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 800575c:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 800575e:	2301      	movs	r3, #1
 8005760:	2146      	movs	r1, #70	; 0x46
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff f9b2 	bl	8004acc <ism330dhcx_read_reg>
 8005768:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d107      	bne.n	8005780 <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8005774:	2301      	movs	r3, #1
 8005776:	2147      	movs	r1, #71	; 0x47
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff f9a7 	bl	8004acc <ism330dhcx_read_reg>
 800577e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d104      	bne.n	8005790 <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005786:	2100      	movs	r1, #0
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff ff31 	bl	80055f0 <ism330dhcx_mem_bank_set>
 800578e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005790:	68fb      	ldr	r3, [r7, #12]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80057a6:	2102      	movs	r1, #2
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff ff21 	bl	80055f0 <ism330dhcx_mem_bank_set>
 80057ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d107      	bne.n	80057c6 <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 80057b6:	f107 0208 	add.w	r2, r7, #8
 80057ba:	2301      	movs	r3, #1
 80057bc:	215f      	movs	r1, #95	; 0x5f
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7ff f984 	bl	8004acc <ism330dhcx_read_reg>
 80057c4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d104      	bne.n	80057d6 <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80057cc:	2100      	movs	r1, #0
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff ff0e 	bl	80055f0 <ism330dhcx_mem_bank_set>
 80057d4:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 80057d6:	7a3b      	ldrb	r3, [r7, #8]
 80057d8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d81a      	bhi.n	8005818 <ism330dhcx_fsm_data_rate_get+0x7c>
 80057e2:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <ism330dhcx_fsm_data_rate_get+0x4c>)
 80057e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e8:	080057f9 	.word	0x080057f9
 80057ec:	08005801 	.word	0x08005801
 80057f0:	08005809 	.word	0x08005809
 80057f4:	08005811 	.word	0x08005811
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2200      	movs	r2, #0
 80057fc:	701a      	strb	r2, [r3, #0]
      break;
 80057fe:	e00f      	b.n	8005820 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2201      	movs	r2, #1
 8005804:	701a      	strb	r2, [r3, #0]
      break;
 8005806:	e00b      	b.n	8005820 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2202      	movs	r2, #2
 800580c:	701a      	strb	r2, [r3, #0]
      break;
 800580e:	e007      	b.n	8005820 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2203      	movs	r2, #3
 8005814:	701a      	strb	r2, [r3, #0]
      break;
 8005816:	e003      	b.n	8005820 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]
      break;
 800581e:	bf00      	nop
  }

  return ret;
 8005820:	68fb      	ldr	r3, [r7, #12]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop

0800582c <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005836:	2102      	movs	r1, #2
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff fed9 	bl	80055f0 <ism330dhcx_mem_bank_set>
 800583e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d107      	bne.n	8005856 <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 8005846:	f107 0208 	add.w	r2, r7, #8
 800584a:	2301      	movs	r3, #1
 800584c:	2105      	movs	r1, #5
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff f93c 	bl	8004acc <ism330dhcx_read_reg>
 8005854:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10b      	bne.n	8005874 <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800585c:	2100      	movs	r1, #0
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7ff fec6 	bl	80055f0 <ism330dhcx_mem_bank_set>
 8005864:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 8005866:	7a3b      	ldrb	r3, [r7, #8]
 8005868:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800586c:	b2db      	uxtb	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005874:	68fb      	ldr	r3, [r7, #12]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
	...

08005880 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800588a:	2102      	movs	r1, #2
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff feaf 	bl	80055f0 <ism330dhcx_mem_bank_set>
 8005892:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d107      	bne.n	80058aa <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 800589a:	f107 0208 	add.w	r2, r7, #8
 800589e:	2301      	movs	r3, #1
 80058a0:	2160      	movs	r1, #96	; 0x60
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff f912 	bl	8004acc <ism330dhcx_read_reg>
 80058a8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d12a      	bne.n	8005906 <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 80058b0:	7a3b      	ldrb	r3, [r7, #8]
 80058b2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d81b      	bhi.n	80058f4 <ism330dhcx_mlc_data_rate_get+0x74>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <ism330dhcx_mlc_data_rate_get+0x44>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	080058d5 	.word	0x080058d5
 80058c8:	080058dd 	.word	0x080058dd
 80058cc:	080058e5 	.word	0x080058e5
 80058d0:	080058ed 	.word	0x080058ed
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2200      	movs	r2, #0
 80058d8:	701a      	strb	r2, [r3, #0]
        break;
 80058da:	e00f      	b.n	80058fc <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2201      	movs	r2, #1
 80058e0:	701a      	strb	r2, [r3, #0]
        break;
 80058e2:	e00b      	b.n	80058fc <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2202      	movs	r2, #2
 80058e8:	701a      	strb	r2, [r3, #0]
        break;
 80058ea:	e007      	b.n	80058fc <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2203      	movs	r2, #3
 80058f0:	701a      	strb	r2, [r3, #0]
        break;
 80058f2:	e003      	b.n	80058fc <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2200      	movs	r2, #0
 80058f8:	701a      	strb	r2, [r3, #0]
        break;
 80058fa:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80058fc:	2100      	movs	r1, #0
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff fe76 	bl	80055f0 <ism330dhcx_mem_bank_set>
 8005904:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005906:	68fb      	ldr	r3, [r7, #12]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <IKS02A1_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08e      	sub	sp, #56	; 0x38
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800591a:	2300      	movs	r3, #0
 800591c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800591e:	2301      	movs	r3, #1
 8005920:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS02A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d06e      	beq.n	8005a0a <IKS02A1_MOTION_SENSOR_Init+0xfa>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b02      	cmp	r3, #2
 8005930:	f200 809d 	bhi.w	8005a6e <IKS02A1_MOTION_SENSOR_Init+0x15e>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <IKS02A1_MOTION_SENSOR_Init+0x32>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d032      	beq.n	80059a6 <IKS02A1_MOTION_SENSOR_Init+0x96>
 8005940:	e095      	b.n	8005a6e <IKS02A1_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS02A1_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case IKS02A1_ISM330DHCX_0:
      if (ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 8005942:	6838      	ldr	r0, [r7, #0]
 8005944:	f000 fa00 	bl	8005d48 <ISM330DHCX_0_Probe>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <IKS02A1_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800594e:	f04f 33ff 	mov.w	r3, #4294967295
 8005952:	e0cc      	b.n	8005aee <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005954:	4a68      	ldr	r2, [pc, #416]	; (8005af8 <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	4967      	ldr	r1, [pc, #412]	; (8005afc <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005966:	f107 010c 	add.w	r1, r7, #12
 800596a:	4610      	mov	r0, r2
 800596c:	4798      	blx	r3
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <IKS02A1_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005974:	f06f 0306 	mvn.w	r3, #6
 8005978:	e0b9      	b.n	8005aee <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800597a:	7b3b      	ldrb	r3, [r7, #12]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d103      	bne.n	8005988 <IKS02A1_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	f043 0302 	orr.w	r3, r3, #2
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005988:	7b7b      	ldrb	r3, [r7, #13]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d103      	bne.n	8005996 <IKS02A1_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005996:	7bbb      	ldrb	r3, [r7, #14]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d16c      	bne.n	8005a76 <IKS02A1_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	f043 0304 	orr.w	r3, r3, #4
 80059a2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80059a4:	e067      	b.n	8005a76 <IKS02A1_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS02A1_MOTION_SENSOR_IIS2DLPC_0 == 1)
    case IKS02A1_IIS2DLPC_0:
      if (IIS2DLPC_0_Probe(Functions) != BSP_ERROR_NONE)
 80059a6:	6838      	ldr	r0, [r7, #0]
 80059a8:	f000 fa8a 	bl	8005ec0 <IIS2DLPC_0_Probe>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <IKS02A1_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80059b2:	f04f 33ff 	mov.w	r3, #4294967295
 80059b6:	e09a      	b.n	8005aee <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80059b8:	4a4f      	ldr	r2, [pc, #316]	; (8005af8 <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	494e      	ldr	r1, [pc, #312]	; (8005afc <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80059ca:	f107 010c 	add.w	r1, r7, #12
 80059ce:	4610      	mov	r0, r2
 80059d0:	4798      	blx	r3
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <IKS02A1_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80059d8:	f06f 0306 	mvn.w	r3, #6
 80059dc:	e087      	b.n	8005aee <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80059de:	7b3b      	ldrb	r3, [r7, #12]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d103      	bne.n	80059ec <IKS02A1_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	f043 0302 	orr.w	r3, r3, #2
 80059ea:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80059ec:	7b7b      	ldrb	r3, [r7, #13]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d103      	bne.n	80059fa <IKS02A1_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	f043 0301 	orr.w	r3, r3, #1
 80059f8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80059fa:	7bbb      	ldrb	r3, [r7, #14]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d13c      	bne.n	8005a7a <IKS02A1_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	f043 0304 	orr.w	r3, r3, #4
 8005a06:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005a08:	e037      	b.n	8005a7a <IKS02A1_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS02A1_MOTION_SENSOR_IIS2MDC_0 == 1)
    case IKS02A1_IIS2MDC_0:
      if (IIS2MDC_0_Probe(Functions) != BSP_ERROR_NONE)
 8005a0a:	6838      	ldr	r0, [r7, #0]
 8005a0c:	f000 fb00 	bl	8006010 <IIS2MDC_0_Probe>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <IKS02A1_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005a16:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1a:	e068      	b.n	8005aee <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005a1c:	4a36      	ldr	r2, [pc, #216]	; (8005af8 <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	4935      	ldr	r1, [pc, #212]	; (8005afc <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005a2e:	f107 010c 	add.w	r1, r7, #12
 8005a32:	4610      	mov	r0, r2
 8005a34:	4798      	blx	r3
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <IKS02A1_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005a3c:	f06f 0306 	mvn.w	r3, #6
 8005a40:	e055      	b.n	8005aee <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005a42:	7b3b      	ldrb	r3, [r7, #12]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d103      	bne.n	8005a50 <IKS02A1_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	f043 0302 	orr.w	r3, r3, #2
 8005a4e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005a50:	7b7b      	ldrb	r3, [r7, #13]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d103      	bne.n	8005a5e <IKS02A1_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	f043 0301 	orr.w	r3, r3, #1
 8005a5c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005a5e:	7bbb      	ldrb	r3, [r7, #14]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d10c      	bne.n	8005a7e <IKS02A1_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a66:	f043 0304 	orr.w	r3, r3, #4
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005a6c:	e007      	b.n	8005a7e <IKS02A1_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005a6e:	f06f 0301 	mvn.w	r3, #1
 8005a72:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005a74:	e004      	b.n	8005a80 <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 8005a76:	bf00      	nop
 8005a78:	e002      	b.n	8005a80 <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 8005a7a:	bf00      	nop
 8005a7c:	e000      	b.n	8005a80 <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 8005a7e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <IKS02A1_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a88:	e031      	b.n	8005aee <IKS02A1_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a8e:	e02a      	b.n	8005ae6 <IKS02A1_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	4013      	ands	r3, r2
 8005a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d11e      	bne.n	8005ada <IKS02A1_MOTION_SENSOR_Init+0x1ca>
 8005a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d118      	bne.n	8005ada <IKS02A1_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005aa8:	4a15      	ldr	r2, [pc, #84]	; (8005b00 <IKS02A1_MOTION_SENSOR_Init+0x1f0>)
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ab0:	4814      	ldr	r0, [pc, #80]	; (8005b04 <IKS02A1_MOTION_SENSOR_Init+0x1f4>)
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	4413      	add	r3, r2
 8005aba:	440b      	add	r3, r1
 8005abc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	490e      	ldr	r1, [pc, #56]	; (8005afc <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005aca:	4610      	mov	r0, r2
 8005acc:	4798      	blx	r3
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <IKS02A1_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005ad4:	f06f 0304 	mvn.w	r3, #4
 8005ad8:	e009      	b.n	8005aee <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 8005ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d9d1      	bls.n	8005a90 <IKS02A1_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3738      	adds	r7, #56	; 0x38
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	200004c8 	.word	0x200004c8
 8005afc:	20000498 	.word	0x20000498
 8005b00:	200000c4 	.word	0x200000c4
 8005b04:	200004a4 	.word	0x200004a4

08005b08 <IKS02A1_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance
  * @param  Capabilities pointer to motion sensor capabilities
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS02A1_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d903      	bls.n	8005b20 <IKS02A1_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005b18:	f06f 0301 	mvn.w	r3, #1
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e014      	b.n	8005b4a <IKS02A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8005b20:	4a0c      	ldr	r2, [pc, #48]	; (8005b54 <IKS02A1_MOTION_SENSOR_GetCapabilities+0x4c>)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	490b      	ldr	r1, [pc, #44]	; (8005b58 <IKS02A1_MOTION_SENSOR_GetCapabilities+0x50>)
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	4610      	mov	r0, r2
 8005b36:	4798      	blx	r3
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <IKS02A1_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b3e:	f06f 0306 	mvn.w	r3, #6
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	e001      	b.n	8005b4a <IKS02A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	200004c8 	.word	0x200004c8
 8005b58:	20000498 	.word	0x20000498

08005b5c <IKS02A1_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d903      	bls.n	8005b74 <IKS02A1_MOTION_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005b6c:	f06f 0301 	mvn.w	r3, #1
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	e014      	b.n	8005b9e <IKS02A1_MOTION_SENSOR_ReadID+0x42>
  }
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 8005b74:	4a0c      	ldr	r2, [pc, #48]	; (8005ba8 <IKS02A1_MOTION_SENSOR_ReadID+0x4c>)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	490b      	ldr	r1, [pc, #44]	; (8005bac <IKS02A1_MOTION_SENSOR_ReadID+0x50>)
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b86:	6839      	ldr	r1, [r7, #0]
 8005b88:	4610      	mov	r0, r2
 8005b8a:	4798      	blx	r3
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <IKS02A1_MOTION_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b92:	f06f 0306 	mvn.w	r3, #6
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	e001      	b.n	8005b9e <IKS02A1_MOTION_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	200004c8 	.word	0x200004c8
 8005bac:	20000498 	.word	0x20000498

08005bb0 <IKS02A1_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS02A1_MOTION_SENSOR_Axes_t *Axes)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d903      	bls.n	8005bca <IKS02A1_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005bc2:	f06f 0301 	mvn.w	r3, #1
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	e029      	b.n	8005c1e <IKS02A1_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005bca:	4a17      	ldr	r2, [pc, #92]	; (8005c28 <IKS02A1_MOTION_SENSOR_GetAxes+0x78>)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d11d      	bne.n	8005c18 <IKS02A1_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005bdc:	4a13      	ldr	r2, [pc, #76]	; (8005c2c <IKS02A1_MOTION_SENSOR_GetAxes+0x7c>)
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005be4:	4812      	ldr	r0, [pc, #72]	; (8005c30 <IKS02A1_MOTION_SENSOR_GetAxes+0x80>)
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	4613      	mov	r3, r2
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	4413      	add	r3, r2
 8005bee:	440b      	add	r3, r1
 8005bf0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	490f      	ldr	r1, [pc, #60]	; (8005c34 <IKS02A1_MOTION_SENSOR_GetAxes+0x84>)
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	4610      	mov	r0, r2
 8005c02:	4798      	blx	r3
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <IKS02A1_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c0a:	f06f 0304 	mvn.w	r3, #4
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	e005      	b.n	8005c1e <IKS02A1_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005c12:	2300      	movs	r3, #0
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	e002      	b.n	8005c1e <IKS02A1_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005c18:	f06f 0301 	mvn.w	r3, #1
 8005c1c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005c1e:	697b      	ldr	r3, [r7, #20]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	200004d4 	.word	0x200004d4
 8005c2c:	200000c4 	.word	0x200000c4
 8005c30:	200004a4 	.word	0x200004a4
 8005c34:	20000498 	.word	0x20000498

08005c38 <IKS02A1_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d903      	bls.n	8005c52 <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005c4a:	f06f 0301 	mvn.w	r3, #1
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	e029      	b.n	8005ca6 <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005c52:	4a17      	ldr	r2, [pc, #92]	; (8005cb0 <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x78>)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d11d      	bne.n	8005ca0 <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8005c64:	4a13      	ldr	r2, [pc, #76]	; (8005cb4 <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c6c:	4812      	ldr	r0, [pc, #72]	; (8005cb8 <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x80>)
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4613      	mov	r3, r2
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	4413      	add	r3, r2
 8005c76:	440b      	add	r3, r1
 8005c78:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	490f      	ldr	r1, [pc, #60]	; (8005cbc <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x84>)
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	4610      	mov	r0, r2
 8005c8a:	4798      	blx	r3
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c92:	f06f 0304 	mvn.w	r3, #4
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	e005      	b.n	8005ca6 <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	e002      	b.n	8005ca6 <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005ca0:	f06f 0301 	mvn.w	r3, #1
 8005ca4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005ca6:	697b      	ldr	r3, [r7, #20]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	200004d4 	.word	0x200004d4
 8005cb4:	200000c4 	.word	0x200000c4
 8005cb8:	200004a4 	.word	0x200004a4
 8005cbc:	20000498 	.word	0x20000498

08005cc0 <IKS02A1_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale pointer to Fullscale read value
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d903      	bls.n	8005cda <IKS02A1_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005cd2:	f06f 0301 	mvn.w	r3, #1
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	e029      	b.n	8005d2e <IKS02A1_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005cda:	4a17      	ldr	r2, [pc, #92]	; (8005d38 <IKS02A1_MOTION_SENSOR_GetFullScale+0x78>)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d11d      	bne.n	8005d28 <IKS02A1_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 8005cec:	4a13      	ldr	r2, [pc, #76]	; (8005d3c <IKS02A1_MOTION_SENSOR_GetFullScale+0x7c>)
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005cf4:	4812      	ldr	r0, [pc, #72]	; (8005d40 <IKS02A1_MOTION_SENSOR_GetFullScale+0x80>)
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	4413      	add	r3, r2
 8005cfe:	440b      	add	r3, r1
 8005d00:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	490f      	ldr	r1, [pc, #60]	; (8005d44 <IKS02A1_MOTION_SENSOR_GetFullScale+0x84>)
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	4610      	mov	r0, r2
 8005d12:	4798      	blx	r3
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <IKS02A1_MOTION_SENSOR_GetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d1a:	f06f 0304 	mvn.w	r3, #4
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	e005      	b.n	8005d2e <IKS02A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d22:	2300      	movs	r3, #0
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	e002      	b.n	8005d2e <IKS02A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005d28:	f06f 0301 	mvn.w	r3, #1
 8005d2c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005d2e:	697b      	ldr	r3, [r7, #20]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	200004d4 	.word	0x200004d4
 8005d3c:	200000c4 	.word	0x200000c4
 8005d40:	200004a4 	.word	0x200004a4
 8005d44:	20000498 	.word	0x20000498

08005d48 <ISM330DHCX_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t ISM330DHCX_0_Probe(uint32_t Functions)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b092      	sub	sp, #72	; 0x48
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  ISM330DHCX_IO_t            io_ctx;
  uint8_t                    id;
  static ISM330DHCX_Object_t ism330dhcx_obj_0;
  ISM330DHCX_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005d50:	2300      	movs	r3, #0
 8005d52:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = ISM330DHCX_I2C_BUS; /* I2C */
 8005d54:	2300      	movs	r3, #0
 8005d56:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = ISM330DHCX_I2C_ADD_H;
 8005d58:	23d7      	movs	r3, #215	; 0xd7
 8005d5a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS02A1_I2C_Init;
 8005d5e:	4b4a      	ldr	r3, [pc, #296]	; (8005e88 <ISM330DHCX_0_Probe+0x140>)
 8005d60:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 8005d62:	4b4a      	ldr	r3, [pc, #296]	; (8005e8c <ISM330DHCX_0_Probe+0x144>)
 8005d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 8005d66:	4b4a      	ldr	r3, [pc, #296]	; (8005e90 <ISM330DHCX_0_Probe+0x148>)
 8005d68:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 8005d6a:	4b4a      	ldr	r3, [pc, #296]	; (8005e94 <ISM330DHCX_0_Probe+0x14c>)
 8005d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS02A1_GetTick;
 8005d6e:	4b4a      	ldr	r3, [pc, #296]	; (8005e98 <ISM330DHCX_0_Probe+0x150>)
 8005d70:	643b      	str	r3, [r7, #64]	; 0x40

  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 8005d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d76:	4619      	mov	r1, r3
 8005d78:	4848      	ldr	r0, [pc, #288]	; (8005e9c <ISM330DHCX_0_Probe+0x154>)
 8005d7a:	f7fd fe83 	bl	8003a84 <ISM330DHCX_RegisterBusIO>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <ISM330DHCX_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005d84:	f06f 0306 	mvn.w	r3, #6
 8005d88:	647b      	str	r3, [r7, #68]	; 0x44
 8005d8a:	e077      	b.n	8005e7c <ISM330DHCX_0_Probe+0x134>
  }
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 8005d8c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005d90:	4619      	mov	r1, r3
 8005d92:	4842      	ldr	r0, [pc, #264]	; (8005e9c <ISM330DHCX_0_Probe+0x154>)
 8005d94:	f7fd ff90 	bl	8003cb8 <ISM330DHCX_ReadID>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <ISM330DHCX_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005d9e:	f06f 0306 	mvn.w	r3, #6
 8005da2:	647b      	str	r3, [r7, #68]	; 0x44
 8005da4:	e06a      	b.n	8005e7c <ISM330DHCX_0_Probe+0x134>
  }
  else if (id != ISM330DHCX_ID)
 8005da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005daa:	2b6b      	cmp	r3, #107	; 0x6b
 8005dac:	d003      	beq.n	8005db6 <ISM330DHCX_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005dae:	f06f 0306 	mvn.w	r3, #6
 8005db2:	647b      	str	r3, [r7, #68]	; 0x44
 8005db4:	e062      	b.n	8005e7c <ISM330DHCX_0_Probe+0x134>
  }
  else
  {
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 8005db6:	f107 0308 	add.w	r3, r7, #8
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4837      	ldr	r0, [pc, #220]	; (8005e9c <ISM330DHCX_0_Probe+0x154>)
 8005dbe:	f7fd ff91 	bl	8003ce4 <ISM330DHCX_GetCapabilities>
    MotionCtx[IKS02A1_ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005dc2:	7a7b      	ldrb	r3, [r7, #9]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	7a3b      	ldrb	r3, [r7, #8]
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	7abb      	ldrb	r3, [r7, #10]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	4a33      	ldr	r2, [pc, #204]	; (8005ea0 <ISM330DHCX_0_Probe+0x158>)
 8005dd4:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS02A1_ISM330DHCX_0] = &ism330dhcx_obj_0;
 8005dd6:	4b33      	ldr	r3, [pc, #204]	; (8005ea4 <ISM330DHCX_0_Probe+0x15c>)
 8005dd8:	4a30      	ldr	r2, [pc, #192]	; (8005e9c <ISM330DHCX_0_Probe+0x154>)
 8005dda:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 8005ddc:	4b32      	ldr	r3, [pc, #200]	; (8005ea8 <ISM330DHCX_0_Probe+0x160>)
 8005dde:	4a33      	ldr	r2, [pc, #204]	; (8005eac <ISM330DHCX_0_Probe+0x164>)
 8005de0:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d11d      	bne.n	8005e24 <ISM330DHCX_0_Probe+0xdc>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d018      	beq.n	8005e24 <ISM330DHCX_0_Probe+0xdc>
 8005df2:	7a7b      	ldrb	r3, [r7, #9]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d115      	bne.n	8005e24 <ISM330DHCX_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 8005df8:	4b2d      	ldr	r3, [pc, #180]	; (8005eb0 <ISM330DHCX_0_Probe+0x168>)
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	4a2d      	ldr	r2, [pc, #180]	; (8005eb4 <ISM330DHCX_0_Probe+0x16c>)
 8005dfe:	492e      	ldr	r1, [pc, #184]	; (8005eb8 <ISM330DHCX_0_Probe+0x170>)
 8005e00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 8005e04:	4b28      	ldr	r3, [pc, #160]	; (8005ea8 <ISM330DHCX_0_Probe+0x160>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a26      	ldr	r2, [pc, #152]	; (8005ea4 <ISM330DHCX_0_Probe+0x15c>)
 8005e0c:	6812      	ldr	r2, [r2, #0]
 8005e0e:	4610      	mov	r0, r2
 8005e10:	4798      	blx	r3
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <ISM330DHCX_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e18:	f06f 0304 	mvn.w	r3, #4
 8005e1c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e1e:	e001      	b.n	8005e24 <ISM330DHCX_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e20:	2300      	movs	r3, #0
 8005e22:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d11d      	bne.n	8005e66 <ISM330DHCX_0_Probe+0x11e>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d018      	beq.n	8005e66 <ISM330DHCX_0_Probe+0x11e>
 8005e34:	7a3b      	ldrb	r3, [r7, #8]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d115      	bne.n	8005e66 <ISM330DHCX_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005e3a:	4b1d      	ldr	r3, [pc, #116]	; (8005eb0 <ISM330DHCX_0_Probe+0x168>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	4a1d      	ldr	r2, [pc, #116]	; (8005eb4 <ISM330DHCX_0_Probe+0x16c>)
 8005e40:	491e      	ldr	r1, [pc, #120]	; (8005ebc <ISM330DHCX_0_Probe+0x174>)
 8005e42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                              void *)&ISM330DHCX_ACC_Driver;

      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 8005e46:	4b18      	ldr	r3, [pc, #96]	; (8005ea8 <ISM330DHCX_0_Probe+0x160>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a15      	ldr	r2, [pc, #84]	; (8005ea4 <ISM330DHCX_0_Probe+0x15c>)
 8005e4e:	6812      	ldr	r2, [r2, #0]
 8005e50:	4610      	mov	r0, r2
 8005e52:	4798      	blx	r3
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <ISM330DHCX_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e5a:	f06f 0304 	mvn.w	r3, #4
 8005e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e60:	e001      	b.n	8005e66 <ISM330DHCX_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e62:	2300      	movs	r3, #0
 8005e64:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d107      	bne.n	8005e7c <ISM330DHCX_0_Probe+0x134>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <ISM330DHCX_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e76:	f06f 0304 	mvn.w	r3, #4
 8005e7a:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3748      	adds	r7, #72	; 0x48
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	08001799 	.word	0x08001799
 8005e8c:	080017fd 	.word	0x080017fd
 8005e90:	080018b1 	.word	0x080018b1
 8005e94:	0800184d 	.word	0x0800184d
 8005e98:	08001915 	.word	0x08001915
 8005e9c:	200004e0 	.word	0x200004e0
 8005ea0:	200004d4 	.word	0x200004d4
 8005ea4:	20000498 	.word	0x20000498
 8005ea8:	200004c8 	.word	0x200004c8
 8005eac:	2000006c 	.word	0x2000006c
 8005eb0:	200000c4 	.word	0x200000c4
 8005eb4:	200004a4 	.word	0x200004a4
 8005eb8:	200000a0 	.word	0x200000a0
 8005ebc:	2000007c 	.word	0x2000007c

08005ec0 <IIS2DLPC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t IIS2DLPC_0_Probe(uint32_t Functions)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b092      	sub	sp, #72	; 0x48
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  IIS2DLPC_IO_t            io_ctx;
  uint8_t                  id;
  static IIS2DLPC_Object_t iis2dlpc_obj_0;
  IIS2DLPC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = IIS2DLPC_I2C_BUS; /* I2C */
 8005ecc:	2300      	movs	r3, #0
 8005ece:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = IIS2DLPC_I2C_ADD_H;
 8005ed0:	2333      	movs	r3, #51	; 0x33
 8005ed2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS02A1_I2C_Init;
 8005ed6:	4b41      	ldr	r3, [pc, #260]	; (8005fdc <IIS2DLPC_0_Probe+0x11c>)
 8005ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 8005eda:	4b41      	ldr	r3, [pc, #260]	; (8005fe0 <IIS2DLPC_0_Probe+0x120>)
 8005edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 8005ede:	4b41      	ldr	r3, [pc, #260]	; (8005fe4 <IIS2DLPC_0_Probe+0x124>)
 8005ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 8005ee2:	4b41      	ldr	r3, [pc, #260]	; (8005fe8 <IIS2DLPC_0_Probe+0x128>)
 8005ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS02A1_GetTick;
 8005ee6:	4b41      	ldr	r3, [pc, #260]	; (8005fec <IIS2DLPC_0_Probe+0x12c>)
 8005ee8:	643b      	str	r3, [r7, #64]	; 0x40

  if (IIS2DLPC_RegisterBusIO(&iis2dlpc_obj_0, &io_ctx) != IIS2DLPC_OK)
 8005eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005eee:	4619      	mov	r1, r3
 8005ef0:	483f      	ldr	r0, [pc, #252]	; (8005ff0 <IIS2DLPC_0_Probe+0x130>)
 8005ef2:	f7fb fe77 	bl	8001be4 <IIS2DLPC_RegisterBusIO>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <IIS2DLPC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005efc:	f06f 0306 	mvn.w	r3, #6
 8005f00:	647b      	str	r3, [r7, #68]	; 0x44
 8005f02:	e065      	b.n	8005fd0 <IIS2DLPC_0_Probe+0x110>
  }
  else if (IIS2DLPC_ReadID(&iis2dlpc_obj_0, &id) != IIS2DLPC_OK)
 8005f04:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4839      	ldr	r0, [pc, #228]	; (8005ff0 <IIS2DLPC_0_Probe+0x130>)
 8005f0c:	f7fb ff54 	bl	8001db8 <IIS2DLPC_ReadID>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <IIS2DLPC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f16:	f06f 0306 	mvn.w	r3, #6
 8005f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f1c:	e058      	b.n	8005fd0 <IIS2DLPC_0_Probe+0x110>
  }
  else if (id != IIS2DLPC_ID)
 8005f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f22:	2b44      	cmp	r3, #68	; 0x44
 8005f24:	d003      	beq.n	8005f2e <IIS2DLPC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f26:	f06f 0306 	mvn.w	r3, #6
 8005f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f2c:	e050      	b.n	8005fd0 <IIS2DLPC_0_Probe+0x110>
  }
  else
  {
    (void)IIS2DLPC_GetCapabilities(&iis2dlpc_obj_0, &cap);
 8005f2e:	f107 0308 	add.w	r3, r7, #8
 8005f32:	4619      	mov	r1, r3
 8005f34:	482e      	ldr	r0, [pc, #184]	; (8005ff0 <IIS2DLPC_0_Probe+0x130>)
 8005f36:	f7fb ff55 	bl	8001de4 <IIS2DLPC_GetCapabilities>
    MotionCtx[IKS02A1_IIS2DLPC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005f3a:	7a7b      	ldrb	r3, [r7, #9]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	7a3b      	ldrb	r3, [r7, #8]
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	431a      	orrs	r2, r3
 8005f44:	7abb      	ldrb	r3, [r7, #10]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	4a2a      	ldr	r2, [pc, #168]	; (8005ff4 <IIS2DLPC_0_Probe+0x134>)
 8005f4c:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS02A1_IIS2DLPC_0] = &iis2dlpc_obj_0;
 8005f4e:	4b2a      	ldr	r3, [pc, #168]	; (8005ff8 <IIS2DLPC_0_Probe+0x138>)
 8005f50:	4a27      	ldr	r2, [pc, #156]	; (8005ff0 <IIS2DLPC_0_Probe+0x130>)
 8005f52:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_IIS2DLPC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2DLPC_COMMON_Driver;
 8005f54:	4b29      	ldr	r3, [pc, #164]	; (8005ffc <IIS2DLPC_0_Probe+0x13c>)
 8005f56:	4a2a      	ldr	r2, [pc, #168]	; (8006000 <IIS2DLPC_0_Probe+0x140>)
 8005f58:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10a      	bne.n	8005f76 <IIS2DLPC_0_Probe+0xb6>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <IIS2DLPC_0_Probe+0xb6>
 8005f6a:	7a7b      	ldrb	r3, [r7, #9]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d102      	bne.n	8005f76 <IIS2DLPC_0_Probe+0xb6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f70:	f06f 0304 	mvn.w	r3, #4
 8005f74:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d11e      	bne.n	8005fba <IIS2DLPC_0_Probe+0xfa>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d019      	beq.n	8005fba <IIS2DLPC_0_Probe+0xfa>
 8005f86:	7a3b      	ldrb	r3, [r7, #8]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d116      	bne.n	8005fba <IIS2DLPC_0_Probe+0xfa>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_IIS2DLPC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005f8c:	4b1d      	ldr	r3, [pc, #116]	; (8006004 <IIS2DLPC_0_Probe+0x144>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	4a1d      	ldr	r2, [pc, #116]	; (8006008 <IIS2DLPC_0_Probe+0x148>)
 8005f92:	3303      	adds	r3, #3
 8005f94:	491d      	ldr	r1, [pc, #116]	; (800600c <IIS2DLPC_0_Probe+0x14c>)
 8005f96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&IIS2DLPC_ACC_Driver;

      if (MotionDrv[IKS02A1_IIS2DLPC_0]->Init(MotionCompObj[IKS02A1_IIS2DLPC_0]) != IIS2DLPC_OK)
 8005f9a:	4b18      	ldr	r3, [pc, #96]	; (8005ffc <IIS2DLPC_0_Probe+0x13c>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a15      	ldr	r2, [pc, #84]	; (8005ff8 <IIS2DLPC_0_Probe+0x138>)
 8005fa2:	6852      	ldr	r2, [r2, #4]
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	4798      	blx	r3
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <IIS2DLPC_0_Probe+0xf6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fae:	f06f 0304 	mvn.w	r3, #4
 8005fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005fb4:	e001      	b.n	8005fba <IIS2DLPC_0_Probe+0xfa>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d107      	bne.n	8005fd0 <IIS2DLPC_0_Probe+0x110>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <IIS2DLPC_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fca:	f06f 0304 	mvn.w	r3, #4
 8005fce:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3748      	adds	r7, #72	; 0x48
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	08001799 	.word	0x08001799
 8005fe0:	080017fd 	.word	0x080017fd
 8005fe4:	080018b1 	.word	0x080018b1
 8005fe8:	0800184d 	.word	0x0800184d
 8005fec:	08001915 	.word	0x08001915
 8005ff0:	20000510 	.word	0x20000510
 8005ff4:	200004d4 	.word	0x200004d4
 8005ff8:	20000498 	.word	0x20000498
 8005ffc:	200004c8 	.word	0x200004c8
 8006000:	20000004 	.word	0x20000004
 8006004:	200000c4 	.word	0x200000c4
 8006008:	200004a4 	.word	0x200004a4
 800600c:	20000014 	.word	0x20000014

08006010 <IIS2MDC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t IIS2MDC_0_Probe(uint32_t Functions)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b092      	sub	sp, #72	; 0x48
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  IIS2MDC_IO_t            io_ctx;
  uint8_t                 id;
  static IIS2MDC_Object_t iis2mdc_obj_0;
  IIS2MDC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8006018:	2300      	movs	r3, #0
 800601a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = IIS2MDC_I2C_BUS; /* I2C */
 800601c:	2300      	movs	r3, #0
 800601e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = IIS2MDC_I2C_ADD;
 8006020:	233d      	movs	r3, #61	; 0x3d
 8006022:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS02A1_I2C_Init;
 8006026:	4b41      	ldr	r3, [pc, #260]	; (800612c <IIS2MDC_0_Probe+0x11c>)
 8006028:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 800602a:	4b41      	ldr	r3, [pc, #260]	; (8006130 <IIS2MDC_0_Probe+0x120>)
 800602c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 800602e:	4b41      	ldr	r3, [pc, #260]	; (8006134 <IIS2MDC_0_Probe+0x124>)
 8006030:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 8006032:	4b41      	ldr	r3, [pc, #260]	; (8006138 <IIS2MDC_0_Probe+0x128>)
 8006034:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS02A1_GetTick;
 8006036:	4b41      	ldr	r3, [pc, #260]	; (800613c <IIS2MDC_0_Probe+0x12c>)
 8006038:	643b      	str	r3, [r7, #64]	; 0x40

  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 800603a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800603e:	4619      	mov	r1, r3
 8006040:	483f      	ldr	r0, [pc, #252]	; (8006140 <IIS2MDC_0_Probe+0x130>)
 8006042:	f7fd f8dd 	bl	8003200 <IIS2MDC_RegisterBusIO>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <IIS2MDC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800604c:	f06f 0306 	mvn.w	r3, #6
 8006050:	647b      	str	r3, [r7, #68]	; 0x44
 8006052:	e065      	b.n	8006120 <IIS2MDC_0_Probe+0x110>
  }
  else if (IIS2MDC_ReadID(&iis2mdc_obj_0, &id) != IIS2MDC_OK)
 8006054:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006058:	4619      	mov	r1, r3
 800605a:	4839      	ldr	r0, [pc, #228]	; (8006140 <IIS2MDC_0_Probe+0x130>)
 800605c:	f7fd f987 	bl	800336e <IIS2MDC_ReadID>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <IIS2MDC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006066:	f06f 0306 	mvn.w	r3, #6
 800606a:	647b      	str	r3, [r7, #68]	; 0x44
 800606c:	e058      	b.n	8006120 <IIS2MDC_0_Probe+0x110>
  }
  else if (id != IIS2MDC_ID)
 800606e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006072:	2b40      	cmp	r3, #64	; 0x40
 8006074:	d003      	beq.n	800607e <IIS2MDC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006076:	f06f 0306 	mvn.w	r3, #6
 800607a:	647b      	str	r3, [r7, #68]	; 0x44
 800607c:	e050      	b.n	8006120 <IIS2MDC_0_Probe+0x110>
  }
  else
  {
    (void)IIS2MDC_GetCapabilities(&iis2mdc_obj_0, &cap);
 800607e:	f107 0308 	add.w	r3, r7, #8
 8006082:	4619      	mov	r1, r3
 8006084:	482e      	ldr	r0, [pc, #184]	; (8006140 <IIS2MDC_0_Probe+0x130>)
 8006086:	f7fd f989 	bl	800339c <IIS2MDC_GetCapabilities>
    MotionCtx[IKS02A1_IIS2MDC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800608a:	7a7b      	ldrb	r3, [r7, #9]
 800608c:	461a      	mov	r2, r3
 800608e:	7a3b      	ldrb	r3, [r7, #8]
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	431a      	orrs	r2, r3
 8006094:	7abb      	ldrb	r3, [r7, #10]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4313      	orrs	r3, r2
 800609a:	4a2a      	ldr	r2, [pc, #168]	; (8006144 <IIS2MDC_0_Probe+0x134>)
 800609c:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS02A1_IIS2MDC_0] = &iis2mdc_obj_0;
 800609e:	4b2a      	ldr	r3, [pc, #168]	; (8006148 <IIS2MDC_0_Probe+0x138>)
 80060a0:	4a27      	ldr	r2, [pc, #156]	; (8006140 <IIS2MDC_0_Probe+0x130>)
 80060a2:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_IIS2MDC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2MDC_COMMON_Driver;
 80060a4:	4b29      	ldr	r3, [pc, #164]	; (800614c <IIS2MDC_0_Probe+0x13c>)
 80060a6:	4a2a      	ldr	r2, [pc, #168]	; (8006150 <IIS2MDC_0_Probe+0x140>)
 80060a8:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80060aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <IIS2MDC_0_Probe+0xb6>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d005      	beq.n	80060c6 <IIS2MDC_0_Probe+0xb6>
 80060ba:	7a7b      	ldrb	r3, [r7, #9]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d102      	bne.n	80060c6 <IIS2MDC_0_Probe+0xb6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80060c0:	f06f 0304 	mvn.w	r3, #4
 80060c4:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80060c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <IIS2MDC_0_Probe+0xd2>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <IIS2MDC_0_Probe+0xd2>
 80060d6:	7a3b      	ldrb	r3, [r7, #8]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d102      	bne.n	80060e2 <IIS2MDC_0_Probe+0xd2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80060dc:	f06f 0304 	mvn.w	r3, #4
 80060e0:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80060e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d11b      	bne.n	8006120 <IIS2MDC_0_Probe+0x110>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f003 0304 	and.w	r3, r3, #4
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d016      	beq.n	8006120 <IIS2MDC_0_Probe+0x110>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_IIS2MDC_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80060f2:	4b18      	ldr	r3, [pc, #96]	; (8006154 <IIS2MDC_0_Probe+0x144>)
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	4a18      	ldr	r2, [pc, #96]	; (8006158 <IIS2MDC_0_Probe+0x148>)
 80060f8:	3306      	adds	r3, #6
 80060fa:	4918      	ldr	r1, [pc, #96]	; (800615c <IIS2MDC_0_Probe+0x14c>)
 80060fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&IIS2MDC_MAG_Driver;

      if (MotionDrv[IKS02A1_IIS2MDC_0]->Init(MotionCompObj[IKS02A1_IIS2MDC_0]) != IIS2MDC_OK)
 8006100:	4b12      	ldr	r3, [pc, #72]	; (800614c <IIS2MDC_0_Probe+0x13c>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a10      	ldr	r2, [pc, #64]	; (8006148 <IIS2MDC_0_Probe+0x138>)
 8006108:	6892      	ldr	r2, [r2, #8]
 800610a:	4610      	mov	r0, r2
 800610c:	4798      	blx	r3
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <IIS2MDC_0_Probe+0x10c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006114:	f06f 0304 	mvn.w	r3, #4
 8006118:	647b      	str	r3, [r7, #68]	; 0x44
 800611a:	e001      	b.n	8006120 <IIS2MDC_0_Probe+0x110>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800611c:	2300      	movs	r3, #0
 800611e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
  }
  return ret;
 8006120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006122:	4618      	mov	r0, r3
 8006124:	3748      	adds	r7, #72	; 0x48
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	08001799 	.word	0x08001799
 8006130:	080017fd 	.word	0x080017fd
 8006134:	080018b1 	.word	0x080018b1
 8006138:	0800184d 	.word	0x0800184d
 800613c:	08001915 	.word	0x08001915
 8006140:	20000544 	.word	0x20000544
 8006144:	200004d4 	.word	0x200004d4
 8006148:	20000498 	.word	0x20000498
 800614c:	200004c8 	.word	0x200004c8
 8006150:	20000038 	.word	0x20000038
 8006154:	200000c4 	.word	0x200000c4
 8006158:	200004a4 	.word	0x200004a4
 800615c:	20000048 	.word	0x20000048

08006160 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	4603      	mov	r3, r0
 8006168:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800616a:	79fb      	ldrb	r3, [r7, #7]
 800616c:	4a04      	ldr	r2, [pc, #16]	; (8006180 <BSP_LED_Init+0x20>)
 800616e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006172:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	0800cca8 	.word	0x0800cca8

08006184 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8006184:	b480      	push	{r7}
 8006186:	af00      	add	r7, sp, #0
}
 8006188:	bf00      	nop
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
	...

08006194 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	4603      	mov	r3, r0
 800619c:	460a      	mov	r2, r1
 800619e:	71fb      	strb	r3, [r7, #7]
 80061a0:	4613      	mov	r3, r2
 80061a2:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 80061a8:	79fb      	ldrb	r3, [r7, #7]
 80061aa:	4a1f      	ldr	r2, [pc, #124]	; (8006228 <BSP_PB_Init+0x94>)
 80061ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b0:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 80061b2:	79bb      	ldrb	r3, [r7, #6]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d132      	bne.n	800621e <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80061b8:	79fb      	ldrb	r3, [r7, #7]
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	4a1b      	ldr	r2, [pc, #108]	; (800622c <BSP_PB_Init+0x98>)
 80061be:	441a      	add	r2, r3
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	491b      	ldr	r1, [pc, #108]	; (8006230 <BSP_PB_Init+0x9c>)
 80061c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80061c8:	4619      	mov	r1, r3
 80061ca:	4610      	mov	r0, r2
 80061cc:	f000 fb03 	bl	80067d6 <HAL_EXTI_GetHandle>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80061d6:	f06f 0303 	mvn.w	r3, #3
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	e01f      	b.n	800621e <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80061de:	79fb      	ldrb	r3, [r7, #7]
 80061e0:	00db      	lsls	r3, r3, #3
 80061e2:	4a12      	ldr	r2, [pc, #72]	; (800622c <BSP_PB_Init+0x98>)
 80061e4:	1898      	adds	r0, r3, r2
 80061e6:	79fb      	ldrb	r3, [r7, #7]
 80061e8:	4a12      	ldr	r2, [pc, #72]	; (8006234 <BSP_PB_Init+0xa0>)
 80061ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ee:	461a      	mov	r2, r3
 80061f0:	2100      	movs	r1, #0
 80061f2:	f000 fad6 	bl	80067a2 <HAL_EXTI_RegisterCallback>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80061fc:	f06f 0303 	mvn.w	r3, #3
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	e00c      	b.n	800621e <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8006204:	2028      	movs	r0, #40	; 0x28
 8006206:	79fb      	ldrb	r3, [r7, #7]
 8006208:	4a0b      	ldr	r2, [pc, #44]	; (8006238 <BSP_PB_Init+0xa4>)
 800620a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800620e:	2200      	movs	r2, #0
 8006210:	4619      	mov	r1, r3
 8006212:	f000 fa90 	bl	8006736 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8006216:	2328      	movs	r3, #40	; 0x28
 8006218:	4618      	mov	r0, r3
 800621a:	f000 faa8 	bl	800676e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800621e:	68fb      	ldr	r3, [r7, #12]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	0800ccac 	.word	0x0800ccac
 800622c:	200000dc 	.word	0x200000dc
 8006230:	0800ccb0 	.word	0x0800ccb0
 8006234:	0800ccb4 	.word	0x0800ccb4
 8006238:	0800ccb8 	.word	0x0800ccb8

0800623c <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	4603      	mov	r3, r0
 8006244:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8006246:	79fb      	ldrb	r3, [r7, #7]
 8006248:	4a09      	ldr	r2, [pc, #36]	; (8006270 <BSP_PB_GetState+0x34>)
 800624a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800624e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006252:	4611      	mov	r1, r2
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fd5f 	bl	8006d18 <HAL_GPIO_ReadPin>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	bf0c      	ite	eq
 8006260:	2301      	moveq	r3, #1
 8006262:	2300      	movne	r3, #0
 8006264:	b2db      	uxtb	r3, r3
}
 8006266:	4618      	mov	r0, r3
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	200000d8 	.word	0x200000d8

08006274 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8006278:	2000      	movs	r0, #0
 800627a:	f7fa ffab 	bl	80011d4 <BSP_PB_Callback>
}
 800627e:	bf00      	nop
 8006280:	bd80      	pop	{r7, pc}

08006282 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8006282:	b480      	push	{r7}
 8006284:	af00      	add	r7, sp, #0
}
 8006286:	bf00      	nop
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d903      	bls.n	80062ac <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80062a4:	f06f 0301 	mvn.w	r3, #1
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	e025      	b.n	80062f8 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80062ac:	79fb      	ldrb	r3, [r7, #7]
 80062ae:	79fa      	ldrb	r2, [r7, #7]
 80062b0:	4914      	ldr	r1, [pc, #80]	; (8006304 <BSP_COM_Init+0x74>)
 80062b2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80062b6:	4814      	ldr	r0, [pc, #80]	; (8006308 <BSP_COM_Init+0x78>)
 80062b8:	4613      	mov	r3, r2
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	4413      	add	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4403      	add	r3, r0
 80062c2:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 80062c4:	79fa      	ldrb	r2, [r7, #7]
 80062c6:	4613      	mov	r3, r2
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	4413      	add	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4a0e      	ldr	r2, [pc, #56]	; (8006308 <BSP_COM_Init+0x78>)
 80062d0:	4413      	add	r3, r2
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 f864 	bl	80063a0 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 80062d8:	79fa      	ldrb	r2, [r7, #7]
 80062da:	4613      	mov	r3, r2
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	4413      	add	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4a09      	ldr	r2, [pc, #36]	; (8006308 <BSP_COM_Init+0x78>)
 80062e4:	4413      	add	r3, r2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 f810 	bl	800630c <MX_USART2_UART_Init>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80062f2:	f06f 0303 	mvn.w	r3, #3
 80062f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80062f8:	68fb      	ldr	r3, [r7, #12]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	200000e4 	.word	0x200000e4
 8006308:	20000570 	.word	0x20000570

0800630c <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a12      	ldr	r2, [pc, #72]	; (8006364 <MX_USART2_UART_Init+0x58>)
 800631c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006324:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	220c      	movs	r2, #12
 800633c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f002 f9b2 	bl	80086b4 <HAL_UART_Init>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800635a:	7bfb      	ldrb	r3, [r7, #15]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	40004400 	.word	0x40004400

08006368 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8006370:	4b09      	ldr	r3, [pc, #36]	; (8006398 <__io_putchar+0x30>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	4613      	mov	r3, r2
 8006378:	011b      	lsls	r3, r3, #4
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4a07      	ldr	r2, [pc, #28]	; (800639c <__io_putchar+0x34>)
 8006380:	1898      	adds	r0, r3, r2
 8006382:	1d39      	adds	r1, r7, #4
 8006384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006388:	2201      	movs	r2, #1
 800638a:	f002 f9ea 	bl	8008762 <HAL_UART_Transmit>
  return ch;
 800638e:	687b      	ldr	r3, [r7, #4]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	200005b4 	.word	0x200005b4
 800639c:	20000570 	.word	0x20000570

080063a0 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08a      	sub	sp, #40	; 0x28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80063a8:	2300      	movs	r3, #0
 80063aa:	613b      	str	r3, [r7, #16]
 80063ac:	4b1e      	ldr	r3, [pc, #120]	; (8006428 <USART2_MspInit+0x88>)
 80063ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b0:	4a1d      	ldr	r2, [pc, #116]	; (8006428 <USART2_MspInit+0x88>)
 80063b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b6:	6413      	str	r3, [r2, #64]	; 0x40
 80063b8:	4b1b      	ldr	r3, [pc, #108]	; (8006428 <USART2_MspInit+0x88>)
 80063ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c0:	613b      	str	r3, [r7, #16]
 80063c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	4b17      	ldr	r3, [pc, #92]	; (8006428 <USART2_MspInit+0x88>)
 80063ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063cc:	4a16      	ldr	r2, [pc, #88]	; (8006428 <USART2_MspInit+0x88>)
 80063ce:	f043 0301 	orr.w	r3, r3, #1
 80063d2:	6313      	str	r3, [r2, #48]	; 0x30
 80063d4:	4b14      	ldr	r3, [pc, #80]	; (8006428 <USART2_MspInit+0x88>)
 80063d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80063e0:	2304      	movs	r3, #4
 80063e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063e4:	2302      	movs	r3, #2
 80063e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e8:	2300      	movs	r3, #0
 80063ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063ec:	2303      	movs	r3, #3
 80063ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80063f0:	2307      	movs	r3, #7
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80063f4:	f107 0314 	add.w	r3, r7, #20
 80063f8:	4619      	mov	r1, r3
 80063fa:	480c      	ldr	r0, [pc, #48]	; (800642c <USART2_MspInit+0x8c>)
 80063fc:	f000 fa24 	bl	8006848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8006400:	2308      	movs	r3, #8
 8006402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006404:	2302      	movs	r3, #2
 8006406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006408:	2300      	movs	r3, #0
 800640a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800640c:	2303      	movs	r3, #3
 800640e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8006410:	2307      	movs	r3, #7
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8006414:	f107 0314 	add.w	r3, r7, #20
 8006418:	4619      	mov	r1, r3
 800641a:	4804      	ldr	r0, [pc, #16]	; (800642c <USART2_MspInit+0x8c>)
 800641c:	f000 fa14 	bl	8006848 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8006420:	bf00      	nop
 8006422:	3728      	adds	r7, #40	; 0x28
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	40023800 	.word	0x40023800
 800642c:	40020000 	.word	0x40020000

08006430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <SystemInit+0x20>)
 8006436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643a:	4a05      	ldr	r2, [pc, #20]	; (8006450 <SystemInit+0x20>)
 800643c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	e000ed00 	.word	0xe000ed00

08006454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006458:	4b0e      	ldr	r3, [pc, #56]	; (8006494 <HAL_Init+0x40>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a0d      	ldr	r2, [pc, #52]	; (8006494 <HAL_Init+0x40>)
 800645e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006462:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006464:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <HAL_Init+0x40>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a0a      	ldr	r2, [pc, #40]	; (8006494 <HAL_Init+0x40>)
 800646a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800646e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006470:	4b08      	ldr	r3, [pc, #32]	; (8006494 <HAL_Init+0x40>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a07      	ldr	r2, [pc, #28]	; (8006494 <HAL_Init+0x40>)
 8006476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800647a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800647c:	2003      	movs	r0, #3
 800647e:	f000 f94f 	bl	8006720 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006482:	2000      	movs	r0, #0
 8006484:	f000 f808 	bl	8006498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006488:	f7fb f92a 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	40023c00 	.word	0x40023c00

08006498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80064a0:	4b12      	ldr	r3, [pc, #72]	; (80064ec <HAL_InitTick+0x54>)
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <HAL_InitTick+0x58>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	4619      	mov	r1, r3
 80064aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80064b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 f967 	bl	800678a <HAL_SYSTICK_Config>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e00e      	b.n	80064e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b0f      	cmp	r3, #15
 80064ca:	d80a      	bhi.n	80064e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064cc:	2200      	movs	r2, #0
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	f04f 30ff 	mov.w	r0, #4294967295
 80064d4:	f000 f92f 	bl	8006736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80064d8:	4a06      	ldr	r2, [pc, #24]	; (80064f4 <HAL_InitTick+0x5c>)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	e000      	b.n	80064e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	200000e8 	.word	0x200000e8
 80064f0:	200000f0 	.word	0x200000f0
 80064f4:	200000ec 	.word	0x200000ec

080064f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064fc:	4b06      	ldr	r3, [pc, #24]	; (8006518 <HAL_IncTick+0x20>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	4b06      	ldr	r3, [pc, #24]	; (800651c <HAL_IncTick+0x24>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4413      	add	r3, r2
 8006508:	4a04      	ldr	r2, [pc, #16]	; (800651c <HAL_IncTick+0x24>)
 800650a:	6013      	str	r3, [r2, #0]
}
 800650c:	bf00      	nop
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	200000f0 	.word	0x200000f0
 800651c:	200005b8 	.word	0x200005b8

08006520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006520:	b480      	push	{r7}
 8006522:	af00      	add	r7, sp, #0
  return uwTick;
 8006524:	4b03      	ldr	r3, [pc, #12]	; (8006534 <HAL_GetTick+0x14>)
 8006526:	681b      	ldr	r3, [r3, #0]
}
 8006528:	4618      	mov	r0, r3
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	200005b8 	.word	0x200005b8

08006538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006540:	f7ff ffee 	bl	8006520 <HAL_GetTick>
 8006544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d005      	beq.n	800655e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006552:	4b0a      	ldr	r3, [pc, #40]	; (800657c <HAL_Delay+0x44>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800655e:	bf00      	nop
 8006560:	f7ff ffde 	bl	8006520 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	429a      	cmp	r2, r3
 800656e:	d8f7      	bhi.n	8006560 <HAL_Delay+0x28>
  {
  }
}
 8006570:	bf00      	nop
 8006572:	bf00      	nop
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	200000f0 	.word	0x200000f0

08006580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006590:	4b0c      	ldr	r3, [pc, #48]	; (80065c4 <__NVIC_SetPriorityGrouping+0x44>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800659c:	4013      	ands	r3, r2
 800659e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80065ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065b2:	4a04      	ldr	r2, [pc, #16]	; (80065c4 <__NVIC_SetPriorityGrouping+0x44>)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	60d3      	str	r3, [r2, #12]
}
 80065b8:	bf00      	nop
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	e000ed00 	.word	0xe000ed00

080065c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065cc:	4b04      	ldr	r3, [pc, #16]	; (80065e0 <__NVIC_GetPriorityGrouping+0x18>)
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	0a1b      	lsrs	r3, r3, #8
 80065d2:	f003 0307 	and.w	r3, r3, #7
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	e000ed00 	.word	0xe000ed00

080065e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	4603      	mov	r3, r0
 80065ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	db0b      	blt.n	800660e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065f6:	79fb      	ldrb	r3, [r7, #7]
 80065f8:	f003 021f 	and.w	r2, r3, #31
 80065fc:	4907      	ldr	r1, [pc, #28]	; (800661c <__NVIC_EnableIRQ+0x38>)
 80065fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006602:	095b      	lsrs	r3, r3, #5
 8006604:	2001      	movs	r0, #1
 8006606:	fa00 f202 	lsl.w	r2, r0, r2
 800660a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	e000e100 	.word	0xe000e100

08006620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	6039      	str	r1, [r7, #0]
 800662a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800662c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006630:	2b00      	cmp	r3, #0
 8006632:	db0a      	blt.n	800664a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	b2da      	uxtb	r2, r3
 8006638:	490c      	ldr	r1, [pc, #48]	; (800666c <__NVIC_SetPriority+0x4c>)
 800663a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800663e:	0112      	lsls	r2, r2, #4
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	440b      	add	r3, r1
 8006644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006648:	e00a      	b.n	8006660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	b2da      	uxtb	r2, r3
 800664e:	4908      	ldr	r1, [pc, #32]	; (8006670 <__NVIC_SetPriority+0x50>)
 8006650:	79fb      	ldrb	r3, [r7, #7]
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	3b04      	subs	r3, #4
 8006658:	0112      	lsls	r2, r2, #4
 800665a:	b2d2      	uxtb	r2, r2
 800665c:	440b      	add	r3, r1
 800665e:	761a      	strb	r2, [r3, #24]
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	e000e100 	.word	0xe000e100
 8006670:	e000ed00 	.word	0xe000ed00

08006674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006674:	b480      	push	{r7}
 8006676:	b089      	sub	sp, #36	; 0x24
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	f1c3 0307 	rsb	r3, r3, #7
 800668e:	2b04      	cmp	r3, #4
 8006690:	bf28      	it	cs
 8006692:	2304      	movcs	r3, #4
 8006694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	3304      	adds	r3, #4
 800669a:	2b06      	cmp	r3, #6
 800669c:	d902      	bls.n	80066a4 <NVIC_EncodePriority+0x30>
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	3b03      	subs	r3, #3
 80066a2:	e000      	b.n	80066a6 <NVIC_EncodePriority+0x32>
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066a8:	f04f 32ff 	mov.w	r2, #4294967295
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	fa02 f303 	lsl.w	r3, r2, r3
 80066b2:	43da      	mvns	r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	401a      	ands	r2, r3
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066bc:	f04f 31ff 	mov.w	r1, #4294967295
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	fa01 f303 	lsl.w	r3, r1, r3
 80066c6:	43d9      	mvns	r1, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066cc:	4313      	orrs	r3, r2
         );
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3724      	adds	r7, #36	; 0x24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
	...

080066dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066ec:	d301      	bcc.n	80066f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80066ee:	2301      	movs	r3, #1
 80066f0:	e00f      	b.n	8006712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80066f2:	4a0a      	ldr	r2, [pc, #40]	; (800671c <SysTick_Config+0x40>)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066fa:	210f      	movs	r1, #15
 80066fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006700:	f7ff ff8e 	bl	8006620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006704:	4b05      	ldr	r3, [pc, #20]	; (800671c <SysTick_Config+0x40>)
 8006706:	2200      	movs	r2, #0
 8006708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800670a:	4b04      	ldr	r3, [pc, #16]	; (800671c <SysTick_Config+0x40>)
 800670c:	2207      	movs	r2, #7
 800670e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	e000e010 	.word	0xe000e010

08006720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff ff29 	bl	8006580 <__NVIC_SetPriorityGrouping>
}
 800672e:	bf00      	nop
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006736:	b580      	push	{r7, lr}
 8006738:	b086      	sub	sp, #24
 800673a:	af00      	add	r7, sp, #0
 800673c:	4603      	mov	r3, r0
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	607a      	str	r2, [r7, #4]
 8006742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006748:	f7ff ff3e 	bl	80065c8 <__NVIC_GetPriorityGrouping>
 800674c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	6978      	ldr	r0, [r7, #20]
 8006754:	f7ff ff8e 	bl	8006674 <NVIC_EncodePriority>
 8006758:	4602      	mov	r2, r0
 800675a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800675e:	4611      	mov	r1, r2
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff ff5d 	bl	8006620 <__NVIC_SetPriority>
}
 8006766:	bf00      	nop
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	4603      	mov	r3, r0
 8006776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff ff31 	bl	80065e4 <__NVIC_EnableIRQ>
}
 8006782:	bf00      	nop
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b082      	sub	sp, #8
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7ff ffa2 	bl	80066dc <SysTick_Config>
 8006798:	4603      	mov	r3, r0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80067a2:	b480      	push	{r7}
 80067a4:	b087      	sub	sp, #28
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	460b      	mov	r3, r1
 80067ac:	607a      	str	r2, [r7, #4]
 80067ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80067b4:	7afb      	ldrb	r3, [r7, #11]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d103      	bne.n	80067c2 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	605a      	str	r2, [r3, #4]
      break;
 80067c0:	e002      	b.n	80067c8 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	75fb      	strb	r3, [r7, #23]
      break;
 80067c6:	bf00      	nop
  }

  return status;
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e003      	b.n	80067f2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80067f0:	2300      	movs	r3, #0
  }
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
	...

08006800 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 031f 	and.w	r3, r3, #31
 8006810:	2201      	movs	r2, #1
 8006812:	fa02 f303 	lsl.w	r3, r2, r3
 8006816:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8006818:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <HAL_EXTI_IRQHandler+0x44>)
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4013      	ands	r3, r2
 8006820:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d009      	beq.n	800683c <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8006828:	4a06      	ldr	r2, [pc, #24]	; (8006844 <HAL_EXTI_IRQHandler+0x44>)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d002      	beq.n	800683c <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	4798      	blx	r3
    }
  }
}
 800683c:	bf00      	nop
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40013c00 	.word	0x40013c00

08006848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006848:	b480      	push	{r7}
 800684a:	b089      	sub	sp, #36	; 0x24
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006856:	2300      	movs	r3, #0
 8006858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800685a:	2300      	movs	r3, #0
 800685c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800685e:	2300      	movs	r3, #0
 8006860:	61fb      	str	r3, [r7, #28]
 8006862:	e159      	b.n	8006b18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006864:	2201      	movs	r2, #1
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	fa02 f303 	lsl.w	r3, r2, r3
 800686c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	4013      	ands	r3, r2
 8006876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	429a      	cmp	r2, r3
 800687e:	f040 8148 	bne.w	8006b12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	2b01      	cmp	r3, #1
 800688c:	d005      	beq.n	800689a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006896:	2b02      	cmp	r3, #2
 8006898:	d130      	bne.n	80068fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	2203      	movs	r2, #3
 80068a6:	fa02 f303 	lsl.w	r3, r2, r3
 80068aa:	43db      	mvns	r3, r3
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	4013      	ands	r3, r2
 80068b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	fa02 f303 	lsl.w	r3, r2, r3
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80068d0:	2201      	movs	r2, #1
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	fa02 f303 	lsl.w	r3, r2, r3
 80068d8:	43db      	mvns	r3, r3
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	4013      	ands	r3, r2
 80068de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	091b      	lsrs	r3, r3, #4
 80068e6:	f003 0201 	and.w	r2, r3, #1
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	fa02 f303 	lsl.w	r3, r2, r3
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	2b03      	cmp	r3, #3
 8006906:	d017      	beq.n	8006938 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	2203      	movs	r2, #3
 8006914:	fa02 f303 	lsl.w	r3, r2, r3
 8006918:	43db      	mvns	r3, r3
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	4013      	ands	r3, r2
 800691e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	005b      	lsls	r3, r3, #1
 8006928:	fa02 f303 	lsl.w	r3, r2, r3
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	4313      	orrs	r3, r2
 8006930:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	69ba      	ldr	r2, [r7, #24]
 8006936:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f003 0303 	and.w	r3, r3, #3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d123      	bne.n	800698c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	08da      	lsrs	r2, r3, #3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3208      	adds	r2, #8
 800694c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006950:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	f003 0307 	and.w	r3, r3, #7
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	220f      	movs	r2, #15
 800695c:	fa02 f303 	lsl.w	r3, r2, r3
 8006960:	43db      	mvns	r3, r3
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	4013      	ands	r3, r2
 8006966:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	f003 0307 	and.w	r3, r3, #7
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	fa02 f303 	lsl.w	r3, r2, r3
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	4313      	orrs	r3, r2
 800697c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	08da      	lsrs	r2, r3, #3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3208      	adds	r2, #8
 8006986:	69b9      	ldr	r1, [r7, #24]
 8006988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	2203      	movs	r2, #3
 8006998:	fa02 f303 	lsl.w	r3, r2, r3
 800699c:	43db      	mvns	r3, r3
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	4013      	ands	r3, r2
 80069a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f003 0203 	and.w	r2, r3, #3
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	005b      	lsls	r3, r3, #1
 80069b0:	fa02 f303 	lsl.w	r3, r2, r3
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 80a2 	beq.w	8006b12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069ce:	2300      	movs	r3, #0
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	4b57      	ldr	r3, [pc, #348]	; (8006b30 <HAL_GPIO_Init+0x2e8>)
 80069d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d6:	4a56      	ldr	r2, [pc, #344]	; (8006b30 <HAL_GPIO_Init+0x2e8>)
 80069d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069dc:	6453      	str	r3, [r2, #68]	; 0x44
 80069de:	4b54      	ldr	r3, [pc, #336]	; (8006b30 <HAL_GPIO_Init+0x2e8>)
 80069e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069ea:	4a52      	ldr	r2, [pc, #328]	; (8006b34 <HAL_GPIO_Init+0x2ec>)
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	089b      	lsrs	r3, r3, #2
 80069f0:	3302      	adds	r3, #2
 80069f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	f003 0303 	and.w	r3, r3, #3
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	220f      	movs	r2, #15
 8006a02:	fa02 f303 	lsl.w	r3, r2, r3
 8006a06:	43db      	mvns	r3, r3
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a49      	ldr	r2, [pc, #292]	; (8006b38 <HAL_GPIO_Init+0x2f0>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d019      	beq.n	8006a4a <HAL_GPIO_Init+0x202>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a48      	ldr	r2, [pc, #288]	; (8006b3c <HAL_GPIO_Init+0x2f4>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d013      	beq.n	8006a46 <HAL_GPIO_Init+0x1fe>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a47      	ldr	r2, [pc, #284]	; (8006b40 <HAL_GPIO_Init+0x2f8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00d      	beq.n	8006a42 <HAL_GPIO_Init+0x1fa>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a46      	ldr	r2, [pc, #280]	; (8006b44 <HAL_GPIO_Init+0x2fc>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d007      	beq.n	8006a3e <HAL_GPIO_Init+0x1f6>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a45      	ldr	r2, [pc, #276]	; (8006b48 <HAL_GPIO_Init+0x300>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d101      	bne.n	8006a3a <HAL_GPIO_Init+0x1f2>
 8006a36:	2304      	movs	r3, #4
 8006a38:	e008      	b.n	8006a4c <HAL_GPIO_Init+0x204>
 8006a3a:	2307      	movs	r3, #7
 8006a3c:	e006      	b.n	8006a4c <HAL_GPIO_Init+0x204>
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e004      	b.n	8006a4c <HAL_GPIO_Init+0x204>
 8006a42:	2302      	movs	r3, #2
 8006a44:	e002      	b.n	8006a4c <HAL_GPIO_Init+0x204>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e000      	b.n	8006a4c <HAL_GPIO_Init+0x204>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	69fa      	ldr	r2, [r7, #28]
 8006a4e:	f002 0203 	and.w	r2, r2, #3
 8006a52:	0092      	lsls	r2, r2, #2
 8006a54:	4093      	lsls	r3, r2
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a5c:	4935      	ldr	r1, [pc, #212]	; (8006b34 <HAL_GPIO_Init+0x2ec>)
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	089b      	lsrs	r3, r3, #2
 8006a62:	3302      	adds	r3, #2
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a6a:	4b38      	ldr	r3, [pc, #224]	; (8006b4c <HAL_GPIO_Init+0x304>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	43db      	mvns	r3, r3
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	4013      	ands	r3, r2
 8006a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006a8e:	4a2f      	ldr	r2, [pc, #188]	; (8006b4c <HAL_GPIO_Init+0x304>)
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006a94:	4b2d      	ldr	r3, [pc, #180]	; (8006b4c <HAL_GPIO_Init+0x304>)
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ab8:	4a24      	ldr	r2, [pc, #144]	; (8006b4c <HAL_GPIO_Init+0x304>)
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006abe:	4b23      	ldr	r3, [pc, #140]	; (8006b4c <HAL_GPIO_Init+0x304>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	43db      	mvns	r3, r3
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	4013      	ands	r3, r2
 8006acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ae2:	4a1a      	ldr	r2, [pc, #104]	; (8006b4c <HAL_GPIO_Init+0x304>)
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ae8:	4b18      	ldr	r3, [pc, #96]	; (8006b4c <HAL_GPIO_Init+0x304>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	43db      	mvns	r3, r3
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	4013      	ands	r3, r2
 8006af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d003      	beq.n	8006b0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006b0c:	4a0f      	ldr	r2, [pc, #60]	; (8006b4c <HAL_GPIO_Init+0x304>)
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	3301      	adds	r3, #1
 8006b16:	61fb      	str	r3, [r7, #28]
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	2b0f      	cmp	r3, #15
 8006b1c:	f67f aea2 	bls.w	8006864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006b20:	bf00      	nop
 8006b22:	bf00      	nop
 8006b24:	3724      	adds	r7, #36	; 0x24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	40023800 	.word	0x40023800
 8006b34:	40013800 	.word	0x40013800
 8006b38:	40020000 	.word	0x40020000
 8006b3c:	40020400 	.word	0x40020400
 8006b40:	40020800 	.word	0x40020800
 8006b44:	40020c00 	.word	0x40020c00
 8006b48:	40021000 	.word	0x40021000
 8006b4c:	40013c00 	.word	0x40013c00

08006b50 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b66:	2300      	movs	r3, #0
 8006b68:	617b      	str	r3, [r7, #20]
 8006b6a:	e0bb      	b.n	8006ce4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	f040 80ab 	bne.w	8006cde <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006b88:	4a5c      	ldr	r2, [pc, #368]	; (8006cfc <HAL_GPIO_DeInit+0x1ac>)
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	089b      	lsrs	r3, r3, #2
 8006b8e:	3302      	adds	r3, #2
 8006b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b94:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f003 0303 	and.w	r3, r3, #3
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	220f      	movs	r2, #15
 8006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a54      	ldr	r2, [pc, #336]	; (8006d00 <HAL_GPIO_DeInit+0x1b0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d019      	beq.n	8006be6 <HAL_GPIO_DeInit+0x96>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a53      	ldr	r2, [pc, #332]	; (8006d04 <HAL_GPIO_DeInit+0x1b4>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d013      	beq.n	8006be2 <HAL_GPIO_DeInit+0x92>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a52      	ldr	r2, [pc, #328]	; (8006d08 <HAL_GPIO_DeInit+0x1b8>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00d      	beq.n	8006bde <HAL_GPIO_DeInit+0x8e>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a51      	ldr	r2, [pc, #324]	; (8006d0c <HAL_GPIO_DeInit+0x1bc>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d007      	beq.n	8006bda <HAL_GPIO_DeInit+0x8a>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a50      	ldr	r2, [pc, #320]	; (8006d10 <HAL_GPIO_DeInit+0x1c0>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d101      	bne.n	8006bd6 <HAL_GPIO_DeInit+0x86>
 8006bd2:	2304      	movs	r3, #4
 8006bd4:	e008      	b.n	8006be8 <HAL_GPIO_DeInit+0x98>
 8006bd6:	2307      	movs	r3, #7
 8006bd8:	e006      	b.n	8006be8 <HAL_GPIO_DeInit+0x98>
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e004      	b.n	8006be8 <HAL_GPIO_DeInit+0x98>
 8006bde:	2302      	movs	r3, #2
 8006be0:	e002      	b.n	8006be8 <HAL_GPIO_DeInit+0x98>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e000      	b.n	8006be8 <HAL_GPIO_DeInit+0x98>
 8006be6:	2300      	movs	r3, #0
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	f002 0203 	and.w	r2, r2, #3
 8006bee:	0092      	lsls	r2, r2, #2
 8006bf0:	4093      	lsls	r3, r2
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d132      	bne.n	8006c5e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006bf8:	4b46      	ldr	r3, [pc, #280]	; (8006d14 <HAL_GPIO_DeInit+0x1c4>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	43db      	mvns	r3, r3
 8006c00:	4944      	ldr	r1, [pc, #272]	; (8006d14 <HAL_GPIO_DeInit+0x1c4>)
 8006c02:	4013      	ands	r3, r2
 8006c04:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006c06:	4b43      	ldr	r3, [pc, #268]	; (8006d14 <HAL_GPIO_DeInit+0x1c4>)
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	43db      	mvns	r3, r3
 8006c0e:	4941      	ldr	r1, [pc, #260]	; (8006d14 <HAL_GPIO_DeInit+0x1c4>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006c14:	4b3f      	ldr	r3, [pc, #252]	; (8006d14 <HAL_GPIO_DeInit+0x1c4>)
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	43db      	mvns	r3, r3
 8006c1c:	493d      	ldr	r1, [pc, #244]	; (8006d14 <HAL_GPIO_DeInit+0x1c4>)
 8006c1e:	4013      	ands	r3, r2
 8006c20:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006c22:	4b3c      	ldr	r3, [pc, #240]	; (8006d14 <HAL_GPIO_DeInit+0x1c4>)
 8006c24:	689a      	ldr	r2, [r3, #8]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	43db      	mvns	r3, r3
 8006c2a:	493a      	ldr	r1, [pc, #232]	; (8006d14 <HAL_GPIO_DeInit+0x1c4>)
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	220f      	movs	r2, #15
 8006c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006c40:	4a2e      	ldr	r2, [pc, #184]	; (8006cfc <HAL_GPIO_DeInit+0x1ac>)
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	089b      	lsrs	r3, r3, #2
 8006c46:	3302      	adds	r3, #2
 8006c48:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	43da      	mvns	r2, r3
 8006c50:	482a      	ldr	r0, [pc, #168]	; (8006cfc <HAL_GPIO_DeInit+0x1ac>)
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	089b      	lsrs	r3, r3, #2
 8006c56:	400a      	ands	r2, r1
 8006c58:	3302      	adds	r3, #2
 8006c5a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	2103      	movs	r1, #3
 8006c68:	fa01 f303 	lsl.w	r3, r1, r3
 8006c6c:	43db      	mvns	r3, r3
 8006c6e:	401a      	ands	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	08da      	lsrs	r2, r3, #3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	3208      	adds	r2, #8
 8006c7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f003 0307 	and.w	r3, r3, #7
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	220f      	movs	r2, #15
 8006c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8e:	43db      	mvns	r3, r3
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	08d2      	lsrs	r2, r2, #3
 8006c94:	4019      	ands	r1, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	3208      	adds	r2, #8
 8006c9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	2103      	movs	r1, #3
 8006ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cac:	43db      	mvns	r3, r3
 8006cae:	401a      	ands	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	2101      	movs	r1, #1
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc0:	43db      	mvns	r3, r3
 8006cc2:	401a      	ands	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	2103      	movs	r1, #3
 8006cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd6:	43db      	mvns	r3, r3
 8006cd8:	401a      	ands	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2b0f      	cmp	r3, #15
 8006ce8:	f67f af40 	bls.w	8006b6c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006cec:	bf00      	nop
 8006cee:	bf00      	nop
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	40013800 	.word	0x40013800
 8006d00:	40020000 	.word	0x40020000
 8006d04:	40020400 	.word	0x40020400
 8006d08:	40020800 	.word	0x40020800
 8006d0c:	40020c00 	.word	0x40020c00
 8006d10:	40021000 	.word	0x40021000
 8006d14:	40013c00 	.word	0x40013c00

08006d18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	460b      	mov	r3, r1
 8006d22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	691a      	ldr	r2, [r3, #16]
 8006d28:	887b      	ldrh	r3, [r7, #2]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d30:	2301      	movs	r3, #1
 8006d32:	73fb      	strb	r3, [r7, #15]
 8006d34:	e001      	b.n	8006d3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d36:	2300      	movs	r3, #0
 8006d38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e12b      	b.n	8006fb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d106      	bne.n	8006d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f95d 	bl	800702e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2224      	movs	r2, #36	; 0x24
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 0201 	bic.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006daa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006dac:	f001 fc5a 	bl	8008664 <HAL_RCC_GetPCLK1Freq>
 8006db0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	4a81      	ldr	r2, [pc, #516]	; (8006fbc <HAL_I2C_Init+0x274>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d807      	bhi.n	8006dcc <HAL_I2C_Init+0x84>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4a80      	ldr	r2, [pc, #512]	; (8006fc0 <HAL_I2C_Init+0x278>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	bf94      	ite	ls
 8006dc4:	2301      	movls	r3, #1
 8006dc6:	2300      	movhi	r3, #0
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	e006      	b.n	8006dda <HAL_I2C_Init+0x92>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4a7d      	ldr	r2, [pc, #500]	; (8006fc4 <HAL_I2C_Init+0x27c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	bf94      	ite	ls
 8006dd4:	2301      	movls	r3, #1
 8006dd6:	2300      	movhi	r3, #0
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e0e7      	b.n	8006fb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4a78      	ldr	r2, [pc, #480]	; (8006fc8 <HAL_I2C_Init+0x280>)
 8006de6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dea:	0c9b      	lsrs	r3, r3, #18
 8006dec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	4a6a      	ldr	r2, [pc, #424]	; (8006fbc <HAL_I2C_Init+0x274>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d802      	bhi.n	8006e1c <HAL_I2C_Init+0xd4>
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	e009      	b.n	8006e30 <HAL_I2C_Init+0xe8>
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e22:	fb02 f303 	mul.w	r3, r2, r3
 8006e26:	4a69      	ldr	r2, [pc, #420]	; (8006fcc <HAL_I2C_Init+0x284>)
 8006e28:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2c:	099b      	lsrs	r3, r3, #6
 8006e2e:	3301      	adds	r3, #1
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6812      	ldr	r2, [r2, #0]
 8006e34:	430b      	orrs	r3, r1
 8006e36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006e42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	495c      	ldr	r1, [pc, #368]	; (8006fbc <HAL_I2C_Init+0x274>)
 8006e4c:	428b      	cmp	r3, r1
 8006e4e:	d819      	bhi.n	8006e84 <HAL_I2C_Init+0x13c>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	1e59      	subs	r1, r3, #1
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	005b      	lsls	r3, r3, #1
 8006e5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e5e:	1c59      	adds	r1, r3, #1
 8006e60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006e64:	400b      	ands	r3, r1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <HAL_I2C_Init+0x138>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	1e59      	subs	r1, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	005b      	lsls	r3, r3, #1
 8006e74:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e78:	3301      	adds	r3, #1
 8006e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e7e:	e051      	b.n	8006f24 <HAL_I2C_Init+0x1dc>
 8006e80:	2304      	movs	r3, #4
 8006e82:	e04f      	b.n	8006f24 <HAL_I2C_Init+0x1dc>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d111      	bne.n	8006eb0 <HAL_I2C_Init+0x168>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	1e58      	subs	r0, r3, #1
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6859      	ldr	r1, [r3, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	440b      	add	r3, r1
 8006e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	bf0c      	ite	eq
 8006ea8:	2301      	moveq	r3, #1
 8006eaa:	2300      	movne	r3, #0
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	e012      	b.n	8006ed6 <HAL_I2C_Init+0x18e>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	1e58      	subs	r0, r3, #1
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6859      	ldr	r1, [r3, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	0099      	lsls	r1, r3, #2
 8006ec0:	440b      	add	r3, r1
 8006ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	bf0c      	ite	eq
 8006ed0:	2301      	moveq	r3, #1
 8006ed2:	2300      	movne	r3, #0
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <HAL_I2C_Init+0x196>
 8006eda:	2301      	movs	r3, #1
 8006edc:	e022      	b.n	8006f24 <HAL_I2C_Init+0x1dc>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10e      	bne.n	8006f04 <HAL_I2C_Init+0x1bc>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	1e58      	subs	r0, r3, #1
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6859      	ldr	r1, [r3, #4]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	440b      	add	r3, r1
 8006ef4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ef8:	3301      	adds	r3, #1
 8006efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f02:	e00f      	b.n	8006f24 <HAL_I2C_Init+0x1dc>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	1e58      	subs	r0, r3, #1
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6859      	ldr	r1, [r3, #4]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	440b      	add	r3, r1
 8006f12:	0099      	lsls	r1, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	6809      	ldr	r1, [r1, #0]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	69da      	ldr	r2, [r3, #28]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006f52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	6911      	ldr	r1, [r2, #16]
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	68d2      	ldr	r2, [r2, #12]
 8006f5e:	4311      	orrs	r1, r2
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6812      	ldr	r2, [r2, #0]
 8006f64:	430b      	orrs	r3, r1
 8006f66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	695a      	ldr	r2, [r3, #20]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f042 0201 	orr.w	r2, r2, #1
 8006f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	000186a0 	.word	0x000186a0
 8006fc0:	001e847f 	.word	0x001e847f
 8006fc4:	003d08ff 	.word	0x003d08ff
 8006fc8:	431bde83 	.word	0x431bde83
 8006fcc:	10624dd3 	.word	0x10624dd3

08006fd0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e021      	b.n	8007026 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2224      	movs	r2, #36	; 0x24
 8006fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 0201 	bic.w	r2, r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f821 	bl	8007042 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800702e:	b480      	push	{r7}
 8007030:	b083      	sub	sp, #12
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007036:	bf00      	nop
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
	...

08007058 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b088      	sub	sp, #32
 800705c:	af02      	add	r7, sp, #8
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	4608      	mov	r0, r1
 8007062:	4611      	mov	r1, r2
 8007064:	461a      	mov	r2, r3
 8007066:	4603      	mov	r3, r0
 8007068:	817b      	strh	r3, [r7, #10]
 800706a:	460b      	mov	r3, r1
 800706c:	813b      	strh	r3, [r7, #8]
 800706e:	4613      	mov	r3, r2
 8007070:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007072:	f7ff fa55 	bl	8006520 <HAL_GetTick>
 8007076:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b20      	cmp	r3, #32
 8007082:	f040 80d9 	bne.w	8007238 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	2319      	movs	r3, #25
 800708c:	2201      	movs	r2, #1
 800708e:	496d      	ldr	r1, [pc, #436]	; (8007244 <HAL_I2C_Mem_Write+0x1ec>)
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 fc99 	bl	80079c8 <I2C_WaitOnFlagUntilTimeout>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d001      	beq.n	80070a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800709c:	2302      	movs	r3, #2
 800709e:	e0cc      	b.n	800723a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d101      	bne.n	80070ae <HAL_I2C_Mem_Write+0x56>
 80070aa:	2302      	movs	r3, #2
 80070ac:	e0c5      	b.n	800723a <HAL_I2C_Mem_Write+0x1e2>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d007      	beq.n	80070d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0201 	orr.w	r2, r2, #1
 80070d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2221      	movs	r2, #33	; 0x21
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2240      	movs	r2, #64	; 0x40
 80070f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6a3a      	ldr	r2, [r7, #32]
 80070fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007104:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800710a:	b29a      	uxth	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4a4d      	ldr	r2, [pc, #308]	; (8007248 <HAL_I2C_Mem_Write+0x1f0>)
 8007114:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007116:	88f8      	ldrh	r0, [r7, #6]
 8007118:	893a      	ldrh	r2, [r7, #8]
 800711a:	8979      	ldrh	r1, [r7, #10]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	9301      	str	r3, [sp, #4]
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	4603      	mov	r3, r0
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 fad0 	bl	80076cc <I2C_RequestMemoryWrite>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d052      	beq.n	80071d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e081      	b.n	800723a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f000 fd1a 	bl	8007b74 <I2C_WaitOnTXEFlagUntilTimeout>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00d      	beq.n	8007162 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714a:	2b04      	cmp	r3, #4
 800714c:	d107      	bne.n	800715e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800715c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e06b      	b.n	800723a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	781a      	ldrb	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800717c:	3b01      	subs	r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007188:	b29b      	uxth	r3, r3
 800718a:	3b01      	subs	r3, #1
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b04      	cmp	r3, #4
 800719e:	d11b      	bne.n	80071d8 <HAL_I2C_Mem_Write+0x180>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d017      	beq.n	80071d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	781a      	ldrb	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071c2:	3b01      	subs	r3, #1
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	3b01      	subs	r3, #1
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1aa      	bne.n	8007136 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 fd06 	bl	8007bf6 <I2C_WaitOnBTFFlagUntilTimeout>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00d      	beq.n	800720c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	d107      	bne.n	8007208 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007206:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e016      	b.n	800723a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800721a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	e000      	b.n	800723a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007238:	2302      	movs	r3, #2
  }
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	00100002 	.word	0x00100002
 8007248:	ffff0000 	.word	0xffff0000

0800724c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08c      	sub	sp, #48	; 0x30
 8007250:	af02      	add	r7, sp, #8
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	4608      	mov	r0, r1
 8007256:	4611      	mov	r1, r2
 8007258:	461a      	mov	r2, r3
 800725a:	4603      	mov	r3, r0
 800725c:	817b      	strh	r3, [r7, #10]
 800725e:	460b      	mov	r3, r1
 8007260:	813b      	strh	r3, [r7, #8]
 8007262:	4613      	mov	r3, r2
 8007264:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007266:	f7ff f95b 	bl	8006520 <HAL_GetTick>
 800726a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b20      	cmp	r3, #32
 8007276:	f040 8208 	bne.w	800768a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	2319      	movs	r3, #25
 8007280:	2201      	movs	r2, #1
 8007282:	497b      	ldr	r1, [pc, #492]	; (8007470 <HAL_I2C_Mem_Read+0x224>)
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 fb9f 	bl	80079c8 <I2C_WaitOnFlagUntilTimeout>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007290:	2302      	movs	r3, #2
 8007292:	e1fb      	b.n	800768c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800729a:	2b01      	cmp	r3, #1
 800729c:	d101      	bne.n	80072a2 <HAL_I2C_Mem_Read+0x56>
 800729e:	2302      	movs	r3, #2
 80072a0:	e1f4      	b.n	800768c <HAL_I2C_Mem_Read+0x440>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d007      	beq.n	80072c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f042 0201 	orr.w	r2, r2, #1
 80072c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2222      	movs	r2, #34	; 0x22
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2240      	movs	r2, #64	; 0x40
 80072e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80072f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072fe:	b29a      	uxth	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4a5b      	ldr	r2, [pc, #364]	; (8007474 <HAL_I2C_Mem_Read+0x228>)
 8007308:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800730a:	88f8      	ldrh	r0, [r7, #6]
 800730c:	893a      	ldrh	r2, [r7, #8]
 800730e:	8979      	ldrh	r1, [r7, #10]
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	9301      	str	r3, [sp, #4]
 8007314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	4603      	mov	r3, r0
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 fa6c 	bl	80077f8 <I2C_RequestMemoryRead>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e1b0      	b.n	800768c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800732e:	2b00      	cmp	r3, #0
 8007330:	d113      	bne.n	800735a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007332:	2300      	movs	r3, #0
 8007334:	623b      	str	r3, [r7, #32]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	623b      	str	r3, [r7, #32]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	623b      	str	r3, [r7, #32]
 8007346:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	e184      	b.n	8007664 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800735e:	2b01      	cmp	r3, #1
 8007360:	d11b      	bne.n	800739a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007370:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007372:	2300      	movs	r3, #0
 8007374:	61fb      	str	r3, [r7, #28]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	61fb      	str	r3, [r7, #28]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	61fb      	str	r3, [r7, #28]
 8007386:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	e164      	b.n	8007664 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d11b      	bne.n	80073da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073c2:	2300      	movs	r3, #0
 80073c4:	61bb      	str	r3, [r7, #24]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	61bb      	str	r3, [r7, #24]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	61bb      	str	r3, [r7, #24]
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	e144      	b.n	8007664 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073da:	2300      	movs	r3, #0
 80073dc:	617b      	str	r3, [r7, #20]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	617b      	str	r3, [r7, #20]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	617b      	str	r3, [r7, #20]
 80073ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80073f0:	e138      	b.n	8007664 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	f200 80f1 	bhi.w	80075de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007400:	2b01      	cmp	r3, #1
 8007402:	d123      	bne.n	800744c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007406:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 fc35 	bl	8007c78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e139      	b.n	800768c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	691a      	ldr	r2, [r3, #16]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007422:	b2d2      	uxtb	r2, r2
 8007424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007440:	b29b      	uxth	r3, r3
 8007442:	3b01      	subs	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	855a      	strh	r2, [r3, #42]	; 0x2a
 800744a:	e10b      	b.n	8007664 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007450:	2b02      	cmp	r3, #2
 8007452:	d14e      	bne.n	80074f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745a:	2200      	movs	r2, #0
 800745c:	4906      	ldr	r1, [pc, #24]	; (8007478 <HAL_I2C_Mem_Read+0x22c>)
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 fab2 	bl	80079c8 <I2C_WaitOnFlagUntilTimeout>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d008      	beq.n	800747c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e10e      	b.n	800768c <HAL_I2C_Mem_Read+0x440>
 800746e:	bf00      	nop
 8007470:	00100002 	.word	0x00100002
 8007474:	ffff0000 	.word	0xffff0000
 8007478:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800748a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	691a      	ldr	r2, [r3, #16]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a8:	3b01      	subs	r3, #1
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	3b01      	subs	r3, #1
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	b2d2      	uxtb	r2, r2
 80074ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074da:	3b01      	subs	r3, #1
 80074dc:	b29a      	uxth	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	3b01      	subs	r3, #1
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074f0:	e0b8      	b.n	8007664 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f8:	2200      	movs	r2, #0
 80074fa:	4966      	ldr	r1, [pc, #408]	; (8007694 <HAL_I2C_Mem_Read+0x448>)
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 fa63 	bl	80079c8 <I2C_WaitOnFlagUntilTimeout>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e0bf      	b.n	800768c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800751a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	691a      	ldr	r2, [r3, #16]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	b2d2      	uxtb	r2, r2
 8007528:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	1c5a      	adds	r2, r3, #1
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007538:	3b01      	subs	r3, #1
 800753a:	b29a      	uxth	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007544:	b29b      	uxth	r3, r3
 8007546:	3b01      	subs	r3, #1
 8007548:	b29a      	uxth	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007554:	2200      	movs	r2, #0
 8007556:	494f      	ldr	r1, [pc, #316]	; (8007694 <HAL_I2C_Mem_Read+0x448>)
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f000 fa35 	bl	80079c8 <I2C_WaitOnFlagUntilTimeout>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e091      	b.n	800768c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007576:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691a      	ldr	r2, [r3, #16]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007582:	b2d2      	uxtb	r2, r2
 8007584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007594:	3b01      	subs	r3, #1
 8007596:	b29a      	uxth	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	3b01      	subs	r3, #1
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	691a      	ldr	r2, [r3, #16]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	b2d2      	uxtb	r2, r2
 80075b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	3b01      	subs	r3, #1
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075dc:	e042      	b.n	8007664 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 fb48 	bl	8007c78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e04c      	b.n	800768c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	691a      	ldr	r2, [r3, #16]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	b2d2      	uxtb	r2, r2
 80075fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	1c5a      	adds	r2, r3, #1
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800760e:	3b01      	subs	r3, #1
 8007610:	b29a      	uxth	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761a:	b29b      	uxth	r3, r3
 800761c:	3b01      	subs	r3, #1
 800761e:	b29a      	uxth	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	2b04      	cmp	r3, #4
 8007630:	d118      	bne.n	8007664 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	691a      	ldr	r2, [r3, #16]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	b2d2      	uxtb	r2, r2
 800763e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800764e:	3b01      	subs	r3, #1
 8007650:	b29a      	uxth	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800765a:	b29b      	uxth	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007668:	2b00      	cmp	r3, #0
 800766a:	f47f aec2 	bne.w	80073f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2220      	movs	r2, #32
 8007672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	e000      	b.n	800768c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800768a:	2302      	movs	r3, #2
  }
}
 800768c:	4618      	mov	r0, r3
 800768e:	3728      	adds	r7, #40	; 0x28
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	00010004 	.word	0x00010004

08007698 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a6:	b2db      	uxtb	r3, r3
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b088      	sub	sp, #32
 80076d0:	af02      	add	r7, sp, #8
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	4608      	mov	r0, r1
 80076d6:	4611      	mov	r1, r2
 80076d8:	461a      	mov	r2, r3
 80076da:	4603      	mov	r3, r0
 80076dc:	817b      	strh	r3, [r7, #10]
 80076de:	460b      	mov	r3, r1
 80076e0:	813b      	strh	r3, [r7, #8]
 80076e2:	4613      	mov	r3, r2
 80076e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 f960 	bl	80079c8 <I2C_WaitOnFlagUntilTimeout>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00d      	beq.n	800772a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800771c:	d103      	bne.n	8007726 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007724:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e05f      	b.n	80077ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800772a:	897b      	ldrh	r3, [r7, #10]
 800772c:	b2db      	uxtb	r3, r3
 800772e:	461a      	mov	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007738:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	6a3a      	ldr	r2, [r7, #32]
 800773e:	492d      	ldr	r1, [pc, #180]	; (80077f4 <I2C_RequestMemoryWrite+0x128>)
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 f998 	bl	8007a76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e04c      	b.n	80077ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007750:	2300      	movs	r3, #0
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	617b      	str	r3, [r7, #20]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007768:	6a39      	ldr	r1, [r7, #32]
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 fa02 	bl	8007b74 <I2C_WaitOnTXEFlagUntilTimeout>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00d      	beq.n	8007792 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	2b04      	cmp	r3, #4
 800777c:	d107      	bne.n	800778e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800778c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e02b      	b.n	80077ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007792:	88fb      	ldrh	r3, [r7, #6]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d105      	bne.n	80077a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007798:	893b      	ldrh	r3, [r7, #8]
 800779a:	b2da      	uxtb	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	611a      	str	r2, [r3, #16]
 80077a2:	e021      	b.n	80077e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80077a4:	893b      	ldrh	r3, [r7, #8]
 80077a6:	0a1b      	lsrs	r3, r3, #8
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b4:	6a39      	ldr	r1, [r7, #32]
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 f9dc 	bl	8007b74 <I2C_WaitOnTXEFlagUntilTimeout>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00d      	beq.n	80077de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	d107      	bne.n	80077da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e005      	b.n	80077ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077de:	893b      	ldrh	r3, [r7, #8]
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	00010002 	.word	0x00010002

080077f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af02      	add	r7, sp, #8
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	4608      	mov	r0, r1
 8007802:	4611      	mov	r1, r2
 8007804:	461a      	mov	r2, r3
 8007806:	4603      	mov	r3, r0
 8007808:	817b      	strh	r3, [r7, #10]
 800780a:	460b      	mov	r3, r1
 800780c:	813b      	strh	r3, [r7, #8]
 800780e:	4613      	mov	r3, r2
 8007810:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007820:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007830:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	2200      	movs	r2, #0
 800783a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 f8c2 	bl	80079c8 <I2C_WaitOnFlagUntilTimeout>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00d      	beq.n	8007866 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007858:	d103      	bne.n	8007862 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007860:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e0aa      	b.n	80079bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007866:	897b      	ldrh	r3, [r7, #10]
 8007868:	b2db      	uxtb	r3, r3
 800786a:	461a      	mov	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007874:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	6a3a      	ldr	r2, [r7, #32]
 800787a:	4952      	ldr	r1, [pc, #328]	; (80079c4 <I2C_RequestMemoryRead+0x1cc>)
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 f8fa 	bl	8007a76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e097      	b.n	80079bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800788c:	2300      	movs	r3, #0
 800788e:	617b      	str	r3, [r7, #20]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	617b      	str	r3, [r7, #20]
 80078a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078a4:	6a39      	ldr	r1, [r7, #32]
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f000 f964 	bl	8007b74 <I2C_WaitOnTXEFlagUntilTimeout>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00d      	beq.n	80078ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	2b04      	cmp	r3, #4
 80078b8:	d107      	bne.n	80078ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e076      	b.n	80079bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078ce:	88fb      	ldrh	r3, [r7, #6]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d105      	bne.n	80078e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078d4:	893b      	ldrh	r3, [r7, #8]
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	611a      	str	r2, [r3, #16]
 80078de:	e021      	b.n	8007924 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80078e0:	893b      	ldrh	r3, [r7, #8]
 80078e2:	0a1b      	lsrs	r3, r3, #8
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f0:	6a39      	ldr	r1, [r7, #32]
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f000 f93e 	bl	8007b74 <I2C_WaitOnTXEFlagUntilTimeout>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00d      	beq.n	800791a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007902:	2b04      	cmp	r3, #4
 8007904:	d107      	bne.n	8007916 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007914:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e050      	b.n	80079bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800791a:	893b      	ldrh	r3, [r7, #8]
 800791c:	b2da      	uxtb	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007926:	6a39      	ldr	r1, [r7, #32]
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 f923 	bl	8007b74 <I2C_WaitOnTXEFlagUntilTimeout>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00d      	beq.n	8007950 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007938:	2b04      	cmp	r3, #4
 800793a:	d107      	bne.n	800794c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800794a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e035      	b.n	80079bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800795e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	2200      	movs	r2, #0
 8007968:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 f82b 	bl	80079c8 <I2C_WaitOnFlagUntilTimeout>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00d      	beq.n	8007994 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007986:	d103      	bne.n	8007990 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800798e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e013      	b.n	80079bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007994:	897b      	ldrh	r3, [r7, #10]
 8007996:	b2db      	uxtb	r3, r3
 8007998:	f043 0301 	orr.w	r3, r3, #1
 800799c:	b2da      	uxtb	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	6a3a      	ldr	r2, [r7, #32]
 80079a8:	4906      	ldr	r1, [pc, #24]	; (80079c4 <I2C_RequestMemoryRead+0x1cc>)
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 f863 	bl	8007a76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e000      	b.n	80079bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	00010002 	.word	0x00010002

080079c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	603b      	str	r3, [r7, #0]
 80079d4:	4613      	mov	r3, r2
 80079d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079d8:	e025      	b.n	8007a26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e0:	d021      	beq.n	8007a26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079e2:	f7fe fd9d 	bl	8006520 <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d302      	bcc.n	80079f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d116      	bne.n	8007a26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a12:	f043 0220 	orr.w	r2, r3, #32
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e023      	b.n	8007a6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	0c1b      	lsrs	r3, r3, #16
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d10d      	bne.n	8007a4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	43da      	mvns	r2, r3
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	bf0c      	ite	eq
 8007a42:	2301      	moveq	r3, #1
 8007a44:	2300      	movne	r3, #0
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	461a      	mov	r2, r3
 8007a4a:	e00c      	b.n	8007a66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	43da      	mvns	r2, r3
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	4013      	ands	r3, r2
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	bf0c      	ite	eq
 8007a5e:	2301      	moveq	r3, #1
 8007a60:	2300      	movne	r3, #0
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	461a      	mov	r2, r3
 8007a66:	79fb      	ldrb	r3, [r7, #7]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d0b6      	beq.n	80079da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b084      	sub	sp, #16
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	60b9      	str	r1, [r7, #8]
 8007a80:	607a      	str	r2, [r7, #4]
 8007a82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a84:	e051      	b.n	8007b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	695b      	ldr	r3, [r3, #20]
 8007a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a94:	d123      	bne.n	8007ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aa4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007aae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aca:	f043 0204 	orr.w	r2, r3, #4
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e046      	b.n	8007b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae4:	d021      	beq.n	8007b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ae6:	f7fe fd1b 	bl	8006520 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d302      	bcc.n	8007afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d116      	bne.n	8007b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2220      	movs	r2, #32
 8007b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b16:	f043 0220 	orr.w	r2, r3, #32
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e020      	b.n	8007b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	0c1b      	lsrs	r3, r3, #16
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d10c      	bne.n	8007b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	43da      	mvns	r2, r3
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	4013      	ands	r3, r2
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	bf14      	ite	ne
 8007b46:	2301      	movne	r3, #1
 8007b48:	2300      	moveq	r3, #0
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	e00b      	b.n	8007b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	43da      	mvns	r2, r3
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	4013      	ands	r3, r2
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	bf14      	ite	ne
 8007b60:	2301      	movne	r3, #1
 8007b62:	2300      	moveq	r3, #0
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d18d      	bne.n	8007a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b80:	e02d      	b.n	8007bde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 f8ce 	bl	8007d24 <I2C_IsAcknowledgeFailed>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e02d      	b.n	8007bee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b98:	d021      	beq.n	8007bde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b9a:	f7fe fcc1 	bl	8006520 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d302      	bcc.n	8007bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d116      	bne.n	8007bde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bca:	f043 0220 	orr.w	r2, r3, #32
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e007      	b.n	8007bee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be8:	2b80      	cmp	r3, #128	; 0x80
 8007bea:	d1ca      	bne.n	8007b82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c02:	e02d      	b.n	8007c60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 f88d 	bl	8007d24 <I2C_IsAcknowledgeFailed>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e02d      	b.n	8007c70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1a:	d021      	beq.n	8007c60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c1c:	f7fe fc80 	bl	8006520 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d302      	bcc.n	8007c32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d116      	bne.n	8007c60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4c:	f043 0220 	orr.w	r2, r3, #32
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e007      	b.n	8007c70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	f003 0304 	and.w	r3, r3, #4
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d1ca      	bne.n	8007c04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c84:	e042      	b.n	8007d0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	f003 0310 	and.w	r3, r3, #16
 8007c90:	2b10      	cmp	r3, #16
 8007c92:	d119      	bne.n	8007cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f06f 0210 	mvn.w	r2, #16
 8007c9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e029      	b.n	8007d1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cc8:	f7fe fc2a 	bl	8006520 <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d302      	bcc.n	8007cde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d116      	bne.n	8007d0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf8:	f043 0220 	orr.w	r2, r3, #32
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e007      	b.n	8007d1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d16:	2b40      	cmp	r3, #64	; 0x40
 8007d18:	d1b5      	bne.n	8007c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d3a:	d11b      	bne.n	8007d74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	f043 0204 	orr.w	r2, r3, #4
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e000      	b.n	8007d76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
	...

08007d84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e267      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d075      	beq.n	8007e8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007da2:	4b88      	ldr	r3, [pc, #544]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f003 030c 	and.w	r3, r3, #12
 8007daa:	2b04      	cmp	r3, #4
 8007dac:	d00c      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dae:	4b85      	ldr	r3, [pc, #532]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007db6:	2b08      	cmp	r3, #8
 8007db8:	d112      	bne.n	8007de0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dba:	4b82      	ldr	r3, [pc, #520]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007dc6:	d10b      	bne.n	8007de0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dc8:	4b7e      	ldr	r3, [pc, #504]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d05b      	beq.n	8007e8c <HAL_RCC_OscConfig+0x108>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d157      	bne.n	8007e8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e242      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de8:	d106      	bne.n	8007df8 <HAL_RCC_OscConfig+0x74>
 8007dea:	4b76      	ldr	r3, [pc, #472]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a75      	ldr	r2, [pc, #468]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007df4:	6013      	str	r3, [r2, #0]
 8007df6:	e01d      	b.n	8007e34 <HAL_RCC_OscConfig+0xb0>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e00:	d10c      	bne.n	8007e1c <HAL_RCC_OscConfig+0x98>
 8007e02:	4b70      	ldr	r3, [pc, #448]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a6f      	ldr	r2, [pc, #444]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	4b6d      	ldr	r3, [pc, #436]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a6c      	ldr	r2, [pc, #432]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	e00b      	b.n	8007e34 <HAL_RCC_OscConfig+0xb0>
 8007e1c:	4b69      	ldr	r3, [pc, #420]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a68      	ldr	r2, [pc, #416]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	4b66      	ldr	r3, [pc, #408]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a65      	ldr	r2, [pc, #404]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d013      	beq.n	8007e64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e3c:	f7fe fb70 	bl	8006520 <HAL_GetTick>
 8007e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e42:	e008      	b.n	8007e56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e44:	f7fe fb6c 	bl	8006520 <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	2b64      	cmp	r3, #100	; 0x64
 8007e50:	d901      	bls.n	8007e56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e207      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e56:	4b5b      	ldr	r3, [pc, #364]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d0f0      	beq.n	8007e44 <HAL_RCC_OscConfig+0xc0>
 8007e62:	e014      	b.n	8007e8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e64:	f7fe fb5c 	bl	8006520 <HAL_GetTick>
 8007e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e6a:	e008      	b.n	8007e7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e6c:	f7fe fb58 	bl	8006520 <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	2b64      	cmp	r3, #100	; 0x64
 8007e78:	d901      	bls.n	8007e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e1f3      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e7e:	4b51      	ldr	r3, [pc, #324]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1f0      	bne.n	8007e6c <HAL_RCC_OscConfig+0xe8>
 8007e8a:	e000      	b.n	8007e8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 0302 	and.w	r3, r3, #2
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d063      	beq.n	8007f62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e9a:	4b4a      	ldr	r3, [pc, #296]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f003 030c 	and.w	r3, r3, #12
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00b      	beq.n	8007ebe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ea6:	4b47      	ldr	r3, [pc, #284]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007eae:	2b08      	cmp	r3, #8
 8007eb0:	d11c      	bne.n	8007eec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007eb2:	4b44      	ldr	r3, [pc, #272]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d116      	bne.n	8007eec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ebe:	4b41      	ldr	r3, [pc, #260]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d005      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x152>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d001      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e1c7      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ed6:	4b3b      	ldr	r3, [pc, #236]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	4937      	ldr	r1, [pc, #220]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007eea:	e03a      	b.n	8007f62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d020      	beq.n	8007f36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ef4:	4b34      	ldr	r3, [pc, #208]	; (8007fc8 <HAL_RCC_OscConfig+0x244>)
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007efa:	f7fe fb11 	bl	8006520 <HAL_GetTick>
 8007efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f00:	e008      	b.n	8007f14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f02:	f7fe fb0d 	bl	8006520 <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d901      	bls.n	8007f14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e1a8      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f14:	4b2b      	ldr	r3, [pc, #172]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0302 	and.w	r3, r3, #2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d0f0      	beq.n	8007f02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f20:	4b28      	ldr	r3, [pc, #160]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	4925      	ldr	r1, [pc, #148]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007f30:	4313      	orrs	r3, r2
 8007f32:	600b      	str	r3, [r1, #0]
 8007f34:	e015      	b.n	8007f62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f36:	4b24      	ldr	r3, [pc, #144]	; (8007fc8 <HAL_RCC_OscConfig+0x244>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f3c:	f7fe faf0 	bl	8006520 <HAL_GetTick>
 8007f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f42:	e008      	b.n	8007f56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f44:	f7fe faec 	bl	8006520 <HAL_GetTick>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d901      	bls.n	8007f56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e187      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f56:	4b1b      	ldr	r3, [pc, #108]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0302 	and.w	r3, r3, #2
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1f0      	bne.n	8007f44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0308 	and.w	r3, r3, #8
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d036      	beq.n	8007fdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d016      	beq.n	8007fa4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f76:	4b15      	ldr	r3, [pc, #84]	; (8007fcc <HAL_RCC_OscConfig+0x248>)
 8007f78:	2201      	movs	r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f7c:	f7fe fad0 	bl	8006520 <HAL_GetTick>
 8007f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f82:	e008      	b.n	8007f96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f84:	f7fe facc 	bl	8006520 <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d901      	bls.n	8007f96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e167      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f96:	4b0b      	ldr	r3, [pc, #44]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0f0      	beq.n	8007f84 <HAL_RCC_OscConfig+0x200>
 8007fa2:	e01b      	b.n	8007fdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fa4:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <HAL_RCC_OscConfig+0x248>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007faa:	f7fe fab9 	bl	8006520 <HAL_GetTick>
 8007fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fb0:	e00e      	b.n	8007fd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fb2:	f7fe fab5 	bl	8006520 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d907      	bls.n	8007fd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e150      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
 8007fc4:	40023800 	.word	0x40023800
 8007fc8:	42470000 	.word	0x42470000
 8007fcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fd0:	4b88      	ldr	r3, [pc, #544]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8007fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fd4:	f003 0302 	and.w	r3, r3, #2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1ea      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 8097 	beq.w	8008118 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fea:	2300      	movs	r3, #0
 8007fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fee:	4b81      	ldr	r3, [pc, #516]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10f      	bne.n	800801a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60bb      	str	r3, [r7, #8]
 8007ffe:	4b7d      	ldr	r3, [pc, #500]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008002:	4a7c      	ldr	r2, [pc, #496]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008008:	6413      	str	r3, [r2, #64]	; 0x40
 800800a:	4b7a      	ldr	r3, [pc, #488]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 800800c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008012:	60bb      	str	r3, [r7, #8]
 8008014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008016:	2301      	movs	r3, #1
 8008018:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800801a:	4b77      	ldr	r3, [pc, #476]	; (80081f8 <HAL_RCC_OscConfig+0x474>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008022:	2b00      	cmp	r3, #0
 8008024:	d118      	bne.n	8008058 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008026:	4b74      	ldr	r3, [pc, #464]	; (80081f8 <HAL_RCC_OscConfig+0x474>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a73      	ldr	r2, [pc, #460]	; (80081f8 <HAL_RCC_OscConfig+0x474>)
 800802c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008032:	f7fe fa75 	bl	8006520 <HAL_GetTick>
 8008036:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008038:	e008      	b.n	800804c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800803a:	f7fe fa71 	bl	8006520 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d901      	bls.n	800804c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e10c      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800804c:	4b6a      	ldr	r3, [pc, #424]	; (80081f8 <HAL_RCC_OscConfig+0x474>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008054:	2b00      	cmp	r3, #0
 8008056:	d0f0      	beq.n	800803a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d106      	bne.n	800806e <HAL_RCC_OscConfig+0x2ea>
 8008060:	4b64      	ldr	r3, [pc, #400]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008064:	4a63      	ldr	r2, [pc, #396]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	6713      	str	r3, [r2, #112]	; 0x70
 800806c:	e01c      	b.n	80080a8 <HAL_RCC_OscConfig+0x324>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	2b05      	cmp	r3, #5
 8008074:	d10c      	bne.n	8008090 <HAL_RCC_OscConfig+0x30c>
 8008076:	4b5f      	ldr	r3, [pc, #380]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807a:	4a5e      	ldr	r2, [pc, #376]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 800807c:	f043 0304 	orr.w	r3, r3, #4
 8008080:	6713      	str	r3, [r2, #112]	; 0x70
 8008082:	4b5c      	ldr	r3, [pc, #368]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008086:	4a5b      	ldr	r2, [pc, #364]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008088:	f043 0301 	orr.w	r3, r3, #1
 800808c:	6713      	str	r3, [r2, #112]	; 0x70
 800808e:	e00b      	b.n	80080a8 <HAL_RCC_OscConfig+0x324>
 8008090:	4b58      	ldr	r3, [pc, #352]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008094:	4a57      	ldr	r2, [pc, #348]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008096:	f023 0301 	bic.w	r3, r3, #1
 800809a:	6713      	str	r3, [r2, #112]	; 0x70
 800809c:	4b55      	ldr	r3, [pc, #340]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 800809e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a0:	4a54      	ldr	r2, [pc, #336]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 80080a2:	f023 0304 	bic.w	r3, r3, #4
 80080a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d015      	beq.n	80080dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080b0:	f7fe fa36 	bl	8006520 <HAL_GetTick>
 80080b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080b6:	e00a      	b.n	80080ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080b8:	f7fe fa32 	bl	8006520 <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d901      	bls.n	80080ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e0cb      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080ce:	4b49      	ldr	r3, [pc, #292]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 80080d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d2:	f003 0302 	and.w	r3, r3, #2
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d0ee      	beq.n	80080b8 <HAL_RCC_OscConfig+0x334>
 80080da:	e014      	b.n	8008106 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080dc:	f7fe fa20 	bl	8006520 <HAL_GetTick>
 80080e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080e2:	e00a      	b.n	80080fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080e4:	f7fe fa1c 	bl	8006520 <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d901      	bls.n	80080fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e0b5      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080fa:	4b3e      	ldr	r3, [pc, #248]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 80080fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080fe:	f003 0302 	and.w	r3, r3, #2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1ee      	bne.n	80080e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008106:	7dfb      	ldrb	r3, [r7, #23]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d105      	bne.n	8008118 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800810c:	4b39      	ldr	r3, [pc, #228]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 800810e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008110:	4a38      	ldr	r2, [pc, #224]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008116:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 80a1 	beq.w	8008264 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008122:	4b34      	ldr	r3, [pc, #208]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f003 030c 	and.w	r3, r3, #12
 800812a:	2b08      	cmp	r3, #8
 800812c:	d05c      	beq.n	80081e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	2b02      	cmp	r3, #2
 8008134:	d141      	bne.n	80081ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008136:	4b31      	ldr	r3, [pc, #196]	; (80081fc <HAL_RCC_OscConfig+0x478>)
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800813c:	f7fe f9f0 	bl	8006520 <HAL_GetTick>
 8008140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008142:	e008      	b.n	8008156 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008144:	f7fe f9ec 	bl	8006520 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b02      	cmp	r3, #2
 8008150:	d901      	bls.n	8008156 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e087      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008156:	4b27      	ldr	r3, [pc, #156]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1f0      	bne.n	8008144 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	69da      	ldr	r2, [r3, #28]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	431a      	orrs	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	019b      	lsls	r3, r3, #6
 8008172:	431a      	orrs	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008178:	085b      	lsrs	r3, r3, #1
 800817a:	3b01      	subs	r3, #1
 800817c:	041b      	lsls	r3, r3, #16
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008184:	061b      	lsls	r3, r3, #24
 8008186:	491b      	ldr	r1, [pc, #108]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008188:	4313      	orrs	r3, r2
 800818a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800818c:	4b1b      	ldr	r3, [pc, #108]	; (80081fc <HAL_RCC_OscConfig+0x478>)
 800818e:	2201      	movs	r2, #1
 8008190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008192:	f7fe f9c5 	bl	8006520 <HAL_GetTick>
 8008196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008198:	e008      	b.n	80081ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800819a:	f7fe f9c1 	bl	8006520 <HAL_GetTick>
 800819e:	4602      	mov	r2, r0
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d901      	bls.n	80081ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e05c      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081ac:	4b11      	ldr	r3, [pc, #68]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d0f0      	beq.n	800819a <HAL_RCC_OscConfig+0x416>
 80081b8:	e054      	b.n	8008264 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081ba:	4b10      	ldr	r3, [pc, #64]	; (80081fc <HAL_RCC_OscConfig+0x478>)
 80081bc:	2200      	movs	r2, #0
 80081be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081c0:	f7fe f9ae 	bl	8006520 <HAL_GetTick>
 80081c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081c6:	e008      	b.n	80081da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081c8:	f7fe f9aa 	bl	8006520 <HAL_GetTick>
 80081cc:	4602      	mov	r2, r0
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d901      	bls.n	80081da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e045      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081da:	4b06      	ldr	r3, [pc, #24]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1f0      	bne.n	80081c8 <HAL_RCC_OscConfig+0x444>
 80081e6:	e03d      	b.n	8008264 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d107      	bne.n	8008200 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e038      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
 80081f4:	40023800 	.word	0x40023800
 80081f8:	40007000 	.word	0x40007000
 80081fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008200:	4b1b      	ldr	r3, [pc, #108]	; (8008270 <HAL_RCC_OscConfig+0x4ec>)
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d028      	beq.n	8008260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008218:	429a      	cmp	r2, r3
 800821a:	d121      	bne.n	8008260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008226:	429a      	cmp	r2, r3
 8008228:	d11a      	bne.n	8008260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008230:	4013      	ands	r3, r2
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008236:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008238:	4293      	cmp	r3, r2
 800823a:	d111      	bne.n	8008260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008246:	085b      	lsrs	r3, r3, #1
 8008248:	3b01      	subs	r3, #1
 800824a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800824c:	429a      	cmp	r2, r3
 800824e:	d107      	bne.n	8008260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800825c:	429a      	cmp	r2, r3
 800825e:	d001      	beq.n	8008264 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e000      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	40023800 	.word	0x40023800

08008274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e0cc      	b.n	8008422 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008288:	4b68      	ldr	r3, [pc, #416]	; (800842c <HAL_RCC_ClockConfig+0x1b8>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0307 	and.w	r3, r3, #7
 8008290:	683a      	ldr	r2, [r7, #0]
 8008292:	429a      	cmp	r2, r3
 8008294:	d90c      	bls.n	80082b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008296:	4b65      	ldr	r3, [pc, #404]	; (800842c <HAL_RCC_ClockConfig+0x1b8>)
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	b2d2      	uxtb	r2, r2
 800829c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800829e:	4b63      	ldr	r3, [pc, #396]	; (800842c <HAL_RCC_ClockConfig+0x1b8>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0307 	and.w	r3, r3, #7
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d001      	beq.n	80082b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e0b8      	b.n	8008422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d020      	beq.n	80082fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0304 	and.w	r3, r3, #4
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d005      	beq.n	80082d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082c8:	4b59      	ldr	r3, [pc, #356]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	4a58      	ldr	r2, [pc, #352]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80082ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0308 	and.w	r3, r3, #8
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d005      	beq.n	80082ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082e0:	4b53      	ldr	r3, [pc, #332]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	4a52      	ldr	r2, [pc, #328]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80082e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80082ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082ec:	4b50      	ldr	r3, [pc, #320]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	494d      	ldr	r1, [pc, #308]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	2b00      	cmp	r3, #0
 8008308:	d044      	beq.n	8008394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2b01      	cmp	r3, #1
 8008310:	d107      	bne.n	8008322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008312:	4b47      	ldr	r3, [pc, #284]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d119      	bne.n	8008352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e07f      	b.n	8008422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	2b02      	cmp	r3, #2
 8008328:	d003      	beq.n	8008332 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800832e:	2b03      	cmp	r3, #3
 8008330:	d107      	bne.n	8008342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008332:	4b3f      	ldr	r3, [pc, #252]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d109      	bne.n	8008352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e06f      	b.n	8008422 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008342:	4b3b      	ldr	r3, [pc, #236]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e067      	b.n	8008422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008352:	4b37      	ldr	r3, [pc, #220]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f023 0203 	bic.w	r2, r3, #3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	4934      	ldr	r1, [pc, #208]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 8008360:	4313      	orrs	r3, r2
 8008362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008364:	f7fe f8dc 	bl	8006520 <HAL_GetTick>
 8008368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800836a:	e00a      	b.n	8008382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800836c:	f7fe f8d8 	bl	8006520 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	f241 3288 	movw	r2, #5000	; 0x1388
 800837a:	4293      	cmp	r3, r2
 800837c:	d901      	bls.n	8008382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e04f      	b.n	8008422 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008382:	4b2b      	ldr	r3, [pc, #172]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f003 020c 	and.w	r2, r3, #12
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	429a      	cmp	r2, r3
 8008392:	d1eb      	bne.n	800836c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008394:	4b25      	ldr	r3, [pc, #148]	; (800842c <HAL_RCC_ClockConfig+0x1b8>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0307 	and.w	r3, r3, #7
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d20c      	bcs.n	80083bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083a2:	4b22      	ldr	r3, [pc, #136]	; (800842c <HAL_RCC_ClockConfig+0x1b8>)
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	b2d2      	uxtb	r2, r2
 80083a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083aa:	4b20      	ldr	r3, [pc, #128]	; (800842c <HAL_RCC_ClockConfig+0x1b8>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 0307 	and.w	r3, r3, #7
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d001      	beq.n	80083bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e032      	b.n	8008422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0304 	and.w	r3, r3, #4
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d008      	beq.n	80083da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083c8:	4b19      	ldr	r3, [pc, #100]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	4916      	ldr	r1, [pc, #88]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0308 	and.w	r3, r3, #8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d009      	beq.n	80083fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083e6:	4b12      	ldr	r3, [pc, #72]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	490e      	ldr	r1, [pc, #56]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083fa:	f000 f821 	bl	8008440 <HAL_RCC_GetSysClockFreq>
 80083fe:	4602      	mov	r2, r0
 8008400:	4b0b      	ldr	r3, [pc, #44]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	091b      	lsrs	r3, r3, #4
 8008406:	f003 030f 	and.w	r3, r3, #15
 800840a:	490a      	ldr	r1, [pc, #40]	; (8008434 <HAL_RCC_ClockConfig+0x1c0>)
 800840c:	5ccb      	ldrb	r3, [r1, r3]
 800840e:	fa22 f303 	lsr.w	r3, r2, r3
 8008412:	4a09      	ldr	r2, [pc, #36]	; (8008438 <HAL_RCC_ClockConfig+0x1c4>)
 8008414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008416:	4b09      	ldr	r3, [pc, #36]	; (800843c <HAL_RCC_ClockConfig+0x1c8>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4618      	mov	r0, r3
 800841c:	f7fe f83c 	bl	8006498 <HAL_InitTick>

  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	40023c00 	.word	0x40023c00
 8008430:	40023800 	.word	0x40023800
 8008434:	0800ccbc 	.word	0x0800ccbc
 8008438:	200000e8 	.word	0x200000e8
 800843c:	200000ec 	.word	0x200000ec

08008440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008444:	b094      	sub	sp, #80	; 0x50
 8008446:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008448:	2300      	movs	r3, #0
 800844a:	647b      	str	r3, [r7, #68]	; 0x44
 800844c:	2300      	movs	r3, #0
 800844e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008450:	2300      	movs	r3, #0
 8008452:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008454:	2300      	movs	r3, #0
 8008456:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008458:	4b79      	ldr	r3, [pc, #484]	; (8008640 <HAL_RCC_GetSysClockFreq+0x200>)
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	f003 030c 	and.w	r3, r3, #12
 8008460:	2b08      	cmp	r3, #8
 8008462:	d00d      	beq.n	8008480 <HAL_RCC_GetSysClockFreq+0x40>
 8008464:	2b08      	cmp	r3, #8
 8008466:	f200 80e1 	bhi.w	800862c <HAL_RCC_GetSysClockFreq+0x1ec>
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <HAL_RCC_GetSysClockFreq+0x34>
 800846e:	2b04      	cmp	r3, #4
 8008470:	d003      	beq.n	800847a <HAL_RCC_GetSysClockFreq+0x3a>
 8008472:	e0db      	b.n	800862c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008474:	4b73      	ldr	r3, [pc, #460]	; (8008644 <HAL_RCC_GetSysClockFreq+0x204>)
 8008476:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008478:	e0db      	b.n	8008632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800847a:	4b73      	ldr	r3, [pc, #460]	; (8008648 <HAL_RCC_GetSysClockFreq+0x208>)
 800847c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800847e:	e0d8      	b.n	8008632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008480:	4b6f      	ldr	r3, [pc, #444]	; (8008640 <HAL_RCC_GetSysClockFreq+0x200>)
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008488:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800848a:	4b6d      	ldr	r3, [pc, #436]	; (8008640 <HAL_RCC_GetSysClockFreq+0x200>)
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d063      	beq.n	800855e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008496:	4b6a      	ldr	r3, [pc, #424]	; (8008640 <HAL_RCC_GetSysClockFreq+0x200>)
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	099b      	lsrs	r3, r3, #6
 800849c:	2200      	movs	r2, #0
 800849e:	63bb      	str	r3, [r7, #56]	; 0x38
 80084a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80084a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a8:	633b      	str	r3, [r7, #48]	; 0x30
 80084aa:	2300      	movs	r3, #0
 80084ac:	637b      	str	r3, [r7, #52]	; 0x34
 80084ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80084b2:	4622      	mov	r2, r4
 80084b4:	462b      	mov	r3, r5
 80084b6:	f04f 0000 	mov.w	r0, #0
 80084ba:	f04f 0100 	mov.w	r1, #0
 80084be:	0159      	lsls	r1, r3, #5
 80084c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084c4:	0150      	lsls	r0, r2, #5
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	4621      	mov	r1, r4
 80084cc:	1a51      	subs	r1, r2, r1
 80084ce:	6139      	str	r1, [r7, #16]
 80084d0:	4629      	mov	r1, r5
 80084d2:	eb63 0301 	sbc.w	r3, r3, r1
 80084d6:	617b      	str	r3, [r7, #20]
 80084d8:	f04f 0200 	mov.w	r2, #0
 80084dc:	f04f 0300 	mov.w	r3, #0
 80084e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80084e4:	4659      	mov	r1, fp
 80084e6:	018b      	lsls	r3, r1, #6
 80084e8:	4651      	mov	r1, sl
 80084ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80084ee:	4651      	mov	r1, sl
 80084f0:	018a      	lsls	r2, r1, #6
 80084f2:	4651      	mov	r1, sl
 80084f4:	ebb2 0801 	subs.w	r8, r2, r1
 80084f8:	4659      	mov	r1, fp
 80084fa:	eb63 0901 	sbc.w	r9, r3, r1
 80084fe:	f04f 0200 	mov.w	r2, #0
 8008502:	f04f 0300 	mov.w	r3, #0
 8008506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800850a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800850e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008512:	4690      	mov	r8, r2
 8008514:	4699      	mov	r9, r3
 8008516:	4623      	mov	r3, r4
 8008518:	eb18 0303 	adds.w	r3, r8, r3
 800851c:	60bb      	str	r3, [r7, #8]
 800851e:	462b      	mov	r3, r5
 8008520:	eb49 0303 	adc.w	r3, r9, r3
 8008524:	60fb      	str	r3, [r7, #12]
 8008526:	f04f 0200 	mov.w	r2, #0
 800852a:	f04f 0300 	mov.w	r3, #0
 800852e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008532:	4629      	mov	r1, r5
 8008534:	024b      	lsls	r3, r1, #9
 8008536:	4621      	mov	r1, r4
 8008538:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800853c:	4621      	mov	r1, r4
 800853e:	024a      	lsls	r2, r1, #9
 8008540:	4610      	mov	r0, r2
 8008542:	4619      	mov	r1, r3
 8008544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008546:	2200      	movs	r2, #0
 8008548:	62bb      	str	r3, [r7, #40]	; 0x28
 800854a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800854c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008550:	f7f8 fb82 	bl	8000c58 <__aeabi_uldivmod>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	4613      	mov	r3, r2
 800855a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800855c:	e058      	b.n	8008610 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800855e:	4b38      	ldr	r3, [pc, #224]	; (8008640 <HAL_RCC_GetSysClockFreq+0x200>)
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	099b      	lsrs	r3, r3, #6
 8008564:	2200      	movs	r2, #0
 8008566:	4618      	mov	r0, r3
 8008568:	4611      	mov	r1, r2
 800856a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800856e:	623b      	str	r3, [r7, #32]
 8008570:	2300      	movs	r3, #0
 8008572:	627b      	str	r3, [r7, #36]	; 0x24
 8008574:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008578:	4642      	mov	r2, r8
 800857a:	464b      	mov	r3, r9
 800857c:	f04f 0000 	mov.w	r0, #0
 8008580:	f04f 0100 	mov.w	r1, #0
 8008584:	0159      	lsls	r1, r3, #5
 8008586:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800858a:	0150      	lsls	r0, r2, #5
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	4641      	mov	r1, r8
 8008592:	ebb2 0a01 	subs.w	sl, r2, r1
 8008596:	4649      	mov	r1, r9
 8008598:	eb63 0b01 	sbc.w	fp, r3, r1
 800859c:	f04f 0200 	mov.w	r2, #0
 80085a0:	f04f 0300 	mov.w	r3, #0
 80085a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80085a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80085ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80085b0:	ebb2 040a 	subs.w	r4, r2, sl
 80085b4:	eb63 050b 	sbc.w	r5, r3, fp
 80085b8:	f04f 0200 	mov.w	r2, #0
 80085bc:	f04f 0300 	mov.w	r3, #0
 80085c0:	00eb      	lsls	r3, r5, #3
 80085c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085c6:	00e2      	lsls	r2, r4, #3
 80085c8:	4614      	mov	r4, r2
 80085ca:	461d      	mov	r5, r3
 80085cc:	4643      	mov	r3, r8
 80085ce:	18e3      	adds	r3, r4, r3
 80085d0:	603b      	str	r3, [r7, #0]
 80085d2:	464b      	mov	r3, r9
 80085d4:	eb45 0303 	adc.w	r3, r5, r3
 80085d8:	607b      	str	r3, [r7, #4]
 80085da:	f04f 0200 	mov.w	r2, #0
 80085de:	f04f 0300 	mov.w	r3, #0
 80085e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80085e6:	4629      	mov	r1, r5
 80085e8:	028b      	lsls	r3, r1, #10
 80085ea:	4621      	mov	r1, r4
 80085ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80085f0:	4621      	mov	r1, r4
 80085f2:	028a      	lsls	r2, r1, #10
 80085f4:	4610      	mov	r0, r2
 80085f6:	4619      	mov	r1, r3
 80085f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085fa:	2200      	movs	r2, #0
 80085fc:	61bb      	str	r3, [r7, #24]
 80085fe:	61fa      	str	r2, [r7, #28]
 8008600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008604:	f7f8 fb28 	bl	8000c58 <__aeabi_uldivmod>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	4613      	mov	r3, r2
 800860e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008610:	4b0b      	ldr	r3, [pc, #44]	; (8008640 <HAL_RCC_GetSysClockFreq+0x200>)
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	0c1b      	lsrs	r3, r3, #16
 8008616:	f003 0303 	and.w	r3, r3, #3
 800861a:	3301      	adds	r3, #1
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008620:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008624:	fbb2 f3f3 	udiv	r3, r2, r3
 8008628:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800862a:	e002      	b.n	8008632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800862c:	4b05      	ldr	r3, [pc, #20]	; (8008644 <HAL_RCC_GetSysClockFreq+0x204>)
 800862e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008634:	4618      	mov	r0, r3
 8008636:	3750      	adds	r7, #80	; 0x50
 8008638:	46bd      	mov	sp, r7
 800863a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800863e:	bf00      	nop
 8008640:	40023800 	.word	0x40023800
 8008644:	00f42400 	.word	0x00f42400
 8008648:	007a1200 	.word	0x007a1200

0800864c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800864c:	b480      	push	{r7}
 800864e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008650:	4b03      	ldr	r3, [pc, #12]	; (8008660 <HAL_RCC_GetHCLKFreq+0x14>)
 8008652:	681b      	ldr	r3, [r3, #0]
}
 8008654:	4618      	mov	r0, r3
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	200000e8 	.word	0x200000e8

08008664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008668:	f7ff fff0 	bl	800864c <HAL_RCC_GetHCLKFreq>
 800866c:	4602      	mov	r2, r0
 800866e:	4b05      	ldr	r3, [pc, #20]	; (8008684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	0a9b      	lsrs	r3, r3, #10
 8008674:	f003 0307 	and.w	r3, r3, #7
 8008678:	4903      	ldr	r1, [pc, #12]	; (8008688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800867a:	5ccb      	ldrb	r3, [r1, r3]
 800867c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008680:	4618      	mov	r0, r3
 8008682:	bd80      	pop	{r7, pc}
 8008684:	40023800 	.word	0x40023800
 8008688:	0800cccc 	.word	0x0800cccc

0800868c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008690:	f7ff ffdc 	bl	800864c <HAL_RCC_GetHCLKFreq>
 8008694:	4602      	mov	r2, r0
 8008696:	4b05      	ldr	r3, [pc, #20]	; (80086ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	0b5b      	lsrs	r3, r3, #13
 800869c:	f003 0307 	and.w	r3, r3, #7
 80086a0:	4903      	ldr	r1, [pc, #12]	; (80086b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086a2:	5ccb      	ldrb	r3, [r1, r3]
 80086a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	40023800 	.word	0x40023800
 80086b0:	0800cccc 	.word	0x0800cccc

080086b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e03f      	b.n	8008746 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d106      	bne.n	80086e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f837 	bl	800874e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2224      	movs	r2, #36	; 0x24
 80086e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f933 	bl	8008964 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	691a      	ldr	r2, [r3, #16]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800870c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	695a      	ldr	r2, [r3, #20]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800871c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68da      	ldr	r2, [r3, #12]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800872c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2220      	movs	r2, #32
 8008738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2220      	movs	r2, #32
 8008740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800874e:	b480      	push	{r7}
 8008750:	b083      	sub	sp, #12
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8008756:	bf00      	nop
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b08a      	sub	sp, #40	; 0x28
 8008766:	af02      	add	r7, sp, #8
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	603b      	str	r3, [r7, #0]
 800876e:	4613      	mov	r3, r2
 8008770:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008772:	2300      	movs	r3, #0
 8008774:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b20      	cmp	r3, #32
 8008780:	d17c      	bne.n	800887c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <HAL_UART_Transmit+0x2c>
 8008788:	88fb      	ldrh	r3, [r7, #6]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d101      	bne.n	8008792 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e075      	b.n	800887e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008798:	2b01      	cmp	r3, #1
 800879a:	d101      	bne.n	80087a0 <HAL_UART_Transmit+0x3e>
 800879c:	2302      	movs	r3, #2
 800879e:	e06e      	b.n	800887e <HAL_UART_Transmit+0x11c>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2221      	movs	r2, #33	; 0x21
 80087b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087b6:	f7fd feb3 	bl	8006520 <HAL_GetTick>
 80087ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	88fa      	ldrh	r2, [r7, #6]
 80087c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	88fa      	ldrh	r2, [r7, #6]
 80087c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087d0:	d108      	bne.n	80087e4 <HAL_UART_Transmit+0x82>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d104      	bne.n	80087e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80087da:	2300      	movs	r3, #0
 80087dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	61bb      	str	r3, [r7, #24]
 80087e2:	e003      	b.n	80087ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80087f4:	e02a      	b.n	800884c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	2200      	movs	r2, #0
 80087fe:	2180      	movs	r1, #128	; 0x80
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f000 f840 	bl	8008886 <UART_WaitOnFlagUntilTimeout>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e036      	b.n	800887e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10b      	bne.n	800882e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008824:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	3302      	adds	r3, #2
 800882a:	61bb      	str	r3, [r7, #24]
 800882c:	e007      	b.n	800883e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	781a      	ldrb	r2, [r3, #0]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	3301      	adds	r3, #1
 800883c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008842:	b29b      	uxth	r3, r3
 8008844:	3b01      	subs	r3, #1
 8008846:	b29a      	uxth	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008850:	b29b      	uxth	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1cf      	bne.n	80087f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	2200      	movs	r2, #0
 800885e:	2140      	movs	r1, #64	; 0x40
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f000 f810 	bl	8008886 <UART_WaitOnFlagUntilTimeout>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e006      	b.n	800887e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2220      	movs	r2, #32
 8008874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	e000      	b.n	800887e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800887c:	2302      	movs	r3, #2
  }
}
 800887e:	4618      	mov	r0, r3
 8008880:	3720      	adds	r7, #32
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b090      	sub	sp, #64	; 0x40
 800888a:	af00      	add	r7, sp, #0
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	603b      	str	r3, [r7, #0]
 8008892:	4613      	mov	r3, r2
 8008894:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008896:	e050      	b.n	800893a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800889a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889e:	d04c      	beq.n	800893a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80088a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d007      	beq.n	80088b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80088a6:	f7fd fe3b 	bl	8006520 <HAL_GetTick>
 80088aa:	4602      	mov	r2, r0
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d241      	bcs.n	800893a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	330c      	adds	r3, #12
 80088bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c0:	e853 3f00 	ldrex	r3, [r3]
 80088c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	330c      	adds	r3, #12
 80088d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80088d6:	637a      	str	r2, [r7, #52]	; 0x34
 80088d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088de:	e841 2300 	strex	r3, r2, [r1]
 80088e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80088e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1e5      	bne.n	80088b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3314      	adds	r3, #20
 80088f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	613b      	str	r3, [r7, #16]
   return(result);
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f023 0301 	bic.w	r3, r3, #1
 8008900:	63bb      	str	r3, [r7, #56]	; 0x38
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3314      	adds	r3, #20
 8008908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800890a:	623a      	str	r2, [r7, #32]
 800890c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890e:	69f9      	ldr	r1, [r7, #28]
 8008910:	6a3a      	ldr	r2, [r7, #32]
 8008912:	e841 2300 	strex	r3, r2, [r1]
 8008916:	61bb      	str	r3, [r7, #24]
   return(result);
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1e5      	bne.n	80088ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2220      	movs	r2, #32
 8008922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2220      	movs	r2, #32
 800892a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e00f      	b.n	800895a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	4013      	ands	r3, r2
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	429a      	cmp	r2, r3
 8008948:	bf0c      	ite	eq
 800894a:	2301      	moveq	r3, #1
 800894c:	2300      	movne	r3, #0
 800894e:	b2db      	uxtb	r3, r3
 8008950:	461a      	mov	r2, r3
 8008952:	79fb      	ldrb	r3, [r7, #7]
 8008954:	429a      	cmp	r2, r3
 8008956:	d09f      	beq.n	8008898 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3740      	adds	r7, #64	; 0x40
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
	...

08008964 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008968:	b0c0      	sub	sp, #256	; 0x100
 800896a:	af00      	add	r7, sp, #0
 800896c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800897c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008980:	68d9      	ldr	r1, [r3, #12]
 8008982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	ea40 0301 	orr.w	r3, r0, r1
 800898c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800898e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008992:	689a      	ldr	r2, [r3, #8]
 8008994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	431a      	orrs	r2, r3
 800899c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	431a      	orrs	r2, r3
 80089a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80089b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80089bc:	f021 010c 	bic.w	r1, r1, #12
 80089c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089ca:	430b      	orrs	r3, r1
 80089cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80089da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089de:	6999      	ldr	r1, [r3, #24]
 80089e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	ea40 0301 	orr.w	r3, r0, r1
 80089ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80089ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	4b8f      	ldr	r3, [pc, #572]	; (8008c30 <UART_SetConfig+0x2cc>)
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d005      	beq.n	8008a04 <UART_SetConfig+0xa0>
 80089f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	4b8d      	ldr	r3, [pc, #564]	; (8008c34 <UART_SetConfig+0x2d0>)
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d104      	bne.n	8008a0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a04:	f7ff fe42 	bl	800868c <HAL_RCC_GetPCLK2Freq>
 8008a08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008a0c:	e003      	b.n	8008a16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a0e:	f7ff fe29 	bl	8008664 <HAL_RCC_GetPCLK1Freq>
 8008a12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a20:	f040 810c 	bne.w	8008c3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008a32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008a36:	4622      	mov	r2, r4
 8008a38:	462b      	mov	r3, r5
 8008a3a:	1891      	adds	r1, r2, r2
 8008a3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a3e:	415b      	adcs	r3, r3
 8008a40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008a46:	4621      	mov	r1, r4
 8008a48:	eb12 0801 	adds.w	r8, r2, r1
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	eb43 0901 	adc.w	r9, r3, r1
 8008a52:	f04f 0200 	mov.w	r2, #0
 8008a56:	f04f 0300 	mov.w	r3, #0
 8008a5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a66:	4690      	mov	r8, r2
 8008a68:	4699      	mov	r9, r3
 8008a6a:	4623      	mov	r3, r4
 8008a6c:	eb18 0303 	adds.w	r3, r8, r3
 8008a70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a74:	462b      	mov	r3, r5
 8008a76:	eb49 0303 	adc.w	r3, r9, r3
 8008a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008a8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008a92:	460b      	mov	r3, r1
 8008a94:	18db      	adds	r3, r3, r3
 8008a96:	653b      	str	r3, [r7, #80]	; 0x50
 8008a98:	4613      	mov	r3, r2
 8008a9a:	eb42 0303 	adc.w	r3, r2, r3
 8008a9e:	657b      	str	r3, [r7, #84]	; 0x54
 8008aa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008aa4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008aa8:	f7f8 f8d6 	bl	8000c58 <__aeabi_uldivmod>
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4b61      	ldr	r3, [pc, #388]	; (8008c38 <UART_SetConfig+0x2d4>)
 8008ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ab6:	095b      	lsrs	r3, r3, #5
 8008ab8:	011c      	lsls	r4, r3, #4
 8008aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ac4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008ac8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008acc:	4642      	mov	r2, r8
 8008ace:	464b      	mov	r3, r9
 8008ad0:	1891      	adds	r1, r2, r2
 8008ad2:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ad4:	415b      	adcs	r3, r3
 8008ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ad8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008adc:	4641      	mov	r1, r8
 8008ade:	eb12 0a01 	adds.w	sl, r2, r1
 8008ae2:	4649      	mov	r1, r9
 8008ae4:	eb43 0b01 	adc.w	fp, r3, r1
 8008ae8:	f04f 0200 	mov.w	r2, #0
 8008aec:	f04f 0300 	mov.w	r3, #0
 8008af0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008af4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008af8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008afc:	4692      	mov	sl, r2
 8008afe:	469b      	mov	fp, r3
 8008b00:	4643      	mov	r3, r8
 8008b02:	eb1a 0303 	adds.w	r3, sl, r3
 8008b06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b0a:	464b      	mov	r3, r9
 8008b0c:	eb4b 0303 	adc.w	r3, fp, r3
 8008b10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008b24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	18db      	adds	r3, r3, r3
 8008b2c:	643b      	str	r3, [r7, #64]	; 0x40
 8008b2e:	4613      	mov	r3, r2
 8008b30:	eb42 0303 	adc.w	r3, r2, r3
 8008b34:	647b      	str	r3, [r7, #68]	; 0x44
 8008b36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008b3e:	f7f8 f88b 	bl	8000c58 <__aeabi_uldivmod>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4611      	mov	r1, r2
 8008b48:	4b3b      	ldr	r3, [pc, #236]	; (8008c38 <UART_SetConfig+0x2d4>)
 8008b4a:	fba3 2301 	umull	r2, r3, r3, r1
 8008b4e:	095b      	lsrs	r3, r3, #5
 8008b50:	2264      	movs	r2, #100	; 0x64
 8008b52:	fb02 f303 	mul.w	r3, r2, r3
 8008b56:	1acb      	subs	r3, r1, r3
 8008b58:	00db      	lsls	r3, r3, #3
 8008b5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008b5e:	4b36      	ldr	r3, [pc, #216]	; (8008c38 <UART_SetConfig+0x2d4>)
 8008b60:	fba3 2302 	umull	r2, r3, r3, r2
 8008b64:	095b      	lsrs	r3, r3, #5
 8008b66:	005b      	lsls	r3, r3, #1
 8008b68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b6c:	441c      	add	r4, r3
 8008b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b72:	2200      	movs	r2, #0
 8008b74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008b7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008b80:	4642      	mov	r2, r8
 8008b82:	464b      	mov	r3, r9
 8008b84:	1891      	adds	r1, r2, r2
 8008b86:	63b9      	str	r1, [r7, #56]	; 0x38
 8008b88:	415b      	adcs	r3, r3
 8008b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008b90:	4641      	mov	r1, r8
 8008b92:	1851      	adds	r1, r2, r1
 8008b94:	6339      	str	r1, [r7, #48]	; 0x30
 8008b96:	4649      	mov	r1, r9
 8008b98:	414b      	adcs	r3, r1
 8008b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8008b9c:	f04f 0200 	mov.w	r2, #0
 8008ba0:	f04f 0300 	mov.w	r3, #0
 8008ba4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008ba8:	4659      	mov	r1, fp
 8008baa:	00cb      	lsls	r3, r1, #3
 8008bac:	4651      	mov	r1, sl
 8008bae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bb2:	4651      	mov	r1, sl
 8008bb4:	00ca      	lsls	r2, r1, #3
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	4619      	mov	r1, r3
 8008bba:	4603      	mov	r3, r0
 8008bbc:	4642      	mov	r2, r8
 8008bbe:	189b      	adds	r3, r3, r2
 8008bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008bc4:	464b      	mov	r3, r9
 8008bc6:	460a      	mov	r2, r1
 8008bc8:	eb42 0303 	adc.w	r3, r2, r3
 8008bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008bdc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008be0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008be4:	460b      	mov	r3, r1
 8008be6:	18db      	adds	r3, r3, r3
 8008be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bea:	4613      	mov	r3, r2
 8008bec:	eb42 0303 	adc.w	r3, r2, r3
 8008bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bf6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008bfa:	f7f8 f82d 	bl	8000c58 <__aeabi_uldivmod>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	460b      	mov	r3, r1
 8008c02:	4b0d      	ldr	r3, [pc, #52]	; (8008c38 <UART_SetConfig+0x2d4>)
 8008c04:	fba3 1302 	umull	r1, r3, r3, r2
 8008c08:	095b      	lsrs	r3, r3, #5
 8008c0a:	2164      	movs	r1, #100	; 0x64
 8008c0c:	fb01 f303 	mul.w	r3, r1, r3
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	00db      	lsls	r3, r3, #3
 8008c14:	3332      	adds	r3, #50	; 0x32
 8008c16:	4a08      	ldr	r2, [pc, #32]	; (8008c38 <UART_SetConfig+0x2d4>)
 8008c18:	fba2 2303 	umull	r2, r3, r2, r3
 8008c1c:	095b      	lsrs	r3, r3, #5
 8008c1e:	f003 0207 	and.w	r2, r3, #7
 8008c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4422      	add	r2, r4
 8008c2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c2c:	e105      	b.n	8008e3a <UART_SetConfig+0x4d6>
 8008c2e:	bf00      	nop
 8008c30:	40011000 	.word	0x40011000
 8008c34:	40011400 	.word	0x40011400
 8008c38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c40:	2200      	movs	r2, #0
 8008c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008c4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008c4e:	4642      	mov	r2, r8
 8008c50:	464b      	mov	r3, r9
 8008c52:	1891      	adds	r1, r2, r2
 8008c54:	6239      	str	r1, [r7, #32]
 8008c56:	415b      	adcs	r3, r3
 8008c58:	627b      	str	r3, [r7, #36]	; 0x24
 8008c5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c5e:	4641      	mov	r1, r8
 8008c60:	1854      	adds	r4, r2, r1
 8008c62:	4649      	mov	r1, r9
 8008c64:	eb43 0501 	adc.w	r5, r3, r1
 8008c68:	f04f 0200 	mov.w	r2, #0
 8008c6c:	f04f 0300 	mov.w	r3, #0
 8008c70:	00eb      	lsls	r3, r5, #3
 8008c72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c76:	00e2      	lsls	r2, r4, #3
 8008c78:	4614      	mov	r4, r2
 8008c7a:	461d      	mov	r5, r3
 8008c7c:	4643      	mov	r3, r8
 8008c7e:	18e3      	adds	r3, r4, r3
 8008c80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c84:	464b      	mov	r3, r9
 8008c86:	eb45 0303 	adc.w	r3, r5, r3
 8008c8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c9e:	f04f 0200 	mov.w	r2, #0
 8008ca2:	f04f 0300 	mov.w	r3, #0
 8008ca6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008caa:	4629      	mov	r1, r5
 8008cac:	008b      	lsls	r3, r1, #2
 8008cae:	4621      	mov	r1, r4
 8008cb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	008a      	lsls	r2, r1, #2
 8008cb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008cbc:	f7f7 ffcc 	bl	8000c58 <__aeabi_uldivmod>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4b60      	ldr	r3, [pc, #384]	; (8008e48 <UART_SetConfig+0x4e4>)
 8008cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8008cca:	095b      	lsrs	r3, r3, #5
 8008ccc:	011c      	lsls	r4, r3, #4
 8008cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008cd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008cdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008ce0:	4642      	mov	r2, r8
 8008ce2:	464b      	mov	r3, r9
 8008ce4:	1891      	adds	r1, r2, r2
 8008ce6:	61b9      	str	r1, [r7, #24]
 8008ce8:	415b      	adcs	r3, r3
 8008cea:	61fb      	str	r3, [r7, #28]
 8008cec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cf0:	4641      	mov	r1, r8
 8008cf2:	1851      	adds	r1, r2, r1
 8008cf4:	6139      	str	r1, [r7, #16]
 8008cf6:	4649      	mov	r1, r9
 8008cf8:	414b      	adcs	r3, r1
 8008cfa:	617b      	str	r3, [r7, #20]
 8008cfc:	f04f 0200 	mov.w	r2, #0
 8008d00:	f04f 0300 	mov.w	r3, #0
 8008d04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d08:	4659      	mov	r1, fp
 8008d0a:	00cb      	lsls	r3, r1, #3
 8008d0c:	4651      	mov	r1, sl
 8008d0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d12:	4651      	mov	r1, sl
 8008d14:	00ca      	lsls	r2, r1, #3
 8008d16:	4610      	mov	r0, r2
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	4642      	mov	r2, r8
 8008d1e:	189b      	adds	r3, r3, r2
 8008d20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d24:	464b      	mov	r3, r9
 8008d26:	460a      	mov	r2, r1
 8008d28:	eb42 0303 	adc.w	r3, r2, r3
 8008d2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008d3c:	f04f 0200 	mov.w	r2, #0
 8008d40:	f04f 0300 	mov.w	r3, #0
 8008d44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008d48:	4649      	mov	r1, r9
 8008d4a:	008b      	lsls	r3, r1, #2
 8008d4c:	4641      	mov	r1, r8
 8008d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d52:	4641      	mov	r1, r8
 8008d54:	008a      	lsls	r2, r1, #2
 8008d56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008d5a:	f7f7 ff7d 	bl	8000c58 <__aeabi_uldivmod>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	4b39      	ldr	r3, [pc, #228]	; (8008e48 <UART_SetConfig+0x4e4>)
 8008d64:	fba3 1302 	umull	r1, r3, r3, r2
 8008d68:	095b      	lsrs	r3, r3, #5
 8008d6a:	2164      	movs	r1, #100	; 0x64
 8008d6c:	fb01 f303 	mul.w	r3, r1, r3
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	011b      	lsls	r3, r3, #4
 8008d74:	3332      	adds	r3, #50	; 0x32
 8008d76:	4a34      	ldr	r2, [pc, #208]	; (8008e48 <UART_SetConfig+0x4e4>)
 8008d78:	fba2 2303 	umull	r2, r3, r2, r3
 8008d7c:	095b      	lsrs	r3, r3, #5
 8008d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d82:	441c      	add	r4, r3
 8008d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d88:	2200      	movs	r2, #0
 8008d8a:	673b      	str	r3, [r7, #112]	; 0x70
 8008d8c:	677a      	str	r2, [r7, #116]	; 0x74
 8008d8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008d92:	4642      	mov	r2, r8
 8008d94:	464b      	mov	r3, r9
 8008d96:	1891      	adds	r1, r2, r2
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	415b      	adcs	r3, r3
 8008d9c:	60fb      	str	r3, [r7, #12]
 8008d9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008da2:	4641      	mov	r1, r8
 8008da4:	1851      	adds	r1, r2, r1
 8008da6:	6039      	str	r1, [r7, #0]
 8008da8:	4649      	mov	r1, r9
 8008daa:	414b      	adcs	r3, r1
 8008dac:	607b      	str	r3, [r7, #4]
 8008dae:	f04f 0200 	mov.w	r2, #0
 8008db2:	f04f 0300 	mov.w	r3, #0
 8008db6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008dba:	4659      	mov	r1, fp
 8008dbc:	00cb      	lsls	r3, r1, #3
 8008dbe:	4651      	mov	r1, sl
 8008dc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dc4:	4651      	mov	r1, sl
 8008dc6:	00ca      	lsls	r2, r1, #3
 8008dc8:	4610      	mov	r0, r2
 8008dca:	4619      	mov	r1, r3
 8008dcc:	4603      	mov	r3, r0
 8008dce:	4642      	mov	r2, r8
 8008dd0:	189b      	adds	r3, r3, r2
 8008dd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dd4:	464b      	mov	r3, r9
 8008dd6:	460a      	mov	r2, r1
 8008dd8:	eb42 0303 	adc.w	r3, r2, r3
 8008ddc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	663b      	str	r3, [r7, #96]	; 0x60
 8008de8:	667a      	str	r2, [r7, #100]	; 0x64
 8008dea:	f04f 0200 	mov.w	r2, #0
 8008dee:	f04f 0300 	mov.w	r3, #0
 8008df2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008df6:	4649      	mov	r1, r9
 8008df8:	008b      	lsls	r3, r1, #2
 8008dfa:	4641      	mov	r1, r8
 8008dfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e00:	4641      	mov	r1, r8
 8008e02:	008a      	lsls	r2, r1, #2
 8008e04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008e08:	f7f7 ff26 	bl	8000c58 <__aeabi_uldivmod>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	4b0d      	ldr	r3, [pc, #52]	; (8008e48 <UART_SetConfig+0x4e4>)
 8008e12:	fba3 1302 	umull	r1, r3, r3, r2
 8008e16:	095b      	lsrs	r3, r3, #5
 8008e18:	2164      	movs	r1, #100	; 0x64
 8008e1a:	fb01 f303 	mul.w	r3, r1, r3
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	011b      	lsls	r3, r3, #4
 8008e22:	3332      	adds	r3, #50	; 0x32
 8008e24:	4a08      	ldr	r2, [pc, #32]	; (8008e48 <UART_SetConfig+0x4e4>)
 8008e26:	fba2 2303 	umull	r2, r3, r2, r3
 8008e2a:	095b      	lsrs	r3, r3, #5
 8008e2c:	f003 020f 	and.w	r2, r3, #15
 8008e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4422      	add	r2, r4
 8008e38:	609a      	str	r2, [r3, #8]
}
 8008e3a:	bf00      	nop
 8008e3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008e40:	46bd      	mov	sp, r7
 8008e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e46:	bf00      	nop
 8008e48:	51eb851f 	.word	0x51eb851f

08008e4c <__errno>:
 8008e4c:	4b01      	ldr	r3, [pc, #4]	; (8008e54 <__errno+0x8>)
 8008e4e:	6818      	ldr	r0, [r3, #0]
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	200000f4 	.word	0x200000f4

08008e58 <__libc_init_array>:
 8008e58:	b570      	push	{r4, r5, r6, lr}
 8008e5a:	4d0d      	ldr	r5, [pc, #52]	; (8008e90 <__libc_init_array+0x38>)
 8008e5c:	4c0d      	ldr	r4, [pc, #52]	; (8008e94 <__libc_init_array+0x3c>)
 8008e5e:	1b64      	subs	r4, r4, r5
 8008e60:	10a4      	asrs	r4, r4, #2
 8008e62:	2600      	movs	r6, #0
 8008e64:	42a6      	cmp	r6, r4
 8008e66:	d109      	bne.n	8008e7c <__libc_init_array+0x24>
 8008e68:	4d0b      	ldr	r5, [pc, #44]	; (8008e98 <__libc_init_array+0x40>)
 8008e6a:	4c0c      	ldr	r4, [pc, #48]	; (8008e9c <__libc_init_array+0x44>)
 8008e6c:	f003 fe7e 	bl	800cb6c <_init>
 8008e70:	1b64      	subs	r4, r4, r5
 8008e72:	10a4      	asrs	r4, r4, #2
 8008e74:	2600      	movs	r6, #0
 8008e76:	42a6      	cmp	r6, r4
 8008e78:	d105      	bne.n	8008e86 <__libc_init_array+0x2e>
 8008e7a:	bd70      	pop	{r4, r5, r6, pc}
 8008e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e80:	4798      	blx	r3
 8008e82:	3601      	adds	r6, #1
 8008e84:	e7ee      	b.n	8008e64 <__libc_init_array+0xc>
 8008e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e8a:	4798      	blx	r3
 8008e8c:	3601      	adds	r6, #1
 8008e8e:	e7f2      	b.n	8008e76 <__libc_init_array+0x1e>
 8008e90:	0800d0e8 	.word	0x0800d0e8
 8008e94:	0800d0e8 	.word	0x0800d0e8
 8008e98:	0800d0e8 	.word	0x0800d0e8
 8008e9c:	0800d0ec 	.word	0x0800d0ec

08008ea0 <memset>:
 8008ea0:	4402      	add	r2, r0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d100      	bne.n	8008eaa <memset+0xa>
 8008ea8:	4770      	bx	lr
 8008eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8008eae:	e7f9      	b.n	8008ea4 <memset+0x4>

08008eb0 <__cvt>:
 8008eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb4:	ec55 4b10 	vmov	r4, r5, d0
 8008eb8:	2d00      	cmp	r5, #0
 8008eba:	460e      	mov	r6, r1
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	462b      	mov	r3, r5
 8008ec0:	bfbb      	ittet	lt
 8008ec2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008ec6:	461d      	movlt	r5, r3
 8008ec8:	2300      	movge	r3, #0
 8008eca:	232d      	movlt	r3, #45	; 0x2d
 8008ecc:	700b      	strb	r3, [r1, #0]
 8008ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ed0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ed4:	4691      	mov	r9, r2
 8008ed6:	f023 0820 	bic.w	r8, r3, #32
 8008eda:	bfbc      	itt	lt
 8008edc:	4622      	movlt	r2, r4
 8008ede:	4614      	movlt	r4, r2
 8008ee0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ee4:	d005      	beq.n	8008ef2 <__cvt+0x42>
 8008ee6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008eea:	d100      	bne.n	8008eee <__cvt+0x3e>
 8008eec:	3601      	adds	r6, #1
 8008eee:	2102      	movs	r1, #2
 8008ef0:	e000      	b.n	8008ef4 <__cvt+0x44>
 8008ef2:	2103      	movs	r1, #3
 8008ef4:	ab03      	add	r3, sp, #12
 8008ef6:	9301      	str	r3, [sp, #4]
 8008ef8:	ab02      	add	r3, sp, #8
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	ec45 4b10 	vmov	d0, r4, r5
 8008f00:	4653      	mov	r3, sl
 8008f02:	4632      	mov	r2, r6
 8008f04:	f000 fd18 	bl	8009938 <_dtoa_r>
 8008f08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f0c:	4607      	mov	r7, r0
 8008f0e:	d102      	bne.n	8008f16 <__cvt+0x66>
 8008f10:	f019 0f01 	tst.w	r9, #1
 8008f14:	d022      	beq.n	8008f5c <__cvt+0xac>
 8008f16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f1a:	eb07 0906 	add.w	r9, r7, r6
 8008f1e:	d110      	bne.n	8008f42 <__cvt+0x92>
 8008f20:	783b      	ldrb	r3, [r7, #0]
 8008f22:	2b30      	cmp	r3, #48	; 0x30
 8008f24:	d10a      	bne.n	8008f3c <__cvt+0x8c>
 8008f26:	2200      	movs	r2, #0
 8008f28:	2300      	movs	r3, #0
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	f7f7 fdd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f32:	b918      	cbnz	r0, 8008f3c <__cvt+0x8c>
 8008f34:	f1c6 0601 	rsb	r6, r6, #1
 8008f38:	f8ca 6000 	str.w	r6, [sl]
 8008f3c:	f8da 3000 	ldr.w	r3, [sl]
 8008f40:	4499      	add	r9, r3
 8008f42:	2200      	movs	r2, #0
 8008f44:	2300      	movs	r3, #0
 8008f46:	4620      	mov	r0, r4
 8008f48:	4629      	mov	r1, r5
 8008f4a:	f7f7 fdc5 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f4e:	b108      	cbz	r0, 8008f54 <__cvt+0xa4>
 8008f50:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f54:	2230      	movs	r2, #48	; 0x30
 8008f56:	9b03      	ldr	r3, [sp, #12]
 8008f58:	454b      	cmp	r3, r9
 8008f5a:	d307      	bcc.n	8008f6c <__cvt+0xbc>
 8008f5c:	9b03      	ldr	r3, [sp, #12]
 8008f5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f60:	1bdb      	subs	r3, r3, r7
 8008f62:	4638      	mov	r0, r7
 8008f64:	6013      	str	r3, [r2, #0]
 8008f66:	b004      	add	sp, #16
 8008f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f6c:	1c59      	adds	r1, r3, #1
 8008f6e:	9103      	str	r1, [sp, #12]
 8008f70:	701a      	strb	r2, [r3, #0]
 8008f72:	e7f0      	b.n	8008f56 <__cvt+0xa6>

08008f74 <__exponent>:
 8008f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f76:	4603      	mov	r3, r0
 8008f78:	2900      	cmp	r1, #0
 8008f7a:	bfb8      	it	lt
 8008f7c:	4249      	neglt	r1, r1
 8008f7e:	f803 2b02 	strb.w	r2, [r3], #2
 8008f82:	bfb4      	ite	lt
 8008f84:	222d      	movlt	r2, #45	; 0x2d
 8008f86:	222b      	movge	r2, #43	; 0x2b
 8008f88:	2909      	cmp	r1, #9
 8008f8a:	7042      	strb	r2, [r0, #1]
 8008f8c:	dd2a      	ble.n	8008fe4 <__exponent+0x70>
 8008f8e:	f10d 0407 	add.w	r4, sp, #7
 8008f92:	46a4      	mov	ip, r4
 8008f94:	270a      	movs	r7, #10
 8008f96:	46a6      	mov	lr, r4
 8008f98:	460a      	mov	r2, r1
 8008f9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8008f9e:	fb07 1516 	mls	r5, r7, r6, r1
 8008fa2:	3530      	adds	r5, #48	; 0x30
 8008fa4:	2a63      	cmp	r2, #99	; 0x63
 8008fa6:	f104 34ff 	add.w	r4, r4, #4294967295
 8008faa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008fae:	4631      	mov	r1, r6
 8008fb0:	dcf1      	bgt.n	8008f96 <__exponent+0x22>
 8008fb2:	3130      	adds	r1, #48	; 0x30
 8008fb4:	f1ae 0502 	sub.w	r5, lr, #2
 8008fb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008fbc:	1c44      	adds	r4, r0, #1
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	4561      	cmp	r1, ip
 8008fc2:	d30a      	bcc.n	8008fda <__exponent+0x66>
 8008fc4:	f10d 0209 	add.w	r2, sp, #9
 8008fc8:	eba2 020e 	sub.w	r2, r2, lr
 8008fcc:	4565      	cmp	r5, ip
 8008fce:	bf88      	it	hi
 8008fd0:	2200      	movhi	r2, #0
 8008fd2:	4413      	add	r3, r2
 8008fd4:	1a18      	subs	r0, r3, r0
 8008fd6:	b003      	add	sp, #12
 8008fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fde:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008fe2:	e7ed      	b.n	8008fc0 <__exponent+0x4c>
 8008fe4:	2330      	movs	r3, #48	; 0x30
 8008fe6:	3130      	adds	r1, #48	; 0x30
 8008fe8:	7083      	strb	r3, [r0, #2]
 8008fea:	70c1      	strb	r1, [r0, #3]
 8008fec:	1d03      	adds	r3, r0, #4
 8008fee:	e7f1      	b.n	8008fd4 <__exponent+0x60>

08008ff0 <_printf_float>:
 8008ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	ed2d 8b02 	vpush	{d8}
 8008ff8:	b08d      	sub	sp, #52	; 0x34
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009000:	4616      	mov	r6, r2
 8009002:	461f      	mov	r7, r3
 8009004:	4605      	mov	r5, r0
 8009006:	f001 fb7b 	bl	800a700 <_localeconv_r>
 800900a:	f8d0 a000 	ldr.w	sl, [r0]
 800900e:	4650      	mov	r0, sl
 8009010:	f7f7 f8e6 	bl	80001e0 <strlen>
 8009014:	2300      	movs	r3, #0
 8009016:	930a      	str	r3, [sp, #40]	; 0x28
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	9305      	str	r3, [sp, #20]
 800901c:	f8d8 3000 	ldr.w	r3, [r8]
 8009020:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009024:	3307      	adds	r3, #7
 8009026:	f023 0307 	bic.w	r3, r3, #7
 800902a:	f103 0208 	add.w	r2, r3, #8
 800902e:	f8c8 2000 	str.w	r2, [r8]
 8009032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009036:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800903a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800903e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009042:	9307      	str	r3, [sp, #28]
 8009044:	f8cd 8018 	str.w	r8, [sp, #24]
 8009048:	ee08 0a10 	vmov	s16, r0
 800904c:	4b9f      	ldr	r3, [pc, #636]	; (80092cc <_printf_float+0x2dc>)
 800904e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009052:	f04f 32ff 	mov.w	r2, #4294967295
 8009056:	f7f7 fd71 	bl	8000b3c <__aeabi_dcmpun>
 800905a:	bb88      	cbnz	r0, 80090c0 <_printf_float+0xd0>
 800905c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009060:	4b9a      	ldr	r3, [pc, #616]	; (80092cc <_printf_float+0x2dc>)
 8009062:	f04f 32ff 	mov.w	r2, #4294967295
 8009066:	f7f7 fd4b 	bl	8000b00 <__aeabi_dcmple>
 800906a:	bb48      	cbnz	r0, 80090c0 <_printf_float+0xd0>
 800906c:	2200      	movs	r2, #0
 800906e:	2300      	movs	r3, #0
 8009070:	4640      	mov	r0, r8
 8009072:	4649      	mov	r1, r9
 8009074:	f7f7 fd3a 	bl	8000aec <__aeabi_dcmplt>
 8009078:	b110      	cbz	r0, 8009080 <_printf_float+0x90>
 800907a:	232d      	movs	r3, #45	; 0x2d
 800907c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009080:	4b93      	ldr	r3, [pc, #588]	; (80092d0 <_printf_float+0x2e0>)
 8009082:	4894      	ldr	r0, [pc, #592]	; (80092d4 <_printf_float+0x2e4>)
 8009084:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009088:	bf94      	ite	ls
 800908a:	4698      	movls	r8, r3
 800908c:	4680      	movhi	r8, r0
 800908e:	2303      	movs	r3, #3
 8009090:	6123      	str	r3, [r4, #16]
 8009092:	9b05      	ldr	r3, [sp, #20]
 8009094:	f023 0204 	bic.w	r2, r3, #4
 8009098:	6022      	str	r2, [r4, #0]
 800909a:	f04f 0900 	mov.w	r9, #0
 800909e:	9700      	str	r7, [sp, #0]
 80090a0:	4633      	mov	r3, r6
 80090a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80090a4:	4621      	mov	r1, r4
 80090a6:	4628      	mov	r0, r5
 80090a8:	f000 f9d8 	bl	800945c <_printf_common>
 80090ac:	3001      	adds	r0, #1
 80090ae:	f040 8090 	bne.w	80091d2 <_printf_float+0x1e2>
 80090b2:	f04f 30ff 	mov.w	r0, #4294967295
 80090b6:	b00d      	add	sp, #52	; 0x34
 80090b8:	ecbd 8b02 	vpop	{d8}
 80090bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c0:	4642      	mov	r2, r8
 80090c2:	464b      	mov	r3, r9
 80090c4:	4640      	mov	r0, r8
 80090c6:	4649      	mov	r1, r9
 80090c8:	f7f7 fd38 	bl	8000b3c <__aeabi_dcmpun>
 80090cc:	b140      	cbz	r0, 80090e0 <_printf_float+0xf0>
 80090ce:	464b      	mov	r3, r9
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	bfbc      	itt	lt
 80090d4:	232d      	movlt	r3, #45	; 0x2d
 80090d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80090da:	487f      	ldr	r0, [pc, #508]	; (80092d8 <_printf_float+0x2e8>)
 80090dc:	4b7f      	ldr	r3, [pc, #508]	; (80092dc <_printf_float+0x2ec>)
 80090de:	e7d1      	b.n	8009084 <_printf_float+0x94>
 80090e0:	6863      	ldr	r3, [r4, #4]
 80090e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80090e6:	9206      	str	r2, [sp, #24]
 80090e8:	1c5a      	adds	r2, r3, #1
 80090ea:	d13f      	bne.n	800916c <_printf_float+0x17c>
 80090ec:	2306      	movs	r3, #6
 80090ee:	6063      	str	r3, [r4, #4]
 80090f0:	9b05      	ldr	r3, [sp, #20]
 80090f2:	6861      	ldr	r1, [r4, #4]
 80090f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80090f8:	2300      	movs	r3, #0
 80090fa:	9303      	str	r3, [sp, #12]
 80090fc:	ab0a      	add	r3, sp, #40	; 0x28
 80090fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009102:	ab09      	add	r3, sp, #36	; 0x24
 8009104:	ec49 8b10 	vmov	d0, r8, r9
 8009108:	9300      	str	r3, [sp, #0]
 800910a:	6022      	str	r2, [r4, #0]
 800910c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009110:	4628      	mov	r0, r5
 8009112:	f7ff fecd 	bl	8008eb0 <__cvt>
 8009116:	9b06      	ldr	r3, [sp, #24]
 8009118:	9909      	ldr	r1, [sp, #36]	; 0x24
 800911a:	2b47      	cmp	r3, #71	; 0x47
 800911c:	4680      	mov	r8, r0
 800911e:	d108      	bne.n	8009132 <_printf_float+0x142>
 8009120:	1cc8      	adds	r0, r1, #3
 8009122:	db02      	blt.n	800912a <_printf_float+0x13a>
 8009124:	6863      	ldr	r3, [r4, #4]
 8009126:	4299      	cmp	r1, r3
 8009128:	dd41      	ble.n	80091ae <_printf_float+0x1be>
 800912a:	f1ab 0b02 	sub.w	fp, fp, #2
 800912e:	fa5f fb8b 	uxtb.w	fp, fp
 8009132:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009136:	d820      	bhi.n	800917a <_printf_float+0x18a>
 8009138:	3901      	subs	r1, #1
 800913a:	465a      	mov	r2, fp
 800913c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009140:	9109      	str	r1, [sp, #36]	; 0x24
 8009142:	f7ff ff17 	bl	8008f74 <__exponent>
 8009146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009148:	1813      	adds	r3, r2, r0
 800914a:	2a01      	cmp	r2, #1
 800914c:	4681      	mov	r9, r0
 800914e:	6123      	str	r3, [r4, #16]
 8009150:	dc02      	bgt.n	8009158 <_printf_float+0x168>
 8009152:	6822      	ldr	r2, [r4, #0]
 8009154:	07d2      	lsls	r2, r2, #31
 8009156:	d501      	bpl.n	800915c <_printf_float+0x16c>
 8009158:	3301      	adds	r3, #1
 800915a:	6123      	str	r3, [r4, #16]
 800915c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009160:	2b00      	cmp	r3, #0
 8009162:	d09c      	beq.n	800909e <_printf_float+0xae>
 8009164:	232d      	movs	r3, #45	; 0x2d
 8009166:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800916a:	e798      	b.n	800909e <_printf_float+0xae>
 800916c:	9a06      	ldr	r2, [sp, #24]
 800916e:	2a47      	cmp	r2, #71	; 0x47
 8009170:	d1be      	bne.n	80090f0 <_printf_float+0x100>
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1bc      	bne.n	80090f0 <_printf_float+0x100>
 8009176:	2301      	movs	r3, #1
 8009178:	e7b9      	b.n	80090ee <_printf_float+0xfe>
 800917a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800917e:	d118      	bne.n	80091b2 <_printf_float+0x1c2>
 8009180:	2900      	cmp	r1, #0
 8009182:	6863      	ldr	r3, [r4, #4]
 8009184:	dd0b      	ble.n	800919e <_printf_float+0x1ae>
 8009186:	6121      	str	r1, [r4, #16]
 8009188:	b913      	cbnz	r3, 8009190 <_printf_float+0x1a0>
 800918a:	6822      	ldr	r2, [r4, #0]
 800918c:	07d0      	lsls	r0, r2, #31
 800918e:	d502      	bpl.n	8009196 <_printf_float+0x1a6>
 8009190:	3301      	adds	r3, #1
 8009192:	440b      	add	r3, r1
 8009194:	6123      	str	r3, [r4, #16]
 8009196:	65a1      	str	r1, [r4, #88]	; 0x58
 8009198:	f04f 0900 	mov.w	r9, #0
 800919c:	e7de      	b.n	800915c <_printf_float+0x16c>
 800919e:	b913      	cbnz	r3, 80091a6 <_printf_float+0x1b6>
 80091a0:	6822      	ldr	r2, [r4, #0]
 80091a2:	07d2      	lsls	r2, r2, #31
 80091a4:	d501      	bpl.n	80091aa <_printf_float+0x1ba>
 80091a6:	3302      	adds	r3, #2
 80091a8:	e7f4      	b.n	8009194 <_printf_float+0x1a4>
 80091aa:	2301      	movs	r3, #1
 80091ac:	e7f2      	b.n	8009194 <_printf_float+0x1a4>
 80091ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80091b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091b4:	4299      	cmp	r1, r3
 80091b6:	db05      	blt.n	80091c4 <_printf_float+0x1d4>
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	6121      	str	r1, [r4, #16]
 80091bc:	07d8      	lsls	r0, r3, #31
 80091be:	d5ea      	bpl.n	8009196 <_printf_float+0x1a6>
 80091c0:	1c4b      	adds	r3, r1, #1
 80091c2:	e7e7      	b.n	8009194 <_printf_float+0x1a4>
 80091c4:	2900      	cmp	r1, #0
 80091c6:	bfd4      	ite	le
 80091c8:	f1c1 0202 	rsble	r2, r1, #2
 80091cc:	2201      	movgt	r2, #1
 80091ce:	4413      	add	r3, r2
 80091d0:	e7e0      	b.n	8009194 <_printf_float+0x1a4>
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	055a      	lsls	r2, r3, #21
 80091d6:	d407      	bmi.n	80091e8 <_printf_float+0x1f8>
 80091d8:	6923      	ldr	r3, [r4, #16]
 80091da:	4642      	mov	r2, r8
 80091dc:	4631      	mov	r1, r6
 80091de:	4628      	mov	r0, r5
 80091e0:	47b8      	blx	r7
 80091e2:	3001      	adds	r0, #1
 80091e4:	d12c      	bne.n	8009240 <_printf_float+0x250>
 80091e6:	e764      	b.n	80090b2 <_printf_float+0xc2>
 80091e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091ec:	f240 80e0 	bls.w	80093b0 <_printf_float+0x3c0>
 80091f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091f4:	2200      	movs	r2, #0
 80091f6:	2300      	movs	r3, #0
 80091f8:	f7f7 fc6e 	bl	8000ad8 <__aeabi_dcmpeq>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d034      	beq.n	800926a <_printf_float+0x27a>
 8009200:	4a37      	ldr	r2, [pc, #220]	; (80092e0 <_printf_float+0x2f0>)
 8009202:	2301      	movs	r3, #1
 8009204:	4631      	mov	r1, r6
 8009206:	4628      	mov	r0, r5
 8009208:	47b8      	blx	r7
 800920a:	3001      	adds	r0, #1
 800920c:	f43f af51 	beq.w	80090b2 <_printf_float+0xc2>
 8009210:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009214:	429a      	cmp	r2, r3
 8009216:	db02      	blt.n	800921e <_printf_float+0x22e>
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	07d8      	lsls	r0, r3, #31
 800921c:	d510      	bpl.n	8009240 <_printf_float+0x250>
 800921e:	ee18 3a10 	vmov	r3, s16
 8009222:	4652      	mov	r2, sl
 8009224:	4631      	mov	r1, r6
 8009226:	4628      	mov	r0, r5
 8009228:	47b8      	blx	r7
 800922a:	3001      	adds	r0, #1
 800922c:	f43f af41 	beq.w	80090b2 <_printf_float+0xc2>
 8009230:	f04f 0800 	mov.w	r8, #0
 8009234:	f104 091a 	add.w	r9, r4, #26
 8009238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800923a:	3b01      	subs	r3, #1
 800923c:	4543      	cmp	r3, r8
 800923e:	dc09      	bgt.n	8009254 <_printf_float+0x264>
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	079b      	lsls	r3, r3, #30
 8009244:	f100 8105 	bmi.w	8009452 <_printf_float+0x462>
 8009248:	68e0      	ldr	r0, [r4, #12]
 800924a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800924c:	4298      	cmp	r0, r3
 800924e:	bfb8      	it	lt
 8009250:	4618      	movlt	r0, r3
 8009252:	e730      	b.n	80090b6 <_printf_float+0xc6>
 8009254:	2301      	movs	r3, #1
 8009256:	464a      	mov	r2, r9
 8009258:	4631      	mov	r1, r6
 800925a:	4628      	mov	r0, r5
 800925c:	47b8      	blx	r7
 800925e:	3001      	adds	r0, #1
 8009260:	f43f af27 	beq.w	80090b2 <_printf_float+0xc2>
 8009264:	f108 0801 	add.w	r8, r8, #1
 8009268:	e7e6      	b.n	8009238 <_printf_float+0x248>
 800926a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926c:	2b00      	cmp	r3, #0
 800926e:	dc39      	bgt.n	80092e4 <_printf_float+0x2f4>
 8009270:	4a1b      	ldr	r2, [pc, #108]	; (80092e0 <_printf_float+0x2f0>)
 8009272:	2301      	movs	r3, #1
 8009274:	4631      	mov	r1, r6
 8009276:	4628      	mov	r0, r5
 8009278:	47b8      	blx	r7
 800927a:	3001      	adds	r0, #1
 800927c:	f43f af19 	beq.w	80090b2 <_printf_float+0xc2>
 8009280:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009284:	4313      	orrs	r3, r2
 8009286:	d102      	bne.n	800928e <_printf_float+0x29e>
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	07d9      	lsls	r1, r3, #31
 800928c:	d5d8      	bpl.n	8009240 <_printf_float+0x250>
 800928e:	ee18 3a10 	vmov	r3, s16
 8009292:	4652      	mov	r2, sl
 8009294:	4631      	mov	r1, r6
 8009296:	4628      	mov	r0, r5
 8009298:	47b8      	blx	r7
 800929a:	3001      	adds	r0, #1
 800929c:	f43f af09 	beq.w	80090b2 <_printf_float+0xc2>
 80092a0:	f04f 0900 	mov.w	r9, #0
 80092a4:	f104 0a1a 	add.w	sl, r4, #26
 80092a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092aa:	425b      	negs	r3, r3
 80092ac:	454b      	cmp	r3, r9
 80092ae:	dc01      	bgt.n	80092b4 <_printf_float+0x2c4>
 80092b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092b2:	e792      	b.n	80091da <_printf_float+0x1ea>
 80092b4:	2301      	movs	r3, #1
 80092b6:	4652      	mov	r2, sl
 80092b8:	4631      	mov	r1, r6
 80092ba:	4628      	mov	r0, r5
 80092bc:	47b8      	blx	r7
 80092be:	3001      	adds	r0, #1
 80092c0:	f43f aef7 	beq.w	80090b2 <_printf_float+0xc2>
 80092c4:	f109 0901 	add.w	r9, r9, #1
 80092c8:	e7ee      	b.n	80092a8 <_printf_float+0x2b8>
 80092ca:	bf00      	nop
 80092cc:	7fefffff 	.word	0x7fefffff
 80092d0:	0800ccd8 	.word	0x0800ccd8
 80092d4:	0800ccdc 	.word	0x0800ccdc
 80092d8:	0800cce4 	.word	0x0800cce4
 80092dc:	0800cce0 	.word	0x0800cce0
 80092e0:	0800cce8 	.word	0x0800cce8
 80092e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092e8:	429a      	cmp	r2, r3
 80092ea:	bfa8      	it	ge
 80092ec:	461a      	movge	r2, r3
 80092ee:	2a00      	cmp	r2, #0
 80092f0:	4691      	mov	r9, r2
 80092f2:	dc37      	bgt.n	8009364 <_printf_float+0x374>
 80092f4:	f04f 0b00 	mov.w	fp, #0
 80092f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092fc:	f104 021a 	add.w	r2, r4, #26
 8009300:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009302:	9305      	str	r3, [sp, #20]
 8009304:	eba3 0309 	sub.w	r3, r3, r9
 8009308:	455b      	cmp	r3, fp
 800930a:	dc33      	bgt.n	8009374 <_printf_float+0x384>
 800930c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009310:	429a      	cmp	r2, r3
 8009312:	db3b      	blt.n	800938c <_printf_float+0x39c>
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	07da      	lsls	r2, r3, #31
 8009318:	d438      	bmi.n	800938c <_printf_float+0x39c>
 800931a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800931c:	9a05      	ldr	r2, [sp, #20]
 800931e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009320:	1a9a      	subs	r2, r3, r2
 8009322:	eba3 0901 	sub.w	r9, r3, r1
 8009326:	4591      	cmp	r9, r2
 8009328:	bfa8      	it	ge
 800932a:	4691      	movge	r9, r2
 800932c:	f1b9 0f00 	cmp.w	r9, #0
 8009330:	dc35      	bgt.n	800939e <_printf_float+0x3ae>
 8009332:	f04f 0800 	mov.w	r8, #0
 8009336:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800933a:	f104 0a1a 	add.w	sl, r4, #26
 800933e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009342:	1a9b      	subs	r3, r3, r2
 8009344:	eba3 0309 	sub.w	r3, r3, r9
 8009348:	4543      	cmp	r3, r8
 800934a:	f77f af79 	ble.w	8009240 <_printf_float+0x250>
 800934e:	2301      	movs	r3, #1
 8009350:	4652      	mov	r2, sl
 8009352:	4631      	mov	r1, r6
 8009354:	4628      	mov	r0, r5
 8009356:	47b8      	blx	r7
 8009358:	3001      	adds	r0, #1
 800935a:	f43f aeaa 	beq.w	80090b2 <_printf_float+0xc2>
 800935e:	f108 0801 	add.w	r8, r8, #1
 8009362:	e7ec      	b.n	800933e <_printf_float+0x34e>
 8009364:	4613      	mov	r3, r2
 8009366:	4631      	mov	r1, r6
 8009368:	4642      	mov	r2, r8
 800936a:	4628      	mov	r0, r5
 800936c:	47b8      	blx	r7
 800936e:	3001      	adds	r0, #1
 8009370:	d1c0      	bne.n	80092f4 <_printf_float+0x304>
 8009372:	e69e      	b.n	80090b2 <_printf_float+0xc2>
 8009374:	2301      	movs	r3, #1
 8009376:	4631      	mov	r1, r6
 8009378:	4628      	mov	r0, r5
 800937a:	9205      	str	r2, [sp, #20]
 800937c:	47b8      	blx	r7
 800937e:	3001      	adds	r0, #1
 8009380:	f43f ae97 	beq.w	80090b2 <_printf_float+0xc2>
 8009384:	9a05      	ldr	r2, [sp, #20]
 8009386:	f10b 0b01 	add.w	fp, fp, #1
 800938a:	e7b9      	b.n	8009300 <_printf_float+0x310>
 800938c:	ee18 3a10 	vmov	r3, s16
 8009390:	4652      	mov	r2, sl
 8009392:	4631      	mov	r1, r6
 8009394:	4628      	mov	r0, r5
 8009396:	47b8      	blx	r7
 8009398:	3001      	adds	r0, #1
 800939a:	d1be      	bne.n	800931a <_printf_float+0x32a>
 800939c:	e689      	b.n	80090b2 <_printf_float+0xc2>
 800939e:	9a05      	ldr	r2, [sp, #20]
 80093a0:	464b      	mov	r3, r9
 80093a2:	4442      	add	r2, r8
 80093a4:	4631      	mov	r1, r6
 80093a6:	4628      	mov	r0, r5
 80093a8:	47b8      	blx	r7
 80093aa:	3001      	adds	r0, #1
 80093ac:	d1c1      	bne.n	8009332 <_printf_float+0x342>
 80093ae:	e680      	b.n	80090b2 <_printf_float+0xc2>
 80093b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093b2:	2a01      	cmp	r2, #1
 80093b4:	dc01      	bgt.n	80093ba <_printf_float+0x3ca>
 80093b6:	07db      	lsls	r3, r3, #31
 80093b8:	d538      	bpl.n	800942c <_printf_float+0x43c>
 80093ba:	2301      	movs	r3, #1
 80093bc:	4642      	mov	r2, r8
 80093be:	4631      	mov	r1, r6
 80093c0:	4628      	mov	r0, r5
 80093c2:	47b8      	blx	r7
 80093c4:	3001      	adds	r0, #1
 80093c6:	f43f ae74 	beq.w	80090b2 <_printf_float+0xc2>
 80093ca:	ee18 3a10 	vmov	r3, s16
 80093ce:	4652      	mov	r2, sl
 80093d0:	4631      	mov	r1, r6
 80093d2:	4628      	mov	r0, r5
 80093d4:	47b8      	blx	r7
 80093d6:	3001      	adds	r0, #1
 80093d8:	f43f ae6b 	beq.w	80090b2 <_printf_float+0xc2>
 80093dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093e0:	2200      	movs	r2, #0
 80093e2:	2300      	movs	r3, #0
 80093e4:	f7f7 fb78 	bl	8000ad8 <__aeabi_dcmpeq>
 80093e8:	b9d8      	cbnz	r0, 8009422 <_printf_float+0x432>
 80093ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ec:	f108 0201 	add.w	r2, r8, #1
 80093f0:	3b01      	subs	r3, #1
 80093f2:	4631      	mov	r1, r6
 80093f4:	4628      	mov	r0, r5
 80093f6:	47b8      	blx	r7
 80093f8:	3001      	adds	r0, #1
 80093fa:	d10e      	bne.n	800941a <_printf_float+0x42a>
 80093fc:	e659      	b.n	80090b2 <_printf_float+0xc2>
 80093fe:	2301      	movs	r3, #1
 8009400:	4652      	mov	r2, sl
 8009402:	4631      	mov	r1, r6
 8009404:	4628      	mov	r0, r5
 8009406:	47b8      	blx	r7
 8009408:	3001      	adds	r0, #1
 800940a:	f43f ae52 	beq.w	80090b2 <_printf_float+0xc2>
 800940e:	f108 0801 	add.w	r8, r8, #1
 8009412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009414:	3b01      	subs	r3, #1
 8009416:	4543      	cmp	r3, r8
 8009418:	dcf1      	bgt.n	80093fe <_printf_float+0x40e>
 800941a:	464b      	mov	r3, r9
 800941c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009420:	e6dc      	b.n	80091dc <_printf_float+0x1ec>
 8009422:	f04f 0800 	mov.w	r8, #0
 8009426:	f104 0a1a 	add.w	sl, r4, #26
 800942a:	e7f2      	b.n	8009412 <_printf_float+0x422>
 800942c:	2301      	movs	r3, #1
 800942e:	4642      	mov	r2, r8
 8009430:	e7df      	b.n	80093f2 <_printf_float+0x402>
 8009432:	2301      	movs	r3, #1
 8009434:	464a      	mov	r2, r9
 8009436:	4631      	mov	r1, r6
 8009438:	4628      	mov	r0, r5
 800943a:	47b8      	blx	r7
 800943c:	3001      	adds	r0, #1
 800943e:	f43f ae38 	beq.w	80090b2 <_printf_float+0xc2>
 8009442:	f108 0801 	add.w	r8, r8, #1
 8009446:	68e3      	ldr	r3, [r4, #12]
 8009448:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800944a:	1a5b      	subs	r3, r3, r1
 800944c:	4543      	cmp	r3, r8
 800944e:	dcf0      	bgt.n	8009432 <_printf_float+0x442>
 8009450:	e6fa      	b.n	8009248 <_printf_float+0x258>
 8009452:	f04f 0800 	mov.w	r8, #0
 8009456:	f104 0919 	add.w	r9, r4, #25
 800945a:	e7f4      	b.n	8009446 <_printf_float+0x456>

0800945c <_printf_common>:
 800945c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009460:	4616      	mov	r6, r2
 8009462:	4699      	mov	r9, r3
 8009464:	688a      	ldr	r2, [r1, #8]
 8009466:	690b      	ldr	r3, [r1, #16]
 8009468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800946c:	4293      	cmp	r3, r2
 800946e:	bfb8      	it	lt
 8009470:	4613      	movlt	r3, r2
 8009472:	6033      	str	r3, [r6, #0]
 8009474:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009478:	4607      	mov	r7, r0
 800947a:	460c      	mov	r4, r1
 800947c:	b10a      	cbz	r2, 8009482 <_printf_common+0x26>
 800947e:	3301      	adds	r3, #1
 8009480:	6033      	str	r3, [r6, #0]
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	0699      	lsls	r1, r3, #26
 8009486:	bf42      	ittt	mi
 8009488:	6833      	ldrmi	r3, [r6, #0]
 800948a:	3302      	addmi	r3, #2
 800948c:	6033      	strmi	r3, [r6, #0]
 800948e:	6825      	ldr	r5, [r4, #0]
 8009490:	f015 0506 	ands.w	r5, r5, #6
 8009494:	d106      	bne.n	80094a4 <_printf_common+0x48>
 8009496:	f104 0a19 	add.w	sl, r4, #25
 800949a:	68e3      	ldr	r3, [r4, #12]
 800949c:	6832      	ldr	r2, [r6, #0]
 800949e:	1a9b      	subs	r3, r3, r2
 80094a0:	42ab      	cmp	r3, r5
 80094a2:	dc26      	bgt.n	80094f2 <_printf_common+0x96>
 80094a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094a8:	1e13      	subs	r3, r2, #0
 80094aa:	6822      	ldr	r2, [r4, #0]
 80094ac:	bf18      	it	ne
 80094ae:	2301      	movne	r3, #1
 80094b0:	0692      	lsls	r2, r2, #26
 80094b2:	d42b      	bmi.n	800950c <_printf_common+0xb0>
 80094b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094b8:	4649      	mov	r1, r9
 80094ba:	4638      	mov	r0, r7
 80094bc:	47c0      	blx	r8
 80094be:	3001      	adds	r0, #1
 80094c0:	d01e      	beq.n	8009500 <_printf_common+0xa4>
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	68e5      	ldr	r5, [r4, #12]
 80094c6:	6832      	ldr	r2, [r6, #0]
 80094c8:	f003 0306 	and.w	r3, r3, #6
 80094cc:	2b04      	cmp	r3, #4
 80094ce:	bf08      	it	eq
 80094d0:	1aad      	subeq	r5, r5, r2
 80094d2:	68a3      	ldr	r3, [r4, #8]
 80094d4:	6922      	ldr	r2, [r4, #16]
 80094d6:	bf0c      	ite	eq
 80094d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094dc:	2500      	movne	r5, #0
 80094de:	4293      	cmp	r3, r2
 80094e0:	bfc4      	itt	gt
 80094e2:	1a9b      	subgt	r3, r3, r2
 80094e4:	18ed      	addgt	r5, r5, r3
 80094e6:	2600      	movs	r6, #0
 80094e8:	341a      	adds	r4, #26
 80094ea:	42b5      	cmp	r5, r6
 80094ec:	d11a      	bne.n	8009524 <_printf_common+0xc8>
 80094ee:	2000      	movs	r0, #0
 80094f0:	e008      	b.n	8009504 <_printf_common+0xa8>
 80094f2:	2301      	movs	r3, #1
 80094f4:	4652      	mov	r2, sl
 80094f6:	4649      	mov	r1, r9
 80094f8:	4638      	mov	r0, r7
 80094fa:	47c0      	blx	r8
 80094fc:	3001      	adds	r0, #1
 80094fe:	d103      	bne.n	8009508 <_printf_common+0xac>
 8009500:	f04f 30ff 	mov.w	r0, #4294967295
 8009504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009508:	3501      	adds	r5, #1
 800950a:	e7c6      	b.n	800949a <_printf_common+0x3e>
 800950c:	18e1      	adds	r1, r4, r3
 800950e:	1c5a      	adds	r2, r3, #1
 8009510:	2030      	movs	r0, #48	; 0x30
 8009512:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009516:	4422      	add	r2, r4
 8009518:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800951c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009520:	3302      	adds	r3, #2
 8009522:	e7c7      	b.n	80094b4 <_printf_common+0x58>
 8009524:	2301      	movs	r3, #1
 8009526:	4622      	mov	r2, r4
 8009528:	4649      	mov	r1, r9
 800952a:	4638      	mov	r0, r7
 800952c:	47c0      	blx	r8
 800952e:	3001      	adds	r0, #1
 8009530:	d0e6      	beq.n	8009500 <_printf_common+0xa4>
 8009532:	3601      	adds	r6, #1
 8009534:	e7d9      	b.n	80094ea <_printf_common+0x8e>
	...

08009538 <_printf_i>:
 8009538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800953c:	7e0f      	ldrb	r7, [r1, #24]
 800953e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009540:	2f78      	cmp	r7, #120	; 0x78
 8009542:	4691      	mov	r9, r2
 8009544:	4680      	mov	r8, r0
 8009546:	460c      	mov	r4, r1
 8009548:	469a      	mov	sl, r3
 800954a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800954e:	d807      	bhi.n	8009560 <_printf_i+0x28>
 8009550:	2f62      	cmp	r7, #98	; 0x62
 8009552:	d80a      	bhi.n	800956a <_printf_i+0x32>
 8009554:	2f00      	cmp	r7, #0
 8009556:	f000 80d8 	beq.w	800970a <_printf_i+0x1d2>
 800955a:	2f58      	cmp	r7, #88	; 0x58
 800955c:	f000 80a3 	beq.w	80096a6 <_printf_i+0x16e>
 8009560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009568:	e03a      	b.n	80095e0 <_printf_i+0xa8>
 800956a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800956e:	2b15      	cmp	r3, #21
 8009570:	d8f6      	bhi.n	8009560 <_printf_i+0x28>
 8009572:	a101      	add	r1, pc, #4	; (adr r1, 8009578 <_printf_i+0x40>)
 8009574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009578:	080095d1 	.word	0x080095d1
 800957c:	080095e5 	.word	0x080095e5
 8009580:	08009561 	.word	0x08009561
 8009584:	08009561 	.word	0x08009561
 8009588:	08009561 	.word	0x08009561
 800958c:	08009561 	.word	0x08009561
 8009590:	080095e5 	.word	0x080095e5
 8009594:	08009561 	.word	0x08009561
 8009598:	08009561 	.word	0x08009561
 800959c:	08009561 	.word	0x08009561
 80095a0:	08009561 	.word	0x08009561
 80095a4:	080096f1 	.word	0x080096f1
 80095a8:	08009615 	.word	0x08009615
 80095ac:	080096d3 	.word	0x080096d3
 80095b0:	08009561 	.word	0x08009561
 80095b4:	08009561 	.word	0x08009561
 80095b8:	08009713 	.word	0x08009713
 80095bc:	08009561 	.word	0x08009561
 80095c0:	08009615 	.word	0x08009615
 80095c4:	08009561 	.word	0x08009561
 80095c8:	08009561 	.word	0x08009561
 80095cc:	080096db 	.word	0x080096db
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	1d1a      	adds	r2, r3, #4
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	602a      	str	r2, [r5, #0]
 80095d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095e0:	2301      	movs	r3, #1
 80095e2:	e0a3      	b.n	800972c <_printf_i+0x1f4>
 80095e4:	6820      	ldr	r0, [r4, #0]
 80095e6:	6829      	ldr	r1, [r5, #0]
 80095e8:	0606      	lsls	r6, r0, #24
 80095ea:	f101 0304 	add.w	r3, r1, #4
 80095ee:	d50a      	bpl.n	8009606 <_printf_i+0xce>
 80095f0:	680e      	ldr	r6, [r1, #0]
 80095f2:	602b      	str	r3, [r5, #0]
 80095f4:	2e00      	cmp	r6, #0
 80095f6:	da03      	bge.n	8009600 <_printf_i+0xc8>
 80095f8:	232d      	movs	r3, #45	; 0x2d
 80095fa:	4276      	negs	r6, r6
 80095fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009600:	485e      	ldr	r0, [pc, #376]	; (800977c <_printf_i+0x244>)
 8009602:	230a      	movs	r3, #10
 8009604:	e019      	b.n	800963a <_printf_i+0x102>
 8009606:	680e      	ldr	r6, [r1, #0]
 8009608:	602b      	str	r3, [r5, #0]
 800960a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800960e:	bf18      	it	ne
 8009610:	b236      	sxthne	r6, r6
 8009612:	e7ef      	b.n	80095f4 <_printf_i+0xbc>
 8009614:	682b      	ldr	r3, [r5, #0]
 8009616:	6820      	ldr	r0, [r4, #0]
 8009618:	1d19      	adds	r1, r3, #4
 800961a:	6029      	str	r1, [r5, #0]
 800961c:	0601      	lsls	r1, r0, #24
 800961e:	d501      	bpl.n	8009624 <_printf_i+0xec>
 8009620:	681e      	ldr	r6, [r3, #0]
 8009622:	e002      	b.n	800962a <_printf_i+0xf2>
 8009624:	0646      	lsls	r6, r0, #25
 8009626:	d5fb      	bpl.n	8009620 <_printf_i+0xe8>
 8009628:	881e      	ldrh	r6, [r3, #0]
 800962a:	4854      	ldr	r0, [pc, #336]	; (800977c <_printf_i+0x244>)
 800962c:	2f6f      	cmp	r7, #111	; 0x6f
 800962e:	bf0c      	ite	eq
 8009630:	2308      	moveq	r3, #8
 8009632:	230a      	movne	r3, #10
 8009634:	2100      	movs	r1, #0
 8009636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800963a:	6865      	ldr	r5, [r4, #4]
 800963c:	60a5      	str	r5, [r4, #8]
 800963e:	2d00      	cmp	r5, #0
 8009640:	bfa2      	ittt	ge
 8009642:	6821      	ldrge	r1, [r4, #0]
 8009644:	f021 0104 	bicge.w	r1, r1, #4
 8009648:	6021      	strge	r1, [r4, #0]
 800964a:	b90e      	cbnz	r6, 8009650 <_printf_i+0x118>
 800964c:	2d00      	cmp	r5, #0
 800964e:	d04d      	beq.n	80096ec <_printf_i+0x1b4>
 8009650:	4615      	mov	r5, r2
 8009652:	fbb6 f1f3 	udiv	r1, r6, r3
 8009656:	fb03 6711 	mls	r7, r3, r1, r6
 800965a:	5dc7      	ldrb	r7, [r0, r7]
 800965c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009660:	4637      	mov	r7, r6
 8009662:	42bb      	cmp	r3, r7
 8009664:	460e      	mov	r6, r1
 8009666:	d9f4      	bls.n	8009652 <_printf_i+0x11a>
 8009668:	2b08      	cmp	r3, #8
 800966a:	d10b      	bne.n	8009684 <_printf_i+0x14c>
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	07de      	lsls	r6, r3, #31
 8009670:	d508      	bpl.n	8009684 <_printf_i+0x14c>
 8009672:	6923      	ldr	r3, [r4, #16]
 8009674:	6861      	ldr	r1, [r4, #4]
 8009676:	4299      	cmp	r1, r3
 8009678:	bfde      	ittt	le
 800967a:	2330      	movle	r3, #48	; 0x30
 800967c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009680:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009684:	1b52      	subs	r2, r2, r5
 8009686:	6122      	str	r2, [r4, #16]
 8009688:	f8cd a000 	str.w	sl, [sp]
 800968c:	464b      	mov	r3, r9
 800968e:	aa03      	add	r2, sp, #12
 8009690:	4621      	mov	r1, r4
 8009692:	4640      	mov	r0, r8
 8009694:	f7ff fee2 	bl	800945c <_printf_common>
 8009698:	3001      	adds	r0, #1
 800969a:	d14c      	bne.n	8009736 <_printf_i+0x1fe>
 800969c:	f04f 30ff 	mov.w	r0, #4294967295
 80096a0:	b004      	add	sp, #16
 80096a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096a6:	4835      	ldr	r0, [pc, #212]	; (800977c <_printf_i+0x244>)
 80096a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80096ac:	6829      	ldr	r1, [r5, #0]
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80096b4:	6029      	str	r1, [r5, #0]
 80096b6:	061d      	lsls	r5, r3, #24
 80096b8:	d514      	bpl.n	80096e4 <_printf_i+0x1ac>
 80096ba:	07df      	lsls	r7, r3, #31
 80096bc:	bf44      	itt	mi
 80096be:	f043 0320 	orrmi.w	r3, r3, #32
 80096c2:	6023      	strmi	r3, [r4, #0]
 80096c4:	b91e      	cbnz	r6, 80096ce <_printf_i+0x196>
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	f023 0320 	bic.w	r3, r3, #32
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	2310      	movs	r3, #16
 80096d0:	e7b0      	b.n	8009634 <_printf_i+0xfc>
 80096d2:	6823      	ldr	r3, [r4, #0]
 80096d4:	f043 0320 	orr.w	r3, r3, #32
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	2378      	movs	r3, #120	; 0x78
 80096dc:	4828      	ldr	r0, [pc, #160]	; (8009780 <_printf_i+0x248>)
 80096de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096e2:	e7e3      	b.n	80096ac <_printf_i+0x174>
 80096e4:	0659      	lsls	r1, r3, #25
 80096e6:	bf48      	it	mi
 80096e8:	b2b6      	uxthmi	r6, r6
 80096ea:	e7e6      	b.n	80096ba <_printf_i+0x182>
 80096ec:	4615      	mov	r5, r2
 80096ee:	e7bb      	b.n	8009668 <_printf_i+0x130>
 80096f0:	682b      	ldr	r3, [r5, #0]
 80096f2:	6826      	ldr	r6, [r4, #0]
 80096f4:	6961      	ldr	r1, [r4, #20]
 80096f6:	1d18      	adds	r0, r3, #4
 80096f8:	6028      	str	r0, [r5, #0]
 80096fa:	0635      	lsls	r5, r6, #24
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	d501      	bpl.n	8009704 <_printf_i+0x1cc>
 8009700:	6019      	str	r1, [r3, #0]
 8009702:	e002      	b.n	800970a <_printf_i+0x1d2>
 8009704:	0670      	lsls	r0, r6, #25
 8009706:	d5fb      	bpl.n	8009700 <_printf_i+0x1c8>
 8009708:	8019      	strh	r1, [r3, #0]
 800970a:	2300      	movs	r3, #0
 800970c:	6123      	str	r3, [r4, #16]
 800970e:	4615      	mov	r5, r2
 8009710:	e7ba      	b.n	8009688 <_printf_i+0x150>
 8009712:	682b      	ldr	r3, [r5, #0]
 8009714:	1d1a      	adds	r2, r3, #4
 8009716:	602a      	str	r2, [r5, #0]
 8009718:	681d      	ldr	r5, [r3, #0]
 800971a:	6862      	ldr	r2, [r4, #4]
 800971c:	2100      	movs	r1, #0
 800971e:	4628      	mov	r0, r5
 8009720:	f7f6 fd66 	bl	80001f0 <memchr>
 8009724:	b108      	cbz	r0, 800972a <_printf_i+0x1f2>
 8009726:	1b40      	subs	r0, r0, r5
 8009728:	6060      	str	r0, [r4, #4]
 800972a:	6863      	ldr	r3, [r4, #4]
 800972c:	6123      	str	r3, [r4, #16]
 800972e:	2300      	movs	r3, #0
 8009730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009734:	e7a8      	b.n	8009688 <_printf_i+0x150>
 8009736:	6923      	ldr	r3, [r4, #16]
 8009738:	462a      	mov	r2, r5
 800973a:	4649      	mov	r1, r9
 800973c:	4640      	mov	r0, r8
 800973e:	47d0      	blx	sl
 8009740:	3001      	adds	r0, #1
 8009742:	d0ab      	beq.n	800969c <_printf_i+0x164>
 8009744:	6823      	ldr	r3, [r4, #0]
 8009746:	079b      	lsls	r3, r3, #30
 8009748:	d413      	bmi.n	8009772 <_printf_i+0x23a>
 800974a:	68e0      	ldr	r0, [r4, #12]
 800974c:	9b03      	ldr	r3, [sp, #12]
 800974e:	4298      	cmp	r0, r3
 8009750:	bfb8      	it	lt
 8009752:	4618      	movlt	r0, r3
 8009754:	e7a4      	b.n	80096a0 <_printf_i+0x168>
 8009756:	2301      	movs	r3, #1
 8009758:	4632      	mov	r2, r6
 800975a:	4649      	mov	r1, r9
 800975c:	4640      	mov	r0, r8
 800975e:	47d0      	blx	sl
 8009760:	3001      	adds	r0, #1
 8009762:	d09b      	beq.n	800969c <_printf_i+0x164>
 8009764:	3501      	adds	r5, #1
 8009766:	68e3      	ldr	r3, [r4, #12]
 8009768:	9903      	ldr	r1, [sp, #12]
 800976a:	1a5b      	subs	r3, r3, r1
 800976c:	42ab      	cmp	r3, r5
 800976e:	dcf2      	bgt.n	8009756 <_printf_i+0x21e>
 8009770:	e7eb      	b.n	800974a <_printf_i+0x212>
 8009772:	2500      	movs	r5, #0
 8009774:	f104 0619 	add.w	r6, r4, #25
 8009778:	e7f5      	b.n	8009766 <_printf_i+0x22e>
 800977a:	bf00      	nop
 800977c:	0800ccea 	.word	0x0800ccea
 8009780:	0800ccfb 	.word	0x0800ccfb

08009784 <iprintf>:
 8009784:	b40f      	push	{r0, r1, r2, r3}
 8009786:	4b0a      	ldr	r3, [pc, #40]	; (80097b0 <iprintf+0x2c>)
 8009788:	b513      	push	{r0, r1, r4, lr}
 800978a:	681c      	ldr	r4, [r3, #0]
 800978c:	b124      	cbz	r4, 8009798 <iprintf+0x14>
 800978e:	69a3      	ldr	r3, [r4, #24]
 8009790:	b913      	cbnz	r3, 8009798 <iprintf+0x14>
 8009792:	4620      	mov	r0, r4
 8009794:	f000 ff16 	bl	800a5c4 <__sinit>
 8009798:	ab05      	add	r3, sp, #20
 800979a:	9a04      	ldr	r2, [sp, #16]
 800979c:	68a1      	ldr	r1, [r4, #8]
 800979e:	9301      	str	r3, [sp, #4]
 80097a0:	4620      	mov	r0, r4
 80097a2:	f001 fdcb 	bl	800b33c <_vfiprintf_r>
 80097a6:	b002      	add	sp, #8
 80097a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097ac:	b004      	add	sp, #16
 80097ae:	4770      	bx	lr
 80097b0:	200000f4 	.word	0x200000f4

080097b4 <sniprintf>:
 80097b4:	b40c      	push	{r2, r3}
 80097b6:	b530      	push	{r4, r5, lr}
 80097b8:	4b17      	ldr	r3, [pc, #92]	; (8009818 <sniprintf+0x64>)
 80097ba:	1e0c      	subs	r4, r1, #0
 80097bc:	681d      	ldr	r5, [r3, #0]
 80097be:	b09d      	sub	sp, #116	; 0x74
 80097c0:	da08      	bge.n	80097d4 <sniprintf+0x20>
 80097c2:	238b      	movs	r3, #139	; 0x8b
 80097c4:	602b      	str	r3, [r5, #0]
 80097c6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ca:	b01d      	add	sp, #116	; 0x74
 80097cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097d0:	b002      	add	sp, #8
 80097d2:	4770      	bx	lr
 80097d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80097d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80097dc:	bf14      	ite	ne
 80097de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80097e2:	4623      	moveq	r3, r4
 80097e4:	9304      	str	r3, [sp, #16]
 80097e6:	9307      	str	r3, [sp, #28]
 80097e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80097ec:	9002      	str	r0, [sp, #8]
 80097ee:	9006      	str	r0, [sp, #24]
 80097f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80097f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80097f6:	ab21      	add	r3, sp, #132	; 0x84
 80097f8:	a902      	add	r1, sp, #8
 80097fa:	4628      	mov	r0, r5
 80097fc:	9301      	str	r3, [sp, #4]
 80097fe:	f001 fc73 	bl	800b0e8 <_svfiprintf_r>
 8009802:	1c43      	adds	r3, r0, #1
 8009804:	bfbc      	itt	lt
 8009806:	238b      	movlt	r3, #139	; 0x8b
 8009808:	602b      	strlt	r3, [r5, #0]
 800980a:	2c00      	cmp	r4, #0
 800980c:	d0dd      	beq.n	80097ca <sniprintf+0x16>
 800980e:	9b02      	ldr	r3, [sp, #8]
 8009810:	2200      	movs	r2, #0
 8009812:	701a      	strb	r2, [r3, #0]
 8009814:	e7d9      	b.n	80097ca <sniprintf+0x16>
 8009816:	bf00      	nop
 8009818:	200000f4 	.word	0x200000f4

0800981c <quorem>:
 800981c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009820:	6903      	ldr	r3, [r0, #16]
 8009822:	690c      	ldr	r4, [r1, #16]
 8009824:	42a3      	cmp	r3, r4
 8009826:	4607      	mov	r7, r0
 8009828:	f2c0 8081 	blt.w	800992e <quorem+0x112>
 800982c:	3c01      	subs	r4, #1
 800982e:	f101 0814 	add.w	r8, r1, #20
 8009832:	f100 0514 	add.w	r5, r0, #20
 8009836:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800983a:	9301      	str	r3, [sp, #4]
 800983c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009840:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009844:	3301      	adds	r3, #1
 8009846:	429a      	cmp	r2, r3
 8009848:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800984c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009850:	fbb2 f6f3 	udiv	r6, r2, r3
 8009854:	d331      	bcc.n	80098ba <quorem+0x9e>
 8009856:	f04f 0e00 	mov.w	lr, #0
 800985a:	4640      	mov	r0, r8
 800985c:	46ac      	mov	ip, r5
 800985e:	46f2      	mov	sl, lr
 8009860:	f850 2b04 	ldr.w	r2, [r0], #4
 8009864:	b293      	uxth	r3, r2
 8009866:	fb06 e303 	mla	r3, r6, r3, lr
 800986a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800986e:	b29b      	uxth	r3, r3
 8009870:	ebaa 0303 	sub.w	r3, sl, r3
 8009874:	f8dc a000 	ldr.w	sl, [ip]
 8009878:	0c12      	lsrs	r2, r2, #16
 800987a:	fa13 f38a 	uxtah	r3, r3, sl
 800987e:	fb06 e202 	mla	r2, r6, r2, lr
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	9b00      	ldr	r3, [sp, #0]
 8009886:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800988a:	b292      	uxth	r2, r2
 800988c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009890:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009894:	f8bd 3000 	ldrh.w	r3, [sp]
 8009898:	4581      	cmp	r9, r0
 800989a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800989e:	f84c 3b04 	str.w	r3, [ip], #4
 80098a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80098a6:	d2db      	bcs.n	8009860 <quorem+0x44>
 80098a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80098ac:	b92b      	cbnz	r3, 80098ba <quorem+0x9e>
 80098ae:	9b01      	ldr	r3, [sp, #4]
 80098b0:	3b04      	subs	r3, #4
 80098b2:	429d      	cmp	r5, r3
 80098b4:	461a      	mov	r2, r3
 80098b6:	d32e      	bcc.n	8009916 <quorem+0xfa>
 80098b8:	613c      	str	r4, [r7, #16]
 80098ba:	4638      	mov	r0, r7
 80098bc:	f001 f9c0 	bl	800ac40 <__mcmp>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	db24      	blt.n	800990e <quorem+0xf2>
 80098c4:	3601      	adds	r6, #1
 80098c6:	4628      	mov	r0, r5
 80098c8:	f04f 0c00 	mov.w	ip, #0
 80098cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80098d0:	f8d0 e000 	ldr.w	lr, [r0]
 80098d4:	b293      	uxth	r3, r2
 80098d6:	ebac 0303 	sub.w	r3, ip, r3
 80098da:	0c12      	lsrs	r2, r2, #16
 80098dc:	fa13 f38e 	uxtah	r3, r3, lr
 80098e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80098e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098ee:	45c1      	cmp	r9, r8
 80098f0:	f840 3b04 	str.w	r3, [r0], #4
 80098f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098f8:	d2e8      	bcs.n	80098cc <quorem+0xb0>
 80098fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009902:	b922      	cbnz	r2, 800990e <quorem+0xf2>
 8009904:	3b04      	subs	r3, #4
 8009906:	429d      	cmp	r5, r3
 8009908:	461a      	mov	r2, r3
 800990a:	d30a      	bcc.n	8009922 <quorem+0x106>
 800990c:	613c      	str	r4, [r7, #16]
 800990e:	4630      	mov	r0, r6
 8009910:	b003      	add	sp, #12
 8009912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009916:	6812      	ldr	r2, [r2, #0]
 8009918:	3b04      	subs	r3, #4
 800991a:	2a00      	cmp	r2, #0
 800991c:	d1cc      	bne.n	80098b8 <quorem+0x9c>
 800991e:	3c01      	subs	r4, #1
 8009920:	e7c7      	b.n	80098b2 <quorem+0x96>
 8009922:	6812      	ldr	r2, [r2, #0]
 8009924:	3b04      	subs	r3, #4
 8009926:	2a00      	cmp	r2, #0
 8009928:	d1f0      	bne.n	800990c <quorem+0xf0>
 800992a:	3c01      	subs	r4, #1
 800992c:	e7eb      	b.n	8009906 <quorem+0xea>
 800992e:	2000      	movs	r0, #0
 8009930:	e7ee      	b.n	8009910 <quorem+0xf4>
 8009932:	0000      	movs	r0, r0
 8009934:	0000      	movs	r0, r0
	...

08009938 <_dtoa_r>:
 8009938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	ed2d 8b04 	vpush	{d8-d9}
 8009940:	ec57 6b10 	vmov	r6, r7, d0
 8009944:	b093      	sub	sp, #76	; 0x4c
 8009946:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009948:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800994c:	9106      	str	r1, [sp, #24]
 800994e:	ee10 aa10 	vmov	sl, s0
 8009952:	4604      	mov	r4, r0
 8009954:	9209      	str	r2, [sp, #36]	; 0x24
 8009956:	930c      	str	r3, [sp, #48]	; 0x30
 8009958:	46bb      	mov	fp, r7
 800995a:	b975      	cbnz	r5, 800997a <_dtoa_r+0x42>
 800995c:	2010      	movs	r0, #16
 800995e:	f000 fed7 	bl	800a710 <malloc>
 8009962:	4602      	mov	r2, r0
 8009964:	6260      	str	r0, [r4, #36]	; 0x24
 8009966:	b920      	cbnz	r0, 8009972 <_dtoa_r+0x3a>
 8009968:	4ba7      	ldr	r3, [pc, #668]	; (8009c08 <_dtoa_r+0x2d0>)
 800996a:	21ea      	movs	r1, #234	; 0xea
 800996c:	48a7      	ldr	r0, [pc, #668]	; (8009c0c <_dtoa_r+0x2d4>)
 800996e:	f001 ff3b 	bl	800b7e8 <__assert_func>
 8009972:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009976:	6005      	str	r5, [r0, #0]
 8009978:	60c5      	str	r5, [r0, #12]
 800997a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800997c:	6819      	ldr	r1, [r3, #0]
 800997e:	b151      	cbz	r1, 8009996 <_dtoa_r+0x5e>
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	604a      	str	r2, [r1, #4]
 8009984:	2301      	movs	r3, #1
 8009986:	4093      	lsls	r3, r2
 8009988:	608b      	str	r3, [r1, #8]
 800998a:	4620      	mov	r0, r4
 800998c:	f000 ff16 	bl	800a7bc <_Bfree>
 8009990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009992:	2200      	movs	r2, #0
 8009994:	601a      	str	r2, [r3, #0]
 8009996:	1e3b      	subs	r3, r7, #0
 8009998:	bfaa      	itet	ge
 800999a:	2300      	movge	r3, #0
 800999c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80099a0:	f8c8 3000 	strge.w	r3, [r8]
 80099a4:	4b9a      	ldr	r3, [pc, #616]	; (8009c10 <_dtoa_r+0x2d8>)
 80099a6:	bfbc      	itt	lt
 80099a8:	2201      	movlt	r2, #1
 80099aa:	f8c8 2000 	strlt.w	r2, [r8]
 80099ae:	ea33 030b 	bics.w	r3, r3, fp
 80099b2:	d11b      	bne.n	80099ec <_dtoa_r+0xb4>
 80099b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80099ba:	6013      	str	r3, [r2, #0]
 80099bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099c0:	4333      	orrs	r3, r6
 80099c2:	f000 8592 	beq.w	800a4ea <_dtoa_r+0xbb2>
 80099c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099c8:	b963      	cbnz	r3, 80099e4 <_dtoa_r+0xac>
 80099ca:	4b92      	ldr	r3, [pc, #584]	; (8009c14 <_dtoa_r+0x2dc>)
 80099cc:	e022      	b.n	8009a14 <_dtoa_r+0xdc>
 80099ce:	4b92      	ldr	r3, [pc, #584]	; (8009c18 <_dtoa_r+0x2e0>)
 80099d0:	9301      	str	r3, [sp, #4]
 80099d2:	3308      	adds	r3, #8
 80099d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	9801      	ldr	r0, [sp, #4]
 80099da:	b013      	add	sp, #76	; 0x4c
 80099dc:	ecbd 8b04 	vpop	{d8-d9}
 80099e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e4:	4b8b      	ldr	r3, [pc, #556]	; (8009c14 <_dtoa_r+0x2dc>)
 80099e6:	9301      	str	r3, [sp, #4]
 80099e8:	3303      	adds	r3, #3
 80099ea:	e7f3      	b.n	80099d4 <_dtoa_r+0x9c>
 80099ec:	2200      	movs	r2, #0
 80099ee:	2300      	movs	r3, #0
 80099f0:	4650      	mov	r0, sl
 80099f2:	4659      	mov	r1, fp
 80099f4:	f7f7 f870 	bl	8000ad8 <__aeabi_dcmpeq>
 80099f8:	ec4b ab19 	vmov	d9, sl, fp
 80099fc:	4680      	mov	r8, r0
 80099fe:	b158      	cbz	r0, 8009a18 <_dtoa_r+0xe0>
 8009a00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a02:	2301      	movs	r3, #1
 8009a04:	6013      	str	r3, [r2, #0]
 8009a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f000 856b 	beq.w	800a4e4 <_dtoa_r+0xbac>
 8009a0e:	4883      	ldr	r0, [pc, #524]	; (8009c1c <_dtoa_r+0x2e4>)
 8009a10:	6018      	str	r0, [r3, #0]
 8009a12:	1e43      	subs	r3, r0, #1
 8009a14:	9301      	str	r3, [sp, #4]
 8009a16:	e7df      	b.n	80099d8 <_dtoa_r+0xa0>
 8009a18:	ec4b ab10 	vmov	d0, sl, fp
 8009a1c:	aa10      	add	r2, sp, #64	; 0x40
 8009a1e:	a911      	add	r1, sp, #68	; 0x44
 8009a20:	4620      	mov	r0, r4
 8009a22:	f001 f9b3 	bl	800ad8c <__d2b>
 8009a26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009a2a:	ee08 0a10 	vmov	s16, r0
 8009a2e:	2d00      	cmp	r5, #0
 8009a30:	f000 8084 	beq.w	8009b3c <_dtoa_r+0x204>
 8009a34:	ee19 3a90 	vmov	r3, s19
 8009a38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009a40:	4656      	mov	r6, sl
 8009a42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009a46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009a4e:	4b74      	ldr	r3, [pc, #464]	; (8009c20 <_dtoa_r+0x2e8>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	4630      	mov	r0, r6
 8009a54:	4639      	mov	r1, r7
 8009a56:	f7f6 fc1f 	bl	8000298 <__aeabi_dsub>
 8009a5a:	a365      	add	r3, pc, #404	; (adr r3, 8009bf0 <_dtoa_r+0x2b8>)
 8009a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a60:	f7f6 fdd2 	bl	8000608 <__aeabi_dmul>
 8009a64:	a364      	add	r3, pc, #400	; (adr r3, 8009bf8 <_dtoa_r+0x2c0>)
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	f7f6 fc17 	bl	800029c <__adddf3>
 8009a6e:	4606      	mov	r6, r0
 8009a70:	4628      	mov	r0, r5
 8009a72:	460f      	mov	r7, r1
 8009a74:	f7f6 fd5e 	bl	8000534 <__aeabi_i2d>
 8009a78:	a361      	add	r3, pc, #388	; (adr r3, 8009c00 <_dtoa_r+0x2c8>)
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	f7f6 fdc3 	bl	8000608 <__aeabi_dmul>
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	4630      	mov	r0, r6
 8009a88:	4639      	mov	r1, r7
 8009a8a:	f7f6 fc07 	bl	800029c <__adddf3>
 8009a8e:	4606      	mov	r6, r0
 8009a90:	460f      	mov	r7, r1
 8009a92:	f7f7 f869 	bl	8000b68 <__aeabi_d2iz>
 8009a96:	2200      	movs	r2, #0
 8009a98:	9000      	str	r0, [sp, #0]
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	4639      	mov	r1, r7
 8009aa0:	f7f7 f824 	bl	8000aec <__aeabi_dcmplt>
 8009aa4:	b150      	cbz	r0, 8009abc <_dtoa_r+0x184>
 8009aa6:	9800      	ldr	r0, [sp, #0]
 8009aa8:	f7f6 fd44 	bl	8000534 <__aeabi_i2d>
 8009aac:	4632      	mov	r2, r6
 8009aae:	463b      	mov	r3, r7
 8009ab0:	f7f7 f812 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ab4:	b910      	cbnz	r0, 8009abc <_dtoa_r+0x184>
 8009ab6:	9b00      	ldr	r3, [sp, #0]
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	9b00      	ldr	r3, [sp, #0]
 8009abe:	2b16      	cmp	r3, #22
 8009ac0:	d85a      	bhi.n	8009b78 <_dtoa_r+0x240>
 8009ac2:	9a00      	ldr	r2, [sp, #0]
 8009ac4:	4b57      	ldr	r3, [pc, #348]	; (8009c24 <_dtoa_r+0x2ec>)
 8009ac6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	ec51 0b19 	vmov	r0, r1, d9
 8009ad2:	f7f7 f80b 	bl	8000aec <__aeabi_dcmplt>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d050      	beq.n	8009b7c <_dtoa_r+0x244>
 8009ada:	9b00      	ldr	r3, [sp, #0]
 8009adc:	3b01      	subs	r3, #1
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ae6:	1b5d      	subs	r5, r3, r5
 8009ae8:	1e6b      	subs	r3, r5, #1
 8009aea:	9305      	str	r3, [sp, #20]
 8009aec:	bf45      	ittet	mi
 8009aee:	f1c5 0301 	rsbmi	r3, r5, #1
 8009af2:	9304      	strmi	r3, [sp, #16]
 8009af4:	2300      	movpl	r3, #0
 8009af6:	2300      	movmi	r3, #0
 8009af8:	bf4c      	ite	mi
 8009afa:	9305      	strmi	r3, [sp, #20]
 8009afc:	9304      	strpl	r3, [sp, #16]
 8009afe:	9b00      	ldr	r3, [sp, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	db3d      	blt.n	8009b80 <_dtoa_r+0x248>
 8009b04:	9b05      	ldr	r3, [sp, #20]
 8009b06:	9a00      	ldr	r2, [sp, #0]
 8009b08:	920a      	str	r2, [sp, #40]	; 0x28
 8009b0a:	4413      	add	r3, r2
 8009b0c:	9305      	str	r3, [sp, #20]
 8009b0e:	2300      	movs	r3, #0
 8009b10:	9307      	str	r3, [sp, #28]
 8009b12:	9b06      	ldr	r3, [sp, #24]
 8009b14:	2b09      	cmp	r3, #9
 8009b16:	f200 8089 	bhi.w	8009c2c <_dtoa_r+0x2f4>
 8009b1a:	2b05      	cmp	r3, #5
 8009b1c:	bfc4      	itt	gt
 8009b1e:	3b04      	subgt	r3, #4
 8009b20:	9306      	strgt	r3, [sp, #24]
 8009b22:	9b06      	ldr	r3, [sp, #24]
 8009b24:	f1a3 0302 	sub.w	r3, r3, #2
 8009b28:	bfcc      	ite	gt
 8009b2a:	2500      	movgt	r5, #0
 8009b2c:	2501      	movle	r5, #1
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	f200 8087 	bhi.w	8009c42 <_dtoa_r+0x30a>
 8009b34:	e8df f003 	tbb	[pc, r3]
 8009b38:	59383a2d 	.word	0x59383a2d
 8009b3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009b40:	441d      	add	r5, r3
 8009b42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b46:	2b20      	cmp	r3, #32
 8009b48:	bfc1      	itttt	gt
 8009b4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009b52:	fa0b f303 	lslgt.w	r3, fp, r3
 8009b56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b5a:	bfda      	itte	le
 8009b5c:	f1c3 0320 	rsble	r3, r3, #32
 8009b60:	fa06 f003 	lslle.w	r0, r6, r3
 8009b64:	4318      	orrgt	r0, r3
 8009b66:	f7f6 fcd5 	bl	8000514 <__aeabi_ui2d>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	4606      	mov	r6, r0
 8009b6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009b72:	3d01      	subs	r5, #1
 8009b74:	930e      	str	r3, [sp, #56]	; 0x38
 8009b76:	e76a      	b.n	8009a4e <_dtoa_r+0x116>
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e7b2      	b.n	8009ae2 <_dtoa_r+0x1aa>
 8009b7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b7e:	e7b1      	b.n	8009ae4 <_dtoa_r+0x1ac>
 8009b80:	9b04      	ldr	r3, [sp, #16]
 8009b82:	9a00      	ldr	r2, [sp, #0]
 8009b84:	1a9b      	subs	r3, r3, r2
 8009b86:	9304      	str	r3, [sp, #16]
 8009b88:	4253      	negs	r3, r2
 8009b8a:	9307      	str	r3, [sp, #28]
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b90:	e7bf      	b.n	8009b12 <_dtoa_r+0x1da>
 8009b92:	2300      	movs	r3, #0
 8009b94:	9308      	str	r3, [sp, #32]
 8009b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	dc55      	bgt.n	8009c48 <_dtoa_r+0x310>
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ba6:	e00c      	b.n	8009bc2 <_dtoa_r+0x28a>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e7f3      	b.n	8009b94 <_dtoa_r+0x25c>
 8009bac:	2300      	movs	r3, #0
 8009bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bb0:	9308      	str	r3, [sp, #32]
 8009bb2:	9b00      	ldr	r3, [sp, #0]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	9302      	str	r3, [sp, #8]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	9303      	str	r3, [sp, #12]
 8009bbe:	bfb8      	it	lt
 8009bc0:	2301      	movlt	r3, #1
 8009bc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	6042      	str	r2, [r0, #4]
 8009bc8:	2204      	movs	r2, #4
 8009bca:	f102 0614 	add.w	r6, r2, #20
 8009bce:	429e      	cmp	r6, r3
 8009bd0:	6841      	ldr	r1, [r0, #4]
 8009bd2:	d93d      	bls.n	8009c50 <_dtoa_r+0x318>
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	f000 fdb1 	bl	800a73c <_Balloc>
 8009bda:	9001      	str	r0, [sp, #4]
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d13b      	bne.n	8009c58 <_dtoa_r+0x320>
 8009be0:	4b11      	ldr	r3, [pc, #68]	; (8009c28 <_dtoa_r+0x2f0>)
 8009be2:	4602      	mov	r2, r0
 8009be4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009be8:	e6c0      	b.n	800996c <_dtoa_r+0x34>
 8009bea:	2301      	movs	r3, #1
 8009bec:	e7df      	b.n	8009bae <_dtoa_r+0x276>
 8009bee:	bf00      	nop
 8009bf0:	636f4361 	.word	0x636f4361
 8009bf4:	3fd287a7 	.word	0x3fd287a7
 8009bf8:	8b60c8b3 	.word	0x8b60c8b3
 8009bfc:	3fc68a28 	.word	0x3fc68a28
 8009c00:	509f79fb 	.word	0x509f79fb
 8009c04:	3fd34413 	.word	0x3fd34413
 8009c08:	0800cd19 	.word	0x0800cd19
 8009c0c:	0800cd30 	.word	0x0800cd30
 8009c10:	7ff00000 	.word	0x7ff00000
 8009c14:	0800cd15 	.word	0x0800cd15
 8009c18:	0800cd0c 	.word	0x0800cd0c
 8009c1c:	0800cce9 	.word	0x0800cce9
 8009c20:	3ff80000 	.word	0x3ff80000
 8009c24:	0800ce80 	.word	0x0800ce80
 8009c28:	0800cd8b 	.word	0x0800cd8b
 8009c2c:	2501      	movs	r5, #1
 8009c2e:	2300      	movs	r3, #0
 8009c30:	9306      	str	r3, [sp, #24]
 8009c32:	9508      	str	r5, [sp, #32]
 8009c34:	f04f 33ff 	mov.w	r3, #4294967295
 8009c38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	2312      	movs	r3, #18
 8009c40:	e7b0      	b.n	8009ba4 <_dtoa_r+0x26c>
 8009c42:	2301      	movs	r3, #1
 8009c44:	9308      	str	r3, [sp, #32]
 8009c46:	e7f5      	b.n	8009c34 <_dtoa_r+0x2fc>
 8009c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c4e:	e7b8      	b.n	8009bc2 <_dtoa_r+0x28a>
 8009c50:	3101      	adds	r1, #1
 8009c52:	6041      	str	r1, [r0, #4]
 8009c54:	0052      	lsls	r2, r2, #1
 8009c56:	e7b8      	b.n	8009bca <_dtoa_r+0x292>
 8009c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c5a:	9a01      	ldr	r2, [sp, #4]
 8009c5c:	601a      	str	r2, [r3, #0]
 8009c5e:	9b03      	ldr	r3, [sp, #12]
 8009c60:	2b0e      	cmp	r3, #14
 8009c62:	f200 809d 	bhi.w	8009da0 <_dtoa_r+0x468>
 8009c66:	2d00      	cmp	r5, #0
 8009c68:	f000 809a 	beq.w	8009da0 <_dtoa_r+0x468>
 8009c6c:	9b00      	ldr	r3, [sp, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	dd32      	ble.n	8009cd8 <_dtoa_r+0x3a0>
 8009c72:	4ab7      	ldr	r2, [pc, #732]	; (8009f50 <_dtoa_r+0x618>)
 8009c74:	f003 030f 	and.w	r3, r3, #15
 8009c78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c80:	9b00      	ldr	r3, [sp, #0]
 8009c82:	05d8      	lsls	r0, r3, #23
 8009c84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009c88:	d516      	bpl.n	8009cb8 <_dtoa_r+0x380>
 8009c8a:	4bb2      	ldr	r3, [pc, #712]	; (8009f54 <_dtoa_r+0x61c>)
 8009c8c:	ec51 0b19 	vmov	r0, r1, d9
 8009c90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c94:	f7f6 fde2 	bl	800085c <__aeabi_ddiv>
 8009c98:	f007 070f 	and.w	r7, r7, #15
 8009c9c:	4682      	mov	sl, r0
 8009c9e:	468b      	mov	fp, r1
 8009ca0:	2503      	movs	r5, #3
 8009ca2:	4eac      	ldr	r6, [pc, #688]	; (8009f54 <_dtoa_r+0x61c>)
 8009ca4:	b957      	cbnz	r7, 8009cbc <_dtoa_r+0x384>
 8009ca6:	4642      	mov	r2, r8
 8009ca8:	464b      	mov	r3, r9
 8009caa:	4650      	mov	r0, sl
 8009cac:	4659      	mov	r1, fp
 8009cae:	f7f6 fdd5 	bl	800085c <__aeabi_ddiv>
 8009cb2:	4682      	mov	sl, r0
 8009cb4:	468b      	mov	fp, r1
 8009cb6:	e028      	b.n	8009d0a <_dtoa_r+0x3d2>
 8009cb8:	2502      	movs	r5, #2
 8009cba:	e7f2      	b.n	8009ca2 <_dtoa_r+0x36a>
 8009cbc:	07f9      	lsls	r1, r7, #31
 8009cbe:	d508      	bpl.n	8009cd2 <_dtoa_r+0x39a>
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009cc8:	f7f6 fc9e 	bl	8000608 <__aeabi_dmul>
 8009ccc:	3501      	adds	r5, #1
 8009cce:	4680      	mov	r8, r0
 8009cd0:	4689      	mov	r9, r1
 8009cd2:	107f      	asrs	r7, r7, #1
 8009cd4:	3608      	adds	r6, #8
 8009cd6:	e7e5      	b.n	8009ca4 <_dtoa_r+0x36c>
 8009cd8:	f000 809b 	beq.w	8009e12 <_dtoa_r+0x4da>
 8009cdc:	9b00      	ldr	r3, [sp, #0]
 8009cde:	4f9d      	ldr	r7, [pc, #628]	; (8009f54 <_dtoa_r+0x61c>)
 8009ce0:	425e      	negs	r6, r3
 8009ce2:	4b9b      	ldr	r3, [pc, #620]	; (8009f50 <_dtoa_r+0x618>)
 8009ce4:	f006 020f 	and.w	r2, r6, #15
 8009ce8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf0:	ec51 0b19 	vmov	r0, r1, d9
 8009cf4:	f7f6 fc88 	bl	8000608 <__aeabi_dmul>
 8009cf8:	1136      	asrs	r6, r6, #4
 8009cfa:	4682      	mov	sl, r0
 8009cfc:	468b      	mov	fp, r1
 8009cfe:	2300      	movs	r3, #0
 8009d00:	2502      	movs	r5, #2
 8009d02:	2e00      	cmp	r6, #0
 8009d04:	d17a      	bne.n	8009dfc <_dtoa_r+0x4c4>
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1d3      	bne.n	8009cb2 <_dtoa_r+0x37a>
 8009d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 8082 	beq.w	8009e16 <_dtoa_r+0x4de>
 8009d12:	4b91      	ldr	r3, [pc, #580]	; (8009f58 <_dtoa_r+0x620>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	4650      	mov	r0, sl
 8009d18:	4659      	mov	r1, fp
 8009d1a:	f7f6 fee7 	bl	8000aec <__aeabi_dcmplt>
 8009d1e:	2800      	cmp	r0, #0
 8009d20:	d079      	beq.n	8009e16 <_dtoa_r+0x4de>
 8009d22:	9b03      	ldr	r3, [sp, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d076      	beq.n	8009e16 <_dtoa_r+0x4de>
 8009d28:	9b02      	ldr	r3, [sp, #8]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	dd36      	ble.n	8009d9c <_dtoa_r+0x464>
 8009d2e:	9b00      	ldr	r3, [sp, #0]
 8009d30:	4650      	mov	r0, sl
 8009d32:	4659      	mov	r1, fp
 8009d34:	1e5f      	subs	r7, r3, #1
 8009d36:	2200      	movs	r2, #0
 8009d38:	4b88      	ldr	r3, [pc, #544]	; (8009f5c <_dtoa_r+0x624>)
 8009d3a:	f7f6 fc65 	bl	8000608 <__aeabi_dmul>
 8009d3e:	9e02      	ldr	r6, [sp, #8]
 8009d40:	4682      	mov	sl, r0
 8009d42:	468b      	mov	fp, r1
 8009d44:	3501      	adds	r5, #1
 8009d46:	4628      	mov	r0, r5
 8009d48:	f7f6 fbf4 	bl	8000534 <__aeabi_i2d>
 8009d4c:	4652      	mov	r2, sl
 8009d4e:	465b      	mov	r3, fp
 8009d50:	f7f6 fc5a 	bl	8000608 <__aeabi_dmul>
 8009d54:	4b82      	ldr	r3, [pc, #520]	; (8009f60 <_dtoa_r+0x628>)
 8009d56:	2200      	movs	r2, #0
 8009d58:	f7f6 faa0 	bl	800029c <__adddf3>
 8009d5c:	46d0      	mov	r8, sl
 8009d5e:	46d9      	mov	r9, fp
 8009d60:	4682      	mov	sl, r0
 8009d62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009d66:	2e00      	cmp	r6, #0
 8009d68:	d158      	bne.n	8009e1c <_dtoa_r+0x4e4>
 8009d6a:	4b7e      	ldr	r3, [pc, #504]	; (8009f64 <_dtoa_r+0x62c>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	4640      	mov	r0, r8
 8009d70:	4649      	mov	r1, r9
 8009d72:	f7f6 fa91 	bl	8000298 <__aeabi_dsub>
 8009d76:	4652      	mov	r2, sl
 8009d78:	465b      	mov	r3, fp
 8009d7a:	4680      	mov	r8, r0
 8009d7c:	4689      	mov	r9, r1
 8009d7e:	f7f6 fed3 	bl	8000b28 <__aeabi_dcmpgt>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	f040 8295 	bne.w	800a2b2 <_dtoa_r+0x97a>
 8009d88:	4652      	mov	r2, sl
 8009d8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009d8e:	4640      	mov	r0, r8
 8009d90:	4649      	mov	r1, r9
 8009d92:	f7f6 feab 	bl	8000aec <__aeabi_dcmplt>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	f040 8289 	bne.w	800a2ae <_dtoa_r+0x976>
 8009d9c:	ec5b ab19 	vmov	sl, fp, d9
 8009da0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f2c0 8148 	blt.w	800a038 <_dtoa_r+0x700>
 8009da8:	9a00      	ldr	r2, [sp, #0]
 8009daa:	2a0e      	cmp	r2, #14
 8009dac:	f300 8144 	bgt.w	800a038 <_dtoa_r+0x700>
 8009db0:	4b67      	ldr	r3, [pc, #412]	; (8009f50 <_dtoa_r+0x618>)
 8009db2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009db6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f280 80d5 	bge.w	8009f6c <_dtoa_r+0x634>
 8009dc2:	9b03      	ldr	r3, [sp, #12]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f300 80d1 	bgt.w	8009f6c <_dtoa_r+0x634>
 8009dca:	f040 826f 	bne.w	800a2ac <_dtoa_r+0x974>
 8009dce:	4b65      	ldr	r3, [pc, #404]	; (8009f64 <_dtoa_r+0x62c>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	4640      	mov	r0, r8
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	f7f6 fc17 	bl	8000608 <__aeabi_dmul>
 8009dda:	4652      	mov	r2, sl
 8009ddc:	465b      	mov	r3, fp
 8009dde:	f7f6 fe99 	bl	8000b14 <__aeabi_dcmpge>
 8009de2:	9e03      	ldr	r6, [sp, #12]
 8009de4:	4637      	mov	r7, r6
 8009de6:	2800      	cmp	r0, #0
 8009de8:	f040 8245 	bne.w	800a276 <_dtoa_r+0x93e>
 8009dec:	9d01      	ldr	r5, [sp, #4]
 8009dee:	2331      	movs	r3, #49	; 0x31
 8009df0:	f805 3b01 	strb.w	r3, [r5], #1
 8009df4:	9b00      	ldr	r3, [sp, #0]
 8009df6:	3301      	adds	r3, #1
 8009df8:	9300      	str	r3, [sp, #0]
 8009dfa:	e240      	b.n	800a27e <_dtoa_r+0x946>
 8009dfc:	07f2      	lsls	r2, r6, #31
 8009dfe:	d505      	bpl.n	8009e0c <_dtoa_r+0x4d4>
 8009e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e04:	f7f6 fc00 	bl	8000608 <__aeabi_dmul>
 8009e08:	3501      	adds	r5, #1
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	1076      	asrs	r6, r6, #1
 8009e0e:	3708      	adds	r7, #8
 8009e10:	e777      	b.n	8009d02 <_dtoa_r+0x3ca>
 8009e12:	2502      	movs	r5, #2
 8009e14:	e779      	b.n	8009d0a <_dtoa_r+0x3d2>
 8009e16:	9f00      	ldr	r7, [sp, #0]
 8009e18:	9e03      	ldr	r6, [sp, #12]
 8009e1a:	e794      	b.n	8009d46 <_dtoa_r+0x40e>
 8009e1c:	9901      	ldr	r1, [sp, #4]
 8009e1e:	4b4c      	ldr	r3, [pc, #304]	; (8009f50 <_dtoa_r+0x618>)
 8009e20:	4431      	add	r1, r6
 8009e22:	910d      	str	r1, [sp, #52]	; 0x34
 8009e24:	9908      	ldr	r1, [sp, #32]
 8009e26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009e2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e2e:	2900      	cmp	r1, #0
 8009e30:	d043      	beq.n	8009eba <_dtoa_r+0x582>
 8009e32:	494d      	ldr	r1, [pc, #308]	; (8009f68 <_dtoa_r+0x630>)
 8009e34:	2000      	movs	r0, #0
 8009e36:	f7f6 fd11 	bl	800085c <__aeabi_ddiv>
 8009e3a:	4652      	mov	r2, sl
 8009e3c:	465b      	mov	r3, fp
 8009e3e:	f7f6 fa2b 	bl	8000298 <__aeabi_dsub>
 8009e42:	9d01      	ldr	r5, [sp, #4]
 8009e44:	4682      	mov	sl, r0
 8009e46:	468b      	mov	fp, r1
 8009e48:	4649      	mov	r1, r9
 8009e4a:	4640      	mov	r0, r8
 8009e4c:	f7f6 fe8c 	bl	8000b68 <__aeabi_d2iz>
 8009e50:	4606      	mov	r6, r0
 8009e52:	f7f6 fb6f 	bl	8000534 <__aeabi_i2d>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4640      	mov	r0, r8
 8009e5c:	4649      	mov	r1, r9
 8009e5e:	f7f6 fa1b 	bl	8000298 <__aeabi_dsub>
 8009e62:	3630      	adds	r6, #48	; 0x30
 8009e64:	f805 6b01 	strb.w	r6, [r5], #1
 8009e68:	4652      	mov	r2, sl
 8009e6a:	465b      	mov	r3, fp
 8009e6c:	4680      	mov	r8, r0
 8009e6e:	4689      	mov	r9, r1
 8009e70:	f7f6 fe3c 	bl	8000aec <__aeabi_dcmplt>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	d163      	bne.n	8009f40 <_dtoa_r+0x608>
 8009e78:	4642      	mov	r2, r8
 8009e7a:	464b      	mov	r3, r9
 8009e7c:	4936      	ldr	r1, [pc, #216]	; (8009f58 <_dtoa_r+0x620>)
 8009e7e:	2000      	movs	r0, #0
 8009e80:	f7f6 fa0a 	bl	8000298 <__aeabi_dsub>
 8009e84:	4652      	mov	r2, sl
 8009e86:	465b      	mov	r3, fp
 8009e88:	f7f6 fe30 	bl	8000aec <__aeabi_dcmplt>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	f040 80b5 	bne.w	8009ffc <_dtoa_r+0x6c4>
 8009e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e94:	429d      	cmp	r5, r3
 8009e96:	d081      	beq.n	8009d9c <_dtoa_r+0x464>
 8009e98:	4b30      	ldr	r3, [pc, #192]	; (8009f5c <_dtoa_r+0x624>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	4650      	mov	r0, sl
 8009e9e:	4659      	mov	r1, fp
 8009ea0:	f7f6 fbb2 	bl	8000608 <__aeabi_dmul>
 8009ea4:	4b2d      	ldr	r3, [pc, #180]	; (8009f5c <_dtoa_r+0x624>)
 8009ea6:	4682      	mov	sl, r0
 8009ea8:	468b      	mov	fp, r1
 8009eaa:	4640      	mov	r0, r8
 8009eac:	4649      	mov	r1, r9
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f7f6 fbaa 	bl	8000608 <__aeabi_dmul>
 8009eb4:	4680      	mov	r8, r0
 8009eb6:	4689      	mov	r9, r1
 8009eb8:	e7c6      	b.n	8009e48 <_dtoa_r+0x510>
 8009eba:	4650      	mov	r0, sl
 8009ebc:	4659      	mov	r1, fp
 8009ebe:	f7f6 fba3 	bl	8000608 <__aeabi_dmul>
 8009ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ec4:	9d01      	ldr	r5, [sp, #4]
 8009ec6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ec8:	4682      	mov	sl, r0
 8009eca:	468b      	mov	fp, r1
 8009ecc:	4649      	mov	r1, r9
 8009ece:	4640      	mov	r0, r8
 8009ed0:	f7f6 fe4a 	bl	8000b68 <__aeabi_d2iz>
 8009ed4:	4606      	mov	r6, r0
 8009ed6:	f7f6 fb2d 	bl	8000534 <__aeabi_i2d>
 8009eda:	3630      	adds	r6, #48	; 0x30
 8009edc:	4602      	mov	r2, r0
 8009ede:	460b      	mov	r3, r1
 8009ee0:	4640      	mov	r0, r8
 8009ee2:	4649      	mov	r1, r9
 8009ee4:	f7f6 f9d8 	bl	8000298 <__aeabi_dsub>
 8009ee8:	f805 6b01 	strb.w	r6, [r5], #1
 8009eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009eee:	429d      	cmp	r5, r3
 8009ef0:	4680      	mov	r8, r0
 8009ef2:	4689      	mov	r9, r1
 8009ef4:	f04f 0200 	mov.w	r2, #0
 8009ef8:	d124      	bne.n	8009f44 <_dtoa_r+0x60c>
 8009efa:	4b1b      	ldr	r3, [pc, #108]	; (8009f68 <_dtoa_r+0x630>)
 8009efc:	4650      	mov	r0, sl
 8009efe:	4659      	mov	r1, fp
 8009f00:	f7f6 f9cc 	bl	800029c <__adddf3>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4640      	mov	r0, r8
 8009f0a:	4649      	mov	r1, r9
 8009f0c:	f7f6 fe0c 	bl	8000b28 <__aeabi_dcmpgt>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d173      	bne.n	8009ffc <_dtoa_r+0x6c4>
 8009f14:	4652      	mov	r2, sl
 8009f16:	465b      	mov	r3, fp
 8009f18:	4913      	ldr	r1, [pc, #76]	; (8009f68 <_dtoa_r+0x630>)
 8009f1a:	2000      	movs	r0, #0
 8009f1c:	f7f6 f9bc 	bl	8000298 <__aeabi_dsub>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	4640      	mov	r0, r8
 8009f26:	4649      	mov	r1, r9
 8009f28:	f7f6 fde0 	bl	8000aec <__aeabi_dcmplt>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	f43f af35 	beq.w	8009d9c <_dtoa_r+0x464>
 8009f32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009f34:	1e6b      	subs	r3, r5, #1
 8009f36:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f3c:	2b30      	cmp	r3, #48	; 0x30
 8009f3e:	d0f8      	beq.n	8009f32 <_dtoa_r+0x5fa>
 8009f40:	9700      	str	r7, [sp, #0]
 8009f42:	e049      	b.n	8009fd8 <_dtoa_r+0x6a0>
 8009f44:	4b05      	ldr	r3, [pc, #20]	; (8009f5c <_dtoa_r+0x624>)
 8009f46:	f7f6 fb5f 	bl	8000608 <__aeabi_dmul>
 8009f4a:	4680      	mov	r8, r0
 8009f4c:	4689      	mov	r9, r1
 8009f4e:	e7bd      	b.n	8009ecc <_dtoa_r+0x594>
 8009f50:	0800ce80 	.word	0x0800ce80
 8009f54:	0800ce58 	.word	0x0800ce58
 8009f58:	3ff00000 	.word	0x3ff00000
 8009f5c:	40240000 	.word	0x40240000
 8009f60:	401c0000 	.word	0x401c0000
 8009f64:	40140000 	.word	0x40140000
 8009f68:	3fe00000 	.word	0x3fe00000
 8009f6c:	9d01      	ldr	r5, [sp, #4]
 8009f6e:	4656      	mov	r6, sl
 8009f70:	465f      	mov	r7, fp
 8009f72:	4642      	mov	r2, r8
 8009f74:	464b      	mov	r3, r9
 8009f76:	4630      	mov	r0, r6
 8009f78:	4639      	mov	r1, r7
 8009f7a:	f7f6 fc6f 	bl	800085c <__aeabi_ddiv>
 8009f7e:	f7f6 fdf3 	bl	8000b68 <__aeabi_d2iz>
 8009f82:	4682      	mov	sl, r0
 8009f84:	f7f6 fad6 	bl	8000534 <__aeabi_i2d>
 8009f88:	4642      	mov	r2, r8
 8009f8a:	464b      	mov	r3, r9
 8009f8c:	f7f6 fb3c 	bl	8000608 <__aeabi_dmul>
 8009f90:	4602      	mov	r2, r0
 8009f92:	460b      	mov	r3, r1
 8009f94:	4630      	mov	r0, r6
 8009f96:	4639      	mov	r1, r7
 8009f98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009f9c:	f7f6 f97c 	bl	8000298 <__aeabi_dsub>
 8009fa0:	f805 6b01 	strb.w	r6, [r5], #1
 8009fa4:	9e01      	ldr	r6, [sp, #4]
 8009fa6:	9f03      	ldr	r7, [sp, #12]
 8009fa8:	1bae      	subs	r6, r5, r6
 8009faa:	42b7      	cmp	r7, r6
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	d135      	bne.n	800a01e <_dtoa_r+0x6e6>
 8009fb2:	f7f6 f973 	bl	800029c <__adddf3>
 8009fb6:	4642      	mov	r2, r8
 8009fb8:	464b      	mov	r3, r9
 8009fba:	4606      	mov	r6, r0
 8009fbc:	460f      	mov	r7, r1
 8009fbe:	f7f6 fdb3 	bl	8000b28 <__aeabi_dcmpgt>
 8009fc2:	b9d0      	cbnz	r0, 8009ffa <_dtoa_r+0x6c2>
 8009fc4:	4642      	mov	r2, r8
 8009fc6:	464b      	mov	r3, r9
 8009fc8:	4630      	mov	r0, r6
 8009fca:	4639      	mov	r1, r7
 8009fcc:	f7f6 fd84 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fd0:	b110      	cbz	r0, 8009fd8 <_dtoa_r+0x6a0>
 8009fd2:	f01a 0f01 	tst.w	sl, #1
 8009fd6:	d110      	bne.n	8009ffa <_dtoa_r+0x6c2>
 8009fd8:	4620      	mov	r0, r4
 8009fda:	ee18 1a10 	vmov	r1, s16
 8009fde:	f000 fbed 	bl	800a7bc <_Bfree>
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	9800      	ldr	r0, [sp, #0]
 8009fe6:	702b      	strb	r3, [r5, #0]
 8009fe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fea:	3001      	adds	r0, #1
 8009fec:	6018      	str	r0, [r3, #0]
 8009fee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f43f acf1 	beq.w	80099d8 <_dtoa_r+0xa0>
 8009ff6:	601d      	str	r5, [r3, #0]
 8009ff8:	e4ee      	b.n	80099d8 <_dtoa_r+0xa0>
 8009ffa:	9f00      	ldr	r7, [sp, #0]
 8009ffc:	462b      	mov	r3, r5
 8009ffe:	461d      	mov	r5, r3
 800a000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a004:	2a39      	cmp	r2, #57	; 0x39
 800a006:	d106      	bne.n	800a016 <_dtoa_r+0x6de>
 800a008:	9a01      	ldr	r2, [sp, #4]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d1f7      	bne.n	8009ffe <_dtoa_r+0x6c6>
 800a00e:	9901      	ldr	r1, [sp, #4]
 800a010:	2230      	movs	r2, #48	; 0x30
 800a012:	3701      	adds	r7, #1
 800a014:	700a      	strb	r2, [r1, #0]
 800a016:	781a      	ldrb	r2, [r3, #0]
 800a018:	3201      	adds	r2, #1
 800a01a:	701a      	strb	r2, [r3, #0]
 800a01c:	e790      	b.n	8009f40 <_dtoa_r+0x608>
 800a01e:	4ba6      	ldr	r3, [pc, #664]	; (800a2b8 <_dtoa_r+0x980>)
 800a020:	2200      	movs	r2, #0
 800a022:	f7f6 faf1 	bl	8000608 <__aeabi_dmul>
 800a026:	2200      	movs	r2, #0
 800a028:	2300      	movs	r3, #0
 800a02a:	4606      	mov	r6, r0
 800a02c:	460f      	mov	r7, r1
 800a02e:	f7f6 fd53 	bl	8000ad8 <__aeabi_dcmpeq>
 800a032:	2800      	cmp	r0, #0
 800a034:	d09d      	beq.n	8009f72 <_dtoa_r+0x63a>
 800a036:	e7cf      	b.n	8009fd8 <_dtoa_r+0x6a0>
 800a038:	9a08      	ldr	r2, [sp, #32]
 800a03a:	2a00      	cmp	r2, #0
 800a03c:	f000 80d7 	beq.w	800a1ee <_dtoa_r+0x8b6>
 800a040:	9a06      	ldr	r2, [sp, #24]
 800a042:	2a01      	cmp	r2, #1
 800a044:	f300 80ba 	bgt.w	800a1bc <_dtoa_r+0x884>
 800a048:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a04a:	2a00      	cmp	r2, #0
 800a04c:	f000 80b2 	beq.w	800a1b4 <_dtoa_r+0x87c>
 800a050:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a054:	9e07      	ldr	r6, [sp, #28]
 800a056:	9d04      	ldr	r5, [sp, #16]
 800a058:	9a04      	ldr	r2, [sp, #16]
 800a05a:	441a      	add	r2, r3
 800a05c:	9204      	str	r2, [sp, #16]
 800a05e:	9a05      	ldr	r2, [sp, #20]
 800a060:	2101      	movs	r1, #1
 800a062:	441a      	add	r2, r3
 800a064:	4620      	mov	r0, r4
 800a066:	9205      	str	r2, [sp, #20]
 800a068:	f000 fc60 	bl	800a92c <__i2b>
 800a06c:	4607      	mov	r7, r0
 800a06e:	2d00      	cmp	r5, #0
 800a070:	dd0c      	ble.n	800a08c <_dtoa_r+0x754>
 800a072:	9b05      	ldr	r3, [sp, #20]
 800a074:	2b00      	cmp	r3, #0
 800a076:	dd09      	ble.n	800a08c <_dtoa_r+0x754>
 800a078:	42ab      	cmp	r3, r5
 800a07a:	9a04      	ldr	r2, [sp, #16]
 800a07c:	bfa8      	it	ge
 800a07e:	462b      	movge	r3, r5
 800a080:	1ad2      	subs	r2, r2, r3
 800a082:	9204      	str	r2, [sp, #16]
 800a084:	9a05      	ldr	r2, [sp, #20]
 800a086:	1aed      	subs	r5, r5, r3
 800a088:	1ad3      	subs	r3, r2, r3
 800a08a:	9305      	str	r3, [sp, #20]
 800a08c:	9b07      	ldr	r3, [sp, #28]
 800a08e:	b31b      	cbz	r3, 800a0d8 <_dtoa_r+0x7a0>
 800a090:	9b08      	ldr	r3, [sp, #32]
 800a092:	2b00      	cmp	r3, #0
 800a094:	f000 80af 	beq.w	800a1f6 <_dtoa_r+0x8be>
 800a098:	2e00      	cmp	r6, #0
 800a09a:	dd13      	ble.n	800a0c4 <_dtoa_r+0x78c>
 800a09c:	4639      	mov	r1, r7
 800a09e:	4632      	mov	r2, r6
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f000 fd03 	bl	800aaac <__pow5mult>
 800a0a6:	ee18 2a10 	vmov	r2, s16
 800a0aa:	4601      	mov	r1, r0
 800a0ac:	4607      	mov	r7, r0
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f000 fc52 	bl	800a958 <__multiply>
 800a0b4:	ee18 1a10 	vmov	r1, s16
 800a0b8:	4680      	mov	r8, r0
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f000 fb7e 	bl	800a7bc <_Bfree>
 800a0c0:	ee08 8a10 	vmov	s16, r8
 800a0c4:	9b07      	ldr	r3, [sp, #28]
 800a0c6:	1b9a      	subs	r2, r3, r6
 800a0c8:	d006      	beq.n	800a0d8 <_dtoa_r+0x7a0>
 800a0ca:	ee18 1a10 	vmov	r1, s16
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 fcec 	bl	800aaac <__pow5mult>
 800a0d4:	ee08 0a10 	vmov	s16, r0
 800a0d8:	2101      	movs	r1, #1
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f000 fc26 	bl	800a92c <__i2b>
 800a0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	4606      	mov	r6, r0
 800a0e6:	f340 8088 	ble.w	800a1fa <_dtoa_r+0x8c2>
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	4601      	mov	r1, r0
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f000 fcdc 	bl	800aaac <__pow5mult>
 800a0f4:	9b06      	ldr	r3, [sp, #24]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	4606      	mov	r6, r0
 800a0fa:	f340 8081 	ble.w	800a200 <_dtoa_r+0x8c8>
 800a0fe:	f04f 0800 	mov.w	r8, #0
 800a102:	6933      	ldr	r3, [r6, #16]
 800a104:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a108:	6918      	ldr	r0, [r3, #16]
 800a10a:	f000 fbbf 	bl	800a88c <__hi0bits>
 800a10e:	f1c0 0020 	rsb	r0, r0, #32
 800a112:	9b05      	ldr	r3, [sp, #20]
 800a114:	4418      	add	r0, r3
 800a116:	f010 001f 	ands.w	r0, r0, #31
 800a11a:	f000 8092 	beq.w	800a242 <_dtoa_r+0x90a>
 800a11e:	f1c0 0320 	rsb	r3, r0, #32
 800a122:	2b04      	cmp	r3, #4
 800a124:	f340 808a 	ble.w	800a23c <_dtoa_r+0x904>
 800a128:	f1c0 001c 	rsb	r0, r0, #28
 800a12c:	9b04      	ldr	r3, [sp, #16]
 800a12e:	4403      	add	r3, r0
 800a130:	9304      	str	r3, [sp, #16]
 800a132:	9b05      	ldr	r3, [sp, #20]
 800a134:	4403      	add	r3, r0
 800a136:	4405      	add	r5, r0
 800a138:	9305      	str	r3, [sp, #20]
 800a13a:	9b04      	ldr	r3, [sp, #16]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	dd07      	ble.n	800a150 <_dtoa_r+0x818>
 800a140:	ee18 1a10 	vmov	r1, s16
 800a144:	461a      	mov	r2, r3
 800a146:	4620      	mov	r0, r4
 800a148:	f000 fd0a 	bl	800ab60 <__lshift>
 800a14c:	ee08 0a10 	vmov	s16, r0
 800a150:	9b05      	ldr	r3, [sp, #20]
 800a152:	2b00      	cmp	r3, #0
 800a154:	dd05      	ble.n	800a162 <_dtoa_r+0x82a>
 800a156:	4631      	mov	r1, r6
 800a158:	461a      	mov	r2, r3
 800a15a:	4620      	mov	r0, r4
 800a15c:	f000 fd00 	bl	800ab60 <__lshift>
 800a160:	4606      	mov	r6, r0
 800a162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a164:	2b00      	cmp	r3, #0
 800a166:	d06e      	beq.n	800a246 <_dtoa_r+0x90e>
 800a168:	ee18 0a10 	vmov	r0, s16
 800a16c:	4631      	mov	r1, r6
 800a16e:	f000 fd67 	bl	800ac40 <__mcmp>
 800a172:	2800      	cmp	r0, #0
 800a174:	da67      	bge.n	800a246 <_dtoa_r+0x90e>
 800a176:	9b00      	ldr	r3, [sp, #0]
 800a178:	3b01      	subs	r3, #1
 800a17a:	ee18 1a10 	vmov	r1, s16
 800a17e:	9300      	str	r3, [sp, #0]
 800a180:	220a      	movs	r2, #10
 800a182:	2300      	movs	r3, #0
 800a184:	4620      	mov	r0, r4
 800a186:	f000 fb3b 	bl	800a800 <__multadd>
 800a18a:	9b08      	ldr	r3, [sp, #32]
 800a18c:	ee08 0a10 	vmov	s16, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	f000 81b1 	beq.w	800a4f8 <_dtoa_r+0xbc0>
 800a196:	2300      	movs	r3, #0
 800a198:	4639      	mov	r1, r7
 800a19a:	220a      	movs	r2, #10
 800a19c:	4620      	mov	r0, r4
 800a19e:	f000 fb2f 	bl	800a800 <__multadd>
 800a1a2:	9b02      	ldr	r3, [sp, #8]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	4607      	mov	r7, r0
 800a1a8:	f300 808e 	bgt.w	800a2c8 <_dtoa_r+0x990>
 800a1ac:	9b06      	ldr	r3, [sp, #24]
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	dc51      	bgt.n	800a256 <_dtoa_r+0x91e>
 800a1b2:	e089      	b.n	800a2c8 <_dtoa_r+0x990>
 800a1b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a1ba:	e74b      	b.n	800a054 <_dtoa_r+0x71c>
 800a1bc:	9b03      	ldr	r3, [sp, #12]
 800a1be:	1e5e      	subs	r6, r3, #1
 800a1c0:	9b07      	ldr	r3, [sp, #28]
 800a1c2:	42b3      	cmp	r3, r6
 800a1c4:	bfbf      	itttt	lt
 800a1c6:	9b07      	ldrlt	r3, [sp, #28]
 800a1c8:	9607      	strlt	r6, [sp, #28]
 800a1ca:	1af2      	sublt	r2, r6, r3
 800a1cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a1ce:	bfb6      	itet	lt
 800a1d0:	189b      	addlt	r3, r3, r2
 800a1d2:	1b9e      	subge	r6, r3, r6
 800a1d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a1d6:	9b03      	ldr	r3, [sp, #12]
 800a1d8:	bfb8      	it	lt
 800a1da:	2600      	movlt	r6, #0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	bfb7      	itett	lt
 800a1e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a1e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a1e8:	1a9d      	sublt	r5, r3, r2
 800a1ea:	2300      	movlt	r3, #0
 800a1ec:	e734      	b.n	800a058 <_dtoa_r+0x720>
 800a1ee:	9e07      	ldr	r6, [sp, #28]
 800a1f0:	9d04      	ldr	r5, [sp, #16]
 800a1f2:	9f08      	ldr	r7, [sp, #32]
 800a1f4:	e73b      	b.n	800a06e <_dtoa_r+0x736>
 800a1f6:	9a07      	ldr	r2, [sp, #28]
 800a1f8:	e767      	b.n	800a0ca <_dtoa_r+0x792>
 800a1fa:	9b06      	ldr	r3, [sp, #24]
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	dc18      	bgt.n	800a232 <_dtoa_r+0x8fa>
 800a200:	f1ba 0f00 	cmp.w	sl, #0
 800a204:	d115      	bne.n	800a232 <_dtoa_r+0x8fa>
 800a206:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a20a:	b993      	cbnz	r3, 800a232 <_dtoa_r+0x8fa>
 800a20c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a210:	0d1b      	lsrs	r3, r3, #20
 800a212:	051b      	lsls	r3, r3, #20
 800a214:	b183      	cbz	r3, 800a238 <_dtoa_r+0x900>
 800a216:	9b04      	ldr	r3, [sp, #16]
 800a218:	3301      	adds	r3, #1
 800a21a:	9304      	str	r3, [sp, #16]
 800a21c:	9b05      	ldr	r3, [sp, #20]
 800a21e:	3301      	adds	r3, #1
 800a220:	9305      	str	r3, [sp, #20]
 800a222:	f04f 0801 	mov.w	r8, #1
 800a226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f47f af6a 	bne.w	800a102 <_dtoa_r+0x7ca>
 800a22e:	2001      	movs	r0, #1
 800a230:	e76f      	b.n	800a112 <_dtoa_r+0x7da>
 800a232:	f04f 0800 	mov.w	r8, #0
 800a236:	e7f6      	b.n	800a226 <_dtoa_r+0x8ee>
 800a238:	4698      	mov	r8, r3
 800a23a:	e7f4      	b.n	800a226 <_dtoa_r+0x8ee>
 800a23c:	f43f af7d 	beq.w	800a13a <_dtoa_r+0x802>
 800a240:	4618      	mov	r0, r3
 800a242:	301c      	adds	r0, #28
 800a244:	e772      	b.n	800a12c <_dtoa_r+0x7f4>
 800a246:	9b03      	ldr	r3, [sp, #12]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	dc37      	bgt.n	800a2bc <_dtoa_r+0x984>
 800a24c:	9b06      	ldr	r3, [sp, #24]
 800a24e:	2b02      	cmp	r3, #2
 800a250:	dd34      	ble.n	800a2bc <_dtoa_r+0x984>
 800a252:	9b03      	ldr	r3, [sp, #12]
 800a254:	9302      	str	r3, [sp, #8]
 800a256:	9b02      	ldr	r3, [sp, #8]
 800a258:	b96b      	cbnz	r3, 800a276 <_dtoa_r+0x93e>
 800a25a:	4631      	mov	r1, r6
 800a25c:	2205      	movs	r2, #5
 800a25e:	4620      	mov	r0, r4
 800a260:	f000 face 	bl	800a800 <__multadd>
 800a264:	4601      	mov	r1, r0
 800a266:	4606      	mov	r6, r0
 800a268:	ee18 0a10 	vmov	r0, s16
 800a26c:	f000 fce8 	bl	800ac40 <__mcmp>
 800a270:	2800      	cmp	r0, #0
 800a272:	f73f adbb 	bgt.w	8009dec <_dtoa_r+0x4b4>
 800a276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a278:	9d01      	ldr	r5, [sp, #4]
 800a27a:	43db      	mvns	r3, r3
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	f04f 0800 	mov.w	r8, #0
 800a282:	4631      	mov	r1, r6
 800a284:	4620      	mov	r0, r4
 800a286:	f000 fa99 	bl	800a7bc <_Bfree>
 800a28a:	2f00      	cmp	r7, #0
 800a28c:	f43f aea4 	beq.w	8009fd8 <_dtoa_r+0x6a0>
 800a290:	f1b8 0f00 	cmp.w	r8, #0
 800a294:	d005      	beq.n	800a2a2 <_dtoa_r+0x96a>
 800a296:	45b8      	cmp	r8, r7
 800a298:	d003      	beq.n	800a2a2 <_dtoa_r+0x96a>
 800a29a:	4641      	mov	r1, r8
 800a29c:	4620      	mov	r0, r4
 800a29e:	f000 fa8d 	bl	800a7bc <_Bfree>
 800a2a2:	4639      	mov	r1, r7
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f000 fa89 	bl	800a7bc <_Bfree>
 800a2aa:	e695      	b.n	8009fd8 <_dtoa_r+0x6a0>
 800a2ac:	2600      	movs	r6, #0
 800a2ae:	4637      	mov	r7, r6
 800a2b0:	e7e1      	b.n	800a276 <_dtoa_r+0x93e>
 800a2b2:	9700      	str	r7, [sp, #0]
 800a2b4:	4637      	mov	r7, r6
 800a2b6:	e599      	b.n	8009dec <_dtoa_r+0x4b4>
 800a2b8:	40240000 	.word	0x40240000
 800a2bc:	9b08      	ldr	r3, [sp, #32]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f000 80ca 	beq.w	800a458 <_dtoa_r+0xb20>
 800a2c4:	9b03      	ldr	r3, [sp, #12]
 800a2c6:	9302      	str	r3, [sp, #8]
 800a2c8:	2d00      	cmp	r5, #0
 800a2ca:	dd05      	ble.n	800a2d8 <_dtoa_r+0x9a0>
 800a2cc:	4639      	mov	r1, r7
 800a2ce:	462a      	mov	r2, r5
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f000 fc45 	bl	800ab60 <__lshift>
 800a2d6:	4607      	mov	r7, r0
 800a2d8:	f1b8 0f00 	cmp.w	r8, #0
 800a2dc:	d05b      	beq.n	800a396 <_dtoa_r+0xa5e>
 800a2de:	6879      	ldr	r1, [r7, #4]
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f000 fa2b 	bl	800a73c <_Balloc>
 800a2e6:	4605      	mov	r5, r0
 800a2e8:	b928      	cbnz	r0, 800a2f6 <_dtoa_r+0x9be>
 800a2ea:	4b87      	ldr	r3, [pc, #540]	; (800a508 <_dtoa_r+0xbd0>)
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a2f2:	f7ff bb3b 	b.w	800996c <_dtoa_r+0x34>
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	3202      	adds	r2, #2
 800a2fa:	0092      	lsls	r2, r2, #2
 800a2fc:	f107 010c 	add.w	r1, r7, #12
 800a300:	300c      	adds	r0, #12
 800a302:	f000 fa0d 	bl	800a720 <memcpy>
 800a306:	2201      	movs	r2, #1
 800a308:	4629      	mov	r1, r5
 800a30a:	4620      	mov	r0, r4
 800a30c:	f000 fc28 	bl	800ab60 <__lshift>
 800a310:	9b01      	ldr	r3, [sp, #4]
 800a312:	f103 0901 	add.w	r9, r3, #1
 800a316:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a31a:	4413      	add	r3, r2
 800a31c:	9305      	str	r3, [sp, #20]
 800a31e:	f00a 0301 	and.w	r3, sl, #1
 800a322:	46b8      	mov	r8, r7
 800a324:	9304      	str	r3, [sp, #16]
 800a326:	4607      	mov	r7, r0
 800a328:	4631      	mov	r1, r6
 800a32a:	ee18 0a10 	vmov	r0, s16
 800a32e:	f7ff fa75 	bl	800981c <quorem>
 800a332:	4641      	mov	r1, r8
 800a334:	9002      	str	r0, [sp, #8]
 800a336:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a33a:	ee18 0a10 	vmov	r0, s16
 800a33e:	f000 fc7f 	bl	800ac40 <__mcmp>
 800a342:	463a      	mov	r2, r7
 800a344:	9003      	str	r0, [sp, #12]
 800a346:	4631      	mov	r1, r6
 800a348:	4620      	mov	r0, r4
 800a34a:	f000 fc95 	bl	800ac78 <__mdiff>
 800a34e:	68c2      	ldr	r2, [r0, #12]
 800a350:	f109 3bff 	add.w	fp, r9, #4294967295
 800a354:	4605      	mov	r5, r0
 800a356:	bb02      	cbnz	r2, 800a39a <_dtoa_r+0xa62>
 800a358:	4601      	mov	r1, r0
 800a35a:	ee18 0a10 	vmov	r0, s16
 800a35e:	f000 fc6f 	bl	800ac40 <__mcmp>
 800a362:	4602      	mov	r2, r0
 800a364:	4629      	mov	r1, r5
 800a366:	4620      	mov	r0, r4
 800a368:	9207      	str	r2, [sp, #28]
 800a36a:	f000 fa27 	bl	800a7bc <_Bfree>
 800a36e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a372:	ea43 0102 	orr.w	r1, r3, r2
 800a376:	9b04      	ldr	r3, [sp, #16]
 800a378:	430b      	orrs	r3, r1
 800a37a:	464d      	mov	r5, r9
 800a37c:	d10f      	bne.n	800a39e <_dtoa_r+0xa66>
 800a37e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a382:	d02a      	beq.n	800a3da <_dtoa_r+0xaa2>
 800a384:	9b03      	ldr	r3, [sp, #12]
 800a386:	2b00      	cmp	r3, #0
 800a388:	dd02      	ble.n	800a390 <_dtoa_r+0xa58>
 800a38a:	9b02      	ldr	r3, [sp, #8]
 800a38c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a390:	f88b a000 	strb.w	sl, [fp]
 800a394:	e775      	b.n	800a282 <_dtoa_r+0x94a>
 800a396:	4638      	mov	r0, r7
 800a398:	e7ba      	b.n	800a310 <_dtoa_r+0x9d8>
 800a39a:	2201      	movs	r2, #1
 800a39c:	e7e2      	b.n	800a364 <_dtoa_r+0xa2c>
 800a39e:	9b03      	ldr	r3, [sp, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	db04      	blt.n	800a3ae <_dtoa_r+0xa76>
 800a3a4:	9906      	ldr	r1, [sp, #24]
 800a3a6:	430b      	orrs	r3, r1
 800a3a8:	9904      	ldr	r1, [sp, #16]
 800a3aa:	430b      	orrs	r3, r1
 800a3ac:	d122      	bne.n	800a3f4 <_dtoa_r+0xabc>
 800a3ae:	2a00      	cmp	r2, #0
 800a3b0:	ddee      	ble.n	800a390 <_dtoa_r+0xa58>
 800a3b2:	ee18 1a10 	vmov	r1, s16
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f000 fbd1 	bl	800ab60 <__lshift>
 800a3be:	4631      	mov	r1, r6
 800a3c0:	ee08 0a10 	vmov	s16, r0
 800a3c4:	f000 fc3c 	bl	800ac40 <__mcmp>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	dc03      	bgt.n	800a3d4 <_dtoa_r+0xa9c>
 800a3cc:	d1e0      	bne.n	800a390 <_dtoa_r+0xa58>
 800a3ce:	f01a 0f01 	tst.w	sl, #1
 800a3d2:	d0dd      	beq.n	800a390 <_dtoa_r+0xa58>
 800a3d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a3d8:	d1d7      	bne.n	800a38a <_dtoa_r+0xa52>
 800a3da:	2339      	movs	r3, #57	; 0x39
 800a3dc:	f88b 3000 	strb.w	r3, [fp]
 800a3e0:	462b      	mov	r3, r5
 800a3e2:	461d      	mov	r5, r3
 800a3e4:	3b01      	subs	r3, #1
 800a3e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a3ea:	2a39      	cmp	r2, #57	; 0x39
 800a3ec:	d071      	beq.n	800a4d2 <_dtoa_r+0xb9a>
 800a3ee:	3201      	adds	r2, #1
 800a3f0:	701a      	strb	r2, [r3, #0]
 800a3f2:	e746      	b.n	800a282 <_dtoa_r+0x94a>
 800a3f4:	2a00      	cmp	r2, #0
 800a3f6:	dd07      	ble.n	800a408 <_dtoa_r+0xad0>
 800a3f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a3fc:	d0ed      	beq.n	800a3da <_dtoa_r+0xaa2>
 800a3fe:	f10a 0301 	add.w	r3, sl, #1
 800a402:	f88b 3000 	strb.w	r3, [fp]
 800a406:	e73c      	b.n	800a282 <_dtoa_r+0x94a>
 800a408:	9b05      	ldr	r3, [sp, #20]
 800a40a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a40e:	4599      	cmp	r9, r3
 800a410:	d047      	beq.n	800a4a2 <_dtoa_r+0xb6a>
 800a412:	ee18 1a10 	vmov	r1, s16
 800a416:	2300      	movs	r3, #0
 800a418:	220a      	movs	r2, #10
 800a41a:	4620      	mov	r0, r4
 800a41c:	f000 f9f0 	bl	800a800 <__multadd>
 800a420:	45b8      	cmp	r8, r7
 800a422:	ee08 0a10 	vmov	s16, r0
 800a426:	f04f 0300 	mov.w	r3, #0
 800a42a:	f04f 020a 	mov.w	r2, #10
 800a42e:	4641      	mov	r1, r8
 800a430:	4620      	mov	r0, r4
 800a432:	d106      	bne.n	800a442 <_dtoa_r+0xb0a>
 800a434:	f000 f9e4 	bl	800a800 <__multadd>
 800a438:	4680      	mov	r8, r0
 800a43a:	4607      	mov	r7, r0
 800a43c:	f109 0901 	add.w	r9, r9, #1
 800a440:	e772      	b.n	800a328 <_dtoa_r+0x9f0>
 800a442:	f000 f9dd 	bl	800a800 <__multadd>
 800a446:	4639      	mov	r1, r7
 800a448:	4680      	mov	r8, r0
 800a44a:	2300      	movs	r3, #0
 800a44c:	220a      	movs	r2, #10
 800a44e:	4620      	mov	r0, r4
 800a450:	f000 f9d6 	bl	800a800 <__multadd>
 800a454:	4607      	mov	r7, r0
 800a456:	e7f1      	b.n	800a43c <_dtoa_r+0xb04>
 800a458:	9b03      	ldr	r3, [sp, #12]
 800a45a:	9302      	str	r3, [sp, #8]
 800a45c:	9d01      	ldr	r5, [sp, #4]
 800a45e:	ee18 0a10 	vmov	r0, s16
 800a462:	4631      	mov	r1, r6
 800a464:	f7ff f9da 	bl	800981c <quorem>
 800a468:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a46c:	9b01      	ldr	r3, [sp, #4]
 800a46e:	f805 ab01 	strb.w	sl, [r5], #1
 800a472:	1aea      	subs	r2, r5, r3
 800a474:	9b02      	ldr	r3, [sp, #8]
 800a476:	4293      	cmp	r3, r2
 800a478:	dd09      	ble.n	800a48e <_dtoa_r+0xb56>
 800a47a:	ee18 1a10 	vmov	r1, s16
 800a47e:	2300      	movs	r3, #0
 800a480:	220a      	movs	r2, #10
 800a482:	4620      	mov	r0, r4
 800a484:	f000 f9bc 	bl	800a800 <__multadd>
 800a488:	ee08 0a10 	vmov	s16, r0
 800a48c:	e7e7      	b.n	800a45e <_dtoa_r+0xb26>
 800a48e:	9b02      	ldr	r3, [sp, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	bfc8      	it	gt
 800a494:	461d      	movgt	r5, r3
 800a496:	9b01      	ldr	r3, [sp, #4]
 800a498:	bfd8      	it	le
 800a49a:	2501      	movle	r5, #1
 800a49c:	441d      	add	r5, r3
 800a49e:	f04f 0800 	mov.w	r8, #0
 800a4a2:	ee18 1a10 	vmov	r1, s16
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f000 fb59 	bl	800ab60 <__lshift>
 800a4ae:	4631      	mov	r1, r6
 800a4b0:	ee08 0a10 	vmov	s16, r0
 800a4b4:	f000 fbc4 	bl	800ac40 <__mcmp>
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	dc91      	bgt.n	800a3e0 <_dtoa_r+0xaa8>
 800a4bc:	d102      	bne.n	800a4c4 <_dtoa_r+0xb8c>
 800a4be:	f01a 0f01 	tst.w	sl, #1
 800a4c2:	d18d      	bne.n	800a3e0 <_dtoa_r+0xaa8>
 800a4c4:	462b      	mov	r3, r5
 800a4c6:	461d      	mov	r5, r3
 800a4c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4cc:	2a30      	cmp	r2, #48	; 0x30
 800a4ce:	d0fa      	beq.n	800a4c6 <_dtoa_r+0xb8e>
 800a4d0:	e6d7      	b.n	800a282 <_dtoa_r+0x94a>
 800a4d2:	9a01      	ldr	r2, [sp, #4]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d184      	bne.n	800a3e2 <_dtoa_r+0xaaa>
 800a4d8:	9b00      	ldr	r3, [sp, #0]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	2331      	movs	r3, #49	; 0x31
 800a4e0:	7013      	strb	r3, [r2, #0]
 800a4e2:	e6ce      	b.n	800a282 <_dtoa_r+0x94a>
 800a4e4:	4b09      	ldr	r3, [pc, #36]	; (800a50c <_dtoa_r+0xbd4>)
 800a4e6:	f7ff ba95 	b.w	8009a14 <_dtoa_r+0xdc>
 800a4ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f47f aa6e 	bne.w	80099ce <_dtoa_r+0x96>
 800a4f2:	4b07      	ldr	r3, [pc, #28]	; (800a510 <_dtoa_r+0xbd8>)
 800a4f4:	f7ff ba8e 	b.w	8009a14 <_dtoa_r+0xdc>
 800a4f8:	9b02      	ldr	r3, [sp, #8]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	dcae      	bgt.n	800a45c <_dtoa_r+0xb24>
 800a4fe:	9b06      	ldr	r3, [sp, #24]
 800a500:	2b02      	cmp	r3, #2
 800a502:	f73f aea8 	bgt.w	800a256 <_dtoa_r+0x91e>
 800a506:	e7a9      	b.n	800a45c <_dtoa_r+0xb24>
 800a508:	0800cd8b 	.word	0x0800cd8b
 800a50c:	0800cce8 	.word	0x0800cce8
 800a510:	0800cd0c 	.word	0x0800cd0c

0800a514 <std>:
 800a514:	2300      	movs	r3, #0
 800a516:	b510      	push	{r4, lr}
 800a518:	4604      	mov	r4, r0
 800a51a:	e9c0 3300 	strd	r3, r3, [r0]
 800a51e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a522:	6083      	str	r3, [r0, #8]
 800a524:	8181      	strh	r1, [r0, #12]
 800a526:	6643      	str	r3, [r0, #100]	; 0x64
 800a528:	81c2      	strh	r2, [r0, #14]
 800a52a:	6183      	str	r3, [r0, #24]
 800a52c:	4619      	mov	r1, r3
 800a52e:	2208      	movs	r2, #8
 800a530:	305c      	adds	r0, #92	; 0x5c
 800a532:	f7fe fcb5 	bl	8008ea0 <memset>
 800a536:	4b05      	ldr	r3, [pc, #20]	; (800a54c <std+0x38>)
 800a538:	6263      	str	r3, [r4, #36]	; 0x24
 800a53a:	4b05      	ldr	r3, [pc, #20]	; (800a550 <std+0x3c>)
 800a53c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a53e:	4b05      	ldr	r3, [pc, #20]	; (800a554 <std+0x40>)
 800a540:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a542:	4b05      	ldr	r3, [pc, #20]	; (800a558 <std+0x44>)
 800a544:	6224      	str	r4, [r4, #32]
 800a546:	6323      	str	r3, [r4, #48]	; 0x30
 800a548:	bd10      	pop	{r4, pc}
 800a54a:	bf00      	nop
 800a54c:	0800b5bd 	.word	0x0800b5bd
 800a550:	0800b5df 	.word	0x0800b5df
 800a554:	0800b617 	.word	0x0800b617
 800a558:	0800b63b 	.word	0x0800b63b

0800a55c <_cleanup_r>:
 800a55c:	4901      	ldr	r1, [pc, #4]	; (800a564 <_cleanup_r+0x8>)
 800a55e:	f000 b8af 	b.w	800a6c0 <_fwalk_reent>
 800a562:	bf00      	nop
 800a564:	0800b951 	.word	0x0800b951

0800a568 <__sfmoreglue>:
 800a568:	b570      	push	{r4, r5, r6, lr}
 800a56a:	2268      	movs	r2, #104	; 0x68
 800a56c:	1e4d      	subs	r5, r1, #1
 800a56e:	4355      	muls	r5, r2
 800a570:	460e      	mov	r6, r1
 800a572:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a576:	f000 fce7 	bl	800af48 <_malloc_r>
 800a57a:	4604      	mov	r4, r0
 800a57c:	b140      	cbz	r0, 800a590 <__sfmoreglue+0x28>
 800a57e:	2100      	movs	r1, #0
 800a580:	e9c0 1600 	strd	r1, r6, [r0]
 800a584:	300c      	adds	r0, #12
 800a586:	60a0      	str	r0, [r4, #8]
 800a588:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a58c:	f7fe fc88 	bl	8008ea0 <memset>
 800a590:	4620      	mov	r0, r4
 800a592:	bd70      	pop	{r4, r5, r6, pc}

0800a594 <__sfp_lock_acquire>:
 800a594:	4801      	ldr	r0, [pc, #4]	; (800a59c <__sfp_lock_acquire+0x8>)
 800a596:	f000 b8b8 	b.w	800a70a <__retarget_lock_acquire_recursive>
 800a59a:	bf00      	nop
 800a59c:	200005bd 	.word	0x200005bd

0800a5a0 <__sfp_lock_release>:
 800a5a0:	4801      	ldr	r0, [pc, #4]	; (800a5a8 <__sfp_lock_release+0x8>)
 800a5a2:	f000 b8b3 	b.w	800a70c <__retarget_lock_release_recursive>
 800a5a6:	bf00      	nop
 800a5a8:	200005bd 	.word	0x200005bd

0800a5ac <__sinit_lock_acquire>:
 800a5ac:	4801      	ldr	r0, [pc, #4]	; (800a5b4 <__sinit_lock_acquire+0x8>)
 800a5ae:	f000 b8ac 	b.w	800a70a <__retarget_lock_acquire_recursive>
 800a5b2:	bf00      	nop
 800a5b4:	200005be 	.word	0x200005be

0800a5b8 <__sinit_lock_release>:
 800a5b8:	4801      	ldr	r0, [pc, #4]	; (800a5c0 <__sinit_lock_release+0x8>)
 800a5ba:	f000 b8a7 	b.w	800a70c <__retarget_lock_release_recursive>
 800a5be:	bf00      	nop
 800a5c0:	200005be 	.word	0x200005be

0800a5c4 <__sinit>:
 800a5c4:	b510      	push	{r4, lr}
 800a5c6:	4604      	mov	r4, r0
 800a5c8:	f7ff fff0 	bl	800a5ac <__sinit_lock_acquire>
 800a5cc:	69a3      	ldr	r3, [r4, #24]
 800a5ce:	b11b      	cbz	r3, 800a5d8 <__sinit+0x14>
 800a5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5d4:	f7ff bff0 	b.w	800a5b8 <__sinit_lock_release>
 800a5d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a5dc:	6523      	str	r3, [r4, #80]	; 0x50
 800a5de:	4b13      	ldr	r3, [pc, #76]	; (800a62c <__sinit+0x68>)
 800a5e0:	4a13      	ldr	r2, [pc, #76]	; (800a630 <__sinit+0x6c>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5e6:	42a3      	cmp	r3, r4
 800a5e8:	bf04      	itt	eq
 800a5ea:	2301      	moveq	r3, #1
 800a5ec:	61a3      	streq	r3, [r4, #24]
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f000 f820 	bl	800a634 <__sfp>
 800a5f4:	6060      	str	r0, [r4, #4]
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f000 f81c 	bl	800a634 <__sfp>
 800a5fc:	60a0      	str	r0, [r4, #8]
 800a5fe:	4620      	mov	r0, r4
 800a600:	f000 f818 	bl	800a634 <__sfp>
 800a604:	2200      	movs	r2, #0
 800a606:	60e0      	str	r0, [r4, #12]
 800a608:	2104      	movs	r1, #4
 800a60a:	6860      	ldr	r0, [r4, #4]
 800a60c:	f7ff ff82 	bl	800a514 <std>
 800a610:	68a0      	ldr	r0, [r4, #8]
 800a612:	2201      	movs	r2, #1
 800a614:	2109      	movs	r1, #9
 800a616:	f7ff ff7d 	bl	800a514 <std>
 800a61a:	68e0      	ldr	r0, [r4, #12]
 800a61c:	2202      	movs	r2, #2
 800a61e:	2112      	movs	r1, #18
 800a620:	f7ff ff78 	bl	800a514 <std>
 800a624:	2301      	movs	r3, #1
 800a626:	61a3      	str	r3, [r4, #24]
 800a628:	e7d2      	b.n	800a5d0 <__sinit+0xc>
 800a62a:	bf00      	nop
 800a62c:	0800ccd4 	.word	0x0800ccd4
 800a630:	0800a55d 	.word	0x0800a55d

0800a634 <__sfp>:
 800a634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a636:	4607      	mov	r7, r0
 800a638:	f7ff ffac 	bl	800a594 <__sfp_lock_acquire>
 800a63c:	4b1e      	ldr	r3, [pc, #120]	; (800a6b8 <__sfp+0x84>)
 800a63e:	681e      	ldr	r6, [r3, #0]
 800a640:	69b3      	ldr	r3, [r6, #24]
 800a642:	b913      	cbnz	r3, 800a64a <__sfp+0x16>
 800a644:	4630      	mov	r0, r6
 800a646:	f7ff ffbd 	bl	800a5c4 <__sinit>
 800a64a:	3648      	adds	r6, #72	; 0x48
 800a64c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a650:	3b01      	subs	r3, #1
 800a652:	d503      	bpl.n	800a65c <__sfp+0x28>
 800a654:	6833      	ldr	r3, [r6, #0]
 800a656:	b30b      	cbz	r3, 800a69c <__sfp+0x68>
 800a658:	6836      	ldr	r6, [r6, #0]
 800a65a:	e7f7      	b.n	800a64c <__sfp+0x18>
 800a65c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a660:	b9d5      	cbnz	r5, 800a698 <__sfp+0x64>
 800a662:	4b16      	ldr	r3, [pc, #88]	; (800a6bc <__sfp+0x88>)
 800a664:	60e3      	str	r3, [r4, #12]
 800a666:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a66a:	6665      	str	r5, [r4, #100]	; 0x64
 800a66c:	f000 f84c 	bl	800a708 <__retarget_lock_init_recursive>
 800a670:	f7ff ff96 	bl	800a5a0 <__sfp_lock_release>
 800a674:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a678:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a67c:	6025      	str	r5, [r4, #0]
 800a67e:	61a5      	str	r5, [r4, #24]
 800a680:	2208      	movs	r2, #8
 800a682:	4629      	mov	r1, r5
 800a684:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a688:	f7fe fc0a 	bl	8008ea0 <memset>
 800a68c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a690:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a694:	4620      	mov	r0, r4
 800a696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a698:	3468      	adds	r4, #104	; 0x68
 800a69a:	e7d9      	b.n	800a650 <__sfp+0x1c>
 800a69c:	2104      	movs	r1, #4
 800a69e:	4638      	mov	r0, r7
 800a6a0:	f7ff ff62 	bl	800a568 <__sfmoreglue>
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	6030      	str	r0, [r6, #0]
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d1d5      	bne.n	800a658 <__sfp+0x24>
 800a6ac:	f7ff ff78 	bl	800a5a0 <__sfp_lock_release>
 800a6b0:	230c      	movs	r3, #12
 800a6b2:	603b      	str	r3, [r7, #0]
 800a6b4:	e7ee      	b.n	800a694 <__sfp+0x60>
 800a6b6:	bf00      	nop
 800a6b8:	0800ccd4 	.word	0x0800ccd4
 800a6bc:	ffff0001 	.word	0xffff0001

0800a6c0 <_fwalk_reent>:
 800a6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6c4:	4606      	mov	r6, r0
 800a6c6:	4688      	mov	r8, r1
 800a6c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a6cc:	2700      	movs	r7, #0
 800a6ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6d2:	f1b9 0901 	subs.w	r9, r9, #1
 800a6d6:	d505      	bpl.n	800a6e4 <_fwalk_reent+0x24>
 800a6d8:	6824      	ldr	r4, [r4, #0]
 800a6da:	2c00      	cmp	r4, #0
 800a6dc:	d1f7      	bne.n	800a6ce <_fwalk_reent+0xe>
 800a6de:	4638      	mov	r0, r7
 800a6e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6e4:	89ab      	ldrh	r3, [r5, #12]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d907      	bls.n	800a6fa <_fwalk_reent+0x3a>
 800a6ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	d003      	beq.n	800a6fa <_fwalk_reent+0x3a>
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	47c0      	blx	r8
 800a6f8:	4307      	orrs	r7, r0
 800a6fa:	3568      	adds	r5, #104	; 0x68
 800a6fc:	e7e9      	b.n	800a6d2 <_fwalk_reent+0x12>
	...

0800a700 <_localeconv_r>:
 800a700:	4800      	ldr	r0, [pc, #0]	; (800a704 <_localeconv_r+0x4>)
 800a702:	4770      	bx	lr
 800a704:	20000248 	.word	0x20000248

0800a708 <__retarget_lock_init_recursive>:
 800a708:	4770      	bx	lr

0800a70a <__retarget_lock_acquire_recursive>:
 800a70a:	4770      	bx	lr

0800a70c <__retarget_lock_release_recursive>:
 800a70c:	4770      	bx	lr
	...

0800a710 <malloc>:
 800a710:	4b02      	ldr	r3, [pc, #8]	; (800a71c <malloc+0xc>)
 800a712:	4601      	mov	r1, r0
 800a714:	6818      	ldr	r0, [r3, #0]
 800a716:	f000 bc17 	b.w	800af48 <_malloc_r>
 800a71a:	bf00      	nop
 800a71c:	200000f4 	.word	0x200000f4

0800a720 <memcpy>:
 800a720:	440a      	add	r2, r1
 800a722:	4291      	cmp	r1, r2
 800a724:	f100 33ff 	add.w	r3, r0, #4294967295
 800a728:	d100      	bne.n	800a72c <memcpy+0xc>
 800a72a:	4770      	bx	lr
 800a72c:	b510      	push	{r4, lr}
 800a72e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a732:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a736:	4291      	cmp	r1, r2
 800a738:	d1f9      	bne.n	800a72e <memcpy+0xe>
 800a73a:	bd10      	pop	{r4, pc}

0800a73c <_Balloc>:
 800a73c:	b570      	push	{r4, r5, r6, lr}
 800a73e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a740:	4604      	mov	r4, r0
 800a742:	460d      	mov	r5, r1
 800a744:	b976      	cbnz	r6, 800a764 <_Balloc+0x28>
 800a746:	2010      	movs	r0, #16
 800a748:	f7ff ffe2 	bl	800a710 <malloc>
 800a74c:	4602      	mov	r2, r0
 800a74e:	6260      	str	r0, [r4, #36]	; 0x24
 800a750:	b920      	cbnz	r0, 800a75c <_Balloc+0x20>
 800a752:	4b18      	ldr	r3, [pc, #96]	; (800a7b4 <_Balloc+0x78>)
 800a754:	4818      	ldr	r0, [pc, #96]	; (800a7b8 <_Balloc+0x7c>)
 800a756:	2166      	movs	r1, #102	; 0x66
 800a758:	f001 f846 	bl	800b7e8 <__assert_func>
 800a75c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a760:	6006      	str	r6, [r0, #0]
 800a762:	60c6      	str	r6, [r0, #12]
 800a764:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a766:	68f3      	ldr	r3, [r6, #12]
 800a768:	b183      	cbz	r3, 800a78c <_Balloc+0x50>
 800a76a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a76c:	68db      	ldr	r3, [r3, #12]
 800a76e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a772:	b9b8      	cbnz	r0, 800a7a4 <_Balloc+0x68>
 800a774:	2101      	movs	r1, #1
 800a776:	fa01 f605 	lsl.w	r6, r1, r5
 800a77a:	1d72      	adds	r2, r6, #5
 800a77c:	0092      	lsls	r2, r2, #2
 800a77e:	4620      	mov	r0, r4
 800a780:	f000 fb60 	bl	800ae44 <_calloc_r>
 800a784:	b160      	cbz	r0, 800a7a0 <_Balloc+0x64>
 800a786:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a78a:	e00e      	b.n	800a7aa <_Balloc+0x6e>
 800a78c:	2221      	movs	r2, #33	; 0x21
 800a78e:	2104      	movs	r1, #4
 800a790:	4620      	mov	r0, r4
 800a792:	f000 fb57 	bl	800ae44 <_calloc_r>
 800a796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a798:	60f0      	str	r0, [r6, #12]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1e4      	bne.n	800a76a <_Balloc+0x2e>
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	bd70      	pop	{r4, r5, r6, pc}
 800a7a4:	6802      	ldr	r2, [r0, #0]
 800a7a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7b0:	e7f7      	b.n	800a7a2 <_Balloc+0x66>
 800a7b2:	bf00      	nop
 800a7b4:	0800cd19 	.word	0x0800cd19
 800a7b8:	0800cdfc 	.word	0x0800cdfc

0800a7bc <_Bfree>:
 800a7bc:	b570      	push	{r4, r5, r6, lr}
 800a7be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7c0:	4605      	mov	r5, r0
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	b976      	cbnz	r6, 800a7e4 <_Bfree+0x28>
 800a7c6:	2010      	movs	r0, #16
 800a7c8:	f7ff ffa2 	bl	800a710 <malloc>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	6268      	str	r0, [r5, #36]	; 0x24
 800a7d0:	b920      	cbnz	r0, 800a7dc <_Bfree+0x20>
 800a7d2:	4b09      	ldr	r3, [pc, #36]	; (800a7f8 <_Bfree+0x3c>)
 800a7d4:	4809      	ldr	r0, [pc, #36]	; (800a7fc <_Bfree+0x40>)
 800a7d6:	218a      	movs	r1, #138	; 0x8a
 800a7d8:	f001 f806 	bl	800b7e8 <__assert_func>
 800a7dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7e0:	6006      	str	r6, [r0, #0]
 800a7e2:	60c6      	str	r6, [r0, #12]
 800a7e4:	b13c      	cbz	r4, 800a7f6 <_Bfree+0x3a>
 800a7e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a7e8:	6862      	ldr	r2, [r4, #4]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7f0:	6021      	str	r1, [r4, #0]
 800a7f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a7f6:	bd70      	pop	{r4, r5, r6, pc}
 800a7f8:	0800cd19 	.word	0x0800cd19
 800a7fc:	0800cdfc 	.word	0x0800cdfc

0800a800 <__multadd>:
 800a800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a804:	690d      	ldr	r5, [r1, #16]
 800a806:	4607      	mov	r7, r0
 800a808:	460c      	mov	r4, r1
 800a80a:	461e      	mov	r6, r3
 800a80c:	f101 0c14 	add.w	ip, r1, #20
 800a810:	2000      	movs	r0, #0
 800a812:	f8dc 3000 	ldr.w	r3, [ip]
 800a816:	b299      	uxth	r1, r3
 800a818:	fb02 6101 	mla	r1, r2, r1, r6
 800a81c:	0c1e      	lsrs	r6, r3, #16
 800a81e:	0c0b      	lsrs	r3, r1, #16
 800a820:	fb02 3306 	mla	r3, r2, r6, r3
 800a824:	b289      	uxth	r1, r1
 800a826:	3001      	adds	r0, #1
 800a828:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a82c:	4285      	cmp	r5, r0
 800a82e:	f84c 1b04 	str.w	r1, [ip], #4
 800a832:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a836:	dcec      	bgt.n	800a812 <__multadd+0x12>
 800a838:	b30e      	cbz	r6, 800a87e <__multadd+0x7e>
 800a83a:	68a3      	ldr	r3, [r4, #8]
 800a83c:	42ab      	cmp	r3, r5
 800a83e:	dc19      	bgt.n	800a874 <__multadd+0x74>
 800a840:	6861      	ldr	r1, [r4, #4]
 800a842:	4638      	mov	r0, r7
 800a844:	3101      	adds	r1, #1
 800a846:	f7ff ff79 	bl	800a73c <_Balloc>
 800a84a:	4680      	mov	r8, r0
 800a84c:	b928      	cbnz	r0, 800a85a <__multadd+0x5a>
 800a84e:	4602      	mov	r2, r0
 800a850:	4b0c      	ldr	r3, [pc, #48]	; (800a884 <__multadd+0x84>)
 800a852:	480d      	ldr	r0, [pc, #52]	; (800a888 <__multadd+0x88>)
 800a854:	21b5      	movs	r1, #181	; 0xb5
 800a856:	f000 ffc7 	bl	800b7e8 <__assert_func>
 800a85a:	6922      	ldr	r2, [r4, #16]
 800a85c:	3202      	adds	r2, #2
 800a85e:	f104 010c 	add.w	r1, r4, #12
 800a862:	0092      	lsls	r2, r2, #2
 800a864:	300c      	adds	r0, #12
 800a866:	f7ff ff5b 	bl	800a720 <memcpy>
 800a86a:	4621      	mov	r1, r4
 800a86c:	4638      	mov	r0, r7
 800a86e:	f7ff ffa5 	bl	800a7bc <_Bfree>
 800a872:	4644      	mov	r4, r8
 800a874:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a878:	3501      	adds	r5, #1
 800a87a:	615e      	str	r6, [r3, #20]
 800a87c:	6125      	str	r5, [r4, #16]
 800a87e:	4620      	mov	r0, r4
 800a880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a884:	0800cd8b 	.word	0x0800cd8b
 800a888:	0800cdfc 	.word	0x0800cdfc

0800a88c <__hi0bits>:
 800a88c:	0c03      	lsrs	r3, r0, #16
 800a88e:	041b      	lsls	r3, r3, #16
 800a890:	b9d3      	cbnz	r3, 800a8c8 <__hi0bits+0x3c>
 800a892:	0400      	lsls	r0, r0, #16
 800a894:	2310      	movs	r3, #16
 800a896:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a89a:	bf04      	itt	eq
 800a89c:	0200      	lsleq	r0, r0, #8
 800a89e:	3308      	addeq	r3, #8
 800a8a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a8a4:	bf04      	itt	eq
 800a8a6:	0100      	lsleq	r0, r0, #4
 800a8a8:	3304      	addeq	r3, #4
 800a8aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a8ae:	bf04      	itt	eq
 800a8b0:	0080      	lsleq	r0, r0, #2
 800a8b2:	3302      	addeq	r3, #2
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	db05      	blt.n	800a8c4 <__hi0bits+0x38>
 800a8b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a8bc:	f103 0301 	add.w	r3, r3, #1
 800a8c0:	bf08      	it	eq
 800a8c2:	2320      	moveq	r3, #32
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	4770      	bx	lr
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	e7e4      	b.n	800a896 <__hi0bits+0xa>

0800a8cc <__lo0bits>:
 800a8cc:	6803      	ldr	r3, [r0, #0]
 800a8ce:	f013 0207 	ands.w	r2, r3, #7
 800a8d2:	4601      	mov	r1, r0
 800a8d4:	d00b      	beq.n	800a8ee <__lo0bits+0x22>
 800a8d6:	07da      	lsls	r2, r3, #31
 800a8d8:	d423      	bmi.n	800a922 <__lo0bits+0x56>
 800a8da:	0798      	lsls	r0, r3, #30
 800a8dc:	bf49      	itett	mi
 800a8de:	085b      	lsrmi	r3, r3, #1
 800a8e0:	089b      	lsrpl	r3, r3, #2
 800a8e2:	2001      	movmi	r0, #1
 800a8e4:	600b      	strmi	r3, [r1, #0]
 800a8e6:	bf5c      	itt	pl
 800a8e8:	600b      	strpl	r3, [r1, #0]
 800a8ea:	2002      	movpl	r0, #2
 800a8ec:	4770      	bx	lr
 800a8ee:	b298      	uxth	r0, r3
 800a8f0:	b9a8      	cbnz	r0, 800a91e <__lo0bits+0x52>
 800a8f2:	0c1b      	lsrs	r3, r3, #16
 800a8f4:	2010      	movs	r0, #16
 800a8f6:	b2da      	uxtb	r2, r3
 800a8f8:	b90a      	cbnz	r2, 800a8fe <__lo0bits+0x32>
 800a8fa:	3008      	adds	r0, #8
 800a8fc:	0a1b      	lsrs	r3, r3, #8
 800a8fe:	071a      	lsls	r2, r3, #28
 800a900:	bf04      	itt	eq
 800a902:	091b      	lsreq	r3, r3, #4
 800a904:	3004      	addeq	r0, #4
 800a906:	079a      	lsls	r2, r3, #30
 800a908:	bf04      	itt	eq
 800a90a:	089b      	lsreq	r3, r3, #2
 800a90c:	3002      	addeq	r0, #2
 800a90e:	07da      	lsls	r2, r3, #31
 800a910:	d403      	bmi.n	800a91a <__lo0bits+0x4e>
 800a912:	085b      	lsrs	r3, r3, #1
 800a914:	f100 0001 	add.w	r0, r0, #1
 800a918:	d005      	beq.n	800a926 <__lo0bits+0x5a>
 800a91a:	600b      	str	r3, [r1, #0]
 800a91c:	4770      	bx	lr
 800a91e:	4610      	mov	r0, r2
 800a920:	e7e9      	b.n	800a8f6 <__lo0bits+0x2a>
 800a922:	2000      	movs	r0, #0
 800a924:	4770      	bx	lr
 800a926:	2020      	movs	r0, #32
 800a928:	4770      	bx	lr
	...

0800a92c <__i2b>:
 800a92c:	b510      	push	{r4, lr}
 800a92e:	460c      	mov	r4, r1
 800a930:	2101      	movs	r1, #1
 800a932:	f7ff ff03 	bl	800a73c <_Balloc>
 800a936:	4602      	mov	r2, r0
 800a938:	b928      	cbnz	r0, 800a946 <__i2b+0x1a>
 800a93a:	4b05      	ldr	r3, [pc, #20]	; (800a950 <__i2b+0x24>)
 800a93c:	4805      	ldr	r0, [pc, #20]	; (800a954 <__i2b+0x28>)
 800a93e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a942:	f000 ff51 	bl	800b7e8 <__assert_func>
 800a946:	2301      	movs	r3, #1
 800a948:	6144      	str	r4, [r0, #20]
 800a94a:	6103      	str	r3, [r0, #16]
 800a94c:	bd10      	pop	{r4, pc}
 800a94e:	bf00      	nop
 800a950:	0800cd8b 	.word	0x0800cd8b
 800a954:	0800cdfc 	.word	0x0800cdfc

0800a958 <__multiply>:
 800a958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a95c:	4691      	mov	r9, r2
 800a95e:	690a      	ldr	r2, [r1, #16]
 800a960:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a964:	429a      	cmp	r2, r3
 800a966:	bfb8      	it	lt
 800a968:	460b      	movlt	r3, r1
 800a96a:	460c      	mov	r4, r1
 800a96c:	bfbc      	itt	lt
 800a96e:	464c      	movlt	r4, r9
 800a970:	4699      	movlt	r9, r3
 800a972:	6927      	ldr	r7, [r4, #16]
 800a974:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a978:	68a3      	ldr	r3, [r4, #8]
 800a97a:	6861      	ldr	r1, [r4, #4]
 800a97c:	eb07 060a 	add.w	r6, r7, sl
 800a980:	42b3      	cmp	r3, r6
 800a982:	b085      	sub	sp, #20
 800a984:	bfb8      	it	lt
 800a986:	3101      	addlt	r1, #1
 800a988:	f7ff fed8 	bl	800a73c <_Balloc>
 800a98c:	b930      	cbnz	r0, 800a99c <__multiply+0x44>
 800a98e:	4602      	mov	r2, r0
 800a990:	4b44      	ldr	r3, [pc, #272]	; (800aaa4 <__multiply+0x14c>)
 800a992:	4845      	ldr	r0, [pc, #276]	; (800aaa8 <__multiply+0x150>)
 800a994:	f240 115d 	movw	r1, #349	; 0x15d
 800a998:	f000 ff26 	bl	800b7e8 <__assert_func>
 800a99c:	f100 0514 	add.w	r5, r0, #20
 800a9a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a9a4:	462b      	mov	r3, r5
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	4543      	cmp	r3, r8
 800a9aa:	d321      	bcc.n	800a9f0 <__multiply+0x98>
 800a9ac:	f104 0314 	add.w	r3, r4, #20
 800a9b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a9b4:	f109 0314 	add.w	r3, r9, #20
 800a9b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a9bc:	9202      	str	r2, [sp, #8]
 800a9be:	1b3a      	subs	r2, r7, r4
 800a9c0:	3a15      	subs	r2, #21
 800a9c2:	f022 0203 	bic.w	r2, r2, #3
 800a9c6:	3204      	adds	r2, #4
 800a9c8:	f104 0115 	add.w	r1, r4, #21
 800a9cc:	428f      	cmp	r7, r1
 800a9ce:	bf38      	it	cc
 800a9d0:	2204      	movcc	r2, #4
 800a9d2:	9201      	str	r2, [sp, #4]
 800a9d4:	9a02      	ldr	r2, [sp, #8]
 800a9d6:	9303      	str	r3, [sp, #12]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d80c      	bhi.n	800a9f6 <__multiply+0x9e>
 800a9dc:	2e00      	cmp	r6, #0
 800a9de:	dd03      	ble.n	800a9e8 <__multiply+0x90>
 800a9e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d05a      	beq.n	800aa9e <__multiply+0x146>
 800a9e8:	6106      	str	r6, [r0, #16]
 800a9ea:	b005      	add	sp, #20
 800a9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f0:	f843 2b04 	str.w	r2, [r3], #4
 800a9f4:	e7d8      	b.n	800a9a8 <__multiply+0x50>
 800a9f6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a9fa:	f1ba 0f00 	cmp.w	sl, #0
 800a9fe:	d024      	beq.n	800aa4a <__multiply+0xf2>
 800aa00:	f104 0e14 	add.w	lr, r4, #20
 800aa04:	46a9      	mov	r9, r5
 800aa06:	f04f 0c00 	mov.w	ip, #0
 800aa0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aa0e:	f8d9 1000 	ldr.w	r1, [r9]
 800aa12:	fa1f fb82 	uxth.w	fp, r2
 800aa16:	b289      	uxth	r1, r1
 800aa18:	fb0a 110b 	mla	r1, sl, fp, r1
 800aa1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aa20:	f8d9 2000 	ldr.w	r2, [r9]
 800aa24:	4461      	add	r1, ip
 800aa26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aa2a:	fb0a c20b 	mla	r2, sl, fp, ip
 800aa2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aa32:	b289      	uxth	r1, r1
 800aa34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aa38:	4577      	cmp	r7, lr
 800aa3a:	f849 1b04 	str.w	r1, [r9], #4
 800aa3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aa42:	d8e2      	bhi.n	800aa0a <__multiply+0xb2>
 800aa44:	9a01      	ldr	r2, [sp, #4]
 800aa46:	f845 c002 	str.w	ip, [r5, r2]
 800aa4a:	9a03      	ldr	r2, [sp, #12]
 800aa4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa50:	3304      	adds	r3, #4
 800aa52:	f1b9 0f00 	cmp.w	r9, #0
 800aa56:	d020      	beq.n	800aa9a <__multiply+0x142>
 800aa58:	6829      	ldr	r1, [r5, #0]
 800aa5a:	f104 0c14 	add.w	ip, r4, #20
 800aa5e:	46ae      	mov	lr, r5
 800aa60:	f04f 0a00 	mov.w	sl, #0
 800aa64:	f8bc b000 	ldrh.w	fp, [ip]
 800aa68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aa6c:	fb09 220b 	mla	r2, r9, fp, r2
 800aa70:	4492      	add	sl, r2
 800aa72:	b289      	uxth	r1, r1
 800aa74:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aa78:	f84e 1b04 	str.w	r1, [lr], #4
 800aa7c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aa80:	f8be 1000 	ldrh.w	r1, [lr]
 800aa84:	0c12      	lsrs	r2, r2, #16
 800aa86:	fb09 1102 	mla	r1, r9, r2, r1
 800aa8a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aa8e:	4567      	cmp	r7, ip
 800aa90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aa94:	d8e6      	bhi.n	800aa64 <__multiply+0x10c>
 800aa96:	9a01      	ldr	r2, [sp, #4]
 800aa98:	50a9      	str	r1, [r5, r2]
 800aa9a:	3504      	adds	r5, #4
 800aa9c:	e79a      	b.n	800a9d4 <__multiply+0x7c>
 800aa9e:	3e01      	subs	r6, #1
 800aaa0:	e79c      	b.n	800a9dc <__multiply+0x84>
 800aaa2:	bf00      	nop
 800aaa4:	0800cd8b 	.word	0x0800cd8b
 800aaa8:	0800cdfc 	.word	0x0800cdfc

0800aaac <__pow5mult>:
 800aaac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aab0:	4615      	mov	r5, r2
 800aab2:	f012 0203 	ands.w	r2, r2, #3
 800aab6:	4606      	mov	r6, r0
 800aab8:	460f      	mov	r7, r1
 800aaba:	d007      	beq.n	800aacc <__pow5mult+0x20>
 800aabc:	4c25      	ldr	r4, [pc, #148]	; (800ab54 <__pow5mult+0xa8>)
 800aabe:	3a01      	subs	r2, #1
 800aac0:	2300      	movs	r3, #0
 800aac2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aac6:	f7ff fe9b 	bl	800a800 <__multadd>
 800aaca:	4607      	mov	r7, r0
 800aacc:	10ad      	asrs	r5, r5, #2
 800aace:	d03d      	beq.n	800ab4c <__pow5mult+0xa0>
 800aad0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aad2:	b97c      	cbnz	r4, 800aaf4 <__pow5mult+0x48>
 800aad4:	2010      	movs	r0, #16
 800aad6:	f7ff fe1b 	bl	800a710 <malloc>
 800aada:	4602      	mov	r2, r0
 800aadc:	6270      	str	r0, [r6, #36]	; 0x24
 800aade:	b928      	cbnz	r0, 800aaec <__pow5mult+0x40>
 800aae0:	4b1d      	ldr	r3, [pc, #116]	; (800ab58 <__pow5mult+0xac>)
 800aae2:	481e      	ldr	r0, [pc, #120]	; (800ab5c <__pow5mult+0xb0>)
 800aae4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aae8:	f000 fe7e 	bl	800b7e8 <__assert_func>
 800aaec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aaf0:	6004      	str	r4, [r0, #0]
 800aaf2:	60c4      	str	r4, [r0, #12]
 800aaf4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aaf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aafc:	b94c      	cbnz	r4, 800ab12 <__pow5mult+0x66>
 800aafe:	f240 2171 	movw	r1, #625	; 0x271
 800ab02:	4630      	mov	r0, r6
 800ab04:	f7ff ff12 	bl	800a92c <__i2b>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab0e:	4604      	mov	r4, r0
 800ab10:	6003      	str	r3, [r0, #0]
 800ab12:	f04f 0900 	mov.w	r9, #0
 800ab16:	07eb      	lsls	r3, r5, #31
 800ab18:	d50a      	bpl.n	800ab30 <__pow5mult+0x84>
 800ab1a:	4639      	mov	r1, r7
 800ab1c:	4622      	mov	r2, r4
 800ab1e:	4630      	mov	r0, r6
 800ab20:	f7ff ff1a 	bl	800a958 <__multiply>
 800ab24:	4639      	mov	r1, r7
 800ab26:	4680      	mov	r8, r0
 800ab28:	4630      	mov	r0, r6
 800ab2a:	f7ff fe47 	bl	800a7bc <_Bfree>
 800ab2e:	4647      	mov	r7, r8
 800ab30:	106d      	asrs	r5, r5, #1
 800ab32:	d00b      	beq.n	800ab4c <__pow5mult+0xa0>
 800ab34:	6820      	ldr	r0, [r4, #0]
 800ab36:	b938      	cbnz	r0, 800ab48 <__pow5mult+0x9c>
 800ab38:	4622      	mov	r2, r4
 800ab3a:	4621      	mov	r1, r4
 800ab3c:	4630      	mov	r0, r6
 800ab3e:	f7ff ff0b 	bl	800a958 <__multiply>
 800ab42:	6020      	str	r0, [r4, #0]
 800ab44:	f8c0 9000 	str.w	r9, [r0]
 800ab48:	4604      	mov	r4, r0
 800ab4a:	e7e4      	b.n	800ab16 <__pow5mult+0x6a>
 800ab4c:	4638      	mov	r0, r7
 800ab4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab52:	bf00      	nop
 800ab54:	0800cf48 	.word	0x0800cf48
 800ab58:	0800cd19 	.word	0x0800cd19
 800ab5c:	0800cdfc 	.word	0x0800cdfc

0800ab60 <__lshift>:
 800ab60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab64:	460c      	mov	r4, r1
 800ab66:	6849      	ldr	r1, [r1, #4]
 800ab68:	6923      	ldr	r3, [r4, #16]
 800ab6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab6e:	68a3      	ldr	r3, [r4, #8]
 800ab70:	4607      	mov	r7, r0
 800ab72:	4691      	mov	r9, r2
 800ab74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab78:	f108 0601 	add.w	r6, r8, #1
 800ab7c:	42b3      	cmp	r3, r6
 800ab7e:	db0b      	blt.n	800ab98 <__lshift+0x38>
 800ab80:	4638      	mov	r0, r7
 800ab82:	f7ff fddb 	bl	800a73c <_Balloc>
 800ab86:	4605      	mov	r5, r0
 800ab88:	b948      	cbnz	r0, 800ab9e <__lshift+0x3e>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	4b2a      	ldr	r3, [pc, #168]	; (800ac38 <__lshift+0xd8>)
 800ab8e:	482b      	ldr	r0, [pc, #172]	; (800ac3c <__lshift+0xdc>)
 800ab90:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ab94:	f000 fe28 	bl	800b7e8 <__assert_func>
 800ab98:	3101      	adds	r1, #1
 800ab9a:	005b      	lsls	r3, r3, #1
 800ab9c:	e7ee      	b.n	800ab7c <__lshift+0x1c>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f100 0114 	add.w	r1, r0, #20
 800aba4:	f100 0210 	add.w	r2, r0, #16
 800aba8:	4618      	mov	r0, r3
 800abaa:	4553      	cmp	r3, sl
 800abac:	db37      	blt.n	800ac1e <__lshift+0xbe>
 800abae:	6920      	ldr	r0, [r4, #16]
 800abb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abb4:	f104 0314 	add.w	r3, r4, #20
 800abb8:	f019 091f 	ands.w	r9, r9, #31
 800abbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abc0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800abc4:	d02f      	beq.n	800ac26 <__lshift+0xc6>
 800abc6:	f1c9 0e20 	rsb	lr, r9, #32
 800abca:	468a      	mov	sl, r1
 800abcc:	f04f 0c00 	mov.w	ip, #0
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	fa02 f209 	lsl.w	r2, r2, r9
 800abd6:	ea42 020c 	orr.w	r2, r2, ip
 800abda:	f84a 2b04 	str.w	r2, [sl], #4
 800abde:	f853 2b04 	ldr.w	r2, [r3], #4
 800abe2:	4298      	cmp	r0, r3
 800abe4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800abe8:	d8f2      	bhi.n	800abd0 <__lshift+0x70>
 800abea:	1b03      	subs	r3, r0, r4
 800abec:	3b15      	subs	r3, #21
 800abee:	f023 0303 	bic.w	r3, r3, #3
 800abf2:	3304      	adds	r3, #4
 800abf4:	f104 0215 	add.w	r2, r4, #21
 800abf8:	4290      	cmp	r0, r2
 800abfa:	bf38      	it	cc
 800abfc:	2304      	movcc	r3, #4
 800abfe:	f841 c003 	str.w	ip, [r1, r3]
 800ac02:	f1bc 0f00 	cmp.w	ip, #0
 800ac06:	d001      	beq.n	800ac0c <__lshift+0xac>
 800ac08:	f108 0602 	add.w	r6, r8, #2
 800ac0c:	3e01      	subs	r6, #1
 800ac0e:	4638      	mov	r0, r7
 800ac10:	612e      	str	r6, [r5, #16]
 800ac12:	4621      	mov	r1, r4
 800ac14:	f7ff fdd2 	bl	800a7bc <_Bfree>
 800ac18:	4628      	mov	r0, r5
 800ac1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac22:	3301      	adds	r3, #1
 800ac24:	e7c1      	b.n	800abaa <__lshift+0x4a>
 800ac26:	3904      	subs	r1, #4
 800ac28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac2c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac30:	4298      	cmp	r0, r3
 800ac32:	d8f9      	bhi.n	800ac28 <__lshift+0xc8>
 800ac34:	e7ea      	b.n	800ac0c <__lshift+0xac>
 800ac36:	bf00      	nop
 800ac38:	0800cd8b 	.word	0x0800cd8b
 800ac3c:	0800cdfc 	.word	0x0800cdfc

0800ac40 <__mcmp>:
 800ac40:	b530      	push	{r4, r5, lr}
 800ac42:	6902      	ldr	r2, [r0, #16]
 800ac44:	690c      	ldr	r4, [r1, #16]
 800ac46:	1b12      	subs	r2, r2, r4
 800ac48:	d10e      	bne.n	800ac68 <__mcmp+0x28>
 800ac4a:	f100 0314 	add.w	r3, r0, #20
 800ac4e:	3114      	adds	r1, #20
 800ac50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ac54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac60:	42a5      	cmp	r5, r4
 800ac62:	d003      	beq.n	800ac6c <__mcmp+0x2c>
 800ac64:	d305      	bcc.n	800ac72 <__mcmp+0x32>
 800ac66:	2201      	movs	r2, #1
 800ac68:	4610      	mov	r0, r2
 800ac6a:	bd30      	pop	{r4, r5, pc}
 800ac6c:	4283      	cmp	r3, r0
 800ac6e:	d3f3      	bcc.n	800ac58 <__mcmp+0x18>
 800ac70:	e7fa      	b.n	800ac68 <__mcmp+0x28>
 800ac72:	f04f 32ff 	mov.w	r2, #4294967295
 800ac76:	e7f7      	b.n	800ac68 <__mcmp+0x28>

0800ac78 <__mdiff>:
 800ac78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac7c:	460c      	mov	r4, r1
 800ac7e:	4606      	mov	r6, r0
 800ac80:	4611      	mov	r1, r2
 800ac82:	4620      	mov	r0, r4
 800ac84:	4690      	mov	r8, r2
 800ac86:	f7ff ffdb 	bl	800ac40 <__mcmp>
 800ac8a:	1e05      	subs	r5, r0, #0
 800ac8c:	d110      	bne.n	800acb0 <__mdiff+0x38>
 800ac8e:	4629      	mov	r1, r5
 800ac90:	4630      	mov	r0, r6
 800ac92:	f7ff fd53 	bl	800a73c <_Balloc>
 800ac96:	b930      	cbnz	r0, 800aca6 <__mdiff+0x2e>
 800ac98:	4b3a      	ldr	r3, [pc, #232]	; (800ad84 <__mdiff+0x10c>)
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	f240 2132 	movw	r1, #562	; 0x232
 800aca0:	4839      	ldr	r0, [pc, #228]	; (800ad88 <__mdiff+0x110>)
 800aca2:	f000 fda1 	bl	800b7e8 <__assert_func>
 800aca6:	2301      	movs	r3, #1
 800aca8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800acac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb0:	bfa4      	itt	ge
 800acb2:	4643      	movge	r3, r8
 800acb4:	46a0      	movge	r8, r4
 800acb6:	4630      	mov	r0, r6
 800acb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800acbc:	bfa6      	itte	ge
 800acbe:	461c      	movge	r4, r3
 800acc0:	2500      	movge	r5, #0
 800acc2:	2501      	movlt	r5, #1
 800acc4:	f7ff fd3a 	bl	800a73c <_Balloc>
 800acc8:	b920      	cbnz	r0, 800acd4 <__mdiff+0x5c>
 800acca:	4b2e      	ldr	r3, [pc, #184]	; (800ad84 <__mdiff+0x10c>)
 800accc:	4602      	mov	r2, r0
 800acce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800acd2:	e7e5      	b.n	800aca0 <__mdiff+0x28>
 800acd4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800acd8:	6926      	ldr	r6, [r4, #16]
 800acda:	60c5      	str	r5, [r0, #12]
 800acdc:	f104 0914 	add.w	r9, r4, #20
 800ace0:	f108 0514 	add.w	r5, r8, #20
 800ace4:	f100 0e14 	add.w	lr, r0, #20
 800ace8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800acec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800acf0:	f108 0210 	add.w	r2, r8, #16
 800acf4:	46f2      	mov	sl, lr
 800acf6:	2100      	movs	r1, #0
 800acf8:	f859 3b04 	ldr.w	r3, [r9], #4
 800acfc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad00:	fa1f f883 	uxth.w	r8, r3
 800ad04:	fa11 f18b 	uxtah	r1, r1, fp
 800ad08:	0c1b      	lsrs	r3, r3, #16
 800ad0a:	eba1 0808 	sub.w	r8, r1, r8
 800ad0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad16:	fa1f f888 	uxth.w	r8, r8
 800ad1a:	1419      	asrs	r1, r3, #16
 800ad1c:	454e      	cmp	r6, r9
 800ad1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad22:	f84a 3b04 	str.w	r3, [sl], #4
 800ad26:	d8e7      	bhi.n	800acf8 <__mdiff+0x80>
 800ad28:	1b33      	subs	r3, r6, r4
 800ad2a:	3b15      	subs	r3, #21
 800ad2c:	f023 0303 	bic.w	r3, r3, #3
 800ad30:	3304      	adds	r3, #4
 800ad32:	3415      	adds	r4, #21
 800ad34:	42a6      	cmp	r6, r4
 800ad36:	bf38      	it	cc
 800ad38:	2304      	movcc	r3, #4
 800ad3a:	441d      	add	r5, r3
 800ad3c:	4473      	add	r3, lr
 800ad3e:	469e      	mov	lr, r3
 800ad40:	462e      	mov	r6, r5
 800ad42:	4566      	cmp	r6, ip
 800ad44:	d30e      	bcc.n	800ad64 <__mdiff+0xec>
 800ad46:	f10c 0203 	add.w	r2, ip, #3
 800ad4a:	1b52      	subs	r2, r2, r5
 800ad4c:	f022 0203 	bic.w	r2, r2, #3
 800ad50:	3d03      	subs	r5, #3
 800ad52:	45ac      	cmp	ip, r5
 800ad54:	bf38      	it	cc
 800ad56:	2200      	movcc	r2, #0
 800ad58:	441a      	add	r2, r3
 800ad5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ad5e:	b17b      	cbz	r3, 800ad80 <__mdiff+0x108>
 800ad60:	6107      	str	r7, [r0, #16]
 800ad62:	e7a3      	b.n	800acac <__mdiff+0x34>
 800ad64:	f856 8b04 	ldr.w	r8, [r6], #4
 800ad68:	fa11 f288 	uxtah	r2, r1, r8
 800ad6c:	1414      	asrs	r4, r2, #16
 800ad6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ad72:	b292      	uxth	r2, r2
 800ad74:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ad78:	f84e 2b04 	str.w	r2, [lr], #4
 800ad7c:	1421      	asrs	r1, r4, #16
 800ad7e:	e7e0      	b.n	800ad42 <__mdiff+0xca>
 800ad80:	3f01      	subs	r7, #1
 800ad82:	e7ea      	b.n	800ad5a <__mdiff+0xe2>
 800ad84:	0800cd8b 	.word	0x0800cd8b
 800ad88:	0800cdfc 	.word	0x0800cdfc

0800ad8c <__d2b>:
 800ad8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad90:	4689      	mov	r9, r1
 800ad92:	2101      	movs	r1, #1
 800ad94:	ec57 6b10 	vmov	r6, r7, d0
 800ad98:	4690      	mov	r8, r2
 800ad9a:	f7ff fccf 	bl	800a73c <_Balloc>
 800ad9e:	4604      	mov	r4, r0
 800ada0:	b930      	cbnz	r0, 800adb0 <__d2b+0x24>
 800ada2:	4602      	mov	r2, r0
 800ada4:	4b25      	ldr	r3, [pc, #148]	; (800ae3c <__d2b+0xb0>)
 800ada6:	4826      	ldr	r0, [pc, #152]	; (800ae40 <__d2b+0xb4>)
 800ada8:	f240 310a 	movw	r1, #778	; 0x30a
 800adac:	f000 fd1c 	bl	800b7e8 <__assert_func>
 800adb0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800adb4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800adb8:	bb35      	cbnz	r5, 800ae08 <__d2b+0x7c>
 800adba:	2e00      	cmp	r6, #0
 800adbc:	9301      	str	r3, [sp, #4]
 800adbe:	d028      	beq.n	800ae12 <__d2b+0x86>
 800adc0:	4668      	mov	r0, sp
 800adc2:	9600      	str	r6, [sp, #0]
 800adc4:	f7ff fd82 	bl	800a8cc <__lo0bits>
 800adc8:	9900      	ldr	r1, [sp, #0]
 800adca:	b300      	cbz	r0, 800ae0e <__d2b+0x82>
 800adcc:	9a01      	ldr	r2, [sp, #4]
 800adce:	f1c0 0320 	rsb	r3, r0, #32
 800add2:	fa02 f303 	lsl.w	r3, r2, r3
 800add6:	430b      	orrs	r3, r1
 800add8:	40c2      	lsrs	r2, r0
 800adda:	6163      	str	r3, [r4, #20]
 800addc:	9201      	str	r2, [sp, #4]
 800adde:	9b01      	ldr	r3, [sp, #4]
 800ade0:	61a3      	str	r3, [r4, #24]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	bf14      	ite	ne
 800ade6:	2202      	movne	r2, #2
 800ade8:	2201      	moveq	r2, #1
 800adea:	6122      	str	r2, [r4, #16]
 800adec:	b1d5      	cbz	r5, 800ae24 <__d2b+0x98>
 800adee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800adf2:	4405      	add	r5, r0
 800adf4:	f8c9 5000 	str.w	r5, [r9]
 800adf8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800adfc:	f8c8 0000 	str.w	r0, [r8]
 800ae00:	4620      	mov	r0, r4
 800ae02:	b003      	add	sp, #12
 800ae04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae0c:	e7d5      	b.n	800adba <__d2b+0x2e>
 800ae0e:	6161      	str	r1, [r4, #20]
 800ae10:	e7e5      	b.n	800adde <__d2b+0x52>
 800ae12:	a801      	add	r0, sp, #4
 800ae14:	f7ff fd5a 	bl	800a8cc <__lo0bits>
 800ae18:	9b01      	ldr	r3, [sp, #4]
 800ae1a:	6163      	str	r3, [r4, #20]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	6122      	str	r2, [r4, #16]
 800ae20:	3020      	adds	r0, #32
 800ae22:	e7e3      	b.n	800adec <__d2b+0x60>
 800ae24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae2c:	f8c9 0000 	str.w	r0, [r9]
 800ae30:	6918      	ldr	r0, [r3, #16]
 800ae32:	f7ff fd2b 	bl	800a88c <__hi0bits>
 800ae36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae3a:	e7df      	b.n	800adfc <__d2b+0x70>
 800ae3c:	0800cd8b 	.word	0x0800cd8b
 800ae40:	0800cdfc 	.word	0x0800cdfc

0800ae44 <_calloc_r>:
 800ae44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae46:	fba1 2402 	umull	r2, r4, r1, r2
 800ae4a:	b94c      	cbnz	r4, 800ae60 <_calloc_r+0x1c>
 800ae4c:	4611      	mov	r1, r2
 800ae4e:	9201      	str	r2, [sp, #4]
 800ae50:	f000 f87a 	bl	800af48 <_malloc_r>
 800ae54:	9a01      	ldr	r2, [sp, #4]
 800ae56:	4605      	mov	r5, r0
 800ae58:	b930      	cbnz	r0, 800ae68 <_calloc_r+0x24>
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	b003      	add	sp, #12
 800ae5e:	bd30      	pop	{r4, r5, pc}
 800ae60:	220c      	movs	r2, #12
 800ae62:	6002      	str	r2, [r0, #0]
 800ae64:	2500      	movs	r5, #0
 800ae66:	e7f8      	b.n	800ae5a <_calloc_r+0x16>
 800ae68:	4621      	mov	r1, r4
 800ae6a:	f7fe f819 	bl	8008ea0 <memset>
 800ae6e:	e7f4      	b.n	800ae5a <_calloc_r+0x16>

0800ae70 <_free_r>:
 800ae70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae72:	2900      	cmp	r1, #0
 800ae74:	d044      	beq.n	800af00 <_free_r+0x90>
 800ae76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae7a:	9001      	str	r0, [sp, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f1a1 0404 	sub.w	r4, r1, #4
 800ae82:	bfb8      	it	lt
 800ae84:	18e4      	addlt	r4, r4, r3
 800ae86:	f000 fe55 	bl	800bb34 <__malloc_lock>
 800ae8a:	4a1e      	ldr	r2, [pc, #120]	; (800af04 <_free_r+0x94>)
 800ae8c:	9801      	ldr	r0, [sp, #4]
 800ae8e:	6813      	ldr	r3, [r2, #0]
 800ae90:	b933      	cbnz	r3, 800aea0 <_free_r+0x30>
 800ae92:	6063      	str	r3, [r4, #4]
 800ae94:	6014      	str	r4, [r2, #0]
 800ae96:	b003      	add	sp, #12
 800ae98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae9c:	f000 be50 	b.w	800bb40 <__malloc_unlock>
 800aea0:	42a3      	cmp	r3, r4
 800aea2:	d908      	bls.n	800aeb6 <_free_r+0x46>
 800aea4:	6825      	ldr	r5, [r4, #0]
 800aea6:	1961      	adds	r1, r4, r5
 800aea8:	428b      	cmp	r3, r1
 800aeaa:	bf01      	itttt	eq
 800aeac:	6819      	ldreq	r1, [r3, #0]
 800aeae:	685b      	ldreq	r3, [r3, #4]
 800aeb0:	1949      	addeq	r1, r1, r5
 800aeb2:	6021      	streq	r1, [r4, #0]
 800aeb4:	e7ed      	b.n	800ae92 <_free_r+0x22>
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	b10b      	cbz	r3, 800aec0 <_free_r+0x50>
 800aebc:	42a3      	cmp	r3, r4
 800aebe:	d9fa      	bls.n	800aeb6 <_free_r+0x46>
 800aec0:	6811      	ldr	r1, [r2, #0]
 800aec2:	1855      	adds	r5, r2, r1
 800aec4:	42a5      	cmp	r5, r4
 800aec6:	d10b      	bne.n	800aee0 <_free_r+0x70>
 800aec8:	6824      	ldr	r4, [r4, #0]
 800aeca:	4421      	add	r1, r4
 800aecc:	1854      	adds	r4, r2, r1
 800aece:	42a3      	cmp	r3, r4
 800aed0:	6011      	str	r1, [r2, #0]
 800aed2:	d1e0      	bne.n	800ae96 <_free_r+0x26>
 800aed4:	681c      	ldr	r4, [r3, #0]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	6053      	str	r3, [r2, #4]
 800aeda:	4421      	add	r1, r4
 800aedc:	6011      	str	r1, [r2, #0]
 800aede:	e7da      	b.n	800ae96 <_free_r+0x26>
 800aee0:	d902      	bls.n	800aee8 <_free_r+0x78>
 800aee2:	230c      	movs	r3, #12
 800aee4:	6003      	str	r3, [r0, #0]
 800aee6:	e7d6      	b.n	800ae96 <_free_r+0x26>
 800aee8:	6825      	ldr	r5, [r4, #0]
 800aeea:	1961      	adds	r1, r4, r5
 800aeec:	428b      	cmp	r3, r1
 800aeee:	bf04      	itt	eq
 800aef0:	6819      	ldreq	r1, [r3, #0]
 800aef2:	685b      	ldreq	r3, [r3, #4]
 800aef4:	6063      	str	r3, [r4, #4]
 800aef6:	bf04      	itt	eq
 800aef8:	1949      	addeq	r1, r1, r5
 800aefa:	6021      	streq	r1, [r4, #0]
 800aefc:	6054      	str	r4, [r2, #4]
 800aefe:	e7ca      	b.n	800ae96 <_free_r+0x26>
 800af00:	b003      	add	sp, #12
 800af02:	bd30      	pop	{r4, r5, pc}
 800af04:	200005c0 	.word	0x200005c0

0800af08 <sbrk_aligned>:
 800af08:	b570      	push	{r4, r5, r6, lr}
 800af0a:	4e0e      	ldr	r6, [pc, #56]	; (800af44 <sbrk_aligned+0x3c>)
 800af0c:	460c      	mov	r4, r1
 800af0e:	6831      	ldr	r1, [r6, #0]
 800af10:	4605      	mov	r5, r0
 800af12:	b911      	cbnz	r1, 800af1a <sbrk_aligned+0x12>
 800af14:	f000 fb42 	bl	800b59c <_sbrk_r>
 800af18:	6030      	str	r0, [r6, #0]
 800af1a:	4621      	mov	r1, r4
 800af1c:	4628      	mov	r0, r5
 800af1e:	f000 fb3d 	bl	800b59c <_sbrk_r>
 800af22:	1c43      	adds	r3, r0, #1
 800af24:	d00a      	beq.n	800af3c <sbrk_aligned+0x34>
 800af26:	1cc4      	adds	r4, r0, #3
 800af28:	f024 0403 	bic.w	r4, r4, #3
 800af2c:	42a0      	cmp	r0, r4
 800af2e:	d007      	beq.n	800af40 <sbrk_aligned+0x38>
 800af30:	1a21      	subs	r1, r4, r0
 800af32:	4628      	mov	r0, r5
 800af34:	f000 fb32 	bl	800b59c <_sbrk_r>
 800af38:	3001      	adds	r0, #1
 800af3a:	d101      	bne.n	800af40 <sbrk_aligned+0x38>
 800af3c:	f04f 34ff 	mov.w	r4, #4294967295
 800af40:	4620      	mov	r0, r4
 800af42:	bd70      	pop	{r4, r5, r6, pc}
 800af44:	200005c4 	.word	0x200005c4

0800af48 <_malloc_r>:
 800af48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af4c:	1ccd      	adds	r5, r1, #3
 800af4e:	f025 0503 	bic.w	r5, r5, #3
 800af52:	3508      	adds	r5, #8
 800af54:	2d0c      	cmp	r5, #12
 800af56:	bf38      	it	cc
 800af58:	250c      	movcc	r5, #12
 800af5a:	2d00      	cmp	r5, #0
 800af5c:	4607      	mov	r7, r0
 800af5e:	db01      	blt.n	800af64 <_malloc_r+0x1c>
 800af60:	42a9      	cmp	r1, r5
 800af62:	d905      	bls.n	800af70 <_malloc_r+0x28>
 800af64:	230c      	movs	r3, #12
 800af66:	603b      	str	r3, [r7, #0]
 800af68:	2600      	movs	r6, #0
 800af6a:	4630      	mov	r0, r6
 800af6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af70:	4e2e      	ldr	r6, [pc, #184]	; (800b02c <_malloc_r+0xe4>)
 800af72:	f000 fddf 	bl	800bb34 <__malloc_lock>
 800af76:	6833      	ldr	r3, [r6, #0]
 800af78:	461c      	mov	r4, r3
 800af7a:	bb34      	cbnz	r4, 800afca <_malloc_r+0x82>
 800af7c:	4629      	mov	r1, r5
 800af7e:	4638      	mov	r0, r7
 800af80:	f7ff ffc2 	bl	800af08 <sbrk_aligned>
 800af84:	1c43      	adds	r3, r0, #1
 800af86:	4604      	mov	r4, r0
 800af88:	d14d      	bne.n	800b026 <_malloc_r+0xde>
 800af8a:	6834      	ldr	r4, [r6, #0]
 800af8c:	4626      	mov	r6, r4
 800af8e:	2e00      	cmp	r6, #0
 800af90:	d140      	bne.n	800b014 <_malloc_r+0xcc>
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	4631      	mov	r1, r6
 800af96:	4638      	mov	r0, r7
 800af98:	eb04 0803 	add.w	r8, r4, r3
 800af9c:	f000 fafe 	bl	800b59c <_sbrk_r>
 800afa0:	4580      	cmp	r8, r0
 800afa2:	d13a      	bne.n	800b01a <_malloc_r+0xd2>
 800afa4:	6821      	ldr	r1, [r4, #0]
 800afa6:	3503      	adds	r5, #3
 800afa8:	1a6d      	subs	r5, r5, r1
 800afaa:	f025 0503 	bic.w	r5, r5, #3
 800afae:	3508      	adds	r5, #8
 800afb0:	2d0c      	cmp	r5, #12
 800afb2:	bf38      	it	cc
 800afb4:	250c      	movcc	r5, #12
 800afb6:	4629      	mov	r1, r5
 800afb8:	4638      	mov	r0, r7
 800afba:	f7ff ffa5 	bl	800af08 <sbrk_aligned>
 800afbe:	3001      	adds	r0, #1
 800afc0:	d02b      	beq.n	800b01a <_malloc_r+0xd2>
 800afc2:	6823      	ldr	r3, [r4, #0]
 800afc4:	442b      	add	r3, r5
 800afc6:	6023      	str	r3, [r4, #0]
 800afc8:	e00e      	b.n	800afe8 <_malloc_r+0xa0>
 800afca:	6822      	ldr	r2, [r4, #0]
 800afcc:	1b52      	subs	r2, r2, r5
 800afce:	d41e      	bmi.n	800b00e <_malloc_r+0xc6>
 800afd0:	2a0b      	cmp	r2, #11
 800afd2:	d916      	bls.n	800b002 <_malloc_r+0xba>
 800afd4:	1961      	adds	r1, r4, r5
 800afd6:	42a3      	cmp	r3, r4
 800afd8:	6025      	str	r5, [r4, #0]
 800afda:	bf18      	it	ne
 800afdc:	6059      	strne	r1, [r3, #4]
 800afde:	6863      	ldr	r3, [r4, #4]
 800afe0:	bf08      	it	eq
 800afe2:	6031      	streq	r1, [r6, #0]
 800afe4:	5162      	str	r2, [r4, r5]
 800afe6:	604b      	str	r3, [r1, #4]
 800afe8:	4638      	mov	r0, r7
 800afea:	f104 060b 	add.w	r6, r4, #11
 800afee:	f000 fda7 	bl	800bb40 <__malloc_unlock>
 800aff2:	f026 0607 	bic.w	r6, r6, #7
 800aff6:	1d23      	adds	r3, r4, #4
 800aff8:	1af2      	subs	r2, r6, r3
 800affa:	d0b6      	beq.n	800af6a <_malloc_r+0x22>
 800affc:	1b9b      	subs	r3, r3, r6
 800affe:	50a3      	str	r3, [r4, r2]
 800b000:	e7b3      	b.n	800af6a <_malloc_r+0x22>
 800b002:	6862      	ldr	r2, [r4, #4]
 800b004:	42a3      	cmp	r3, r4
 800b006:	bf0c      	ite	eq
 800b008:	6032      	streq	r2, [r6, #0]
 800b00a:	605a      	strne	r2, [r3, #4]
 800b00c:	e7ec      	b.n	800afe8 <_malloc_r+0xa0>
 800b00e:	4623      	mov	r3, r4
 800b010:	6864      	ldr	r4, [r4, #4]
 800b012:	e7b2      	b.n	800af7a <_malloc_r+0x32>
 800b014:	4634      	mov	r4, r6
 800b016:	6876      	ldr	r6, [r6, #4]
 800b018:	e7b9      	b.n	800af8e <_malloc_r+0x46>
 800b01a:	230c      	movs	r3, #12
 800b01c:	603b      	str	r3, [r7, #0]
 800b01e:	4638      	mov	r0, r7
 800b020:	f000 fd8e 	bl	800bb40 <__malloc_unlock>
 800b024:	e7a1      	b.n	800af6a <_malloc_r+0x22>
 800b026:	6025      	str	r5, [r4, #0]
 800b028:	e7de      	b.n	800afe8 <_malloc_r+0xa0>
 800b02a:	bf00      	nop
 800b02c:	200005c0 	.word	0x200005c0

0800b030 <__ssputs_r>:
 800b030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b034:	688e      	ldr	r6, [r1, #8]
 800b036:	429e      	cmp	r6, r3
 800b038:	4682      	mov	sl, r0
 800b03a:	460c      	mov	r4, r1
 800b03c:	4690      	mov	r8, r2
 800b03e:	461f      	mov	r7, r3
 800b040:	d838      	bhi.n	800b0b4 <__ssputs_r+0x84>
 800b042:	898a      	ldrh	r2, [r1, #12]
 800b044:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b048:	d032      	beq.n	800b0b0 <__ssputs_r+0x80>
 800b04a:	6825      	ldr	r5, [r4, #0]
 800b04c:	6909      	ldr	r1, [r1, #16]
 800b04e:	eba5 0901 	sub.w	r9, r5, r1
 800b052:	6965      	ldr	r5, [r4, #20]
 800b054:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b058:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b05c:	3301      	adds	r3, #1
 800b05e:	444b      	add	r3, r9
 800b060:	106d      	asrs	r5, r5, #1
 800b062:	429d      	cmp	r5, r3
 800b064:	bf38      	it	cc
 800b066:	461d      	movcc	r5, r3
 800b068:	0553      	lsls	r3, r2, #21
 800b06a:	d531      	bpl.n	800b0d0 <__ssputs_r+0xa0>
 800b06c:	4629      	mov	r1, r5
 800b06e:	f7ff ff6b 	bl	800af48 <_malloc_r>
 800b072:	4606      	mov	r6, r0
 800b074:	b950      	cbnz	r0, 800b08c <__ssputs_r+0x5c>
 800b076:	230c      	movs	r3, #12
 800b078:	f8ca 3000 	str.w	r3, [sl]
 800b07c:	89a3      	ldrh	r3, [r4, #12]
 800b07e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b082:	81a3      	strh	r3, [r4, #12]
 800b084:	f04f 30ff 	mov.w	r0, #4294967295
 800b088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b08c:	6921      	ldr	r1, [r4, #16]
 800b08e:	464a      	mov	r2, r9
 800b090:	f7ff fb46 	bl	800a720 <memcpy>
 800b094:	89a3      	ldrh	r3, [r4, #12]
 800b096:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b09a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b09e:	81a3      	strh	r3, [r4, #12]
 800b0a0:	6126      	str	r6, [r4, #16]
 800b0a2:	6165      	str	r5, [r4, #20]
 800b0a4:	444e      	add	r6, r9
 800b0a6:	eba5 0509 	sub.w	r5, r5, r9
 800b0aa:	6026      	str	r6, [r4, #0]
 800b0ac:	60a5      	str	r5, [r4, #8]
 800b0ae:	463e      	mov	r6, r7
 800b0b0:	42be      	cmp	r6, r7
 800b0b2:	d900      	bls.n	800b0b6 <__ssputs_r+0x86>
 800b0b4:	463e      	mov	r6, r7
 800b0b6:	6820      	ldr	r0, [r4, #0]
 800b0b8:	4632      	mov	r2, r6
 800b0ba:	4641      	mov	r1, r8
 800b0bc:	f000 fd20 	bl	800bb00 <memmove>
 800b0c0:	68a3      	ldr	r3, [r4, #8]
 800b0c2:	1b9b      	subs	r3, r3, r6
 800b0c4:	60a3      	str	r3, [r4, #8]
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	4433      	add	r3, r6
 800b0ca:	6023      	str	r3, [r4, #0]
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	e7db      	b.n	800b088 <__ssputs_r+0x58>
 800b0d0:	462a      	mov	r2, r5
 800b0d2:	f000 fd3b 	bl	800bb4c <_realloc_r>
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d1e1      	bne.n	800b0a0 <__ssputs_r+0x70>
 800b0dc:	6921      	ldr	r1, [r4, #16]
 800b0de:	4650      	mov	r0, sl
 800b0e0:	f7ff fec6 	bl	800ae70 <_free_r>
 800b0e4:	e7c7      	b.n	800b076 <__ssputs_r+0x46>
	...

0800b0e8 <_svfiprintf_r>:
 800b0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ec:	4698      	mov	r8, r3
 800b0ee:	898b      	ldrh	r3, [r1, #12]
 800b0f0:	061b      	lsls	r3, r3, #24
 800b0f2:	b09d      	sub	sp, #116	; 0x74
 800b0f4:	4607      	mov	r7, r0
 800b0f6:	460d      	mov	r5, r1
 800b0f8:	4614      	mov	r4, r2
 800b0fa:	d50e      	bpl.n	800b11a <_svfiprintf_r+0x32>
 800b0fc:	690b      	ldr	r3, [r1, #16]
 800b0fe:	b963      	cbnz	r3, 800b11a <_svfiprintf_r+0x32>
 800b100:	2140      	movs	r1, #64	; 0x40
 800b102:	f7ff ff21 	bl	800af48 <_malloc_r>
 800b106:	6028      	str	r0, [r5, #0]
 800b108:	6128      	str	r0, [r5, #16]
 800b10a:	b920      	cbnz	r0, 800b116 <_svfiprintf_r+0x2e>
 800b10c:	230c      	movs	r3, #12
 800b10e:	603b      	str	r3, [r7, #0]
 800b110:	f04f 30ff 	mov.w	r0, #4294967295
 800b114:	e0d1      	b.n	800b2ba <_svfiprintf_r+0x1d2>
 800b116:	2340      	movs	r3, #64	; 0x40
 800b118:	616b      	str	r3, [r5, #20]
 800b11a:	2300      	movs	r3, #0
 800b11c:	9309      	str	r3, [sp, #36]	; 0x24
 800b11e:	2320      	movs	r3, #32
 800b120:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b124:	f8cd 800c 	str.w	r8, [sp, #12]
 800b128:	2330      	movs	r3, #48	; 0x30
 800b12a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b2d4 <_svfiprintf_r+0x1ec>
 800b12e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b132:	f04f 0901 	mov.w	r9, #1
 800b136:	4623      	mov	r3, r4
 800b138:	469a      	mov	sl, r3
 800b13a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b13e:	b10a      	cbz	r2, 800b144 <_svfiprintf_r+0x5c>
 800b140:	2a25      	cmp	r2, #37	; 0x25
 800b142:	d1f9      	bne.n	800b138 <_svfiprintf_r+0x50>
 800b144:	ebba 0b04 	subs.w	fp, sl, r4
 800b148:	d00b      	beq.n	800b162 <_svfiprintf_r+0x7a>
 800b14a:	465b      	mov	r3, fp
 800b14c:	4622      	mov	r2, r4
 800b14e:	4629      	mov	r1, r5
 800b150:	4638      	mov	r0, r7
 800b152:	f7ff ff6d 	bl	800b030 <__ssputs_r>
 800b156:	3001      	adds	r0, #1
 800b158:	f000 80aa 	beq.w	800b2b0 <_svfiprintf_r+0x1c8>
 800b15c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b15e:	445a      	add	r2, fp
 800b160:	9209      	str	r2, [sp, #36]	; 0x24
 800b162:	f89a 3000 	ldrb.w	r3, [sl]
 800b166:	2b00      	cmp	r3, #0
 800b168:	f000 80a2 	beq.w	800b2b0 <_svfiprintf_r+0x1c8>
 800b16c:	2300      	movs	r3, #0
 800b16e:	f04f 32ff 	mov.w	r2, #4294967295
 800b172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b176:	f10a 0a01 	add.w	sl, sl, #1
 800b17a:	9304      	str	r3, [sp, #16]
 800b17c:	9307      	str	r3, [sp, #28]
 800b17e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b182:	931a      	str	r3, [sp, #104]	; 0x68
 800b184:	4654      	mov	r4, sl
 800b186:	2205      	movs	r2, #5
 800b188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b18c:	4851      	ldr	r0, [pc, #324]	; (800b2d4 <_svfiprintf_r+0x1ec>)
 800b18e:	f7f5 f82f 	bl	80001f0 <memchr>
 800b192:	9a04      	ldr	r2, [sp, #16]
 800b194:	b9d8      	cbnz	r0, 800b1ce <_svfiprintf_r+0xe6>
 800b196:	06d0      	lsls	r0, r2, #27
 800b198:	bf44      	itt	mi
 800b19a:	2320      	movmi	r3, #32
 800b19c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1a0:	0711      	lsls	r1, r2, #28
 800b1a2:	bf44      	itt	mi
 800b1a4:	232b      	movmi	r3, #43	; 0x2b
 800b1a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b1ae:	2b2a      	cmp	r3, #42	; 0x2a
 800b1b0:	d015      	beq.n	800b1de <_svfiprintf_r+0xf6>
 800b1b2:	9a07      	ldr	r2, [sp, #28]
 800b1b4:	4654      	mov	r4, sl
 800b1b6:	2000      	movs	r0, #0
 800b1b8:	f04f 0c0a 	mov.w	ip, #10
 800b1bc:	4621      	mov	r1, r4
 800b1be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1c2:	3b30      	subs	r3, #48	; 0x30
 800b1c4:	2b09      	cmp	r3, #9
 800b1c6:	d94e      	bls.n	800b266 <_svfiprintf_r+0x17e>
 800b1c8:	b1b0      	cbz	r0, 800b1f8 <_svfiprintf_r+0x110>
 800b1ca:	9207      	str	r2, [sp, #28]
 800b1cc:	e014      	b.n	800b1f8 <_svfiprintf_r+0x110>
 800b1ce:	eba0 0308 	sub.w	r3, r0, r8
 800b1d2:	fa09 f303 	lsl.w	r3, r9, r3
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	9304      	str	r3, [sp, #16]
 800b1da:	46a2      	mov	sl, r4
 800b1dc:	e7d2      	b.n	800b184 <_svfiprintf_r+0x9c>
 800b1de:	9b03      	ldr	r3, [sp, #12]
 800b1e0:	1d19      	adds	r1, r3, #4
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	9103      	str	r1, [sp, #12]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	bfbb      	ittet	lt
 800b1ea:	425b      	neglt	r3, r3
 800b1ec:	f042 0202 	orrlt.w	r2, r2, #2
 800b1f0:	9307      	strge	r3, [sp, #28]
 800b1f2:	9307      	strlt	r3, [sp, #28]
 800b1f4:	bfb8      	it	lt
 800b1f6:	9204      	strlt	r2, [sp, #16]
 800b1f8:	7823      	ldrb	r3, [r4, #0]
 800b1fa:	2b2e      	cmp	r3, #46	; 0x2e
 800b1fc:	d10c      	bne.n	800b218 <_svfiprintf_r+0x130>
 800b1fe:	7863      	ldrb	r3, [r4, #1]
 800b200:	2b2a      	cmp	r3, #42	; 0x2a
 800b202:	d135      	bne.n	800b270 <_svfiprintf_r+0x188>
 800b204:	9b03      	ldr	r3, [sp, #12]
 800b206:	1d1a      	adds	r2, r3, #4
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	9203      	str	r2, [sp, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	bfb8      	it	lt
 800b210:	f04f 33ff 	movlt.w	r3, #4294967295
 800b214:	3402      	adds	r4, #2
 800b216:	9305      	str	r3, [sp, #20]
 800b218:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b2e4 <_svfiprintf_r+0x1fc>
 800b21c:	7821      	ldrb	r1, [r4, #0]
 800b21e:	2203      	movs	r2, #3
 800b220:	4650      	mov	r0, sl
 800b222:	f7f4 ffe5 	bl	80001f0 <memchr>
 800b226:	b140      	cbz	r0, 800b23a <_svfiprintf_r+0x152>
 800b228:	2340      	movs	r3, #64	; 0x40
 800b22a:	eba0 000a 	sub.w	r0, r0, sl
 800b22e:	fa03 f000 	lsl.w	r0, r3, r0
 800b232:	9b04      	ldr	r3, [sp, #16]
 800b234:	4303      	orrs	r3, r0
 800b236:	3401      	adds	r4, #1
 800b238:	9304      	str	r3, [sp, #16]
 800b23a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b23e:	4826      	ldr	r0, [pc, #152]	; (800b2d8 <_svfiprintf_r+0x1f0>)
 800b240:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b244:	2206      	movs	r2, #6
 800b246:	f7f4 ffd3 	bl	80001f0 <memchr>
 800b24a:	2800      	cmp	r0, #0
 800b24c:	d038      	beq.n	800b2c0 <_svfiprintf_r+0x1d8>
 800b24e:	4b23      	ldr	r3, [pc, #140]	; (800b2dc <_svfiprintf_r+0x1f4>)
 800b250:	bb1b      	cbnz	r3, 800b29a <_svfiprintf_r+0x1b2>
 800b252:	9b03      	ldr	r3, [sp, #12]
 800b254:	3307      	adds	r3, #7
 800b256:	f023 0307 	bic.w	r3, r3, #7
 800b25a:	3308      	adds	r3, #8
 800b25c:	9303      	str	r3, [sp, #12]
 800b25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b260:	4433      	add	r3, r6
 800b262:	9309      	str	r3, [sp, #36]	; 0x24
 800b264:	e767      	b.n	800b136 <_svfiprintf_r+0x4e>
 800b266:	fb0c 3202 	mla	r2, ip, r2, r3
 800b26a:	460c      	mov	r4, r1
 800b26c:	2001      	movs	r0, #1
 800b26e:	e7a5      	b.n	800b1bc <_svfiprintf_r+0xd4>
 800b270:	2300      	movs	r3, #0
 800b272:	3401      	adds	r4, #1
 800b274:	9305      	str	r3, [sp, #20]
 800b276:	4619      	mov	r1, r3
 800b278:	f04f 0c0a 	mov.w	ip, #10
 800b27c:	4620      	mov	r0, r4
 800b27e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b282:	3a30      	subs	r2, #48	; 0x30
 800b284:	2a09      	cmp	r2, #9
 800b286:	d903      	bls.n	800b290 <_svfiprintf_r+0x1a8>
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d0c5      	beq.n	800b218 <_svfiprintf_r+0x130>
 800b28c:	9105      	str	r1, [sp, #20]
 800b28e:	e7c3      	b.n	800b218 <_svfiprintf_r+0x130>
 800b290:	fb0c 2101 	mla	r1, ip, r1, r2
 800b294:	4604      	mov	r4, r0
 800b296:	2301      	movs	r3, #1
 800b298:	e7f0      	b.n	800b27c <_svfiprintf_r+0x194>
 800b29a:	ab03      	add	r3, sp, #12
 800b29c:	9300      	str	r3, [sp, #0]
 800b29e:	462a      	mov	r2, r5
 800b2a0:	4b0f      	ldr	r3, [pc, #60]	; (800b2e0 <_svfiprintf_r+0x1f8>)
 800b2a2:	a904      	add	r1, sp, #16
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	f7fd fea3 	bl	8008ff0 <_printf_float>
 800b2aa:	1c42      	adds	r2, r0, #1
 800b2ac:	4606      	mov	r6, r0
 800b2ae:	d1d6      	bne.n	800b25e <_svfiprintf_r+0x176>
 800b2b0:	89ab      	ldrh	r3, [r5, #12]
 800b2b2:	065b      	lsls	r3, r3, #25
 800b2b4:	f53f af2c 	bmi.w	800b110 <_svfiprintf_r+0x28>
 800b2b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2ba:	b01d      	add	sp, #116	; 0x74
 800b2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c0:	ab03      	add	r3, sp, #12
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	462a      	mov	r2, r5
 800b2c6:	4b06      	ldr	r3, [pc, #24]	; (800b2e0 <_svfiprintf_r+0x1f8>)
 800b2c8:	a904      	add	r1, sp, #16
 800b2ca:	4638      	mov	r0, r7
 800b2cc:	f7fe f934 	bl	8009538 <_printf_i>
 800b2d0:	e7eb      	b.n	800b2aa <_svfiprintf_r+0x1c2>
 800b2d2:	bf00      	nop
 800b2d4:	0800cf54 	.word	0x0800cf54
 800b2d8:	0800cf5e 	.word	0x0800cf5e
 800b2dc:	08008ff1 	.word	0x08008ff1
 800b2e0:	0800b031 	.word	0x0800b031
 800b2e4:	0800cf5a 	.word	0x0800cf5a

0800b2e8 <__sfputc_r>:
 800b2e8:	6893      	ldr	r3, [r2, #8]
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	b410      	push	{r4}
 800b2f0:	6093      	str	r3, [r2, #8]
 800b2f2:	da08      	bge.n	800b306 <__sfputc_r+0x1e>
 800b2f4:	6994      	ldr	r4, [r2, #24]
 800b2f6:	42a3      	cmp	r3, r4
 800b2f8:	db01      	blt.n	800b2fe <__sfputc_r+0x16>
 800b2fa:	290a      	cmp	r1, #10
 800b2fc:	d103      	bne.n	800b306 <__sfputc_r+0x1e>
 800b2fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b302:	f000 b99f 	b.w	800b644 <__swbuf_r>
 800b306:	6813      	ldr	r3, [r2, #0]
 800b308:	1c58      	adds	r0, r3, #1
 800b30a:	6010      	str	r0, [r2, #0]
 800b30c:	7019      	strb	r1, [r3, #0]
 800b30e:	4608      	mov	r0, r1
 800b310:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <__sfputs_r>:
 800b316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b318:	4606      	mov	r6, r0
 800b31a:	460f      	mov	r7, r1
 800b31c:	4614      	mov	r4, r2
 800b31e:	18d5      	adds	r5, r2, r3
 800b320:	42ac      	cmp	r4, r5
 800b322:	d101      	bne.n	800b328 <__sfputs_r+0x12>
 800b324:	2000      	movs	r0, #0
 800b326:	e007      	b.n	800b338 <__sfputs_r+0x22>
 800b328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b32c:	463a      	mov	r2, r7
 800b32e:	4630      	mov	r0, r6
 800b330:	f7ff ffda 	bl	800b2e8 <__sfputc_r>
 800b334:	1c43      	adds	r3, r0, #1
 800b336:	d1f3      	bne.n	800b320 <__sfputs_r+0xa>
 800b338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b33c <_vfiprintf_r>:
 800b33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b340:	460d      	mov	r5, r1
 800b342:	b09d      	sub	sp, #116	; 0x74
 800b344:	4614      	mov	r4, r2
 800b346:	4698      	mov	r8, r3
 800b348:	4606      	mov	r6, r0
 800b34a:	b118      	cbz	r0, 800b354 <_vfiprintf_r+0x18>
 800b34c:	6983      	ldr	r3, [r0, #24]
 800b34e:	b90b      	cbnz	r3, 800b354 <_vfiprintf_r+0x18>
 800b350:	f7ff f938 	bl	800a5c4 <__sinit>
 800b354:	4b89      	ldr	r3, [pc, #548]	; (800b57c <_vfiprintf_r+0x240>)
 800b356:	429d      	cmp	r5, r3
 800b358:	d11b      	bne.n	800b392 <_vfiprintf_r+0x56>
 800b35a:	6875      	ldr	r5, [r6, #4]
 800b35c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b35e:	07d9      	lsls	r1, r3, #31
 800b360:	d405      	bmi.n	800b36e <_vfiprintf_r+0x32>
 800b362:	89ab      	ldrh	r3, [r5, #12]
 800b364:	059a      	lsls	r2, r3, #22
 800b366:	d402      	bmi.n	800b36e <_vfiprintf_r+0x32>
 800b368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b36a:	f7ff f9ce 	bl	800a70a <__retarget_lock_acquire_recursive>
 800b36e:	89ab      	ldrh	r3, [r5, #12]
 800b370:	071b      	lsls	r3, r3, #28
 800b372:	d501      	bpl.n	800b378 <_vfiprintf_r+0x3c>
 800b374:	692b      	ldr	r3, [r5, #16]
 800b376:	b9eb      	cbnz	r3, 800b3b4 <_vfiprintf_r+0x78>
 800b378:	4629      	mov	r1, r5
 800b37a:	4630      	mov	r0, r6
 800b37c:	f000 f9c6 	bl	800b70c <__swsetup_r>
 800b380:	b1c0      	cbz	r0, 800b3b4 <_vfiprintf_r+0x78>
 800b382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b384:	07dc      	lsls	r4, r3, #31
 800b386:	d50e      	bpl.n	800b3a6 <_vfiprintf_r+0x6a>
 800b388:	f04f 30ff 	mov.w	r0, #4294967295
 800b38c:	b01d      	add	sp, #116	; 0x74
 800b38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b392:	4b7b      	ldr	r3, [pc, #492]	; (800b580 <_vfiprintf_r+0x244>)
 800b394:	429d      	cmp	r5, r3
 800b396:	d101      	bne.n	800b39c <_vfiprintf_r+0x60>
 800b398:	68b5      	ldr	r5, [r6, #8]
 800b39a:	e7df      	b.n	800b35c <_vfiprintf_r+0x20>
 800b39c:	4b79      	ldr	r3, [pc, #484]	; (800b584 <_vfiprintf_r+0x248>)
 800b39e:	429d      	cmp	r5, r3
 800b3a0:	bf08      	it	eq
 800b3a2:	68f5      	ldreq	r5, [r6, #12]
 800b3a4:	e7da      	b.n	800b35c <_vfiprintf_r+0x20>
 800b3a6:	89ab      	ldrh	r3, [r5, #12]
 800b3a8:	0598      	lsls	r0, r3, #22
 800b3aa:	d4ed      	bmi.n	800b388 <_vfiprintf_r+0x4c>
 800b3ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3ae:	f7ff f9ad 	bl	800a70c <__retarget_lock_release_recursive>
 800b3b2:	e7e9      	b.n	800b388 <_vfiprintf_r+0x4c>
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3b8:	2320      	movs	r3, #32
 800b3ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3be:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3c2:	2330      	movs	r3, #48	; 0x30
 800b3c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b588 <_vfiprintf_r+0x24c>
 800b3c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3cc:	f04f 0901 	mov.w	r9, #1
 800b3d0:	4623      	mov	r3, r4
 800b3d2:	469a      	mov	sl, r3
 800b3d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3d8:	b10a      	cbz	r2, 800b3de <_vfiprintf_r+0xa2>
 800b3da:	2a25      	cmp	r2, #37	; 0x25
 800b3dc:	d1f9      	bne.n	800b3d2 <_vfiprintf_r+0x96>
 800b3de:	ebba 0b04 	subs.w	fp, sl, r4
 800b3e2:	d00b      	beq.n	800b3fc <_vfiprintf_r+0xc0>
 800b3e4:	465b      	mov	r3, fp
 800b3e6:	4622      	mov	r2, r4
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	f7ff ff93 	bl	800b316 <__sfputs_r>
 800b3f0:	3001      	adds	r0, #1
 800b3f2:	f000 80aa 	beq.w	800b54a <_vfiprintf_r+0x20e>
 800b3f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3f8:	445a      	add	r2, fp
 800b3fa:	9209      	str	r2, [sp, #36]	; 0x24
 800b3fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b400:	2b00      	cmp	r3, #0
 800b402:	f000 80a2 	beq.w	800b54a <_vfiprintf_r+0x20e>
 800b406:	2300      	movs	r3, #0
 800b408:	f04f 32ff 	mov.w	r2, #4294967295
 800b40c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b410:	f10a 0a01 	add.w	sl, sl, #1
 800b414:	9304      	str	r3, [sp, #16]
 800b416:	9307      	str	r3, [sp, #28]
 800b418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b41c:	931a      	str	r3, [sp, #104]	; 0x68
 800b41e:	4654      	mov	r4, sl
 800b420:	2205      	movs	r2, #5
 800b422:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b426:	4858      	ldr	r0, [pc, #352]	; (800b588 <_vfiprintf_r+0x24c>)
 800b428:	f7f4 fee2 	bl	80001f0 <memchr>
 800b42c:	9a04      	ldr	r2, [sp, #16]
 800b42e:	b9d8      	cbnz	r0, 800b468 <_vfiprintf_r+0x12c>
 800b430:	06d1      	lsls	r1, r2, #27
 800b432:	bf44      	itt	mi
 800b434:	2320      	movmi	r3, #32
 800b436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b43a:	0713      	lsls	r3, r2, #28
 800b43c:	bf44      	itt	mi
 800b43e:	232b      	movmi	r3, #43	; 0x2b
 800b440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b444:	f89a 3000 	ldrb.w	r3, [sl]
 800b448:	2b2a      	cmp	r3, #42	; 0x2a
 800b44a:	d015      	beq.n	800b478 <_vfiprintf_r+0x13c>
 800b44c:	9a07      	ldr	r2, [sp, #28]
 800b44e:	4654      	mov	r4, sl
 800b450:	2000      	movs	r0, #0
 800b452:	f04f 0c0a 	mov.w	ip, #10
 800b456:	4621      	mov	r1, r4
 800b458:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b45c:	3b30      	subs	r3, #48	; 0x30
 800b45e:	2b09      	cmp	r3, #9
 800b460:	d94e      	bls.n	800b500 <_vfiprintf_r+0x1c4>
 800b462:	b1b0      	cbz	r0, 800b492 <_vfiprintf_r+0x156>
 800b464:	9207      	str	r2, [sp, #28]
 800b466:	e014      	b.n	800b492 <_vfiprintf_r+0x156>
 800b468:	eba0 0308 	sub.w	r3, r0, r8
 800b46c:	fa09 f303 	lsl.w	r3, r9, r3
 800b470:	4313      	orrs	r3, r2
 800b472:	9304      	str	r3, [sp, #16]
 800b474:	46a2      	mov	sl, r4
 800b476:	e7d2      	b.n	800b41e <_vfiprintf_r+0xe2>
 800b478:	9b03      	ldr	r3, [sp, #12]
 800b47a:	1d19      	adds	r1, r3, #4
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	9103      	str	r1, [sp, #12]
 800b480:	2b00      	cmp	r3, #0
 800b482:	bfbb      	ittet	lt
 800b484:	425b      	neglt	r3, r3
 800b486:	f042 0202 	orrlt.w	r2, r2, #2
 800b48a:	9307      	strge	r3, [sp, #28]
 800b48c:	9307      	strlt	r3, [sp, #28]
 800b48e:	bfb8      	it	lt
 800b490:	9204      	strlt	r2, [sp, #16]
 800b492:	7823      	ldrb	r3, [r4, #0]
 800b494:	2b2e      	cmp	r3, #46	; 0x2e
 800b496:	d10c      	bne.n	800b4b2 <_vfiprintf_r+0x176>
 800b498:	7863      	ldrb	r3, [r4, #1]
 800b49a:	2b2a      	cmp	r3, #42	; 0x2a
 800b49c:	d135      	bne.n	800b50a <_vfiprintf_r+0x1ce>
 800b49e:	9b03      	ldr	r3, [sp, #12]
 800b4a0:	1d1a      	adds	r2, r3, #4
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	9203      	str	r2, [sp, #12]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	bfb8      	it	lt
 800b4aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4ae:	3402      	adds	r4, #2
 800b4b0:	9305      	str	r3, [sp, #20]
 800b4b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b598 <_vfiprintf_r+0x25c>
 800b4b6:	7821      	ldrb	r1, [r4, #0]
 800b4b8:	2203      	movs	r2, #3
 800b4ba:	4650      	mov	r0, sl
 800b4bc:	f7f4 fe98 	bl	80001f0 <memchr>
 800b4c0:	b140      	cbz	r0, 800b4d4 <_vfiprintf_r+0x198>
 800b4c2:	2340      	movs	r3, #64	; 0x40
 800b4c4:	eba0 000a 	sub.w	r0, r0, sl
 800b4c8:	fa03 f000 	lsl.w	r0, r3, r0
 800b4cc:	9b04      	ldr	r3, [sp, #16]
 800b4ce:	4303      	orrs	r3, r0
 800b4d0:	3401      	adds	r4, #1
 800b4d2:	9304      	str	r3, [sp, #16]
 800b4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d8:	482c      	ldr	r0, [pc, #176]	; (800b58c <_vfiprintf_r+0x250>)
 800b4da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4de:	2206      	movs	r2, #6
 800b4e0:	f7f4 fe86 	bl	80001f0 <memchr>
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d03f      	beq.n	800b568 <_vfiprintf_r+0x22c>
 800b4e8:	4b29      	ldr	r3, [pc, #164]	; (800b590 <_vfiprintf_r+0x254>)
 800b4ea:	bb1b      	cbnz	r3, 800b534 <_vfiprintf_r+0x1f8>
 800b4ec:	9b03      	ldr	r3, [sp, #12]
 800b4ee:	3307      	adds	r3, #7
 800b4f0:	f023 0307 	bic.w	r3, r3, #7
 800b4f4:	3308      	adds	r3, #8
 800b4f6:	9303      	str	r3, [sp, #12]
 800b4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4fa:	443b      	add	r3, r7
 800b4fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b4fe:	e767      	b.n	800b3d0 <_vfiprintf_r+0x94>
 800b500:	fb0c 3202 	mla	r2, ip, r2, r3
 800b504:	460c      	mov	r4, r1
 800b506:	2001      	movs	r0, #1
 800b508:	e7a5      	b.n	800b456 <_vfiprintf_r+0x11a>
 800b50a:	2300      	movs	r3, #0
 800b50c:	3401      	adds	r4, #1
 800b50e:	9305      	str	r3, [sp, #20]
 800b510:	4619      	mov	r1, r3
 800b512:	f04f 0c0a 	mov.w	ip, #10
 800b516:	4620      	mov	r0, r4
 800b518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b51c:	3a30      	subs	r2, #48	; 0x30
 800b51e:	2a09      	cmp	r2, #9
 800b520:	d903      	bls.n	800b52a <_vfiprintf_r+0x1ee>
 800b522:	2b00      	cmp	r3, #0
 800b524:	d0c5      	beq.n	800b4b2 <_vfiprintf_r+0x176>
 800b526:	9105      	str	r1, [sp, #20]
 800b528:	e7c3      	b.n	800b4b2 <_vfiprintf_r+0x176>
 800b52a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b52e:	4604      	mov	r4, r0
 800b530:	2301      	movs	r3, #1
 800b532:	e7f0      	b.n	800b516 <_vfiprintf_r+0x1da>
 800b534:	ab03      	add	r3, sp, #12
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	462a      	mov	r2, r5
 800b53a:	4b16      	ldr	r3, [pc, #88]	; (800b594 <_vfiprintf_r+0x258>)
 800b53c:	a904      	add	r1, sp, #16
 800b53e:	4630      	mov	r0, r6
 800b540:	f7fd fd56 	bl	8008ff0 <_printf_float>
 800b544:	4607      	mov	r7, r0
 800b546:	1c78      	adds	r0, r7, #1
 800b548:	d1d6      	bne.n	800b4f8 <_vfiprintf_r+0x1bc>
 800b54a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b54c:	07d9      	lsls	r1, r3, #31
 800b54e:	d405      	bmi.n	800b55c <_vfiprintf_r+0x220>
 800b550:	89ab      	ldrh	r3, [r5, #12]
 800b552:	059a      	lsls	r2, r3, #22
 800b554:	d402      	bmi.n	800b55c <_vfiprintf_r+0x220>
 800b556:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b558:	f7ff f8d8 	bl	800a70c <__retarget_lock_release_recursive>
 800b55c:	89ab      	ldrh	r3, [r5, #12]
 800b55e:	065b      	lsls	r3, r3, #25
 800b560:	f53f af12 	bmi.w	800b388 <_vfiprintf_r+0x4c>
 800b564:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b566:	e711      	b.n	800b38c <_vfiprintf_r+0x50>
 800b568:	ab03      	add	r3, sp, #12
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	462a      	mov	r2, r5
 800b56e:	4b09      	ldr	r3, [pc, #36]	; (800b594 <_vfiprintf_r+0x258>)
 800b570:	a904      	add	r1, sp, #16
 800b572:	4630      	mov	r0, r6
 800b574:	f7fd ffe0 	bl	8009538 <_printf_i>
 800b578:	e7e4      	b.n	800b544 <_vfiprintf_r+0x208>
 800b57a:	bf00      	nop
 800b57c:	0800cdbc 	.word	0x0800cdbc
 800b580:	0800cddc 	.word	0x0800cddc
 800b584:	0800cd9c 	.word	0x0800cd9c
 800b588:	0800cf54 	.word	0x0800cf54
 800b58c:	0800cf5e 	.word	0x0800cf5e
 800b590:	08008ff1 	.word	0x08008ff1
 800b594:	0800b317 	.word	0x0800b317
 800b598:	0800cf5a 	.word	0x0800cf5a

0800b59c <_sbrk_r>:
 800b59c:	b538      	push	{r3, r4, r5, lr}
 800b59e:	4d06      	ldr	r5, [pc, #24]	; (800b5b8 <_sbrk_r+0x1c>)
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	4608      	mov	r0, r1
 800b5a6:	602b      	str	r3, [r5, #0]
 800b5a8:	f7f6 fae6 	bl	8001b78 <_sbrk>
 800b5ac:	1c43      	adds	r3, r0, #1
 800b5ae:	d102      	bne.n	800b5b6 <_sbrk_r+0x1a>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	b103      	cbz	r3, 800b5b6 <_sbrk_r+0x1a>
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	bd38      	pop	{r3, r4, r5, pc}
 800b5b8:	200005c8 	.word	0x200005c8

0800b5bc <__sread>:
 800b5bc:	b510      	push	{r4, lr}
 800b5be:	460c      	mov	r4, r1
 800b5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c4:	f000 faf2 	bl	800bbac <_read_r>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	bfab      	itete	ge
 800b5cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5ce:	89a3      	ldrhlt	r3, [r4, #12]
 800b5d0:	181b      	addge	r3, r3, r0
 800b5d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5d6:	bfac      	ite	ge
 800b5d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5da:	81a3      	strhlt	r3, [r4, #12]
 800b5dc:	bd10      	pop	{r4, pc}

0800b5de <__swrite>:
 800b5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e2:	461f      	mov	r7, r3
 800b5e4:	898b      	ldrh	r3, [r1, #12]
 800b5e6:	05db      	lsls	r3, r3, #23
 800b5e8:	4605      	mov	r5, r0
 800b5ea:	460c      	mov	r4, r1
 800b5ec:	4616      	mov	r6, r2
 800b5ee:	d505      	bpl.n	800b5fc <__swrite+0x1e>
 800b5f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f000 f9f8 	bl	800b9ec <_lseek_r>
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b602:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b606:	81a3      	strh	r3, [r4, #12]
 800b608:	4632      	mov	r2, r6
 800b60a:	463b      	mov	r3, r7
 800b60c:	4628      	mov	r0, r5
 800b60e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b612:	f000 b869 	b.w	800b6e8 <_write_r>

0800b616 <__sseek>:
 800b616:	b510      	push	{r4, lr}
 800b618:	460c      	mov	r4, r1
 800b61a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b61e:	f000 f9e5 	bl	800b9ec <_lseek_r>
 800b622:	1c43      	adds	r3, r0, #1
 800b624:	89a3      	ldrh	r3, [r4, #12]
 800b626:	bf15      	itete	ne
 800b628:	6560      	strne	r0, [r4, #84]	; 0x54
 800b62a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b62e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b632:	81a3      	strheq	r3, [r4, #12]
 800b634:	bf18      	it	ne
 800b636:	81a3      	strhne	r3, [r4, #12]
 800b638:	bd10      	pop	{r4, pc}

0800b63a <__sclose>:
 800b63a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b63e:	f000 b8f1 	b.w	800b824 <_close_r>
	...

0800b644 <__swbuf_r>:
 800b644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b646:	460e      	mov	r6, r1
 800b648:	4614      	mov	r4, r2
 800b64a:	4605      	mov	r5, r0
 800b64c:	b118      	cbz	r0, 800b656 <__swbuf_r+0x12>
 800b64e:	6983      	ldr	r3, [r0, #24]
 800b650:	b90b      	cbnz	r3, 800b656 <__swbuf_r+0x12>
 800b652:	f7fe ffb7 	bl	800a5c4 <__sinit>
 800b656:	4b21      	ldr	r3, [pc, #132]	; (800b6dc <__swbuf_r+0x98>)
 800b658:	429c      	cmp	r4, r3
 800b65a:	d12b      	bne.n	800b6b4 <__swbuf_r+0x70>
 800b65c:	686c      	ldr	r4, [r5, #4]
 800b65e:	69a3      	ldr	r3, [r4, #24]
 800b660:	60a3      	str	r3, [r4, #8]
 800b662:	89a3      	ldrh	r3, [r4, #12]
 800b664:	071a      	lsls	r2, r3, #28
 800b666:	d52f      	bpl.n	800b6c8 <__swbuf_r+0x84>
 800b668:	6923      	ldr	r3, [r4, #16]
 800b66a:	b36b      	cbz	r3, 800b6c8 <__swbuf_r+0x84>
 800b66c:	6923      	ldr	r3, [r4, #16]
 800b66e:	6820      	ldr	r0, [r4, #0]
 800b670:	1ac0      	subs	r0, r0, r3
 800b672:	6963      	ldr	r3, [r4, #20]
 800b674:	b2f6      	uxtb	r6, r6
 800b676:	4283      	cmp	r3, r0
 800b678:	4637      	mov	r7, r6
 800b67a:	dc04      	bgt.n	800b686 <__swbuf_r+0x42>
 800b67c:	4621      	mov	r1, r4
 800b67e:	4628      	mov	r0, r5
 800b680:	f000 f966 	bl	800b950 <_fflush_r>
 800b684:	bb30      	cbnz	r0, 800b6d4 <__swbuf_r+0x90>
 800b686:	68a3      	ldr	r3, [r4, #8]
 800b688:	3b01      	subs	r3, #1
 800b68a:	60a3      	str	r3, [r4, #8]
 800b68c:	6823      	ldr	r3, [r4, #0]
 800b68e:	1c5a      	adds	r2, r3, #1
 800b690:	6022      	str	r2, [r4, #0]
 800b692:	701e      	strb	r6, [r3, #0]
 800b694:	6963      	ldr	r3, [r4, #20]
 800b696:	3001      	adds	r0, #1
 800b698:	4283      	cmp	r3, r0
 800b69a:	d004      	beq.n	800b6a6 <__swbuf_r+0x62>
 800b69c:	89a3      	ldrh	r3, [r4, #12]
 800b69e:	07db      	lsls	r3, r3, #31
 800b6a0:	d506      	bpl.n	800b6b0 <__swbuf_r+0x6c>
 800b6a2:	2e0a      	cmp	r6, #10
 800b6a4:	d104      	bne.n	800b6b0 <__swbuf_r+0x6c>
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	f000 f951 	bl	800b950 <_fflush_r>
 800b6ae:	b988      	cbnz	r0, 800b6d4 <__swbuf_r+0x90>
 800b6b0:	4638      	mov	r0, r7
 800b6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6b4:	4b0a      	ldr	r3, [pc, #40]	; (800b6e0 <__swbuf_r+0x9c>)
 800b6b6:	429c      	cmp	r4, r3
 800b6b8:	d101      	bne.n	800b6be <__swbuf_r+0x7a>
 800b6ba:	68ac      	ldr	r4, [r5, #8]
 800b6bc:	e7cf      	b.n	800b65e <__swbuf_r+0x1a>
 800b6be:	4b09      	ldr	r3, [pc, #36]	; (800b6e4 <__swbuf_r+0xa0>)
 800b6c0:	429c      	cmp	r4, r3
 800b6c2:	bf08      	it	eq
 800b6c4:	68ec      	ldreq	r4, [r5, #12]
 800b6c6:	e7ca      	b.n	800b65e <__swbuf_r+0x1a>
 800b6c8:	4621      	mov	r1, r4
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	f000 f81e 	bl	800b70c <__swsetup_r>
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	d0cb      	beq.n	800b66c <__swbuf_r+0x28>
 800b6d4:	f04f 37ff 	mov.w	r7, #4294967295
 800b6d8:	e7ea      	b.n	800b6b0 <__swbuf_r+0x6c>
 800b6da:	bf00      	nop
 800b6dc:	0800cdbc 	.word	0x0800cdbc
 800b6e0:	0800cddc 	.word	0x0800cddc
 800b6e4:	0800cd9c 	.word	0x0800cd9c

0800b6e8 <_write_r>:
 800b6e8:	b538      	push	{r3, r4, r5, lr}
 800b6ea:	4d07      	ldr	r5, [pc, #28]	; (800b708 <_write_r+0x20>)
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	4608      	mov	r0, r1
 800b6f0:	4611      	mov	r1, r2
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	602a      	str	r2, [r5, #0]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	f7f6 f9ed 	bl	8001ad6 <_write>
 800b6fc:	1c43      	adds	r3, r0, #1
 800b6fe:	d102      	bne.n	800b706 <_write_r+0x1e>
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	b103      	cbz	r3, 800b706 <_write_r+0x1e>
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	bd38      	pop	{r3, r4, r5, pc}
 800b708:	200005c8 	.word	0x200005c8

0800b70c <__swsetup_r>:
 800b70c:	4b32      	ldr	r3, [pc, #200]	; (800b7d8 <__swsetup_r+0xcc>)
 800b70e:	b570      	push	{r4, r5, r6, lr}
 800b710:	681d      	ldr	r5, [r3, #0]
 800b712:	4606      	mov	r6, r0
 800b714:	460c      	mov	r4, r1
 800b716:	b125      	cbz	r5, 800b722 <__swsetup_r+0x16>
 800b718:	69ab      	ldr	r3, [r5, #24]
 800b71a:	b913      	cbnz	r3, 800b722 <__swsetup_r+0x16>
 800b71c:	4628      	mov	r0, r5
 800b71e:	f7fe ff51 	bl	800a5c4 <__sinit>
 800b722:	4b2e      	ldr	r3, [pc, #184]	; (800b7dc <__swsetup_r+0xd0>)
 800b724:	429c      	cmp	r4, r3
 800b726:	d10f      	bne.n	800b748 <__swsetup_r+0x3c>
 800b728:	686c      	ldr	r4, [r5, #4]
 800b72a:	89a3      	ldrh	r3, [r4, #12]
 800b72c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b730:	0719      	lsls	r1, r3, #28
 800b732:	d42c      	bmi.n	800b78e <__swsetup_r+0x82>
 800b734:	06dd      	lsls	r5, r3, #27
 800b736:	d411      	bmi.n	800b75c <__swsetup_r+0x50>
 800b738:	2309      	movs	r3, #9
 800b73a:	6033      	str	r3, [r6, #0]
 800b73c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b740:	81a3      	strh	r3, [r4, #12]
 800b742:	f04f 30ff 	mov.w	r0, #4294967295
 800b746:	e03e      	b.n	800b7c6 <__swsetup_r+0xba>
 800b748:	4b25      	ldr	r3, [pc, #148]	; (800b7e0 <__swsetup_r+0xd4>)
 800b74a:	429c      	cmp	r4, r3
 800b74c:	d101      	bne.n	800b752 <__swsetup_r+0x46>
 800b74e:	68ac      	ldr	r4, [r5, #8]
 800b750:	e7eb      	b.n	800b72a <__swsetup_r+0x1e>
 800b752:	4b24      	ldr	r3, [pc, #144]	; (800b7e4 <__swsetup_r+0xd8>)
 800b754:	429c      	cmp	r4, r3
 800b756:	bf08      	it	eq
 800b758:	68ec      	ldreq	r4, [r5, #12]
 800b75a:	e7e6      	b.n	800b72a <__swsetup_r+0x1e>
 800b75c:	0758      	lsls	r0, r3, #29
 800b75e:	d512      	bpl.n	800b786 <__swsetup_r+0x7a>
 800b760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b762:	b141      	cbz	r1, 800b776 <__swsetup_r+0x6a>
 800b764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b768:	4299      	cmp	r1, r3
 800b76a:	d002      	beq.n	800b772 <__swsetup_r+0x66>
 800b76c:	4630      	mov	r0, r6
 800b76e:	f7ff fb7f 	bl	800ae70 <_free_r>
 800b772:	2300      	movs	r3, #0
 800b774:	6363      	str	r3, [r4, #52]	; 0x34
 800b776:	89a3      	ldrh	r3, [r4, #12]
 800b778:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b77c:	81a3      	strh	r3, [r4, #12]
 800b77e:	2300      	movs	r3, #0
 800b780:	6063      	str	r3, [r4, #4]
 800b782:	6923      	ldr	r3, [r4, #16]
 800b784:	6023      	str	r3, [r4, #0]
 800b786:	89a3      	ldrh	r3, [r4, #12]
 800b788:	f043 0308 	orr.w	r3, r3, #8
 800b78c:	81a3      	strh	r3, [r4, #12]
 800b78e:	6923      	ldr	r3, [r4, #16]
 800b790:	b94b      	cbnz	r3, 800b7a6 <__swsetup_r+0x9a>
 800b792:	89a3      	ldrh	r3, [r4, #12]
 800b794:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b79c:	d003      	beq.n	800b7a6 <__swsetup_r+0x9a>
 800b79e:	4621      	mov	r1, r4
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	f000 f95b 	bl	800ba5c <__smakebuf_r>
 800b7a6:	89a0      	ldrh	r0, [r4, #12]
 800b7a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7ac:	f010 0301 	ands.w	r3, r0, #1
 800b7b0:	d00a      	beq.n	800b7c8 <__swsetup_r+0xbc>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	60a3      	str	r3, [r4, #8]
 800b7b6:	6963      	ldr	r3, [r4, #20]
 800b7b8:	425b      	negs	r3, r3
 800b7ba:	61a3      	str	r3, [r4, #24]
 800b7bc:	6923      	ldr	r3, [r4, #16]
 800b7be:	b943      	cbnz	r3, 800b7d2 <__swsetup_r+0xc6>
 800b7c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b7c4:	d1ba      	bne.n	800b73c <__swsetup_r+0x30>
 800b7c6:	bd70      	pop	{r4, r5, r6, pc}
 800b7c8:	0781      	lsls	r1, r0, #30
 800b7ca:	bf58      	it	pl
 800b7cc:	6963      	ldrpl	r3, [r4, #20]
 800b7ce:	60a3      	str	r3, [r4, #8]
 800b7d0:	e7f4      	b.n	800b7bc <__swsetup_r+0xb0>
 800b7d2:	2000      	movs	r0, #0
 800b7d4:	e7f7      	b.n	800b7c6 <__swsetup_r+0xba>
 800b7d6:	bf00      	nop
 800b7d8:	200000f4 	.word	0x200000f4
 800b7dc:	0800cdbc 	.word	0x0800cdbc
 800b7e0:	0800cddc 	.word	0x0800cddc
 800b7e4:	0800cd9c 	.word	0x0800cd9c

0800b7e8 <__assert_func>:
 800b7e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7ea:	4614      	mov	r4, r2
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	4b09      	ldr	r3, [pc, #36]	; (800b814 <__assert_func+0x2c>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4605      	mov	r5, r0
 800b7f4:	68d8      	ldr	r0, [r3, #12]
 800b7f6:	b14c      	cbz	r4, 800b80c <__assert_func+0x24>
 800b7f8:	4b07      	ldr	r3, [pc, #28]	; (800b818 <__assert_func+0x30>)
 800b7fa:	9100      	str	r1, [sp, #0]
 800b7fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b800:	4906      	ldr	r1, [pc, #24]	; (800b81c <__assert_func+0x34>)
 800b802:	462b      	mov	r3, r5
 800b804:	f000 f8e0 	bl	800b9c8 <fiprintf>
 800b808:	f000 f9ef 	bl	800bbea <abort>
 800b80c:	4b04      	ldr	r3, [pc, #16]	; (800b820 <__assert_func+0x38>)
 800b80e:	461c      	mov	r4, r3
 800b810:	e7f3      	b.n	800b7fa <__assert_func+0x12>
 800b812:	bf00      	nop
 800b814:	200000f4 	.word	0x200000f4
 800b818:	0800cf65 	.word	0x0800cf65
 800b81c:	0800cf72 	.word	0x0800cf72
 800b820:	0800cfa0 	.word	0x0800cfa0

0800b824 <_close_r>:
 800b824:	b538      	push	{r3, r4, r5, lr}
 800b826:	4d06      	ldr	r5, [pc, #24]	; (800b840 <_close_r+0x1c>)
 800b828:	2300      	movs	r3, #0
 800b82a:	4604      	mov	r4, r0
 800b82c:	4608      	mov	r0, r1
 800b82e:	602b      	str	r3, [r5, #0]
 800b830:	f7f6 f96d 	bl	8001b0e <_close>
 800b834:	1c43      	adds	r3, r0, #1
 800b836:	d102      	bne.n	800b83e <_close_r+0x1a>
 800b838:	682b      	ldr	r3, [r5, #0]
 800b83a:	b103      	cbz	r3, 800b83e <_close_r+0x1a>
 800b83c:	6023      	str	r3, [r4, #0]
 800b83e:	bd38      	pop	{r3, r4, r5, pc}
 800b840:	200005c8 	.word	0x200005c8

0800b844 <__sflush_r>:
 800b844:	898a      	ldrh	r2, [r1, #12]
 800b846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b84a:	4605      	mov	r5, r0
 800b84c:	0710      	lsls	r0, r2, #28
 800b84e:	460c      	mov	r4, r1
 800b850:	d458      	bmi.n	800b904 <__sflush_r+0xc0>
 800b852:	684b      	ldr	r3, [r1, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	dc05      	bgt.n	800b864 <__sflush_r+0x20>
 800b858:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	dc02      	bgt.n	800b864 <__sflush_r+0x20>
 800b85e:	2000      	movs	r0, #0
 800b860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b864:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b866:	2e00      	cmp	r6, #0
 800b868:	d0f9      	beq.n	800b85e <__sflush_r+0x1a>
 800b86a:	2300      	movs	r3, #0
 800b86c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b870:	682f      	ldr	r7, [r5, #0]
 800b872:	602b      	str	r3, [r5, #0]
 800b874:	d032      	beq.n	800b8dc <__sflush_r+0x98>
 800b876:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b878:	89a3      	ldrh	r3, [r4, #12]
 800b87a:	075a      	lsls	r2, r3, #29
 800b87c:	d505      	bpl.n	800b88a <__sflush_r+0x46>
 800b87e:	6863      	ldr	r3, [r4, #4]
 800b880:	1ac0      	subs	r0, r0, r3
 800b882:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b884:	b10b      	cbz	r3, 800b88a <__sflush_r+0x46>
 800b886:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b888:	1ac0      	subs	r0, r0, r3
 800b88a:	2300      	movs	r3, #0
 800b88c:	4602      	mov	r2, r0
 800b88e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b890:	6a21      	ldr	r1, [r4, #32]
 800b892:	4628      	mov	r0, r5
 800b894:	47b0      	blx	r6
 800b896:	1c43      	adds	r3, r0, #1
 800b898:	89a3      	ldrh	r3, [r4, #12]
 800b89a:	d106      	bne.n	800b8aa <__sflush_r+0x66>
 800b89c:	6829      	ldr	r1, [r5, #0]
 800b89e:	291d      	cmp	r1, #29
 800b8a0:	d82c      	bhi.n	800b8fc <__sflush_r+0xb8>
 800b8a2:	4a2a      	ldr	r2, [pc, #168]	; (800b94c <__sflush_r+0x108>)
 800b8a4:	40ca      	lsrs	r2, r1
 800b8a6:	07d6      	lsls	r6, r2, #31
 800b8a8:	d528      	bpl.n	800b8fc <__sflush_r+0xb8>
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	6062      	str	r2, [r4, #4]
 800b8ae:	04d9      	lsls	r1, r3, #19
 800b8b0:	6922      	ldr	r2, [r4, #16]
 800b8b2:	6022      	str	r2, [r4, #0]
 800b8b4:	d504      	bpl.n	800b8c0 <__sflush_r+0x7c>
 800b8b6:	1c42      	adds	r2, r0, #1
 800b8b8:	d101      	bne.n	800b8be <__sflush_r+0x7a>
 800b8ba:	682b      	ldr	r3, [r5, #0]
 800b8bc:	b903      	cbnz	r3, 800b8c0 <__sflush_r+0x7c>
 800b8be:	6560      	str	r0, [r4, #84]	; 0x54
 800b8c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8c2:	602f      	str	r7, [r5, #0]
 800b8c4:	2900      	cmp	r1, #0
 800b8c6:	d0ca      	beq.n	800b85e <__sflush_r+0x1a>
 800b8c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8cc:	4299      	cmp	r1, r3
 800b8ce:	d002      	beq.n	800b8d6 <__sflush_r+0x92>
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	f7ff facd 	bl	800ae70 <_free_r>
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	6360      	str	r0, [r4, #52]	; 0x34
 800b8da:	e7c1      	b.n	800b860 <__sflush_r+0x1c>
 800b8dc:	6a21      	ldr	r1, [r4, #32]
 800b8de:	2301      	movs	r3, #1
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	47b0      	blx	r6
 800b8e4:	1c41      	adds	r1, r0, #1
 800b8e6:	d1c7      	bne.n	800b878 <__sflush_r+0x34>
 800b8e8:	682b      	ldr	r3, [r5, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d0c4      	beq.n	800b878 <__sflush_r+0x34>
 800b8ee:	2b1d      	cmp	r3, #29
 800b8f0:	d001      	beq.n	800b8f6 <__sflush_r+0xb2>
 800b8f2:	2b16      	cmp	r3, #22
 800b8f4:	d101      	bne.n	800b8fa <__sflush_r+0xb6>
 800b8f6:	602f      	str	r7, [r5, #0]
 800b8f8:	e7b1      	b.n	800b85e <__sflush_r+0x1a>
 800b8fa:	89a3      	ldrh	r3, [r4, #12]
 800b8fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b900:	81a3      	strh	r3, [r4, #12]
 800b902:	e7ad      	b.n	800b860 <__sflush_r+0x1c>
 800b904:	690f      	ldr	r7, [r1, #16]
 800b906:	2f00      	cmp	r7, #0
 800b908:	d0a9      	beq.n	800b85e <__sflush_r+0x1a>
 800b90a:	0793      	lsls	r3, r2, #30
 800b90c:	680e      	ldr	r6, [r1, #0]
 800b90e:	bf08      	it	eq
 800b910:	694b      	ldreq	r3, [r1, #20]
 800b912:	600f      	str	r7, [r1, #0]
 800b914:	bf18      	it	ne
 800b916:	2300      	movne	r3, #0
 800b918:	eba6 0807 	sub.w	r8, r6, r7
 800b91c:	608b      	str	r3, [r1, #8]
 800b91e:	f1b8 0f00 	cmp.w	r8, #0
 800b922:	dd9c      	ble.n	800b85e <__sflush_r+0x1a>
 800b924:	6a21      	ldr	r1, [r4, #32]
 800b926:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b928:	4643      	mov	r3, r8
 800b92a:	463a      	mov	r2, r7
 800b92c:	4628      	mov	r0, r5
 800b92e:	47b0      	blx	r6
 800b930:	2800      	cmp	r0, #0
 800b932:	dc06      	bgt.n	800b942 <__sflush_r+0xfe>
 800b934:	89a3      	ldrh	r3, [r4, #12]
 800b936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b93a:	81a3      	strh	r3, [r4, #12]
 800b93c:	f04f 30ff 	mov.w	r0, #4294967295
 800b940:	e78e      	b.n	800b860 <__sflush_r+0x1c>
 800b942:	4407      	add	r7, r0
 800b944:	eba8 0800 	sub.w	r8, r8, r0
 800b948:	e7e9      	b.n	800b91e <__sflush_r+0xda>
 800b94a:	bf00      	nop
 800b94c:	20400001 	.word	0x20400001

0800b950 <_fflush_r>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	690b      	ldr	r3, [r1, #16]
 800b954:	4605      	mov	r5, r0
 800b956:	460c      	mov	r4, r1
 800b958:	b913      	cbnz	r3, 800b960 <_fflush_r+0x10>
 800b95a:	2500      	movs	r5, #0
 800b95c:	4628      	mov	r0, r5
 800b95e:	bd38      	pop	{r3, r4, r5, pc}
 800b960:	b118      	cbz	r0, 800b96a <_fflush_r+0x1a>
 800b962:	6983      	ldr	r3, [r0, #24]
 800b964:	b90b      	cbnz	r3, 800b96a <_fflush_r+0x1a>
 800b966:	f7fe fe2d 	bl	800a5c4 <__sinit>
 800b96a:	4b14      	ldr	r3, [pc, #80]	; (800b9bc <_fflush_r+0x6c>)
 800b96c:	429c      	cmp	r4, r3
 800b96e:	d11b      	bne.n	800b9a8 <_fflush_r+0x58>
 800b970:	686c      	ldr	r4, [r5, #4]
 800b972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d0ef      	beq.n	800b95a <_fflush_r+0xa>
 800b97a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b97c:	07d0      	lsls	r0, r2, #31
 800b97e:	d404      	bmi.n	800b98a <_fflush_r+0x3a>
 800b980:	0599      	lsls	r1, r3, #22
 800b982:	d402      	bmi.n	800b98a <_fflush_r+0x3a>
 800b984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b986:	f7fe fec0 	bl	800a70a <__retarget_lock_acquire_recursive>
 800b98a:	4628      	mov	r0, r5
 800b98c:	4621      	mov	r1, r4
 800b98e:	f7ff ff59 	bl	800b844 <__sflush_r>
 800b992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b994:	07da      	lsls	r2, r3, #31
 800b996:	4605      	mov	r5, r0
 800b998:	d4e0      	bmi.n	800b95c <_fflush_r+0xc>
 800b99a:	89a3      	ldrh	r3, [r4, #12]
 800b99c:	059b      	lsls	r3, r3, #22
 800b99e:	d4dd      	bmi.n	800b95c <_fflush_r+0xc>
 800b9a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9a2:	f7fe feb3 	bl	800a70c <__retarget_lock_release_recursive>
 800b9a6:	e7d9      	b.n	800b95c <_fflush_r+0xc>
 800b9a8:	4b05      	ldr	r3, [pc, #20]	; (800b9c0 <_fflush_r+0x70>)
 800b9aa:	429c      	cmp	r4, r3
 800b9ac:	d101      	bne.n	800b9b2 <_fflush_r+0x62>
 800b9ae:	68ac      	ldr	r4, [r5, #8]
 800b9b0:	e7df      	b.n	800b972 <_fflush_r+0x22>
 800b9b2:	4b04      	ldr	r3, [pc, #16]	; (800b9c4 <_fflush_r+0x74>)
 800b9b4:	429c      	cmp	r4, r3
 800b9b6:	bf08      	it	eq
 800b9b8:	68ec      	ldreq	r4, [r5, #12]
 800b9ba:	e7da      	b.n	800b972 <_fflush_r+0x22>
 800b9bc:	0800cdbc 	.word	0x0800cdbc
 800b9c0:	0800cddc 	.word	0x0800cddc
 800b9c4:	0800cd9c 	.word	0x0800cd9c

0800b9c8 <fiprintf>:
 800b9c8:	b40e      	push	{r1, r2, r3}
 800b9ca:	b503      	push	{r0, r1, lr}
 800b9cc:	4601      	mov	r1, r0
 800b9ce:	ab03      	add	r3, sp, #12
 800b9d0:	4805      	ldr	r0, [pc, #20]	; (800b9e8 <fiprintf+0x20>)
 800b9d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9d6:	6800      	ldr	r0, [r0, #0]
 800b9d8:	9301      	str	r3, [sp, #4]
 800b9da:	f7ff fcaf 	bl	800b33c <_vfiprintf_r>
 800b9de:	b002      	add	sp, #8
 800b9e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9e4:	b003      	add	sp, #12
 800b9e6:	4770      	bx	lr
 800b9e8:	200000f4 	.word	0x200000f4

0800b9ec <_lseek_r>:
 800b9ec:	b538      	push	{r3, r4, r5, lr}
 800b9ee:	4d07      	ldr	r5, [pc, #28]	; (800ba0c <_lseek_r+0x20>)
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	4608      	mov	r0, r1
 800b9f4:	4611      	mov	r1, r2
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	602a      	str	r2, [r5, #0]
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	f7f6 f8ae 	bl	8001b5c <_lseek>
 800ba00:	1c43      	adds	r3, r0, #1
 800ba02:	d102      	bne.n	800ba0a <_lseek_r+0x1e>
 800ba04:	682b      	ldr	r3, [r5, #0]
 800ba06:	b103      	cbz	r3, 800ba0a <_lseek_r+0x1e>
 800ba08:	6023      	str	r3, [r4, #0]
 800ba0a:	bd38      	pop	{r3, r4, r5, pc}
 800ba0c:	200005c8 	.word	0x200005c8

0800ba10 <__swhatbuf_r>:
 800ba10:	b570      	push	{r4, r5, r6, lr}
 800ba12:	460e      	mov	r6, r1
 800ba14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba18:	2900      	cmp	r1, #0
 800ba1a:	b096      	sub	sp, #88	; 0x58
 800ba1c:	4614      	mov	r4, r2
 800ba1e:	461d      	mov	r5, r3
 800ba20:	da08      	bge.n	800ba34 <__swhatbuf_r+0x24>
 800ba22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba26:	2200      	movs	r2, #0
 800ba28:	602a      	str	r2, [r5, #0]
 800ba2a:	061a      	lsls	r2, r3, #24
 800ba2c:	d410      	bmi.n	800ba50 <__swhatbuf_r+0x40>
 800ba2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba32:	e00e      	b.n	800ba52 <__swhatbuf_r+0x42>
 800ba34:	466a      	mov	r2, sp
 800ba36:	f000 f8df 	bl	800bbf8 <_fstat_r>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	dbf1      	blt.n	800ba22 <__swhatbuf_r+0x12>
 800ba3e:	9a01      	ldr	r2, [sp, #4]
 800ba40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba48:	425a      	negs	r2, r3
 800ba4a:	415a      	adcs	r2, r3
 800ba4c:	602a      	str	r2, [r5, #0]
 800ba4e:	e7ee      	b.n	800ba2e <__swhatbuf_r+0x1e>
 800ba50:	2340      	movs	r3, #64	; 0x40
 800ba52:	2000      	movs	r0, #0
 800ba54:	6023      	str	r3, [r4, #0]
 800ba56:	b016      	add	sp, #88	; 0x58
 800ba58:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba5c <__smakebuf_r>:
 800ba5c:	898b      	ldrh	r3, [r1, #12]
 800ba5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba60:	079d      	lsls	r5, r3, #30
 800ba62:	4606      	mov	r6, r0
 800ba64:	460c      	mov	r4, r1
 800ba66:	d507      	bpl.n	800ba78 <__smakebuf_r+0x1c>
 800ba68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba6c:	6023      	str	r3, [r4, #0]
 800ba6e:	6123      	str	r3, [r4, #16]
 800ba70:	2301      	movs	r3, #1
 800ba72:	6163      	str	r3, [r4, #20]
 800ba74:	b002      	add	sp, #8
 800ba76:	bd70      	pop	{r4, r5, r6, pc}
 800ba78:	ab01      	add	r3, sp, #4
 800ba7a:	466a      	mov	r2, sp
 800ba7c:	f7ff ffc8 	bl	800ba10 <__swhatbuf_r>
 800ba80:	9900      	ldr	r1, [sp, #0]
 800ba82:	4605      	mov	r5, r0
 800ba84:	4630      	mov	r0, r6
 800ba86:	f7ff fa5f 	bl	800af48 <_malloc_r>
 800ba8a:	b948      	cbnz	r0, 800baa0 <__smakebuf_r+0x44>
 800ba8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba90:	059a      	lsls	r2, r3, #22
 800ba92:	d4ef      	bmi.n	800ba74 <__smakebuf_r+0x18>
 800ba94:	f023 0303 	bic.w	r3, r3, #3
 800ba98:	f043 0302 	orr.w	r3, r3, #2
 800ba9c:	81a3      	strh	r3, [r4, #12]
 800ba9e:	e7e3      	b.n	800ba68 <__smakebuf_r+0xc>
 800baa0:	4b0d      	ldr	r3, [pc, #52]	; (800bad8 <__smakebuf_r+0x7c>)
 800baa2:	62b3      	str	r3, [r6, #40]	; 0x28
 800baa4:	89a3      	ldrh	r3, [r4, #12]
 800baa6:	6020      	str	r0, [r4, #0]
 800baa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baac:	81a3      	strh	r3, [r4, #12]
 800baae:	9b00      	ldr	r3, [sp, #0]
 800bab0:	6163      	str	r3, [r4, #20]
 800bab2:	9b01      	ldr	r3, [sp, #4]
 800bab4:	6120      	str	r0, [r4, #16]
 800bab6:	b15b      	cbz	r3, 800bad0 <__smakebuf_r+0x74>
 800bab8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800babc:	4630      	mov	r0, r6
 800babe:	f000 f8ad 	bl	800bc1c <_isatty_r>
 800bac2:	b128      	cbz	r0, 800bad0 <__smakebuf_r+0x74>
 800bac4:	89a3      	ldrh	r3, [r4, #12]
 800bac6:	f023 0303 	bic.w	r3, r3, #3
 800baca:	f043 0301 	orr.w	r3, r3, #1
 800bace:	81a3      	strh	r3, [r4, #12]
 800bad0:	89a0      	ldrh	r0, [r4, #12]
 800bad2:	4305      	orrs	r5, r0
 800bad4:	81a5      	strh	r5, [r4, #12]
 800bad6:	e7cd      	b.n	800ba74 <__smakebuf_r+0x18>
 800bad8:	0800a55d 	.word	0x0800a55d

0800badc <__ascii_mbtowc>:
 800badc:	b082      	sub	sp, #8
 800bade:	b901      	cbnz	r1, 800bae2 <__ascii_mbtowc+0x6>
 800bae0:	a901      	add	r1, sp, #4
 800bae2:	b142      	cbz	r2, 800baf6 <__ascii_mbtowc+0x1a>
 800bae4:	b14b      	cbz	r3, 800bafa <__ascii_mbtowc+0x1e>
 800bae6:	7813      	ldrb	r3, [r2, #0]
 800bae8:	600b      	str	r3, [r1, #0]
 800baea:	7812      	ldrb	r2, [r2, #0]
 800baec:	1e10      	subs	r0, r2, #0
 800baee:	bf18      	it	ne
 800baf0:	2001      	movne	r0, #1
 800baf2:	b002      	add	sp, #8
 800baf4:	4770      	bx	lr
 800baf6:	4610      	mov	r0, r2
 800baf8:	e7fb      	b.n	800baf2 <__ascii_mbtowc+0x16>
 800bafa:	f06f 0001 	mvn.w	r0, #1
 800bafe:	e7f8      	b.n	800baf2 <__ascii_mbtowc+0x16>

0800bb00 <memmove>:
 800bb00:	4288      	cmp	r0, r1
 800bb02:	b510      	push	{r4, lr}
 800bb04:	eb01 0402 	add.w	r4, r1, r2
 800bb08:	d902      	bls.n	800bb10 <memmove+0x10>
 800bb0a:	4284      	cmp	r4, r0
 800bb0c:	4623      	mov	r3, r4
 800bb0e:	d807      	bhi.n	800bb20 <memmove+0x20>
 800bb10:	1e43      	subs	r3, r0, #1
 800bb12:	42a1      	cmp	r1, r4
 800bb14:	d008      	beq.n	800bb28 <memmove+0x28>
 800bb16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb1e:	e7f8      	b.n	800bb12 <memmove+0x12>
 800bb20:	4402      	add	r2, r0
 800bb22:	4601      	mov	r1, r0
 800bb24:	428a      	cmp	r2, r1
 800bb26:	d100      	bne.n	800bb2a <memmove+0x2a>
 800bb28:	bd10      	pop	{r4, pc}
 800bb2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb32:	e7f7      	b.n	800bb24 <memmove+0x24>

0800bb34 <__malloc_lock>:
 800bb34:	4801      	ldr	r0, [pc, #4]	; (800bb3c <__malloc_lock+0x8>)
 800bb36:	f7fe bde8 	b.w	800a70a <__retarget_lock_acquire_recursive>
 800bb3a:	bf00      	nop
 800bb3c:	200005bc 	.word	0x200005bc

0800bb40 <__malloc_unlock>:
 800bb40:	4801      	ldr	r0, [pc, #4]	; (800bb48 <__malloc_unlock+0x8>)
 800bb42:	f7fe bde3 	b.w	800a70c <__retarget_lock_release_recursive>
 800bb46:	bf00      	nop
 800bb48:	200005bc 	.word	0x200005bc

0800bb4c <_realloc_r>:
 800bb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb50:	4680      	mov	r8, r0
 800bb52:	4614      	mov	r4, r2
 800bb54:	460e      	mov	r6, r1
 800bb56:	b921      	cbnz	r1, 800bb62 <_realloc_r+0x16>
 800bb58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	f7ff b9f3 	b.w	800af48 <_malloc_r>
 800bb62:	b92a      	cbnz	r2, 800bb70 <_realloc_r+0x24>
 800bb64:	f7ff f984 	bl	800ae70 <_free_r>
 800bb68:	4625      	mov	r5, r4
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb70:	f000 f864 	bl	800bc3c <_malloc_usable_size_r>
 800bb74:	4284      	cmp	r4, r0
 800bb76:	4607      	mov	r7, r0
 800bb78:	d802      	bhi.n	800bb80 <_realloc_r+0x34>
 800bb7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb7e:	d812      	bhi.n	800bba6 <_realloc_r+0x5a>
 800bb80:	4621      	mov	r1, r4
 800bb82:	4640      	mov	r0, r8
 800bb84:	f7ff f9e0 	bl	800af48 <_malloc_r>
 800bb88:	4605      	mov	r5, r0
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d0ed      	beq.n	800bb6a <_realloc_r+0x1e>
 800bb8e:	42bc      	cmp	r4, r7
 800bb90:	4622      	mov	r2, r4
 800bb92:	4631      	mov	r1, r6
 800bb94:	bf28      	it	cs
 800bb96:	463a      	movcs	r2, r7
 800bb98:	f7fe fdc2 	bl	800a720 <memcpy>
 800bb9c:	4631      	mov	r1, r6
 800bb9e:	4640      	mov	r0, r8
 800bba0:	f7ff f966 	bl	800ae70 <_free_r>
 800bba4:	e7e1      	b.n	800bb6a <_realloc_r+0x1e>
 800bba6:	4635      	mov	r5, r6
 800bba8:	e7df      	b.n	800bb6a <_realloc_r+0x1e>
	...

0800bbac <_read_r>:
 800bbac:	b538      	push	{r3, r4, r5, lr}
 800bbae:	4d07      	ldr	r5, [pc, #28]	; (800bbcc <_read_r+0x20>)
 800bbb0:	4604      	mov	r4, r0
 800bbb2:	4608      	mov	r0, r1
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	602a      	str	r2, [r5, #0]
 800bbba:	461a      	mov	r2, r3
 800bbbc:	f7f5 ff6e 	bl	8001a9c <_read>
 800bbc0:	1c43      	adds	r3, r0, #1
 800bbc2:	d102      	bne.n	800bbca <_read_r+0x1e>
 800bbc4:	682b      	ldr	r3, [r5, #0]
 800bbc6:	b103      	cbz	r3, 800bbca <_read_r+0x1e>
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	bd38      	pop	{r3, r4, r5, pc}
 800bbcc:	200005c8 	.word	0x200005c8

0800bbd0 <__ascii_wctomb>:
 800bbd0:	b149      	cbz	r1, 800bbe6 <__ascii_wctomb+0x16>
 800bbd2:	2aff      	cmp	r2, #255	; 0xff
 800bbd4:	bf85      	ittet	hi
 800bbd6:	238a      	movhi	r3, #138	; 0x8a
 800bbd8:	6003      	strhi	r3, [r0, #0]
 800bbda:	700a      	strbls	r2, [r1, #0]
 800bbdc:	f04f 30ff 	movhi.w	r0, #4294967295
 800bbe0:	bf98      	it	ls
 800bbe2:	2001      	movls	r0, #1
 800bbe4:	4770      	bx	lr
 800bbe6:	4608      	mov	r0, r1
 800bbe8:	4770      	bx	lr

0800bbea <abort>:
 800bbea:	b508      	push	{r3, lr}
 800bbec:	2006      	movs	r0, #6
 800bbee:	f000 f855 	bl	800bc9c <raise>
 800bbf2:	2001      	movs	r0, #1
 800bbf4:	f7f5 ff48 	bl	8001a88 <_exit>

0800bbf8 <_fstat_r>:
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	4d07      	ldr	r5, [pc, #28]	; (800bc18 <_fstat_r+0x20>)
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	4604      	mov	r4, r0
 800bc00:	4608      	mov	r0, r1
 800bc02:	4611      	mov	r1, r2
 800bc04:	602b      	str	r3, [r5, #0]
 800bc06:	f7f5 ff8e 	bl	8001b26 <_fstat>
 800bc0a:	1c43      	adds	r3, r0, #1
 800bc0c:	d102      	bne.n	800bc14 <_fstat_r+0x1c>
 800bc0e:	682b      	ldr	r3, [r5, #0]
 800bc10:	b103      	cbz	r3, 800bc14 <_fstat_r+0x1c>
 800bc12:	6023      	str	r3, [r4, #0]
 800bc14:	bd38      	pop	{r3, r4, r5, pc}
 800bc16:	bf00      	nop
 800bc18:	200005c8 	.word	0x200005c8

0800bc1c <_isatty_r>:
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	4d06      	ldr	r5, [pc, #24]	; (800bc38 <_isatty_r+0x1c>)
 800bc20:	2300      	movs	r3, #0
 800bc22:	4604      	mov	r4, r0
 800bc24:	4608      	mov	r0, r1
 800bc26:	602b      	str	r3, [r5, #0]
 800bc28:	f7f5 ff8d 	bl	8001b46 <_isatty>
 800bc2c:	1c43      	adds	r3, r0, #1
 800bc2e:	d102      	bne.n	800bc36 <_isatty_r+0x1a>
 800bc30:	682b      	ldr	r3, [r5, #0]
 800bc32:	b103      	cbz	r3, 800bc36 <_isatty_r+0x1a>
 800bc34:	6023      	str	r3, [r4, #0]
 800bc36:	bd38      	pop	{r3, r4, r5, pc}
 800bc38:	200005c8 	.word	0x200005c8

0800bc3c <_malloc_usable_size_r>:
 800bc3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc40:	1f18      	subs	r0, r3, #4
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	bfbc      	itt	lt
 800bc46:	580b      	ldrlt	r3, [r1, r0]
 800bc48:	18c0      	addlt	r0, r0, r3
 800bc4a:	4770      	bx	lr

0800bc4c <_raise_r>:
 800bc4c:	291f      	cmp	r1, #31
 800bc4e:	b538      	push	{r3, r4, r5, lr}
 800bc50:	4604      	mov	r4, r0
 800bc52:	460d      	mov	r5, r1
 800bc54:	d904      	bls.n	800bc60 <_raise_r+0x14>
 800bc56:	2316      	movs	r3, #22
 800bc58:	6003      	str	r3, [r0, #0]
 800bc5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc5e:	bd38      	pop	{r3, r4, r5, pc}
 800bc60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc62:	b112      	cbz	r2, 800bc6a <_raise_r+0x1e>
 800bc64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc68:	b94b      	cbnz	r3, 800bc7e <_raise_r+0x32>
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	f000 f830 	bl	800bcd0 <_getpid_r>
 800bc70:	462a      	mov	r2, r5
 800bc72:	4601      	mov	r1, r0
 800bc74:	4620      	mov	r0, r4
 800bc76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc7a:	f000 b817 	b.w	800bcac <_kill_r>
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d00a      	beq.n	800bc98 <_raise_r+0x4c>
 800bc82:	1c59      	adds	r1, r3, #1
 800bc84:	d103      	bne.n	800bc8e <_raise_r+0x42>
 800bc86:	2316      	movs	r3, #22
 800bc88:	6003      	str	r3, [r0, #0]
 800bc8a:	2001      	movs	r0, #1
 800bc8c:	e7e7      	b.n	800bc5e <_raise_r+0x12>
 800bc8e:	2400      	movs	r4, #0
 800bc90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc94:	4628      	mov	r0, r5
 800bc96:	4798      	blx	r3
 800bc98:	2000      	movs	r0, #0
 800bc9a:	e7e0      	b.n	800bc5e <_raise_r+0x12>

0800bc9c <raise>:
 800bc9c:	4b02      	ldr	r3, [pc, #8]	; (800bca8 <raise+0xc>)
 800bc9e:	4601      	mov	r1, r0
 800bca0:	6818      	ldr	r0, [r3, #0]
 800bca2:	f7ff bfd3 	b.w	800bc4c <_raise_r>
 800bca6:	bf00      	nop
 800bca8:	200000f4 	.word	0x200000f4

0800bcac <_kill_r>:
 800bcac:	b538      	push	{r3, r4, r5, lr}
 800bcae:	4d07      	ldr	r5, [pc, #28]	; (800bccc <_kill_r+0x20>)
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	4608      	mov	r0, r1
 800bcb6:	4611      	mov	r1, r2
 800bcb8:	602b      	str	r3, [r5, #0]
 800bcba:	f7f5 fed5 	bl	8001a68 <_kill>
 800bcbe:	1c43      	adds	r3, r0, #1
 800bcc0:	d102      	bne.n	800bcc8 <_kill_r+0x1c>
 800bcc2:	682b      	ldr	r3, [r5, #0]
 800bcc4:	b103      	cbz	r3, 800bcc8 <_kill_r+0x1c>
 800bcc6:	6023      	str	r3, [r4, #0]
 800bcc8:	bd38      	pop	{r3, r4, r5, pc}
 800bcca:	bf00      	nop
 800bccc:	200005c8 	.word	0x200005c8

0800bcd0 <_getpid_r>:
 800bcd0:	f7f5 bec2 	b.w	8001a58 <_getpid>

0800bcd4 <trunc>:
 800bcd4:	ec51 0b10 	vmov	r0, r1, d0
 800bcd8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bcdc:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800bce0:	2b13      	cmp	r3, #19
 800bce2:	b5d0      	push	{r4, r6, r7, lr}
 800bce4:	460c      	mov	r4, r1
 800bce6:	dc10      	bgt.n	800bd0a <trunc+0x36>
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	bfa5      	ittet	ge
 800bcec:	4a11      	ldrge	r2, [pc, #68]	; (800bd34 <trunc+0x60>)
 800bcee:	fa42 f303 	asrge.w	r3, r2, r3
 800bcf2:	2100      	movlt	r1, #0
 800bcf4:	2100      	movge	r1, #0
 800bcf6:	bfb9      	ittee	lt
 800bcf8:	2000      	movlt	r0, #0
 800bcfa:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800bcfe:	2000      	movge	r0, #0
 800bd00:	ea24 0103 	bicge.w	r1, r4, r3
 800bd04:	ec41 0b10 	vmov	d0, r0, r1
 800bd08:	bdd0      	pop	{r4, r6, r7, pc}
 800bd0a:	2b33      	cmp	r3, #51	; 0x33
 800bd0c:	dd08      	ble.n	800bd20 <trunc+0x4c>
 800bd0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd12:	d1f7      	bne.n	800bd04 <trunc+0x30>
 800bd14:	ee10 2a10 	vmov	r2, s0
 800bd18:	460b      	mov	r3, r1
 800bd1a:	f7f4 fabf 	bl	800029c <__adddf3>
 800bd1e:	e7f1      	b.n	800bd04 <trunc+0x30>
 800bd20:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800bd24:	f04f 33ff 	mov.w	r3, #4294967295
 800bd28:	fa23 f202 	lsr.w	r2, r3, r2
 800bd2c:	ea20 0602 	bic.w	r6, r0, r2
 800bd30:	4630      	mov	r0, r6
 800bd32:	e7e7      	b.n	800bd04 <trunc+0x30>
 800bd34:	000fffff 	.word	0x000fffff

0800bd38 <pow>:
 800bd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3a:	ed2d 8b02 	vpush	{d8}
 800bd3e:	eeb0 8a40 	vmov.f32	s16, s0
 800bd42:	eef0 8a60 	vmov.f32	s17, s1
 800bd46:	ec55 4b11 	vmov	r4, r5, d1
 800bd4a:	f000 f865 	bl	800be18 <__ieee754_pow>
 800bd4e:	4622      	mov	r2, r4
 800bd50:	462b      	mov	r3, r5
 800bd52:	4620      	mov	r0, r4
 800bd54:	4629      	mov	r1, r5
 800bd56:	ec57 6b10 	vmov	r6, r7, d0
 800bd5a:	f7f4 feef 	bl	8000b3c <__aeabi_dcmpun>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	d13b      	bne.n	800bdda <pow+0xa2>
 800bd62:	ec51 0b18 	vmov	r0, r1, d8
 800bd66:	2200      	movs	r2, #0
 800bd68:	2300      	movs	r3, #0
 800bd6a:	f7f4 feb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd6e:	b1b8      	cbz	r0, 800bda0 <pow+0x68>
 800bd70:	2200      	movs	r2, #0
 800bd72:	2300      	movs	r3, #0
 800bd74:	4620      	mov	r0, r4
 800bd76:	4629      	mov	r1, r5
 800bd78:	f7f4 feae 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	d146      	bne.n	800be0e <pow+0xd6>
 800bd80:	ec45 4b10 	vmov	d0, r4, r5
 800bd84:	f000 fe61 	bl	800ca4a <finite>
 800bd88:	b338      	cbz	r0, 800bdda <pow+0xa2>
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	4620      	mov	r0, r4
 800bd90:	4629      	mov	r1, r5
 800bd92:	f7f4 feab 	bl	8000aec <__aeabi_dcmplt>
 800bd96:	b300      	cbz	r0, 800bdda <pow+0xa2>
 800bd98:	f7fd f858 	bl	8008e4c <__errno>
 800bd9c:	2322      	movs	r3, #34	; 0x22
 800bd9e:	e01b      	b.n	800bdd8 <pow+0xa0>
 800bda0:	ec47 6b10 	vmov	d0, r6, r7
 800bda4:	f000 fe51 	bl	800ca4a <finite>
 800bda8:	b9e0      	cbnz	r0, 800bde4 <pow+0xac>
 800bdaa:	eeb0 0a48 	vmov.f32	s0, s16
 800bdae:	eef0 0a68 	vmov.f32	s1, s17
 800bdb2:	f000 fe4a 	bl	800ca4a <finite>
 800bdb6:	b1a8      	cbz	r0, 800bde4 <pow+0xac>
 800bdb8:	ec45 4b10 	vmov	d0, r4, r5
 800bdbc:	f000 fe45 	bl	800ca4a <finite>
 800bdc0:	b180      	cbz	r0, 800bde4 <pow+0xac>
 800bdc2:	4632      	mov	r2, r6
 800bdc4:	463b      	mov	r3, r7
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	4639      	mov	r1, r7
 800bdca:	f7f4 feb7 	bl	8000b3c <__aeabi_dcmpun>
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	d0e2      	beq.n	800bd98 <pow+0x60>
 800bdd2:	f7fd f83b 	bl	8008e4c <__errno>
 800bdd6:	2321      	movs	r3, #33	; 0x21
 800bdd8:	6003      	str	r3, [r0, #0]
 800bdda:	ecbd 8b02 	vpop	{d8}
 800bdde:	ec47 6b10 	vmov	d0, r6, r7
 800bde2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bde4:	2200      	movs	r2, #0
 800bde6:	2300      	movs	r3, #0
 800bde8:	4630      	mov	r0, r6
 800bdea:	4639      	mov	r1, r7
 800bdec:	f7f4 fe74 	bl	8000ad8 <__aeabi_dcmpeq>
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	d0f2      	beq.n	800bdda <pow+0xa2>
 800bdf4:	eeb0 0a48 	vmov.f32	s0, s16
 800bdf8:	eef0 0a68 	vmov.f32	s1, s17
 800bdfc:	f000 fe25 	bl	800ca4a <finite>
 800be00:	2800      	cmp	r0, #0
 800be02:	d0ea      	beq.n	800bdda <pow+0xa2>
 800be04:	ec45 4b10 	vmov	d0, r4, r5
 800be08:	f000 fe1f 	bl	800ca4a <finite>
 800be0c:	e7c3      	b.n	800bd96 <pow+0x5e>
 800be0e:	4f01      	ldr	r7, [pc, #4]	; (800be14 <pow+0xdc>)
 800be10:	2600      	movs	r6, #0
 800be12:	e7e2      	b.n	800bdda <pow+0xa2>
 800be14:	3ff00000 	.word	0x3ff00000

0800be18 <__ieee754_pow>:
 800be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1c:	ed2d 8b06 	vpush	{d8-d10}
 800be20:	b089      	sub	sp, #36	; 0x24
 800be22:	ed8d 1b00 	vstr	d1, [sp]
 800be26:	e9dd 2900 	ldrd	r2, r9, [sp]
 800be2a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800be2e:	ea58 0102 	orrs.w	r1, r8, r2
 800be32:	ec57 6b10 	vmov	r6, r7, d0
 800be36:	d115      	bne.n	800be64 <__ieee754_pow+0x4c>
 800be38:	19b3      	adds	r3, r6, r6
 800be3a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800be3e:	4152      	adcs	r2, r2
 800be40:	4299      	cmp	r1, r3
 800be42:	4b89      	ldr	r3, [pc, #548]	; (800c068 <__ieee754_pow+0x250>)
 800be44:	4193      	sbcs	r3, r2
 800be46:	f080 84d2 	bcs.w	800c7ee <__ieee754_pow+0x9d6>
 800be4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be4e:	4630      	mov	r0, r6
 800be50:	4639      	mov	r1, r7
 800be52:	f7f4 fa23 	bl	800029c <__adddf3>
 800be56:	ec41 0b10 	vmov	d0, r0, r1
 800be5a:	b009      	add	sp, #36	; 0x24
 800be5c:	ecbd 8b06 	vpop	{d8-d10}
 800be60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be64:	4b81      	ldr	r3, [pc, #516]	; (800c06c <__ieee754_pow+0x254>)
 800be66:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800be6a:	429c      	cmp	r4, r3
 800be6c:	ee10 aa10 	vmov	sl, s0
 800be70:	463d      	mov	r5, r7
 800be72:	dc06      	bgt.n	800be82 <__ieee754_pow+0x6a>
 800be74:	d101      	bne.n	800be7a <__ieee754_pow+0x62>
 800be76:	2e00      	cmp	r6, #0
 800be78:	d1e7      	bne.n	800be4a <__ieee754_pow+0x32>
 800be7a:	4598      	cmp	r8, r3
 800be7c:	dc01      	bgt.n	800be82 <__ieee754_pow+0x6a>
 800be7e:	d10f      	bne.n	800bea0 <__ieee754_pow+0x88>
 800be80:	b172      	cbz	r2, 800bea0 <__ieee754_pow+0x88>
 800be82:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800be86:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800be8a:	ea55 050a 	orrs.w	r5, r5, sl
 800be8e:	d1dc      	bne.n	800be4a <__ieee754_pow+0x32>
 800be90:	e9dd 3200 	ldrd	r3, r2, [sp]
 800be94:	18db      	adds	r3, r3, r3
 800be96:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800be9a:	4152      	adcs	r2, r2
 800be9c:	429d      	cmp	r5, r3
 800be9e:	e7d0      	b.n	800be42 <__ieee754_pow+0x2a>
 800bea0:	2d00      	cmp	r5, #0
 800bea2:	da3b      	bge.n	800bf1c <__ieee754_pow+0x104>
 800bea4:	4b72      	ldr	r3, [pc, #456]	; (800c070 <__ieee754_pow+0x258>)
 800bea6:	4598      	cmp	r8, r3
 800bea8:	dc51      	bgt.n	800bf4e <__ieee754_pow+0x136>
 800beaa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800beae:	4598      	cmp	r8, r3
 800beb0:	f340 84ac 	ble.w	800c80c <__ieee754_pow+0x9f4>
 800beb4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800beb8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bebc:	2b14      	cmp	r3, #20
 800bebe:	dd0f      	ble.n	800bee0 <__ieee754_pow+0xc8>
 800bec0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bec4:	fa22 f103 	lsr.w	r1, r2, r3
 800bec8:	fa01 f303 	lsl.w	r3, r1, r3
 800becc:	4293      	cmp	r3, r2
 800bece:	f040 849d 	bne.w	800c80c <__ieee754_pow+0x9f4>
 800bed2:	f001 0101 	and.w	r1, r1, #1
 800bed6:	f1c1 0302 	rsb	r3, r1, #2
 800beda:	9304      	str	r3, [sp, #16]
 800bedc:	b182      	cbz	r2, 800bf00 <__ieee754_pow+0xe8>
 800bede:	e05f      	b.n	800bfa0 <__ieee754_pow+0x188>
 800bee0:	2a00      	cmp	r2, #0
 800bee2:	d15b      	bne.n	800bf9c <__ieee754_pow+0x184>
 800bee4:	f1c3 0314 	rsb	r3, r3, #20
 800bee8:	fa48 f103 	asr.w	r1, r8, r3
 800beec:	fa01 f303 	lsl.w	r3, r1, r3
 800bef0:	4543      	cmp	r3, r8
 800bef2:	f040 8488 	bne.w	800c806 <__ieee754_pow+0x9ee>
 800bef6:	f001 0101 	and.w	r1, r1, #1
 800befa:	f1c1 0302 	rsb	r3, r1, #2
 800befe:	9304      	str	r3, [sp, #16]
 800bf00:	4b5c      	ldr	r3, [pc, #368]	; (800c074 <__ieee754_pow+0x25c>)
 800bf02:	4598      	cmp	r8, r3
 800bf04:	d132      	bne.n	800bf6c <__ieee754_pow+0x154>
 800bf06:	f1b9 0f00 	cmp.w	r9, #0
 800bf0a:	f280 8478 	bge.w	800c7fe <__ieee754_pow+0x9e6>
 800bf0e:	4959      	ldr	r1, [pc, #356]	; (800c074 <__ieee754_pow+0x25c>)
 800bf10:	4632      	mov	r2, r6
 800bf12:	463b      	mov	r3, r7
 800bf14:	2000      	movs	r0, #0
 800bf16:	f7f4 fca1 	bl	800085c <__aeabi_ddiv>
 800bf1a:	e79c      	b.n	800be56 <__ieee754_pow+0x3e>
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	9304      	str	r3, [sp, #16]
 800bf20:	2a00      	cmp	r2, #0
 800bf22:	d13d      	bne.n	800bfa0 <__ieee754_pow+0x188>
 800bf24:	4b51      	ldr	r3, [pc, #324]	; (800c06c <__ieee754_pow+0x254>)
 800bf26:	4598      	cmp	r8, r3
 800bf28:	d1ea      	bne.n	800bf00 <__ieee754_pow+0xe8>
 800bf2a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bf2e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bf32:	ea53 030a 	orrs.w	r3, r3, sl
 800bf36:	f000 845a 	beq.w	800c7ee <__ieee754_pow+0x9d6>
 800bf3a:	4b4f      	ldr	r3, [pc, #316]	; (800c078 <__ieee754_pow+0x260>)
 800bf3c:	429c      	cmp	r4, r3
 800bf3e:	dd08      	ble.n	800bf52 <__ieee754_pow+0x13a>
 800bf40:	f1b9 0f00 	cmp.w	r9, #0
 800bf44:	f2c0 8457 	blt.w	800c7f6 <__ieee754_pow+0x9de>
 800bf48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf4c:	e783      	b.n	800be56 <__ieee754_pow+0x3e>
 800bf4e:	2302      	movs	r3, #2
 800bf50:	e7e5      	b.n	800bf1e <__ieee754_pow+0x106>
 800bf52:	f1b9 0f00 	cmp.w	r9, #0
 800bf56:	f04f 0000 	mov.w	r0, #0
 800bf5a:	f04f 0100 	mov.w	r1, #0
 800bf5e:	f6bf af7a 	bge.w	800be56 <__ieee754_pow+0x3e>
 800bf62:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bf66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bf6a:	e774      	b.n	800be56 <__ieee754_pow+0x3e>
 800bf6c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bf70:	d106      	bne.n	800bf80 <__ieee754_pow+0x168>
 800bf72:	4632      	mov	r2, r6
 800bf74:	463b      	mov	r3, r7
 800bf76:	4630      	mov	r0, r6
 800bf78:	4639      	mov	r1, r7
 800bf7a:	f7f4 fb45 	bl	8000608 <__aeabi_dmul>
 800bf7e:	e76a      	b.n	800be56 <__ieee754_pow+0x3e>
 800bf80:	4b3e      	ldr	r3, [pc, #248]	; (800c07c <__ieee754_pow+0x264>)
 800bf82:	4599      	cmp	r9, r3
 800bf84:	d10c      	bne.n	800bfa0 <__ieee754_pow+0x188>
 800bf86:	2d00      	cmp	r5, #0
 800bf88:	db0a      	blt.n	800bfa0 <__ieee754_pow+0x188>
 800bf8a:	ec47 6b10 	vmov	d0, r6, r7
 800bf8e:	b009      	add	sp, #36	; 0x24
 800bf90:	ecbd 8b06 	vpop	{d8-d10}
 800bf94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf98:	f000 bc6c 	b.w	800c874 <__ieee754_sqrt>
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	9304      	str	r3, [sp, #16]
 800bfa0:	ec47 6b10 	vmov	d0, r6, r7
 800bfa4:	f000 fd48 	bl	800ca38 <fabs>
 800bfa8:	ec51 0b10 	vmov	r0, r1, d0
 800bfac:	f1ba 0f00 	cmp.w	sl, #0
 800bfb0:	d129      	bne.n	800c006 <__ieee754_pow+0x1ee>
 800bfb2:	b124      	cbz	r4, 800bfbe <__ieee754_pow+0x1a6>
 800bfb4:	4b2f      	ldr	r3, [pc, #188]	; (800c074 <__ieee754_pow+0x25c>)
 800bfb6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d123      	bne.n	800c006 <__ieee754_pow+0x1ee>
 800bfbe:	f1b9 0f00 	cmp.w	r9, #0
 800bfc2:	da05      	bge.n	800bfd0 <__ieee754_pow+0x1b8>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	2000      	movs	r0, #0
 800bfca:	492a      	ldr	r1, [pc, #168]	; (800c074 <__ieee754_pow+0x25c>)
 800bfcc:	f7f4 fc46 	bl	800085c <__aeabi_ddiv>
 800bfd0:	2d00      	cmp	r5, #0
 800bfd2:	f6bf af40 	bge.w	800be56 <__ieee754_pow+0x3e>
 800bfd6:	9b04      	ldr	r3, [sp, #16]
 800bfd8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bfdc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bfe0:	4323      	orrs	r3, r4
 800bfe2:	d108      	bne.n	800bff6 <__ieee754_pow+0x1de>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	4610      	mov	r0, r2
 800bfea:	4619      	mov	r1, r3
 800bfec:	f7f4 f954 	bl	8000298 <__aeabi_dsub>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	e78f      	b.n	800bf16 <__ieee754_pow+0xfe>
 800bff6:	9b04      	ldr	r3, [sp, #16]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	f47f af2c 	bne.w	800be56 <__ieee754_pow+0x3e>
 800bffe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c002:	4619      	mov	r1, r3
 800c004:	e727      	b.n	800be56 <__ieee754_pow+0x3e>
 800c006:	0feb      	lsrs	r3, r5, #31
 800c008:	3b01      	subs	r3, #1
 800c00a:	9306      	str	r3, [sp, #24]
 800c00c:	9a06      	ldr	r2, [sp, #24]
 800c00e:	9b04      	ldr	r3, [sp, #16]
 800c010:	4313      	orrs	r3, r2
 800c012:	d102      	bne.n	800c01a <__ieee754_pow+0x202>
 800c014:	4632      	mov	r2, r6
 800c016:	463b      	mov	r3, r7
 800c018:	e7e6      	b.n	800bfe8 <__ieee754_pow+0x1d0>
 800c01a:	4b19      	ldr	r3, [pc, #100]	; (800c080 <__ieee754_pow+0x268>)
 800c01c:	4598      	cmp	r8, r3
 800c01e:	f340 80fb 	ble.w	800c218 <__ieee754_pow+0x400>
 800c022:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c026:	4598      	cmp	r8, r3
 800c028:	4b13      	ldr	r3, [pc, #76]	; (800c078 <__ieee754_pow+0x260>)
 800c02a:	dd0c      	ble.n	800c046 <__ieee754_pow+0x22e>
 800c02c:	429c      	cmp	r4, r3
 800c02e:	dc0f      	bgt.n	800c050 <__ieee754_pow+0x238>
 800c030:	f1b9 0f00 	cmp.w	r9, #0
 800c034:	da0f      	bge.n	800c056 <__ieee754_pow+0x23e>
 800c036:	2000      	movs	r0, #0
 800c038:	b009      	add	sp, #36	; 0x24
 800c03a:	ecbd 8b06 	vpop	{d8-d10}
 800c03e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c042:	f000 bcf0 	b.w	800ca26 <__math_oflow>
 800c046:	429c      	cmp	r4, r3
 800c048:	dbf2      	blt.n	800c030 <__ieee754_pow+0x218>
 800c04a:	4b0a      	ldr	r3, [pc, #40]	; (800c074 <__ieee754_pow+0x25c>)
 800c04c:	429c      	cmp	r4, r3
 800c04e:	dd19      	ble.n	800c084 <__ieee754_pow+0x26c>
 800c050:	f1b9 0f00 	cmp.w	r9, #0
 800c054:	dcef      	bgt.n	800c036 <__ieee754_pow+0x21e>
 800c056:	2000      	movs	r0, #0
 800c058:	b009      	add	sp, #36	; 0x24
 800c05a:	ecbd 8b06 	vpop	{d8-d10}
 800c05e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c062:	f000 bcd7 	b.w	800ca14 <__math_uflow>
 800c066:	bf00      	nop
 800c068:	fff00000 	.word	0xfff00000
 800c06c:	7ff00000 	.word	0x7ff00000
 800c070:	433fffff 	.word	0x433fffff
 800c074:	3ff00000 	.word	0x3ff00000
 800c078:	3fefffff 	.word	0x3fefffff
 800c07c:	3fe00000 	.word	0x3fe00000
 800c080:	41e00000 	.word	0x41e00000
 800c084:	4b60      	ldr	r3, [pc, #384]	; (800c208 <__ieee754_pow+0x3f0>)
 800c086:	2200      	movs	r2, #0
 800c088:	f7f4 f906 	bl	8000298 <__aeabi_dsub>
 800c08c:	a354      	add	r3, pc, #336	; (adr r3, 800c1e0 <__ieee754_pow+0x3c8>)
 800c08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c092:	4604      	mov	r4, r0
 800c094:	460d      	mov	r5, r1
 800c096:	f7f4 fab7 	bl	8000608 <__aeabi_dmul>
 800c09a:	a353      	add	r3, pc, #332	; (adr r3, 800c1e8 <__ieee754_pow+0x3d0>)
 800c09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a0:	4606      	mov	r6, r0
 800c0a2:	460f      	mov	r7, r1
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	4629      	mov	r1, r5
 800c0a8:	f7f4 faae 	bl	8000608 <__aeabi_dmul>
 800c0ac:	4b57      	ldr	r3, [pc, #348]	; (800c20c <__ieee754_pow+0x3f4>)
 800c0ae:	4682      	mov	sl, r0
 800c0b0:	468b      	mov	fp, r1
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	4629      	mov	r1, r5
 800c0b8:	f7f4 faa6 	bl	8000608 <__aeabi_dmul>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	a14b      	add	r1, pc, #300	; (adr r1, 800c1f0 <__ieee754_pow+0x3d8>)
 800c0c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0c6:	f7f4 f8e7 	bl	8000298 <__aeabi_dsub>
 800c0ca:	4622      	mov	r2, r4
 800c0cc:	462b      	mov	r3, r5
 800c0ce:	f7f4 fa9b 	bl	8000608 <__aeabi_dmul>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	2000      	movs	r0, #0
 800c0d8:	494d      	ldr	r1, [pc, #308]	; (800c210 <__ieee754_pow+0x3f8>)
 800c0da:	f7f4 f8dd 	bl	8000298 <__aeabi_dsub>
 800c0de:	4622      	mov	r2, r4
 800c0e0:	4680      	mov	r8, r0
 800c0e2:	4689      	mov	r9, r1
 800c0e4:	462b      	mov	r3, r5
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	f7f4 fa8d 	bl	8000608 <__aeabi_dmul>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	4640      	mov	r0, r8
 800c0f4:	4649      	mov	r1, r9
 800c0f6:	f7f4 fa87 	bl	8000608 <__aeabi_dmul>
 800c0fa:	a33f      	add	r3, pc, #252	; (adr r3, 800c1f8 <__ieee754_pow+0x3e0>)
 800c0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c100:	f7f4 fa82 	bl	8000608 <__aeabi_dmul>
 800c104:	4602      	mov	r2, r0
 800c106:	460b      	mov	r3, r1
 800c108:	4650      	mov	r0, sl
 800c10a:	4659      	mov	r1, fp
 800c10c:	f7f4 f8c4 	bl	8000298 <__aeabi_dsub>
 800c110:	4602      	mov	r2, r0
 800c112:	460b      	mov	r3, r1
 800c114:	4680      	mov	r8, r0
 800c116:	4689      	mov	r9, r1
 800c118:	4630      	mov	r0, r6
 800c11a:	4639      	mov	r1, r7
 800c11c:	f7f4 f8be 	bl	800029c <__adddf3>
 800c120:	2000      	movs	r0, #0
 800c122:	4632      	mov	r2, r6
 800c124:	463b      	mov	r3, r7
 800c126:	4604      	mov	r4, r0
 800c128:	460d      	mov	r5, r1
 800c12a:	f7f4 f8b5 	bl	8000298 <__aeabi_dsub>
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	4640      	mov	r0, r8
 800c134:	4649      	mov	r1, r9
 800c136:	f7f4 f8af 	bl	8000298 <__aeabi_dsub>
 800c13a:	9b04      	ldr	r3, [sp, #16]
 800c13c:	9a06      	ldr	r2, [sp, #24]
 800c13e:	3b01      	subs	r3, #1
 800c140:	4313      	orrs	r3, r2
 800c142:	4682      	mov	sl, r0
 800c144:	468b      	mov	fp, r1
 800c146:	f040 81e7 	bne.w	800c518 <__ieee754_pow+0x700>
 800c14a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c200 <__ieee754_pow+0x3e8>
 800c14e:	eeb0 8a47 	vmov.f32	s16, s14
 800c152:	eef0 8a67 	vmov.f32	s17, s15
 800c156:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c15a:	2600      	movs	r6, #0
 800c15c:	4632      	mov	r2, r6
 800c15e:	463b      	mov	r3, r7
 800c160:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c164:	f7f4 f898 	bl	8000298 <__aeabi_dsub>
 800c168:	4622      	mov	r2, r4
 800c16a:	462b      	mov	r3, r5
 800c16c:	f7f4 fa4c 	bl	8000608 <__aeabi_dmul>
 800c170:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c174:	4680      	mov	r8, r0
 800c176:	4689      	mov	r9, r1
 800c178:	4650      	mov	r0, sl
 800c17a:	4659      	mov	r1, fp
 800c17c:	f7f4 fa44 	bl	8000608 <__aeabi_dmul>
 800c180:	4602      	mov	r2, r0
 800c182:	460b      	mov	r3, r1
 800c184:	4640      	mov	r0, r8
 800c186:	4649      	mov	r1, r9
 800c188:	f7f4 f888 	bl	800029c <__adddf3>
 800c18c:	4632      	mov	r2, r6
 800c18e:	463b      	mov	r3, r7
 800c190:	4680      	mov	r8, r0
 800c192:	4689      	mov	r9, r1
 800c194:	4620      	mov	r0, r4
 800c196:	4629      	mov	r1, r5
 800c198:	f7f4 fa36 	bl	8000608 <__aeabi_dmul>
 800c19c:	460b      	mov	r3, r1
 800c19e:	4604      	mov	r4, r0
 800c1a0:	460d      	mov	r5, r1
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	4649      	mov	r1, r9
 800c1a6:	4640      	mov	r0, r8
 800c1a8:	f7f4 f878 	bl	800029c <__adddf3>
 800c1ac:	4b19      	ldr	r3, [pc, #100]	; (800c214 <__ieee754_pow+0x3fc>)
 800c1ae:	4299      	cmp	r1, r3
 800c1b0:	ec45 4b19 	vmov	d9, r4, r5
 800c1b4:	4606      	mov	r6, r0
 800c1b6:	460f      	mov	r7, r1
 800c1b8:	468b      	mov	fp, r1
 800c1ba:	f340 82f1 	ble.w	800c7a0 <__ieee754_pow+0x988>
 800c1be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c1c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c1c6:	4303      	orrs	r3, r0
 800c1c8:	f000 81e4 	beq.w	800c594 <__ieee754_pow+0x77c>
 800c1cc:	ec51 0b18 	vmov	r0, r1, d8
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	f7f4 fc8a 	bl	8000aec <__aeabi_dcmplt>
 800c1d8:	3800      	subs	r0, #0
 800c1da:	bf18      	it	ne
 800c1dc:	2001      	movne	r0, #1
 800c1de:	e72b      	b.n	800c038 <__ieee754_pow+0x220>
 800c1e0:	60000000 	.word	0x60000000
 800c1e4:	3ff71547 	.word	0x3ff71547
 800c1e8:	f85ddf44 	.word	0xf85ddf44
 800c1ec:	3e54ae0b 	.word	0x3e54ae0b
 800c1f0:	55555555 	.word	0x55555555
 800c1f4:	3fd55555 	.word	0x3fd55555
 800c1f8:	652b82fe 	.word	0x652b82fe
 800c1fc:	3ff71547 	.word	0x3ff71547
 800c200:	00000000 	.word	0x00000000
 800c204:	bff00000 	.word	0xbff00000
 800c208:	3ff00000 	.word	0x3ff00000
 800c20c:	3fd00000 	.word	0x3fd00000
 800c210:	3fe00000 	.word	0x3fe00000
 800c214:	408fffff 	.word	0x408fffff
 800c218:	4bd5      	ldr	r3, [pc, #852]	; (800c570 <__ieee754_pow+0x758>)
 800c21a:	402b      	ands	r3, r5
 800c21c:	2200      	movs	r2, #0
 800c21e:	b92b      	cbnz	r3, 800c22c <__ieee754_pow+0x414>
 800c220:	4bd4      	ldr	r3, [pc, #848]	; (800c574 <__ieee754_pow+0x75c>)
 800c222:	f7f4 f9f1 	bl	8000608 <__aeabi_dmul>
 800c226:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c22a:	460c      	mov	r4, r1
 800c22c:	1523      	asrs	r3, r4, #20
 800c22e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c232:	4413      	add	r3, r2
 800c234:	9305      	str	r3, [sp, #20]
 800c236:	4bd0      	ldr	r3, [pc, #832]	; (800c578 <__ieee754_pow+0x760>)
 800c238:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c23c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c240:	429c      	cmp	r4, r3
 800c242:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c246:	dd08      	ble.n	800c25a <__ieee754_pow+0x442>
 800c248:	4bcc      	ldr	r3, [pc, #816]	; (800c57c <__ieee754_pow+0x764>)
 800c24a:	429c      	cmp	r4, r3
 800c24c:	f340 8162 	ble.w	800c514 <__ieee754_pow+0x6fc>
 800c250:	9b05      	ldr	r3, [sp, #20]
 800c252:	3301      	adds	r3, #1
 800c254:	9305      	str	r3, [sp, #20]
 800c256:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c25a:	2400      	movs	r4, #0
 800c25c:	00e3      	lsls	r3, r4, #3
 800c25e:	9307      	str	r3, [sp, #28]
 800c260:	4bc7      	ldr	r3, [pc, #796]	; (800c580 <__ieee754_pow+0x768>)
 800c262:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c266:	ed93 7b00 	vldr	d7, [r3]
 800c26a:	4629      	mov	r1, r5
 800c26c:	ec53 2b17 	vmov	r2, r3, d7
 800c270:	eeb0 9a47 	vmov.f32	s18, s14
 800c274:	eef0 9a67 	vmov.f32	s19, s15
 800c278:	4682      	mov	sl, r0
 800c27a:	f7f4 f80d 	bl	8000298 <__aeabi_dsub>
 800c27e:	4652      	mov	r2, sl
 800c280:	4606      	mov	r6, r0
 800c282:	460f      	mov	r7, r1
 800c284:	462b      	mov	r3, r5
 800c286:	ec51 0b19 	vmov	r0, r1, d9
 800c28a:	f7f4 f807 	bl	800029c <__adddf3>
 800c28e:	4602      	mov	r2, r0
 800c290:	460b      	mov	r3, r1
 800c292:	2000      	movs	r0, #0
 800c294:	49bb      	ldr	r1, [pc, #748]	; (800c584 <__ieee754_pow+0x76c>)
 800c296:	f7f4 fae1 	bl	800085c <__aeabi_ddiv>
 800c29a:	ec41 0b1a 	vmov	d10, r0, r1
 800c29e:	4602      	mov	r2, r0
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	4630      	mov	r0, r6
 800c2a4:	4639      	mov	r1, r7
 800c2a6:	f7f4 f9af 	bl	8000608 <__aeabi_dmul>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2b0:	9302      	str	r3, [sp, #8]
 800c2b2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c2b6:	46ab      	mov	fp, r5
 800c2b8:	106d      	asrs	r5, r5, #1
 800c2ba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c2be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c2c2:	ec41 0b18 	vmov	d8, r0, r1
 800c2c6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	4640      	mov	r0, r8
 800c2ce:	4649      	mov	r1, r9
 800c2d0:	4614      	mov	r4, r2
 800c2d2:	461d      	mov	r5, r3
 800c2d4:	f7f4 f998 	bl	8000608 <__aeabi_dmul>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	460b      	mov	r3, r1
 800c2dc:	4630      	mov	r0, r6
 800c2de:	4639      	mov	r1, r7
 800c2e0:	f7f3 ffda 	bl	8000298 <__aeabi_dsub>
 800c2e4:	ec53 2b19 	vmov	r2, r3, d9
 800c2e8:	4606      	mov	r6, r0
 800c2ea:	460f      	mov	r7, r1
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	4629      	mov	r1, r5
 800c2f0:	f7f3 ffd2 	bl	8000298 <__aeabi_dsub>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	4650      	mov	r0, sl
 800c2fa:	4659      	mov	r1, fp
 800c2fc:	f7f3 ffcc 	bl	8000298 <__aeabi_dsub>
 800c300:	4642      	mov	r2, r8
 800c302:	464b      	mov	r3, r9
 800c304:	f7f4 f980 	bl	8000608 <__aeabi_dmul>
 800c308:	4602      	mov	r2, r0
 800c30a:	460b      	mov	r3, r1
 800c30c:	4630      	mov	r0, r6
 800c30e:	4639      	mov	r1, r7
 800c310:	f7f3 ffc2 	bl	8000298 <__aeabi_dsub>
 800c314:	ec53 2b1a 	vmov	r2, r3, d10
 800c318:	f7f4 f976 	bl	8000608 <__aeabi_dmul>
 800c31c:	ec53 2b18 	vmov	r2, r3, d8
 800c320:	ec41 0b19 	vmov	d9, r0, r1
 800c324:	ec51 0b18 	vmov	r0, r1, d8
 800c328:	f7f4 f96e 	bl	8000608 <__aeabi_dmul>
 800c32c:	a37c      	add	r3, pc, #496	; (adr r3, 800c520 <__ieee754_pow+0x708>)
 800c32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c332:	4604      	mov	r4, r0
 800c334:	460d      	mov	r5, r1
 800c336:	f7f4 f967 	bl	8000608 <__aeabi_dmul>
 800c33a:	a37b      	add	r3, pc, #492	; (adr r3, 800c528 <__ieee754_pow+0x710>)
 800c33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c340:	f7f3 ffac 	bl	800029c <__adddf3>
 800c344:	4622      	mov	r2, r4
 800c346:	462b      	mov	r3, r5
 800c348:	f7f4 f95e 	bl	8000608 <__aeabi_dmul>
 800c34c:	a378      	add	r3, pc, #480	; (adr r3, 800c530 <__ieee754_pow+0x718>)
 800c34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c352:	f7f3 ffa3 	bl	800029c <__adddf3>
 800c356:	4622      	mov	r2, r4
 800c358:	462b      	mov	r3, r5
 800c35a:	f7f4 f955 	bl	8000608 <__aeabi_dmul>
 800c35e:	a376      	add	r3, pc, #472	; (adr r3, 800c538 <__ieee754_pow+0x720>)
 800c360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c364:	f7f3 ff9a 	bl	800029c <__adddf3>
 800c368:	4622      	mov	r2, r4
 800c36a:	462b      	mov	r3, r5
 800c36c:	f7f4 f94c 	bl	8000608 <__aeabi_dmul>
 800c370:	a373      	add	r3, pc, #460	; (adr r3, 800c540 <__ieee754_pow+0x728>)
 800c372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c376:	f7f3 ff91 	bl	800029c <__adddf3>
 800c37a:	4622      	mov	r2, r4
 800c37c:	462b      	mov	r3, r5
 800c37e:	f7f4 f943 	bl	8000608 <__aeabi_dmul>
 800c382:	a371      	add	r3, pc, #452	; (adr r3, 800c548 <__ieee754_pow+0x730>)
 800c384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c388:	f7f3 ff88 	bl	800029c <__adddf3>
 800c38c:	4622      	mov	r2, r4
 800c38e:	4606      	mov	r6, r0
 800c390:	460f      	mov	r7, r1
 800c392:	462b      	mov	r3, r5
 800c394:	4620      	mov	r0, r4
 800c396:	4629      	mov	r1, r5
 800c398:	f7f4 f936 	bl	8000608 <__aeabi_dmul>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	4639      	mov	r1, r7
 800c3a4:	f7f4 f930 	bl	8000608 <__aeabi_dmul>
 800c3a8:	4642      	mov	r2, r8
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	460d      	mov	r5, r1
 800c3ae:	464b      	mov	r3, r9
 800c3b0:	ec51 0b18 	vmov	r0, r1, d8
 800c3b4:	f7f3 ff72 	bl	800029c <__adddf3>
 800c3b8:	ec53 2b19 	vmov	r2, r3, d9
 800c3bc:	f7f4 f924 	bl	8000608 <__aeabi_dmul>
 800c3c0:	4622      	mov	r2, r4
 800c3c2:	462b      	mov	r3, r5
 800c3c4:	f7f3 ff6a 	bl	800029c <__adddf3>
 800c3c8:	4642      	mov	r2, r8
 800c3ca:	4682      	mov	sl, r0
 800c3cc:	468b      	mov	fp, r1
 800c3ce:	464b      	mov	r3, r9
 800c3d0:	4640      	mov	r0, r8
 800c3d2:	4649      	mov	r1, r9
 800c3d4:	f7f4 f918 	bl	8000608 <__aeabi_dmul>
 800c3d8:	4b6b      	ldr	r3, [pc, #428]	; (800c588 <__ieee754_pow+0x770>)
 800c3da:	2200      	movs	r2, #0
 800c3dc:	4606      	mov	r6, r0
 800c3de:	460f      	mov	r7, r1
 800c3e0:	f7f3 ff5c 	bl	800029c <__adddf3>
 800c3e4:	4652      	mov	r2, sl
 800c3e6:	465b      	mov	r3, fp
 800c3e8:	f7f3 ff58 	bl	800029c <__adddf3>
 800c3ec:	2000      	movs	r0, #0
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	460d      	mov	r5, r1
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	4640      	mov	r0, r8
 800c3f8:	4649      	mov	r1, r9
 800c3fa:	f7f4 f905 	bl	8000608 <__aeabi_dmul>
 800c3fe:	4b62      	ldr	r3, [pc, #392]	; (800c588 <__ieee754_pow+0x770>)
 800c400:	4680      	mov	r8, r0
 800c402:	4689      	mov	r9, r1
 800c404:	2200      	movs	r2, #0
 800c406:	4620      	mov	r0, r4
 800c408:	4629      	mov	r1, r5
 800c40a:	f7f3 ff45 	bl	8000298 <__aeabi_dsub>
 800c40e:	4632      	mov	r2, r6
 800c410:	463b      	mov	r3, r7
 800c412:	f7f3 ff41 	bl	8000298 <__aeabi_dsub>
 800c416:	4602      	mov	r2, r0
 800c418:	460b      	mov	r3, r1
 800c41a:	4650      	mov	r0, sl
 800c41c:	4659      	mov	r1, fp
 800c41e:	f7f3 ff3b 	bl	8000298 <__aeabi_dsub>
 800c422:	ec53 2b18 	vmov	r2, r3, d8
 800c426:	f7f4 f8ef 	bl	8000608 <__aeabi_dmul>
 800c42a:	4622      	mov	r2, r4
 800c42c:	4606      	mov	r6, r0
 800c42e:	460f      	mov	r7, r1
 800c430:	462b      	mov	r3, r5
 800c432:	ec51 0b19 	vmov	r0, r1, d9
 800c436:	f7f4 f8e7 	bl	8000608 <__aeabi_dmul>
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	4630      	mov	r0, r6
 800c440:	4639      	mov	r1, r7
 800c442:	f7f3 ff2b 	bl	800029c <__adddf3>
 800c446:	4606      	mov	r6, r0
 800c448:	460f      	mov	r7, r1
 800c44a:	4602      	mov	r2, r0
 800c44c:	460b      	mov	r3, r1
 800c44e:	4640      	mov	r0, r8
 800c450:	4649      	mov	r1, r9
 800c452:	f7f3 ff23 	bl	800029c <__adddf3>
 800c456:	a33e      	add	r3, pc, #248	; (adr r3, 800c550 <__ieee754_pow+0x738>)
 800c458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45c:	2000      	movs	r0, #0
 800c45e:	4604      	mov	r4, r0
 800c460:	460d      	mov	r5, r1
 800c462:	f7f4 f8d1 	bl	8000608 <__aeabi_dmul>
 800c466:	4642      	mov	r2, r8
 800c468:	ec41 0b18 	vmov	d8, r0, r1
 800c46c:	464b      	mov	r3, r9
 800c46e:	4620      	mov	r0, r4
 800c470:	4629      	mov	r1, r5
 800c472:	f7f3 ff11 	bl	8000298 <__aeabi_dsub>
 800c476:	4602      	mov	r2, r0
 800c478:	460b      	mov	r3, r1
 800c47a:	4630      	mov	r0, r6
 800c47c:	4639      	mov	r1, r7
 800c47e:	f7f3 ff0b 	bl	8000298 <__aeabi_dsub>
 800c482:	a335      	add	r3, pc, #212	; (adr r3, 800c558 <__ieee754_pow+0x740>)
 800c484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c488:	f7f4 f8be 	bl	8000608 <__aeabi_dmul>
 800c48c:	a334      	add	r3, pc, #208	; (adr r3, 800c560 <__ieee754_pow+0x748>)
 800c48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c492:	4606      	mov	r6, r0
 800c494:	460f      	mov	r7, r1
 800c496:	4620      	mov	r0, r4
 800c498:	4629      	mov	r1, r5
 800c49a:	f7f4 f8b5 	bl	8000608 <__aeabi_dmul>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	4639      	mov	r1, r7
 800c4a6:	f7f3 fef9 	bl	800029c <__adddf3>
 800c4aa:	9a07      	ldr	r2, [sp, #28]
 800c4ac:	4b37      	ldr	r3, [pc, #220]	; (800c58c <__ieee754_pow+0x774>)
 800c4ae:	4413      	add	r3, r2
 800c4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b4:	f7f3 fef2 	bl	800029c <__adddf3>
 800c4b8:	4682      	mov	sl, r0
 800c4ba:	9805      	ldr	r0, [sp, #20]
 800c4bc:	468b      	mov	fp, r1
 800c4be:	f7f4 f839 	bl	8000534 <__aeabi_i2d>
 800c4c2:	9a07      	ldr	r2, [sp, #28]
 800c4c4:	4b32      	ldr	r3, [pc, #200]	; (800c590 <__ieee754_pow+0x778>)
 800c4c6:	4413      	add	r3, r2
 800c4c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c4cc:	4606      	mov	r6, r0
 800c4ce:	460f      	mov	r7, r1
 800c4d0:	4652      	mov	r2, sl
 800c4d2:	465b      	mov	r3, fp
 800c4d4:	ec51 0b18 	vmov	r0, r1, d8
 800c4d8:	f7f3 fee0 	bl	800029c <__adddf3>
 800c4dc:	4642      	mov	r2, r8
 800c4de:	464b      	mov	r3, r9
 800c4e0:	f7f3 fedc 	bl	800029c <__adddf3>
 800c4e4:	4632      	mov	r2, r6
 800c4e6:	463b      	mov	r3, r7
 800c4e8:	f7f3 fed8 	bl	800029c <__adddf3>
 800c4ec:	2000      	movs	r0, #0
 800c4ee:	4632      	mov	r2, r6
 800c4f0:	463b      	mov	r3, r7
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	460d      	mov	r5, r1
 800c4f6:	f7f3 fecf 	bl	8000298 <__aeabi_dsub>
 800c4fa:	4642      	mov	r2, r8
 800c4fc:	464b      	mov	r3, r9
 800c4fe:	f7f3 fecb 	bl	8000298 <__aeabi_dsub>
 800c502:	ec53 2b18 	vmov	r2, r3, d8
 800c506:	f7f3 fec7 	bl	8000298 <__aeabi_dsub>
 800c50a:	4602      	mov	r2, r0
 800c50c:	460b      	mov	r3, r1
 800c50e:	4650      	mov	r0, sl
 800c510:	4659      	mov	r1, fp
 800c512:	e610      	b.n	800c136 <__ieee754_pow+0x31e>
 800c514:	2401      	movs	r4, #1
 800c516:	e6a1      	b.n	800c25c <__ieee754_pow+0x444>
 800c518:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c568 <__ieee754_pow+0x750>
 800c51c:	e617      	b.n	800c14e <__ieee754_pow+0x336>
 800c51e:	bf00      	nop
 800c520:	4a454eef 	.word	0x4a454eef
 800c524:	3fca7e28 	.word	0x3fca7e28
 800c528:	93c9db65 	.word	0x93c9db65
 800c52c:	3fcd864a 	.word	0x3fcd864a
 800c530:	a91d4101 	.word	0xa91d4101
 800c534:	3fd17460 	.word	0x3fd17460
 800c538:	518f264d 	.word	0x518f264d
 800c53c:	3fd55555 	.word	0x3fd55555
 800c540:	db6fabff 	.word	0xdb6fabff
 800c544:	3fdb6db6 	.word	0x3fdb6db6
 800c548:	33333303 	.word	0x33333303
 800c54c:	3fe33333 	.word	0x3fe33333
 800c550:	e0000000 	.word	0xe0000000
 800c554:	3feec709 	.word	0x3feec709
 800c558:	dc3a03fd 	.word	0xdc3a03fd
 800c55c:	3feec709 	.word	0x3feec709
 800c560:	145b01f5 	.word	0x145b01f5
 800c564:	be3e2fe0 	.word	0xbe3e2fe0
 800c568:	00000000 	.word	0x00000000
 800c56c:	3ff00000 	.word	0x3ff00000
 800c570:	7ff00000 	.word	0x7ff00000
 800c574:	43400000 	.word	0x43400000
 800c578:	0003988e 	.word	0x0003988e
 800c57c:	000bb679 	.word	0x000bb679
 800c580:	0800d0b0 	.word	0x0800d0b0
 800c584:	3ff00000 	.word	0x3ff00000
 800c588:	40080000 	.word	0x40080000
 800c58c:	0800d0d0 	.word	0x0800d0d0
 800c590:	0800d0c0 	.word	0x0800d0c0
 800c594:	a3b5      	add	r3, pc, #724	; (adr r3, 800c86c <__ieee754_pow+0xa54>)
 800c596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59a:	4640      	mov	r0, r8
 800c59c:	4649      	mov	r1, r9
 800c59e:	f7f3 fe7d 	bl	800029c <__adddf3>
 800c5a2:	4622      	mov	r2, r4
 800c5a4:	ec41 0b1a 	vmov	d10, r0, r1
 800c5a8:	462b      	mov	r3, r5
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	4639      	mov	r1, r7
 800c5ae:	f7f3 fe73 	bl	8000298 <__aeabi_dsub>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	ec51 0b1a 	vmov	r0, r1, d10
 800c5ba:	f7f4 fab5 	bl	8000b28 <__aeabi_dcmpgt>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	f47f ae04 	bne.w	800c1cc <__ieee754_pow+0x3b4>
 800c5c4:	4aa4      	ldr	r2, [pc, #656]	; (800c858 <__ieee754_pow+0xa40>)
 800c5c6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	f340 8108 	ble.w	800c7e0 <__ieee754_pow+0x9c8>
 800c5d0:	151b      	asrs	r3, r3, #20
 800c5d2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c5d6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c5da:	fa4a f303 	asr.w	r3, sl, r3
 800c5de:	445b      	add	r3, fp
 800c5e0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c5e4:	4e9d      	ldr	r6, [pc, #628]	; (800c85c <__ieee754_pow+0xa44>)
 800c5e6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c5ea:	4116      	asrs	r6, r2
 800c5ec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c5f0:	2000      	movs	r0, #0
 800c5f2:	ea23 0106 	bic.w	r1, r3, r6
 800c5f6:	f1c2 0214 	rsb	r2, r2, #20
 800c5fa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c5fe:	fa4a fa02 	asr.w	sl, sl, r2
 800c602:	f1bb 0f00 	cmp.w	fp, #0
 800c606:	4602      	mov	r2, r0
 800c608:	460b      	mov	r3, r1
 800c60a:	4620      	mov	r0, r4
 800c60c:	4629      	mov	r1, r5
 800c60e:	bfb8      	it	lt
 800c610:	f1ca 0a00 	rsblt	sl, sl, #0
 800c614:	f7f3 fe40 	bl	8000298 <__aeabi_dsub>
 800c618:	ec41 0b19 	vmov	d9, r0, r1
 800c61c:	4642      	mov	r2, r8
 800c61e:	464b      	mov	r3, r9
 800c620:	ec51 0b19 	vmov	r0, r1, d9
 800c624:	f7f3 fe3a 	bl	800029c <__adddf3>
 800c628:	a37b      	add	r3, pc, #492	; (adr r3, 800c818 <__ieee754_pow+0xa00>)
 800c62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62e:	2000      	movs	r0, #0
 800c630:	4604      	mov	r4, r0
 800c632:	460d      	mov	r5, r1
 800c634:	f7f3 ffe8 	bl	8000608 <__aeabi_dmul>
 800c638:	ec53 2b19 	vmov	r2, r3, d9
 800c63c:	4606      	mov	r6, r0
 800c63e:	460f      	mov	r7, r1
 800c640:	4620      	mov	r0, r4
 800c642:	4629      	mov	r1, r5
 800c644:	f7f3 fe28 	bl	8000298 <__aeabi_dsub>
 800c648:	4602      	mov	r2, r0
 800c64a:	460b      	mov	r3, r1
 800c64c:	4640      	mov	r0, r8
 800c64e:	4649      	mov	r1, r9
 800c650:	f7f3 fe22 	bl	8000298 <__aeabi_dsub>
 800c654:	a372      	add	r3, pc, #456	; (adr r3, 800c820 <__ieee754_pow+0xa08>)
 800c656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65a:	f7f3 ffd5 	bl	8000608 <__aeabi_dmul>
 800c65e:	a372      	add	r3, pc, #456	; (adr r3, 800c828 <__ieee754_pow+0xa10>)
 800c660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c664:	4680      	mov	r8, r0
 800c666:	4689      	mov	r9, r1
 800c668:	4620      	mov	r0, r4
 800c66a:	4629      	mov	r1, r5
 800c66c:	f7f3 ffcc 	bl	8000608 <__aeabi_dmul>
 800c670:	4602      	mov	r2, r0
 800c672:	460b      	mov	r3, r1
 800c674:	4640      	mov	r0, r8
 800c676:	4649      	mov	r1, r9
 800c678:	f7f3 fe10 	bl	800029c <__adddf3>
 800c67c:	4604      	mov	r4, r0
 800c67e:	460d      	mov	r5, r1
 800c680:	4602      	mov	r2, r0
 800c682:	460b      	mov	r3, r1
 800c684:	4630      	mov	r0, r6
 800c686:	4639      	mov	r1, r7
 800c688:	f7f3 fe08 	bl	800029c <__adddf3>
 800c68c:	4632      	mov	r2, r6
 800c68e:	463b      	mov	r3, r7
 800c690:	4680      	mov	r8, r0
 800c692:	4689      	mov	r9, r1
 800c694:	f7f3 fe00 	bl	8000298 <__aeabi_dsub>
 800c698:	4602      	mov	r2, r0
 800c69a:	460b      	mov	r3, r1
 800c69c:	4620      	mov	r0, r4
 800c69e:	4629      	mov	r1, r5
 800c6a0:	f7f3 fdfa 	bl	8000298 <__aeabi_dsub>
 800c6a4:	4642      	mov	r2, r8
 800c6a6:	4606      	mov	r6, r0
 800c6a8:	460f      	mov	r7, r1
 800c6aa:	464b      	mov	r3, r9
 800c6ac:	4640      	mov	r0, r8
 800c6ae:	4649      	mov	r1, r9
 800c6b0:	f7f3 ffaa 	bl	8000608 <__aeabi_dmul>
 800c6b4:	a35e      	add	r3, pc, #376	; (adr r3, 800c830 <__ieee754_pow+0xa18>)
 800c6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	460d      	mov	r5, r1
 800c6be:	f7f3 ffa3 	bl	8000608 <__aeabi_dmul>
 800c6c2:	a35d      	add	r3, pc, #372	; (adr r3, 800c838 <__ieee754_pow+0xa20>)
 800c6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c8:	f7f3 fde6 	bl	8000298 <__aeabi_dsub>
 800c6cc:	4622      	mov	r2, r4
 800c6ce:	462b      	mov	r3, r5
 800c6d0:	f7f3 ff9a 	bl	8000608 <__aeabi_dmul>
 800c6d4:	a35a      	add	r3, pc, #360	; (adr r3, 800c840 <__ieee754_pow+0xa28>)
 800c6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6da:	f7f3 fddf 	bl	800029c <__adddf3>
 800c6de:	4622      	mov	r2, r4
 800c6e0:	462b      	mov	r3, r5
 800c6e2:	f7f3 ff91 	bl	8000608 <__aeabi_dmul>
 800c6e6:	a358      	add	r3, pc, #352	; (adr r3, 800c848 <__ieee754_pow+0xa30>)
 800c6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ec:	f7f3 fdd4 	bl	8000298 <__aeabi_dsub>
 800c6f0:	4622      	mov	r2, r4
 800c6f2:	462b      	mov	r3, r5
 800c6f4:	f7f3 ff88 	bl	8000608 <__aeabi_dmul>
 800c6f8:	a355      	add	r3, pc, #340	; (adr r3, 800c850 <__ieee754_pow+0xa38>)
 800c6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fe:	f7f3 fdcd 	bl	800029c <__adddf3>
 800c702:	4622      	mov	r2, r4
 800c704:	462b      	mov	r3, r5
 800c706:	f7f3 ff7f 	bl	8000608 <__aeabi_dmul>
 800c70a:	4602      	mov	r2, r0
 800c70c:	460b      	mov	r3, r1
 800c70e:	4640      	mov	r0, r8
 800c710:	4649      	mov	r1, r9
 800c712:	f7f3 fdc1 	bl	8000298 <__aeabi_dsub>
 800c716:	4604      	mov	r4, r0
 800c718:	460d      	mov	r5, r1
 800c71a:	4602      	mov	r2, r0
 800c71c:	460b      	mov	r3, r1
 800c71e:	4640      	mov	r0, r8
 800c720:	4649      	mov	r1, r9
 800c722:	f7f3 ff71 	bl	8000608 <__aeabi_dmul>
 800c726:	2200      	movs	r2, #0
 800c728:	ec41 0b19 	vmov	d9, r0, r1
 800c72c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c730:	4620      	mov	r0, r4
 800c732:	4629      	mov	r1, r5
 800c734:	f7f3 fdb0 	bl	8000298 <__aeabi_dsub>
 800c738:	4602      	mov	r2, r0
 800c73a:	460b      	mov	r3, r1
 800c73c:	ec51 0b19 	vmov	r0, r1, d9
 800c740:	f7f4 f88c 	bl	800085c <__aeabi_ddiv>
 800c744:	4632      	mov	r2, r6
 800c746:	4604      	mov	r4, r0
 800c748:	460d      	mov	r5, r1
 800c74a:	463b      	mov	r3, r7
 800c74c:	4640      	mov	r0, r8
 800c74e:	4649      	mov	r1, r9
 800c750:	f7f3 ff5a 	bl	8000608 <__aeabi_dmul>
 800c754:	4632      	mov	r2, r6
 800c756:	463b      	mov	r3, r7
 800c758:	f7f3 fda0 	bl	800029c <__adddf3>
 800c75c:	4602      	mov	r2, r0
 800c75e:	460b      	mov	r3, r1
 800c760:	4620      	mov	r0, r4
 800c762:	4629      	mov	r1, r5
 800c764:	f7f3 fd98 	bl	8000298 <__aeabi_dsub>
 800c768:	4642      	mov	r2, r8
 800c76a:	464b      	mov	r3, r9
 800c76c:	f7f3 fd94 	bl	8000298 <__aeabi_dsub>
 800c770:	460b      	mov	r3, r1
 800c772:	4602      	mov	r2, r0
 800c774:	493a      	ldr	r1, [pc, #232]	; (800c860 <__ieee754_pow+0xa48>)
 800c776:	2000      	movs	r0, #0
 800c778:	f7f3 fd8e 	bl	8000298 <__aeabi_dsub>
 800c77c:	ec41 0b10 	vmov	d0, r0, r1
 800c780:	ee10 3a90 	vmov	r3, s1
 800c784:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c78c:	da2b      	bge.n	800c7e6 <__ieee754_pow+0x9ce>
 800c78e:	4650      	mov	r0, sl
 800c790:	f000 f966 	bl	800ca60 <scalbn>
 800c794:	ec51 0b10 	vmov	r0, r1, d0
 800c798:	ec53 2b18 	vmov	r2, r3, d8
 800c79c:	f7ff bbed 	b.w	800bf7a <__ieee754_pow+0x162>
 800c7a0:	4b30      	ldr	r3, [pc, #192]	; (800c864 <__ieee754_pow+0xa4c>)
 800c7a2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c7a6:	429e      	cmp	r6, r3
 800c7a8:	f77f af0c 	ble.w	800c5c4 <__ieee754_pow+0x7ac>
 800c7ac:	4b2e      	ldr	r3, [pc, #184]	; (800c868 <__ieee754_pow+0xa50>)
 800c7ae:	440b      	add	r3, r1
 800c7b0:	4303      	orrs	r3, r0
 800c7b2:	d009      	beq.n	800c7c8 <__ieee754_pow+0x9b0>
 800c7b4:	ec51 0b18 	vmov	r0, r1, d8
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	f7f4 f996 	bl	8000aec <__aeabi_dcmplt>
 800c7c0:	3800      	subs	r0, #0
 800c7c2:	bf18      	it	ne
 800c7c4:	2001      	movne	r0, #1
 800c7c6:	e447      	b.n	800c058 <__ieee754_pow+0x240>
 800c7c8:	4622      	mov	r2, r4
 800c7ca:	462b      	mov	r3, r5
 800c7cc:	f7f3 fd64 	bl	8000298 <__aeabi_dsub>
 800c7d0:	4642      	mov	r2, r8
 800c7d2:	464b      	mov	r3, r9
 800c7d4:	f7f4 f99e 	bl	8000b14 <__aeabi_dcmpge>
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	f43f aef3 	beq.w	800c5c4 <__ieee754_pow+0x7ac>
 800c7de:	e7e9      	b.n	800c7b4 <__ieee754_pow+0x99c>
 800c7e0:	f04f 0a00 	mov.w	sl, #0
 800c7e4:	e71a      	b.n	800c61c <__ieee754_pow+0x804>
 800c7e6:	ec51 0b10 	vmov	r0, r1, d0
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	e7d4      	b.n	800c798 <__ieee754_pow+0x980>
 800c7ee:	491c      	ldr	r1, [pc, #112]	; (800c860 <__ieee754_pow+0xa48>)
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	f7ff bb30 	b.w	800be56 <__ieee754_pow+0x3e>
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	2100      	movs	r1, #0
 800c7fa:	f7ff bb2c 	b.w	800be56 <__ieee754_pow+0x3e>
 800c7fe:	4630      	mov	r0, r6
 800c800:	4639      	mov	r1, r7
 800c802:	f7ff bb28 	b.w	800be56 <__ieee754_pow+0x3e>
 800c806:	9204      	str	r2, [sp, #16]
 800c808:	f7ff bb7a 	b.w	800bf00 <__ieee754_pow+0xe8>
 800c80c:	2300      	movs	r3, #0
 800c80e:	f7ff bb64 	b.w	800beda <__ieee754_pow+0xc2>
 800c812:	bf00      	nop
 800c814:	f3af 8000 	nop.w
 800c818:	00000000 	.word	0x00000000
 800c81c:	3fe62e43 	.word	0x3fe62e43
 800c820:	fefa39ef 	.word	0xfefa39ef
 800c824:	3fe62e42 	.word	0x3fe62e42
 800c828:	0ca86c39 	.word	0x0ca86c39
 800c82c:	be205c61 	.word	0xbe205c61
 800c830:	72bea4d0 	.word	0x72bea4d0
 800c834:	3e663769 	.word	0x3e663769
 800c838:	c5d26bf1 	.word	0xc5d26bf1
 800c83c:	3ebbbd41 	.word	0x3ebbbd41
 800c840:	af25de2c 	.word	0xaf25de2c
 800c844:	3f11566a 	.word	0x3f11566a
 800c848:	16bebd93 	.word	0x16bebd93
 800c84c:	3f66c16c 	.word	0x3f66c16c
 800c850:	5555553e 	.word	0x5555553e
 800c854:	3fc55555 	.word	0x3fc55555
 800c858:	3fe00000 	.word	0x3fe00000
 800c85c:	000fffff 	.word	0x000fffff
 800c860:	3ff00000 	.word	0x3ff00000
 800c864:	4090cbff 	.word	0x4090cbff
 800c868:	3f6f3400 	.word	0x3f6f3400
 800c86c:	652b82fe 	.word	0x652b82fe
 800c870:	3c971547 	.word	0x3c971547

0800c874 <__ieee754_sqrt>:
 800c874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c878:	ec55 4b10 	vmov	r4, r5, d0
 800c87c:	4e55      	ldr	r6, [pc, #340]	; (800c9d4 <__ieee754_sqrt+0x160>)
 800c87e:	43ae      	bics	r6, r5
 800c880:	ee10 0a10 	vmov	r0, s0
 800c884:	ee10 3a10 	vmov	r3, s0
 800c888:	462a      	mov	r2, r5
 800c88a:	4629      	mov	r1, r5
 800c88c:	d110      	bne.n	800c8b0 <__ieee754_sqrt+0x3c>
 800c88e:	ee10 2a10 	vmov	r2, s0
 800c892:	462b      	mov	r3, r5
 800c894:	f7f3 feb8 	bl	8000608 <__aeabi_dmul>
 800c898:	4602      	mov	r2, r0
 800c89a:	460b      	mov	r3, r1
 800c89c:	4620      	mov	r0, r4
 800c89e:	4629      	mov	r1, r5
 800c8a0:	f7f3 fcfc 	bl	800029c <__adddf3>
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	460d      	mov	r5, r1
 800c8a8:	ec45 4b10 	vmov	d0, r4, r5
 800c8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8b0:	2d00      	cmp	r5, #0
 800c8b2:	dc10      	bgt.n	800c8d6 <__ieee754_sqrt+0x62>
 800c8b4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c8b8:	4330      	orrs	r0, r6
 800c8ba:	d0f5      	beq.n	800c8a8 <__ieee754_sqrt+0x34>
 800c8bc:	b15d      	cbz	r5, 800c8d6 <__ieee754_sqrt+0x62>
 800c8be:	ee10 2a10 	vmov	r2, s0
 800c8c2:	462b      	mov	r3, r5
 800c8c4:	ee10 0a10 	vmov	r0, s0
 800c8c8:	f7f3 fce6 	bl	8000298 <__aeabi_dsub>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	f7f3 ffc4 	bl	800085c <__aeabi_ddiv>
 800c8d4:	e7e6      	b.n	800c8a4 <__ieee754_sqrt+0x30>
 800c8d6:	1512      	asrs	r2, r2, #20
 800c8d8:	d074      	beq.n	800c9c4 <__ieee754_sqrt+0x150>
 800c8da:	07d4      	lsls	r4, r2, #31
 800c8dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c8e0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c8e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c8e8:	bf5e      	ittt	pl
 800c8ea:	0fda      	lsrpl	r2, r3, #31
 800c8ec:	005b      	lslpl	r3, r3, #1
 800c8ee:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c8f2:	2400      	movs	r4, #0
 800c8f4:	0fda      	lsrs	r2, r3, #31
 800c8f6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c8fa:	107f      	asrs	r7, r7, #1
 800c8fc:	005b      	lsls	r3, r3, #1
 800c8fe:	2516      	movs	r5, #22
 800c900:	4620      	mov	r0, r4
 800c902:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c906:	1886      	adds	r6, r0, r2
 800c908:	428e      	cmp	r6, r1
 800c90a:	bfde      	ittt	le
 800c90c:	1b89      	suble	r1, r1, r6
 800c90e:	18b0      	addle	r0, r6, r2
 800c910:	18a4      	addle	r4, r4, r2
 800c912:	0049      	lsls	r1, r1, #1
 800c914:	3d01      	subs	r5, #1
 800c916:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c91a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c91e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c922:	d1f0      	bne.n	800c906 <__ieee754_sqrt+0x92>
 800c924:	462a      	mov	r2, r5
 800c926:	f04f 0e20 	mov.w	lr, #32
 800c92a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c92e:	4281      	cmp	r1, r0
 800c930:	eb06 0c05 	add.w	ip, r6, r5
 800c934:	dc02      	bgt.n	800c93c <__ieee754_sqrt+0xc8>
 800c936:	d113      	bne.n	800c960 <__ieee754_sqrt+0xec>
 800c938:	459c      	cmp	ip, r3
 800c93a:	d811      	bhi.n	800c960 <__ieee754_sqrt+0xec>
 800c93c:	f1bc 0f00 	cmp.w	ip, #0
 800c940:	eb0c 0506 	add.w	r5, ip, r6
 800c944:	da43      	bge.n	800c9ce <__ieee754_sqrt+0x15a>
 800c946:	2d00      	cmp	r5, #0
 800c948:	db41      	blt.n	800c9ce <__ieee754_sqrt+0x15a>
 800c94a:	f100 0801 	add.w	r8, r0, #1
 800c94e:	1a09      	subs	r1, r1, r0
 800c950:	459c      	cmp	ip, r3
 800c952:	bf88      	it	hi
 800c954:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c958:	eba3 030c 	sub.w	r3, r3, ip
 800c95c:	4432      	add	r2, r6
 800c95e:	4640      	mov	r0, r8
 800c960:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c964:	f1be 0e01 	subs.w	lr, lr, #1
 800c968:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c96c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c970:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c974:	d1db      	bne.n	800c92e <__ieee754_sqrt+0xba>
 800c976:	430b      	orrs	r3, r1
 800c978:	d006      	beq.n	800c988 <__ieee754_sqrt+0x114>
 800c97a:	1c50      	adds	r0, r2, #1
 800c97c:	bf13      	iteet	ne
 800c97e:	3201      	addne	r2, #1
 800c980:	3401      	addeq	r4, #1
 800c982:	4672      	moveq	r2, lr
 800c984:	f022 0201 	bicne.w	r2, r2, #1
 800c988:	1063      	asrs	r3, r4, #1
 800c98a:	0852      	lsrs	r2, r2, #1
 800c98c:	07e1      	lsls	r1, r4, #31
 800c98e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c992:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c996:	bf48      	it	mi
 800c998:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c99c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c9a0:	4614      	mov	r4, r2
 800c9a2:	e781      	b.n	800c8a8 <__ieee754_sqrt+0x34>
 800c9a4:	0ad9      	lsrs	r1, r3, #11
 800c9a6:	3815      	subs	r0, #21
 800c9a8:	055b      	lsls	r3, r3, #21
 800c9aa:	2900      	cmp	r1, #0
 800c9ac:	d0fa      	beq.n	800c9a4 <__ieee754_sqrt+0x130>
 800c9ae:	02cd      	lsls	r5, r1, #11
 800c9b0:	d50a      	bpl.n	800c9c8 <__ieee754_sqrt+0x154>
 800c9b2:	f1c2 0420 	rsb	r4, r2, #32
 800c9b6:	fa23 f404 	lsr.w	r4, r3, r4
 800c9ba:	1e55      	subs	r5, r2, #1
 800c9bc:	4093      	lsls	r3, r2
 800c9be:	4321      	orrs	r1, r4
 800c9c0:	1b42      	subs	r2, r0, r5
 800c9c2:	e78a      	b.n	800c8da <__ieee754_sqrt+0x66>
 800c9c4:	4610      	mov	r0, r2
 800c9c6:	e7f0      	b.n	800c9aa <__ieee754_sqrt+0x136>
 800c9c8:	0049      	lsls	r1, r1, #1
 800c9ca:	3201      	adds	r2, #1
 800c9cc:	e7ef      	b.n	800c9ae <__ieee754_sqrt+0x13a>
 800c9ce:	4680      	mov	r8, r0
 800c9d0:	e7bd      	b.n	800c94e <__ieee754_sqrt+0xda>
 800c9d2:	bf00      	nop
 800c9d4:	7ff00000 	.word	0x7ff00000

0800c9d8 <with_errno>:
 800c9d8:	b570      	push	{r4, r5, r6, lr}
 800c9da:	4604      	mov	r4, r0
 800c9dc:	460d      	mov	r5, r1
 800c9de:	4616      	mov	r6, r2
 800c9e0:	f7fc fa34 	bl	8008e4c <__errno>
 800c9e4:	4629      	mov	r1, r5
 800c9e6:	6006      	str	r6, [r0, #0]
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	bd70      	pop	{r4, r5, r6, pc}

0800c9ec <xflow>:
 800c9ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9ee:	4614      	mov	r4, r2
 800c9f0:	461d      	mov	r5, r3
 800c9f2:	b108      	cbz	r0, 800c9f8 <xflow+0xc>
 800c9f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c9f8:	e9cd 2300 	strd	r2, r3, [sp]
 800c9fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca00:	4620      	mov	r0, r4
 800ca02:	4629      	mov	r1, r5
 800ca04:	f7f3 fe00 	bl	8000608 <__aeabi_dmul>
 800ca08:	2222      	movs	r2, #34	; 0x22
 800ca0a:	b003      	add	sp, #12
 800ca0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca10:	f7ff bfe2 	b.w	800c9d8 <with_errno>

0800ca14 <__math_uflow>:
 800ca14:	b508      	push	{r3, lr}
 800ca16:	2200      	movs	r2, #0
 800ca18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ca1c:	f7ff ffe6 	bl	800c9ec <xflow>
 800ca20:	ec41 0b10 	vmov	d0, r0, r1
 800ca24:	bd08      	pop	{r3, pc}

0800ca26 <__math_oflow>:
 800ca26:	b508      	push	{r3, lr}
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ca2e:	f7ff ffdd 	bl	800c9ec <xflow>
 800ca32:	ec41 0b10 	vmov	d0, r0, r1
 800ca36:	bd08      	pop	{r3, pc}

0800ca38 <fabs>:
 800ca38:	ec51 0b10 	vmov	r0, r1, d0
 800ca3c:	ee10 2a10 	vmov	r2, s0
 800ca40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca44:	ec43 2b10 	vmov	d0, r2, r3
 800ca48:	4770      	bx	lr

0800ca4a <finite>:
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	ed8d 0b00 	vstr	d0, [sp]
 800ca50:	9801      	ldr	r0, [sp, #4]
 800ca52:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ca56:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ca5a:	0fc0      	lsrs	r0, r0, #31
 800ca5c:	b002      	add	sp, #8
 800ca5e:	4770      	bx	lr

0800ca60 <scalbn>:
 800ca60:	b570      	push	{r4, r5, r6, lr}
 800ca62:	ec55 4b10 	vmov	r4, r5, d0
 800ca66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	462b      	mov	r3, r5
 800ca6e:	b99a      	cbnz	r2, 800ca98 <scalbn+0x38>
 800ca70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ca74:	4323      	orrs	r3, r4
 800ca76:	d036      	beq.n	800cae6 <scalbn+0x86>
 800ca78:	4b39      	ldr	r3, [pc, #228]	; (800cb60 <scalbn+0x100>)
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	ee10 0a10 	vmov	r0, s0
 800ca80:	2200      	movs	r2, #0
 800ca82:	f7f3 fdc1 	bl	8000608 <__aeabi_dmul>
 800ca86:	4b37      	ldr	r3, [pc, #220]	; (800cb64 <scalbn+0x104>)
 800ca88:	429e      	cmp	r6, r3
 800ca8a:	4604      	mov	r4, r0
 800ca8c:	460d      	mov	r5, r1
 800ca8e:	da10      	bge.n	800cab2 <scalbn+0x52>
 800ca90:	a32b      	add	r3, pc, #172	; (adr r3, 800cb40 <scalbn+0xe0>)
 800ca92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca96:	e03a      	b.n	800cb0e <scalbn+0xae>
 800ca98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ca9c:	428a      	cmp	r2, r1
 800ca9e:	d10c      	bne.n	800caba <scalbn+0x5a>
 800caa0:	ee10 2a10 	vmov	r2, s0
 800caa4:	4620      	mov	r0, r4
 800caa6:	4629      	mov	r1, r5
 800caa8:	f7f3 fbf8 	bl	800029c <__adddf3>
 800caac:	4604      	mov	r4, r0
 800caae:	460d      	mov	r5, r1
 800cab0:	e019      	b.n	800cae6 <scalbn+0x86>
 800cab2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cab6:	460b      	mov	r3, r1
 800cab8:	3a36      	subs	r2, #54	; 0x36
 800caba:	4432      	add	r2, r6
 800cabc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cac0:	428a      	cmp	r2, r1
 800cac2:	dd08      	ble.n	800cad6 <scalbn+0x76>
 800cac4:	2d00      	cmp	r5, #0
 800cac6:	a120      	add	r1, pc, #128	; (adr r1, 800cb48 <scalbn+0xe8>)
 800cac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cacc:	da1c      	bge.n	800cb08 <scalbn+0xa8>
 800cace:	a120      	add	r1, pc, #128	; (adr r1, 800cb50 <scalbn+0xf0>)
 800cad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cad4:	e018      	b.n	800cb08 <scalbn+0xa8>
 800cad6:	2a00      	cmp	r2, #0
 800cad8:	dd08      	ble.n	800caec <scalbn+0x8c>
 800cada:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cade:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cae2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cae6:	ec45 4b10 	vmov	d0, r4, r5
 800caea:	bd70      	pop	{r4, r5, r6, pc}
 800caec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800caf0:	da19      	bge.n	800cb26 <scalbn+0xc6>
 800caf2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800caf6:	429e      	cmp	r6, r3
 800caf8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800cafc:	dd0a      	ble.n	800cb14 <scalbn+0xb4>
 800cafe:	a112      	add	r1, pc, #72	; (adr r1, 800cb48 <scalbn+0xe8>)
 800cb00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d1e2      	bne.n	800cace <scalbn+0x6e>
 800cb08:	a30f      	add	r3, pc, #60	; (adr r3, 800cb48 <scalbn+0xe8>)
 800cb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0e:	f7f3 fd7b 	bl	8000608 <__aeabi_dmul>
 800cb12:	e7cb      	b.n	800caac <scalbn+0x4c>
 800cb14:	a10a      	add	r1, pc, #40	; (adr r1, 800cb40 <scalbn+0xe0>)
 800cb16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d0b8      	beq.n	800ca90 <scalbn+0x30>
 800cb1e:	a10e      	add	r1, pc, #56	; (adr r1, 800cb58 <scalbn+0xf8>)
 800cb20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb24:	e7b4      	b.n	800ca90 <scalbn+0x30>
 800cb26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb2a:	3236      	adds	r2, #54	; 0x36
 800cb2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cb34:	4620      	mov	r0, r4
 800cb36:	4b0c      	ldr	r3, [pc, #48]	; (800cb68 <scalbn+0x108>)
 800cb38:	2200      	movs	r2, #0
 800cb3a:	e7e8      	b.n	800cb0e <scalbn+0xae>
 800cb3c:	f3af 8000 	nop.w
 800cb40:	c2f8f359 	.word	0xc2f8f359
 800cb44:	01a56e1f 	.word	0x01a56e1f
 800cb48:	8800759c 	.word	0x8800759c
 800cb4c:	7e37e43c 	.word	0x7e37e43c
 800cb50:	8800759c 	.word	0x8800759c
 800cb54:	fe37e43c 	.word	0xfe37e43c
 800cb58:	c2f8f359 	.word	0xc2f8f359
 800cb5c:	81a56e1f 	.word	0x81a56e1f
 800cb60:	43500000 	.word	0x43500000
 800cb64:	ffff3cb0 	.word	0xffff3cb0
 800cb68:	3c900000 	.word	0x3c900000

0800cb6c <_init>:
 800cb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb6e:	bf00      	nop
 800cb70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb72:	bc08      	pop	{r3}
 800cb74:	469e      	mov	lr, r3
 800cb76:	4770      	bx	lr

0800cb78 <_fini>:
 800cb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb7a:	bf00      	nop
 800cb7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb7e:	bc08      	pop	{r3}
 800cb80:	469e      	mov	lr, r3
 800cb82:	4770      	bx	lr
