/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

using namespace ei;

// paste the raw features here
static const float features[] = {0.6000, 1.5000, 3.9000, 0.9000, 0.9000, 4.5000, 1.1000, 0.8000, 7.4000, 0.2000, 0.3000, 8.6000, -0.3000, -0.1000, 8.8000, 0.3000, 0.0000, 9.3000, 0.6000, 0.5000, 10.4000, 0.0000, 1.0000, 11.2000, -0.5000, -0.8000, 11.3000, -0.5000, -0.8000, 11.3000, 0.1000, -2.0000, 11.7000, 0.6000, -2.2000, 12.3000, 0.9000, -1.6000, 13.7000, 0.5000, -1.3000, 15.0000, 0.5000, -1.0000, 15.9000, 0.8000, -1.0000, 16.5000, 1.2000, -1.0000, 16.8000, 1.0000, -1.1000, 16.7000, 0.7000, -1.2000, 16.8000, 0.6000, -1.1000, 16.3000, 0.5000, -0.8000, 15.2000, 0.8000, -0.6000, 13.5000, 1.8000, -0.3000, 12.7000, 2.0000, -0.3000, 12.6000, 1.8000, -0.7000, 12.5000, 1.6000, -0.6000, 12.5000, 0.9000, -0.8000, 12.0000, 0.4000, -1.0000, 11.1000, 0.3000, -0.7000, 9.9000, 0.2000, -0.7000, 9.6000, 0.2000, -0.9000, 10.0000, 0.3000, -0.8000, 10.0000, 0.8000, -0.5000, 9.6000, 0.8000, -0.3000, 9.1000, 0.8000, -0.3000, 9.1000, 0.4000, -0.3000, 8.7000, 0.6000, 0.0000, 8.1000, 0.7000, 0.2000, 7.2000, 0.5000, 0.3000, 6.6000, 0.2000, 0.1000, 6.3000, -0.2000, 0.0000, 6.4000, -0.4000, 0.0000, 6.5000, -0.5000, 0.2000, 6.3000, -0.3000, 0.5000, 5.5000, 0.2000, 0.8000, 4.9000, 0.5000, 0.9000, 4.7000, 0.7000, 0.9000, 4.6000, 0.6000, 0.8000, 4.6000, 0.2000, 0.3000, 5.6000, -0.5000, 0.0000, 6.6000, -1.1000, -0.2000, 7.5000, -0.9000, -0.2000, 7.9000, -0.3000, 0.1000, 7.8000, 0.5000, 0.5000, 7.4000, 1.5000, 0.6000, 7.1000, 2.3000, 0.6000, 7.2000, 2.1000, 0.6000, 8.7000, 1.3000, 0.3000, 10.5000, 0.1000, -0.4000, 11.2000, -1.0000, -0.7000, 10.6000, -1.0000, -0.7000, 10.6000, -0.9000, -0.7000, 9.5000, 0.3000, -0.3000, 9.2000, 1.2000, -0.2000, 10.1000, 1.3000, -0.4000, 12.3000, 0.5000, -1.0000, 14.1000, -0.4000, -1.2000, 14.8000, -0.7000, -1.0000, 14.3000, 1.2000, -0.2000, 12.7000, 1.6000, 0.0000, 13.3000, 1.4000, -0.2000, 14.4000, 0.7000, -0.6000, 15.2000, 0.2000, -0.8000, 15.5000, 0.4000, -0.8000, 15.4000, 0.8000, -0.7000, 15.1000, 1.1000, -0.5000, 14.5000, 1.0000, -0.4000, 13.8000, 1.0000, -0.4000, 12.8000, 0.7000, -0.4000, 12.2000, 0.6000, -0.4000, 11.7000, 0.7000, -0.4000, 11.2000, 0.2000, -0.6000, 10.6000, 0.4000, -0.6000, 10.2000, 0.8000, -0.5000, 10.1000, 0.7000, -0.5000, 10.0000, 0.7000, -0.5000, 10.0000, 0.7000, -0.3000, 10.0000, 0.6000, -0.2000, 10.0000, 0.2000, 0.0000, 8.0000, -0.2000, -0.2000, 7.0000, -0.2000, -0.1000, 6.7000, 0.2000, 0.3000, 6.4000, 0.5000, 0.5000, 6.2000, 0.3000, 0.6000, 6.5000, -0.2000, 0.5000, 6.9000, -0.3000, 0.5000, 6.5000, 0.0000, 0.6000, 5.8000, 0.4000, 0.9000, 5.1000, 0.5000, 1.0000, 4.8000, 0.4000, 0.9000, 4.7000, 0.2000, 0.9000, 4.9000, 0.0000, 0.9000, 5.3000, 0.0000, 0.9000, 5.5000, 0.4000, 0.8000, 5.6000, 0.6000, 0.8000, 6.2000, 0.5000, 0.6000, 6.5000, 0.3000, 0.3000, 6.8000, 0.2000, 0.1000, 8.6000, 0.3000, 0.3000, 9.8000, 0.3000, 0.3000, 10.0000, 0.3000, 0.3000, 10.0000, 0.3000, 0.2000, 9.6000, 0.1000, 0.1000, 9.1000, 0.2000, -0.1000, 8.9000, 0.3000, -0.1000, 9.6000, 0.1000, 0.1000, 10.7000, 0.1000, -0.2000, 10.9000, 0.0000, -0.3000, 10.6000, 0.1000, -0.2000, 10.2000, 0.5000, 0.0000, 10.0000, 1.0000, 0.0000, 10.2000, 1.3000, -0.1000, 11.6000, 1.1000, -0.4000, 13.2000, 0.7000, -0.6000, 14.4000, 0.4000, -0.8000, 14.8000};

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
    memcpy(out_ptr, features + offset, length * sizeof(float));
    return 0;
}
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CRC_HandleTypeDef hcrc;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#include <stdarg.h>
#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

void vprint(const char *fmt, va_list argp)
{
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    }
}

void ei_printf(const char *format, ...) {
    va_list myargs;
    va_start(myargs, format);
    vprint(format, myargs);
    va_end(myargs);
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  signal_t signal;
  signal.total_length = sizeof(features) / sizeof(features[0]);
  signal.get_data = &get_feature_data;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_CRC_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
        ei_impulse_result_t result = { 0 };
        EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
        ei_printf("run_classifier returned: %d ", res);

        ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.):  ",
            result.timing.dsp, result.timing.classification, result.timing.anomaly);

        // print the predictions
        ei_printf("[");
        for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
      	  ei_printf_float(result.classification[ix].value);
    #if EI_CLASSIFIER_HAS_ANOMALY == 1
            ei_printf(", ");
    #else
            if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
                ei_printf(", ");
            }
    #endif
        }
    #if EI_CLASSIFIER_HAS_ANOMALY == 1
        ei_printf_float(result.anomaly);
    #endif
        ei_printf("]\n\n\n");

      HAL_Delay(5000);
  }
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{

  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
