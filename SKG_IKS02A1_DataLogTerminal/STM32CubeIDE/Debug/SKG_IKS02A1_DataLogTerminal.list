
SKG_IKS02A1_DataLogTerminal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b114  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0800b2b8  0800b2b8  0001b2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b618  0800b618  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  0800b618  0800b618  0001b618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b620  0800b620  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b620  0800b620  0001b620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b624  0800b624  0001b624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  0800b628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000158  0800b780  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  0800b780  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001ab5a  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00028253  00000000  00000000  0003ace2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003238  00000000  00000000  00062f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002030  00000000  00000000  00066170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00098292  00000000  00000000  000681a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001ef0  00000000  00000000  00100438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018cc1  00000000  00000000  00102328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011afe9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009894  00000000  00000000  0011b03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000158 	.word	0x20000158
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b29c 	.word	0x0800b29c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000015c 	.word	0x2000015c
 80001dc:	0800b29c 	.word	0x0800b29c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f52:	490e      	ldr	r1, [pc, #56]	; (8000f8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f68:	4c0b      	ldr	r4, [pc, #44]	; (8000f98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f76:	f005 fb87 	bl	8006688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f008 f899 	bl	80090b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f000 fc7f 	bl	8001880 <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000f90:	0800b628 	.word	0x0800b628
  ldr r2, =_sbss
 8000f94:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000f98:	20000460 	.word	0x20000460

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>

08000f9e <MX_MEMS_Init>:
static void Magneto_Sensor_Handler(uint32_t Instance);
static void MX_IKS02A1_DataLogTerminal_Init(void);
static void MX_IKS02A1_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS02A1_DataLogTerminal_Init();
 8000fa2:	f000 f809 	bl	8000fb8 <MX_IKS02A1_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_IKS02A1_DataLogTerminal_Process();
 8000fae:	f000 f919 	bl	80011e4 <MX_IKS02A1_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <MX_IKS02A1_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS02A1_DataLogTerminal_Init(void)
{
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f005 f9fa 	bl	80063b8 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f005 fa10 	bl	80063ec <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f005 fa61 	bl	8006494 <BSP_PB_GetState>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	bf0c      	ite	eq
 8000fd8:	2301      	moveq	r3, #1
 8000fda:	2300      	movne	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b70      	ldr	r3, [pc, #448]	; (80011a4 <MX_IKS02A1_DataLogTerminal_Init+0x1ec>)
 8000fe2:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f005 fa7f 	bl	80064e8 <BSP_COM_Init>

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_ISM330DHCX_0, MOTION_ACCELERO | MOTION_GYRO);
 8000fea:	2103      	movs	r1, #3
 8000fec:	2000      	movs	r0, #0
 8000fee:	f004 fdbb 	bl	8005b68 <IKS02A1_MOTION_SENSOR_Init>

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_IIS2DLPC_0, MOTION_ACCELERO);
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f004 fdb7 	bl	8005b68 <IKS02A1_MOTION_SENSOR_Init>

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_IIS2MDC_0, MOTION_MAGNETO);
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f004 fdb3 	bl	8005b68 <IKS02A1_MOTION_SENSOR_Init>

  for(i = 0; i < IKS02A1_MOTION_INSTANCES_NBR; i++)
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	e0c3      	b.n	8001190 <MX_IKS02A1_DataLogTerminal_Init+0x1d8>
  {
    IKS02A1_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	4613      	mov	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	1a9b      	subs	r3, r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4a64      	ldr	r2, [pc, #400]	; (80011a8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8001016:	4413      	add	r3, r2
 8001018:	4619      	mov	r1, r3
 800101a:	f004 fea1 	bl	8005d60 <IKS02A1_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800101e:	4962      	ldr	r1, [pc, #392]	; (80011a8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4613      	mov	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	1a9b      	subs	r3, r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	440b      	add	r3, r1
 800102c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800102e:	4618      	mov	r0, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8001030:	495d      	ldr	r1, [pc, #372]	; (80011a8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4613      	mov	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	1a9b      	subs	r3, r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	3301      	adds	r3, #1
 8001040:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001042:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8001044:	4958      	ldr	r1, [pc, #352]	; (80011a8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	4613      	mov	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	3302      	adds	r3, #2
 8001054:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001056:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8001058:	4953      	ldr	r1, [pc, #332]	; (80011a8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4613      	mov	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	1a9b      	subs	r3, r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	3303      	adds	r3, #3
 8001068:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800106a:	9303      	str	r3, [sp, #12]
 800106c:	9502      	str	r5, [sp, #8]
 800106e:	9401      	str	r4, [sp, #4]
 8001070:	9000      	str	r0, [sp, #0]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4a4d      	ldr	r2, [pc, #308]	; (80011ac <MX_IKS02A1_DataLogTerminal_Init+0x1f4>)
 8001076:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107a:	484d      	ldr	r0, [pc, #308]	; (80011b0 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 800107c:	f008 f85c 	bl	8009138 <sniprintf>
    printf("%s", dataOut);
 8001080:	494b      	ldr	r1, [pc, #300]	; (80011b0 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 8001082:	484c      	ldr	r0, [pc, #304]	; (80011b4 <MX_IKS02A1_DataLogTerminal_Init+0x1fc>)
 8001084:	f008 f840 	bl	8009108 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 8001088:	4947      	ldr	r1, [pc, #284]	; (80011a8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	4613      	mov	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	1a9b      	subs	r3, r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	3314      	adds	r3, #20
 8001098:	edd3 7a00 	vldr	s15, [r3]
 800109c:	463b      	mov	r3, r7
 800109e:	2103      	movs	r1, #3
 80010a0:	4618      	mov	r0, r3
 80010a2:	eeb0 0a67 	vmov.f32	s0, s15
 80010a6:	f000 f8fb 	bl	80012a0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 80010ae:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 80010b0:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 80010b2:	493d      	ldr	r1, [pc, #244]	; (80011a8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	4613      	mov	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	1a9b      	subs	r3, r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	3308      	adds	r3, #8
 80010c2:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	9000      	str	r0, [sp, #0]
 80010c8:	4623      	mov	r3, r4
 80010ca:	4a3b      	ldr	r2, [pc, #236]	; (80011b8 <MX_IKS02A1_DataLogTerminal_Init+0x200>)
 80010cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d0:	4837      	ldr	r0, [pc, #220]	; (80011b0 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 80010d2:	f008 f831 	bl	8009138 <sniprintf>
    printf("%s", dataOut);
 80010d6:	4936      	ldr	r1, [pc, #216]	; (80011b0 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 80010d8:	4836      	ldr	r0, [pc, #216]	; (80011b4 <MX_IKS02A1_DataLogTerminal_Init+0x1fc>)
 80010da:	f008 f815 	bl	8009108 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 80010de:	4932      	ldr	r1, [pc, #200]	; (80011a8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	4613      	mov	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	1a9b      	subs	r3, r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	3310      	adds	r3, #16
 80010ee:	edd3 7a00 	vldr	s15, [r3]
 80010f2:	463b      	mov	r3, r7
 80010f4:	2103      	movs	r1, #3
 80010f6:	4618      	mov	r0, r3
 80010f8:	eeb0 0a67 	vmov.f32	s0, s15
 80010fc:	f000 f8d0 	bl	80012a0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8001104:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8001106:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8001108:	4927      	ldr	r1, [pc, #156]	; (80011a8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	1a9b      	subs	r3, r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	3304      	adds	r3, #4
 8001118:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	9000      	str	r0, [sp, #0]
 800111e:	4623      	mov	r3, r4
 8001120:	4a26      	ldr	r2, [pc, #152]	; (80011bc <MX_IKS02A1_DataLogTerminal_Init+0x204>)
 8001122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001126:	4822      	ldr	r0, [pc, #136]	; (80011b0 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 8001128:	f008 f806 	bl	8009138 <sniprintf>
    printf("%s", dataOut);
 800112c:	4920      	ldr	r1, [pc, #128]	; (80011b0 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 800112e:	4821      	ldr	r0, [pc, #132]	; (80011b4 <MX_IKS02A1_DataLogTerminal_Init+0x1fc>)
 8001130:	f007 ffea 	bl	8009108 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 8001134:	491c      	ldr	r1, [pc, #112]	; (80011a8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4613      	mov	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	1a9b      	subs	r3, r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	3318      	adds	r3, #24
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	463b      	mov	r3, r7
 800114a:	2103      	movs	r1, #3
 800114c:	4618      	mov	r0, r3
 800114e:	eeb0 0a67 	vmov.f32	s0, s15
 8001152:	f000 f8a5 	bl	80012a0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800115a:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800115c:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800115e:	4912      	ldr	r1, [pc, #72]	; (80011a8 <MX_IKS02A1_DataLogTerminal_Init+0x1f0>)
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	4613      	mov	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	1a9b      	subs	r3, r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	330c      	adds	r3, #12
 800116e:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	9000      	str	r0, [sp, #0]
 8001174:	4623      	mov	r3, r4
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <MX_IKS02A1_DataLogTerminal_Init+0x208>)
 8001178:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 800117e:	f007 ffdb 	bl	8009138 <sniprintf>
    printf("%s", dataOut);
 8001182:	490b      	ldr	r1, [pc, #44]	; (80011b0 <MX_IKS02A1_DataLogTerminal_Init+0x1f8>)
 8001184:	480b      	ldr	r0, [pc, #44]	; (80011b4 <MX_IKS02A1_DataLogTerminal_Init+0x1fc>)
 8001186:	f007 ffbf 	bl	8009108 <iprintf>
  for(i = 0; i < IKS02A1_MOTION_INSTANCES_NBR; i++)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3301      	adds	r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2b02      	cmp	r3, #2
 8001194:	f67f af38 	bls.w	8001008 <MX_IKS02A1_DataLogTerminal_Init+0x50>
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bdb0      	pop	{r4, r5, r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200002cc 	.word	0x200002cc
 80011a8:	20000178 	.word	0x20000178
 80011ac:	0800b2b8 	.word	0x0800b2b8
 80011b0:	200001cc 	.word	0x200001cc
 80011b4:	0800b32c 	.word	0x0800b32c
 80011b8:	0800b330 	.word	0x0800b330
 80011bc:	0800b35c 	.word	0x0800b35c
 80011c0:	0800b38c 	.word	0x0800b38c

080011c4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <BSP_PB_Callback+0x1c>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	20000174 	.word	0x20000174

080011e4 <MX_IKS02A1_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS02A1_DataLogTerminal_Process(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  int i;

  if (PushButtonDetected != 0U)
 80011ea:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <MX_IKS02A1_DataLogTerminal_Process+0xb0>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d011      	beq.n	8001218 <MX_IKS02A1_DataLogTerminal_Process+0x34>
  {
    /* Debouncing */
    HAL_Delay(50);
 80011f4:	2032      	movs	r0, #50	; 0x32
 80011f6:	f005 facb 	bl	8006790 <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 80011fa:	bf00      	nop
 80011fc:	2000      	movs	r0, #0
 80011fe:	f005 f949 	bl	8006494 <BSP_PB_GetState>
 8001202:	4602      	mov	r2, r0
 8001204:	4b24      	ldr	r3, [pc, #144]	; (8001298 <MX_IKS02A1_DataLogTerminal_Process+0xb4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d0f7      	beq.n	80011fc <MX_IKS02A1_DataLogTerminal_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 800120c:	2032      	movs	r0, #50	; 0x32
 800120e:	f005 fabf 	bl	8006790 <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <MX_IKS02A1_DataLogTerminal_Process+0xb0>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]

    /* Do nothing */
  }

  for(i = 0; i < IKS02A1_MOTION_INSTANCES_NBR; i++)
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	e02e      	b.n	800127c <MX_IKS02A1_DataLogTerminal_Process+0x98>
  {
    if(MotionCapabilities[i].Acc)
 800121e:	491f      	ldr	r1, [pc, #124]	; (800129c <MX_IKS02A1_DataLogTerminal_Process+0xb8>)
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	1a9b      	subs	r3, r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <MX_IKS02A1_DataLogTerminal_Process+0x56>
    {
      Accelero_Sensor_Handler(i);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4618      	mov	r0, r3
 8001236:	f000 f8bd 	bl	80013b4 <Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 800123a:	4918      	ldr	r1, [pc, #96]	; (800129c <MX_IKS02A1_DataLogTerminal_Process+0xb8>)
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	1a9b      	subs	r3, r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	3301      	adds	r3, #1
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <MX_IKS02A1_DataLogTerminal_Process+0x74>
    {
      Gyro_Sensor_Handler(i);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f962 	bl	800151c <Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 8001258:	4910      	ldr	r1, [pc, #64]	; (800129c <MX_IKS02A1_DataLogTerminal_Process+0xb8>)
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	1a9b      	subs	r3, r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	3302      	adds	r3, #2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <MX_IKS02A1_DataLogTerminal_Process+0x92>
    {
      Magneto_Sensor_Handler(i);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fa07 	bl	8001684 <Magneto_Sensor_Handler>
  for(i = 0; i < IKS02A1_MOTION_INSTANCES_NBR; i++)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3301      	adds	r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d9cd      	bls.n	800121e <MX_IKS02A1_DataLogTerminal_Process+0x3a>
    }
  }

  HAL_Delay( 1000 );
 8001282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001286:	f005 fa83 	bl	8006790 <HAL_Delay>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000174 	.word	0x20000174
 8001298:	200002cc 	.word	0x200002cc
 800129c:	20000178 	.word	0x20000178

080012a0 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80012aa:	60b8      	str	r0, [r7, #8]
 80012ac:	6079      	str	r1, [r7, #4]
  if(in >= 0.0f)
 80012ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	db03      	blt.n	80012c4 <floatToInt+0x24>
  {
    out_value->sign = 0;
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e008      	b.n	80012d6 <floatToInt+0x36>
  }else
  {
    out_value->sign = 1;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
    in = -in;
 80012ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ce:	eef1 7a67 	vneg.f32	s15, s15
 80012d2:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / pow(10, dec_prec));
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff f936 	bl	8000548 <__aeabi_f2d>
 80012dc:	4604      	mov	r4, r0
 80012de:	460d      	mov	r5, r1
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff f91f 	bl	8000524 <__aeabi_i2d>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	ec43 2b11 	vmov	d1, r2, r3
 80012ee:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 80013a8 <floatToInt+0x108>
 80012f2:	f009 f8b9 	bl	800a468 <pow>
 80012f6:	ec53 2b10 	vmov	r2, r3, d0
 80012fa:	f04f 0000 	mov.w	r0, #0
 80012fe:	492c      	ldr	r1, [pc, #176]	; (80013b0 <floatToInt+0x110>)
 8001300:	f7ff faa4 	bl	800084c <__aeabi_ddiv>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4620      	mov	r0, r4
 800130a:	4629      	mov	r1, r5
 800130c:	f7fe ffbe 	bl	800028c <__adddf3>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fc46 	bl	8000ba8 <__aeabi_d2f>
 800131c:	4603      	mov	r3, r0
 800131e:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 8001320:	edd7 7a03 	vldr	s15, [r7, #12]
 8001324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001328:	ee17 2a90 	vmov	r2, s15
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800133c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001344:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f7ff f8fd 	bl	8000548 <__aeabi_f2d>
 800134e:	4604      	mov	r4, r0
 8001350:	460d      	mov	r5, r1
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff f8e6 	bl	8000524 <__aeabi_i2d>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	ec43 2b11 	vmov	d1, r2, r3
 8001360:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80013a8 <floatToInt+0x108>
 8001364:	f009 f880 	bl	800a468 <pow>
 8001368:	ec53 2b10 	vmov	r2, r3, d0
 800136c:	4620      	mov	r0, r4
 800136e:	4629      	mov	r1, r5
 8001370:	f7ff f942 	bl	80005f8 <__aeabi_dmul>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	ec43 2b17 	vmov	d7, r2, r3
 800137c:	eeb0 0a47 	vmov.f32	s0, s14
 8001380:	eef0 0a67 	vmov.f32	s1, s15
 8001384:	f009 f83e 	bl	800a404 <trunc>
 8001388:	ec53 2b10 	vmov	r2, r3, d0
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fbe2 	bl	8000b58 <__aeabi_d2iz>
 8001394:	4603      	mov	r3, r0
 8001396:	461a      	mov	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	609a      	str	r2, [r3, #8]
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bdb0      	pop	{r4, r5, r7, pc}
 80013a4:	f3af 8000 	nop.w
 80013a8:	00000000 	.word	0x00000000
 80013ac:	40240000 	.word	0x40240000
 80013b0:	3fe00000 	.word	0x3fe00000

080013b4 <Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance)
{
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b092      	sub	sp, #72	; 0x48
 80013b8:	af06      	add	r7, sp, #24
 80013ba:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS02A1_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS02A1_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	461a      	mov	r2, r3
 80013c2:	2102      	movs	r1, #2
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f004 fd1f 	bl	8005e08 <IKS02A1_MOTION_SENSOR_GetAxes>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d007      	beq.n	80013e0 <Accelero_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a47      	ldr	r2, [pc, #284]	; (80014f0 <Accelero_Sensor_Handler+0x13c>)
 80013d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d8:	4846      	ldr	r0, [pc, #280]	; (80014f4 <Accelero_Sensor_Handler+0x140>)
 80013da:	f007 fead 	bl	8009138 <sniprintf>
 80013de:	e011      	b.n	8001404 <Accelero_Sensor_Handler+0x50>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 80013e0:	687d      	ldr	r5, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 80013e2:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 80013e4:	687a      	ldr	r2, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 80013e6:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 80013e8:	6878      	ldr	r0, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 80013ea:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 80013ec:	9404      	str	r4, [sp, #16]
 80013ee:	9003      	str	r0, [sp, #12]
 80013f0:	9102      	str	r1, [sp, #8]
 80013f2:	9201      	str	r2, [sp, #4]
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	462b      	mov	r3, r5
 80013f8:	4a3f      	ldr	r2, [pc, #252]	; (80014f8 <Accelero_Sensor_Handler+0x144>)
 80013fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013fe:	483d      	ldr	r0, [pc, #244]	; (80014f4 <Accelero_Sensor_Handler+0x140>)
 8001400:	f007 fe9a 	bl	8009138 <sniprintf>
  }

  printf("%s", dataOut);
 8001404:	493b      	ldr	r1, [pc, #236]	; (80014f4 <Accelero_Sensor_Handler+0x140>)
 8001406:	483d      	ldr	r0, [pc, #244]	; (80014fc <Accelero_Sensor_Handler+0x148>)
 8001408:	f007 fe7e 	bl	8009108 <iprintf>

  if (verbose == 1)
 800140c:	4b3c      	ldr	r3, [pc, #240]	; (8001500 <Accelero_Sensor_Handler+0x14c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d168      	bne.n	80014e6 <Accelero_Sensor_Handler+0x132>
  {
    if (IKS02A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8001414:	f107 030f 	add.w	r3, r7, #15
 8001418:	4619      	mov	r1, r3
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f004 fcca 	bl	8005db4 <IKS02A1_MOTION_SENSOR_ReadID>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d007      	beq.n	8001436 <Accelero_Sensor_Handler+0x82>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a36      	ldr	r2, [pc, #216]	; (8001504 <Accelero_Sensor_Handler+0x150>)
 800142a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800142e:	4831      	ldr	r0, [pc, #196]	; (80014f4 <Accelero_Sensor_Handler+0x140>)
 8001430:	f007 fe82 	bl	8009138 <sniprintf>
 8001434:	e008      	b.n	8001448 <Accelero_Sensor_Handler+0x94>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	9200      	str	r2, [sp, #0]
 800143c:	4a32      	ldr	r2, [pc, #200]	; (8001508 <Accelero_Sensor_Handler+0x154>)
 800143e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001442:	482c      	ldr	r0, [pc, #176]	; (80014f4 <Accelero_Sensor_Handler+0x140>)
 8001444:	f007 fe78 	bl	8009138 <sniprintf>
    }

    printf("%s", dataOut);
 8001448:	492a      	ldr	r1, [pc, #168]	; (80014f4 <Accelero_Sensor_Handler+0x140>)
 800144a:	482c      	ldr	r0, [pc, #176]	; (80014fc <Accelero_Sensor_Handler+0x148>)
 800144c:	f007 fe5c 	bl	8009108 <iprintf>

    if (IKS02A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_ACCELERO, &odr))
 8001450:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001454:	461a      	mov	r2, r3
 8001456:	2102      	movs	r1, #2
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f004 fd19 	bl	8005e90 <IKS02A1_MOTION_SENSOR_GetOutputDataRate>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d007      	beq.n	8001474 <Accelero_Sensor_Handler+0xc0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a29      	ldr	r2, [pc, #164]	; (800150c <Accelero_Sensor_Handler+0x158>)
 8001468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800146c:	4821      	ldr	r0, [pc, #132]	; (80014f4 <Accelero_Sensor_Handler+0x140>)
 800146e:	f007 fe63 	bl	8009138 <sniprintf>
 8001472:	e014      	b.n	800149e <Accelero_Sensor_Handler+0xea>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8001474:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	2103      	movs	r1, #3
 800147e:	4618      	mov	r0, r3
 8001480:	eeb0 0a67 	vmov.f32	s0, s15
 8001484:	f7ff ff0c 	bl	80012a0 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800148c:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800148e:	9101      	str	r1, [sp, #4]
 8001490:	9200      	str	r2, [sp, #0]
 8001492:	4a1f      	ldr	r2, [pc, #124]	; (8001510 <Accelero_Sensor_Handler+0x15c>)
 8001494:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001498:	4816      	ldr	r0, [pc, #88]	; (80014f4 <Accelero_Sensor_Handler+0x140>)
 800149a:	f007 fe4d 	bl	8009138 <sniprintf>
    }

    printf("%s", dataOut);
 800149e:	4915      	ldr	r1, [pc, #84]	; (80014f4 <Accelero_Sensor_Handler+0x140>)
 80014a0:	4816      	ldr	r0, [pc, #88]	; (80014fc <Accelero_Sensor_Handler+0x148>)
 80014a2:	f007 fe31 	bl	8009108 <iprintf>

    if (IKS02A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_ACCELERO, &fullScale))
 80014a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014aa:	461a      	mov	r2, r3
 80014ac:	2102      	movs	r1, #2
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f004 fd32 	bl	8005f18 <IKS02A1_MOTION_SENSOR_GetFullScale>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d007      	beq.n	80014ca <Accelero_Sensor_Handler+0x116>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a15      	ldr	r2, [pc, #84]	; (8001514 <Accelero_Sensor_Handler+0x160>)
 80014be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c2:	480c      	ldr	r0, [pc, #48]	; (80014f4 <Accelero_Sensor_Handler+0x140>)
 80014c4:	f007 fe38 	bl	8009138 <sniprintf>
 80014c8:	e009      	b.n	80014de <Accelero_Sensor_Handler+0x12a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	4613      	mov	r3, r2
 80014d2:	4a11      	ldr	r2, [pc, #68]	; (8001518 <Accelero_Sensor_Handler+0x164>)
 80014d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d8:	4806      	ldr	r0, [pc, #24]	; (80014f4 <Accelero_Sensor_Handler+0x140>)
 80014da:	f007 fe2d 	bl	8009138 <sniprintf>
    }

    printf("%s", dataOut);
 80014de:	4905      	ldr	r1, [pc, #20]	; (80014f4 <Accelero_Sensor_Handler+0x140>)
 80014e0:	4806      	ldr	r0, [pc, #24]	; (80014fc <Accelero_Sensor_Handler+0x148>)
 80014e2:	f007 fe11 	bl	8009108 <iprintf>
  }
}
 80014e6:	bf00      	nop
 80014e8:	3730      	adds	r7, #48	; 0x30
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bdb0      	pop	{r4, r5, r7, pc}
 80014ee:	bf00      	nop
 80014f0:	0800b3b8 	.word	0x0800b3b8
 80014f4:	200001cc 	.word	0x200001cc
 80014f8:	0800b3cc 	.word	0x0800b3cc
 80014fc:	0800b32c 	.word	0x0800b32c
 8001500:	20000000 	.word	0x20000000
 8001504:	0800b3fc 	.word	0x0800b3fc
 8001508:	0800b410 	.word	0x0800b410
 800150c:	0800b424 	.word	0x0800b424
 8001510:	0800b438 	.word	0x0800b438
 8001514:	0800b450 	.word	0x0800b450
 8001518:	0800b460 	.word	0x0800b460

0800151c <Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance)
{
 800151c:	b5b0      	push	{r4, r5, r7, lr}
 800151e:	b092      	sub	sp, #72	; 0x48
 8001520:	af06      	add	r7, sp, #24
 8001522:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS02A1_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS02A1_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	461a      	mov	r2, r3
 800152a:	2101      	movs	r1, #1
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f004 fc6b 	bl	8005e08 <IKS02A1_MOTION_SENSOR_GetAxes>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d007      	beq.n	8001548 <Gyro_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a47      	ldr	r2, [pc, #284]	; (8001658 <Gyro_Sensor_Handler+0x13c>)
 800153c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001540:	4846      	ldr	r0, [pc, #280]	; (800165c <Gyro_Sensor_Handler+0x140>)
 8001542:	f007 fdf9 	bl	8009138 <sniprintf>
 8001546:	e011      	b.n	800156c <Gyro_Sensor_Handler+0x50>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8001548:	687d      	ldr	r5, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 800154a:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800154c:	687a      	ldr	r2, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 800154e:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8001550:	6878      	ldr	r0, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8001552:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8001554:	9404      	str	r4, [sp, #16]
 8001556:	9003      	str	r0, [sp, #12]
 8001558:	9102      	str	r1, [sp, #8]
 800155a:	9201      	str	r2, [sp, #4]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	462b      	mov	r3, r5
 8001560:	4a3f      	ldr	r2, [pc, #252]	; (8001660 <Gyro_Sensor_Handler+0x144>)
 8001562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001566:	483d      	ldr	r0, [pc, #244]	; (800165c <Gyro_Sensor_Handler+0x140>)
 8001568:	f007 fde6 	bl	8009138 <sniprintf>
  }

  printf("%s", dataOut);
 800156c:	493b      	ldr	r1, [pc, #236]	; (800165c <Gyro_Sensor_Handler+0x140>)
 800156e:	483d      	ldr	r0, [pc, #244]	; (8001664 <Gyro_Sensor_Handler+0x148>)
 8001570:	f007 fdca 	bl	8009108 <iprintf>

  if (verbose == 1)
 8001574:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <Gyro_Sensor_Handler+0x14c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d168      	bne.n	800164e <Gyro_Sensor_Handler+0x132>
  {
    if (IKS02A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 800157c:	f107 030f 	add.w	r3, r7, #15
 8001580:	4619      	mov	r1, r3
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f004 fc16 	bl	8005db4 <IKS02A1_MOTION_SENSOR_ReadID>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <Gyro_Sensor_Handler+0x82>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a36      	ldr	r2, [pc, #216]	; (800166c <Gyro_Sensor_Handler+0x150>)
 8001592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001596:	4831      	ldr	r0, [pc, #196]	; (800165c <Gyro_Sensor_Handler+0x140>)
 8001598:	f007 fdce 	bl	8009138 <sniprintf>
 800159c:	e008      	b.n	80015b0 <Gyro_Sensor_Handler+0x94>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	9200      	str	r2, [sp, #0]
 80015a4:	4a32      	ldr	r2, [pc, #200]	; (8001670 <Gyro_Sensor_Handler+0x154>)
 80015a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015aa:	482c      	ldr	r0, [pc, #176]	; (800165c <Gyro_Sensor_Handler+0x140>)
 80015ac:	f007 fdc4 	bl	8009138 <sniprintf>
    }

    printf("%s", dataOut);
 80015b0:	492a      	ldr	r1, [pc, #168]	; (800165c <Gyro_Sensor_Handler+0x140>)
 80015b2:	482c      	ldr	r0, [pc, #176]	; (8001664 <Gyro_Sensor_Handler+0x148>)
 80015b4:	f007 fda8 	bl	8009108 <iprintf>

    if (IKS02A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_GYRO, &odr))
 80015b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015bc:	461a      	mov	r2, r3
 80015be:	2101      	movs	r1, #1
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f004 fc65 	bl	8005e90 <IKS02A1_MOTION_SENSOR_GetOutputDataRate>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d007      	beq.n	80015dc <Gyro_Sensor_Handler+0xc0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a29      	ldr	r2, [pc, #164]	; (8001674 <Gyro_Sensor_Handler+0x158>)
 80015d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d4:	4821      	ldr	r0, [pc, #132]	; (800165c <Gyro_Sensor_Handler+0x140>)
 80015d6:	f007 fdaf 	bl	8009138 <sniprintf>
 80015da:	e014      	b.n	8001606 <Gyro_Sensor_Handler+0xea>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 80015dc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	2103      	movs	r1, #3
 80015e6:	4618      	mov	r0, r3
 80015e8:	eeb0 0a67 	vmov.f32	s0, s15
 80015ec:	f7ff fe58 	bl	80012a0 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 80015f4:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80015f6:	9101      	str	r1, [sp, #4]
 80015f8:	9200      	str	r2, [sp, #0]
 80015fa:	4a1f      	ldr	r2, [pc, #124]	; (8001678 <Gyro_Sensor_Handler+0x15c>)
 80015fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001600:	4816      	ldr	r0, [pc, #88]	; (800165c <Gyro_Sensor_Handler+0x140>)
 8001602:	f007 fd99 	bl	8009138 <sniprintf>
    }

    printf("%s", dataOut);
 8001606:	4915      	ldr	r1, [pc, #84]	; (800165c <Gyro_Sensor_Handler+0x140>)
 8001608:	4816      	ldr	r0, [pc, #88]	; (8001664 <Gyro_Sensor_Handler+0x148>)
 800160a:	f007 fd7d 	bl	8009108 <iprintf>

    if (IKS02A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_GYRO, &fullScale))
 800160e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001612:	461a      	mov	r2, r3
 8001614:	2101      	movs	r1, #1
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f004 fc7e 	bl	8005f18 <IKS02A1_MOTION_SENSOR_GetFullScale>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d007      	beq.n	8001632 <Gyro_Sensor_Handler+0x116>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a15      	ldr	r2, [pc, #84]	; (800167c <Gyro_Sensor_Handler+0x160>)
 8001626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162a:	480c      	ldr	r0, [pc, #48]	; (800165c <Gyro_Sensor_Handler+0x140>)
 800162c:	f007 fd84 	bl	8009138 <sniprintf>
 8001630:	e009      	b.n	8001646 <Gyro_Sensor_Handler+0x12a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	4613      	mov	r3, r2
 800163a:	4a11      	ldr	r2, [pc, #68]	; (8001680 <Gyro_Sensor_Handler+0x164>)
 800163c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001640:	4806      	ldr	r0, [pc, #24]	; (800165c <Gyro_Sensor_Handler+0x140>)
 8001642:	f007 fd79 	bl	8009138 <sniprintf>
    }

    printf("%s", dataOut);
 8001646:	4905      	ldr	r1, [pc, #20]	; (800165c <Gyro_Sensor_Handler+0x140>)
 8001648:	4806      	ldr	r0, [pc, #24]	; (8001664 <Gyro_Sensor_Handler+0x148>)
 800164a:	f007 fd5d 	bl	8009108 <iprintf>
  }
}
 800164e:	bf00      	nop
 8001650:	3730      	adds	r7, #48	; 0x30
 8001652:	46bd      	mov	sp, r7
 8001654:	bdb0      	pop	{r4, r5, r7, pc}
 8001656:	bf00      	nop
 8001658:	0800b470 	.word	0x0800b470
 800165c:	200001cc 	.word	0x200001cc
 8001660:	0800b484 	.word	0x0800b484
 8001664:	0800b32c 	.word	0x0800b32c
 8001668:	20000000 	.word	0x20000000
 800166c:	0800b3fc 	.word	0x0800b3fc
 8001670:	0800b410 	.word	0x0800b410
 8001674:	0800b424 	.word	0x0800b424
 8001678:	0800b438 	.word	0x0800b438
 800167c:	0800b450 	.word	0x0800b450
 8001680:	0800b4b4 	.word	0x0800b4b4

08001684 <Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance)
{
 8001684:	b5b0      	push	{r4, r5, r7, lr}
 8001686:	b092      	sub	sp, #72	; 0x48
 8001688:	af06      	add	r7, sp, #24
 800168a:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS02A1_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS02A1_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	461a      	mov	r2, r3
 8001692:	2104      	movs	r1, #4
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f004 fbb7 	bl	8005e08 <IKS02A1_MOTION_SENSOR_GetAxes>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d007      	beq.n	80016b0 <Magneto_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a47      	ldr	r2, [pc, #284]	; (80017c0 <Magneto_Sensor_Handler+0x13c>)
 80016a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a8:	4846      	ldr	r0, [pc, #280]	; (80017c4 <Magneto_Sensor_Handler+0x140>)
 80016aa:	f007 fd45 	bl	8009138 <sniprintf>
 80016ae:	e011      	b.n	80016d4 <Magneto_Sensor_Handler+0x50>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 80016b0:	687d      	ldr	r5, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 80016b2:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 80016b4:	687a      	ldr	r2, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 80016b6:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 80016b8:	6878      	ldr	r0, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 80016ba:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 80016bc:	9404      	str	r4, [sp, #16]
 80016be:	9003      	str	r0, [sp, #12]
 80016c0:	9102      	str	r1, [sp, #8]
 80016c2:	9201      	str	r2, [sp, #4]
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	462b      	mov	r3, r5
 80016c8:	4a3f      	ldr	r2, [pc, #252]	; (80017c8 <Magneto_Sensor_Handler+0x144>)
 80016ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ce:	483d      	ldr	r0, [pc, #244]	; (80017c4 <Magneto_Sensor_Handler+0x140>)
 80016d0:	f007 fd32 	bl	8009138 <sniprintf>
  }

  printf("%s", dataOut);
 80016d4:	493b      	ldr	r1, [pc, #236]	; (80017c4 <Magneto_Sensor_Handler+0x140>)
 80016d6:	483d      	ldr	r0, [pc, #244]	; (80017cc <Magneto_Sensor_Handler+0x148>)
 80016d8:	f007 fd16 	bl	8009108 <iprintf>

  if (verbose == 1)
 80016dc:	4b3c      	ldr	r3, [pc, #240]	; (80017d0 <Magneto_Sensor_Handler+0x14c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d168      	bne.n	80017b6 <Magneto_Sensor_Handler+0x132>
  {
    if (IKS02A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 80016e4:	f107 030f 	add.w	r3, r7, #15
 80016e8:	4619      	mov	r1, r3
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f004 fb62 	bl	8005db4 <IKS02A1_MOTION_SENSOR_ReadID>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d007      	beq.n	8001706 <Magneto_Sensor_Handler+0x82>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a36      	ldr	r2, [pc, #216]	; (80017d4 <Magneto_Sensor_Handler+0x150>)
 80016fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016fe:	4831      	ldr	r0, [pc, #196]	; (80017c4 <Magneto_Sensor_Handler+0x140>)
 8001700:	f007 fd1a 	bl	8009138 <sniprintf>
 8001704:	e008      	b.n	8001718 <Magneto_Sensor_Handler+0x94>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7bfa      	ldrb	r2, [r7, #15]
 800170a:	9200      	str	r2, [sp, #0]
 800170c:	4a32      	ldr	r2, [pc, #200]	; (80017d8 <Magneto_Sensor_Handler+0x154>)
 800170e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001712:	482c      	ldr	r0, [pc, #176]	; (80017c4 <Magneto_Sensor_Handler+0x140>)
 8001714:	f007 fd10 	bl	8009138 <sniprintf>
    }

    printf("%s", dataOut);
 8001718:	492a      	ldr	r1, [pc, #168]	; (80017c4 <Magneto_Sensor_Handler+0x140>)
 800171a:	482c      	ldr	r0, [pc, #176]	; (80017cc <Magneto_Sensor_Handler+0x148>)
 800171c:	f007 fcf4 	bl	8009108 <iprintf>

    if (IKS02A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_MAGNETO, &odr))
 8001720:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001724:	461a      	mov	r2, r3
 8001726:	2104      	movs	r1, #4
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f004 fbb1 	bl	8005e90 <IKS02A1_MOTION_SENSOR_GetOutputDataRate>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d007      	beq.n	8001744 <Magneto_Sensor_Handler+0xc0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a29      	ldr	r2, [pc, #164]	; (80017dc <Magneto_Sensor_Handler+0x158>)
 8001738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800173c:	4821      	ldr	r0, [pc, #132]	; (80017c4 <Magneto_Sensor_Handler+0x140>)
 800173e:	f007 fcfb 	bl	8009138 <sniprintf>
 8001742:	e014      	b.n	800176e <Magneto_Sensor_Handler+0xea>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8001744:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	2103      	movs	r1, #3
 800174e:	4618      	mov	r0, r3
 8001750:	eeb0 0a67 	vmov.f32	s0, s15
 8001754:	f7ff fda4 	bl	80012a0 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800175c:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800175e:	9101      	str	r1, [sp, #4]
 8001760:	9200      	str	r2, [sp, #0]
 8001762:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <Magneto_Sensor_Handler+0x15c>)
 8001764:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001768:	4816      	ldr	r0, [pc, #88]	; (80017c4 <Magneto_Sensor_Handler+0x140>)
 800176a:	f007 fce5 	bl	8009138 <sniprintf>
    }

    printf("%s", dataOut);
 800176e:	4915      	ldr	r1, [pc, #84]	; (80017c4 <Magneto_Sensor_Handler+0x140>)
 8001770:	4816      	ldr	r0, [pc, #88]	; (80017cc <Magneto_Sensor_Handler+0x148>)
 8001772:	f007 fcc9 	bl	8009108 <iprintf>

    if (IKS02A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_MAGNETO, &fullScale))
 8001776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177a:	461a      	mov	r2, r3
 800177c:	2104      	movs	r1, #4
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f004 fbca 	bl	8005f18 <IKS02A1_MOTION_SENSOR_GetFullScale>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <Magneto_Sensor_Handler+0x116>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <Magneto_Sensor_Handler+0x160>)
 800178e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001792:	480c      	ldr	r0, [pc, #48]	; (80017c4 <Magneto_Sensor_Handler+0x140>)
 8001794:	f007 fcd0 	bl	8009138 <sniprintf>
 8001798:	e009      	b.n	80017ae <Magneto_Sensor_Handler+0x12a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	4613      	mov	r3, r2
 80017a2:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <Magneto_Sensor_Handler+0x164>)
 80017a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a8:	4806      	ldr	r0, [pc, #24]	; (80017c4 <Magneto_Sensor_Handler+0x140>)
 80017aa:	f007 fcc5 	bl	8009138 <sniprintf>
    }

    printf("%s", dataOut);
 80017ae:	4905      	ldr	r1, [pc, #20]	; (80017c4 <Magneto_Sensor_Handler+0x140>)
 80017b0:	4806      	ldr	r0, [pc, #24]	; (80017cc <Magneto_Sensor_Handler+0x148>)
 80017b2:	f007 fca9 	bl	8009108 <iprintf>
  }
}
 80017b6:	bf00      	nop
 80017b8:	3730      	adds	r7, #48	; 0x30
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bdb0      	pop	{r4, r5, r7, pc}
 80017be:	bf00      	nop
 80017c0:	0800b4c8 	.word	0x0800b4c8
 80017c4:	200001cc 	.word	0x200001cc
 80017c8:	0800b4dc 	.word	0x0800b4dc
 80017cc:	0800b32c 	.word	0x0800b32c
 80017d0:	20000000 	.word	0x20000000
 80017d4:	0800b3fc 	.word	0x0800b3fc
 80017d8:	0800b410 	.word	0x0800b410
 80017dc:	0800b424 	.word	0x0800b424
 80017e0:	0800b438 	.word	0x0800b438
 80017e4:	0800b450 	.word	0x0800b450
 80017e8:	0800b50c 	.word	0x0800b50c

080017ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <MX_GPIO_Init+0x90>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a20      	ldr	r2, [pc, #128]	; (800187c <MX_GPIO_Init+0x90>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b1e      	ldr	r3, [pc, #120]	; (800187c <MX_GPIO_Init+0x90>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	4b1a      	ldr	r3, [pc, #104]	; (800187c <MX_GPIO_Init+0x90>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a19      	ldr	r2, [pc, #100]	; (800187c <MX_GPIO_Init+0x90>)
 8001818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b17      	ldr	r3, [pc, #92]	; (800187c <MX_GPIO_Init+0x90>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <MX_GPIO_Init+0x90>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a12      	ldr	r2, [pc, #72]	; (800187c <MX_GPIO_Init+0x90>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <MX_GPIO_Init+0x90>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_GPIO_Init+0x90>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a0b      	ldr	r2, [pc, #44]	; (800187c <MX_GPIO_Init+0x90>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <MX_GPIO_Init+0x90>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	2028      	movs	r0, #40	; 0x28
 8001868:	f005 f891 	bl	800698e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800186c:	2028      	movs	r0, #40	; 0x28
 800186e:	f005 f8aa 	bl	80069c6 <HAL_NVIC_EnableIRQ>

}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800

08001880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001884:	f004 ff12 	bl	80066ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001888:	f000 f808 	bl	800189c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800188c:	f7ff ffae 	bl	80017ec <MX_GPIO_Init>
  MX_MEMS_Init();
 8001890:	f7ff fb85 	bl	8000f9e <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8001894:	f7ff fb89 	bl	8000faa <MX_MEMS_Process>
 8001898:	e7fc      	b.n	8001894 <main+0x14>
	...

0800189c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b094      	sub	sp, #80	; 0x50
 80018a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a2:	f107 0320 	add.w	r3, r7, #32
 80018a6:	2230      	movs	r2, #48	; 0x30
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f007 fc24 	bl	80090f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	4b28      	ldr	r3, [pc, #160]	; (8001968 <SystemClock_Config+0xcc>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	4a27      	ldr	r2, [pc, #156]	; (8001968 <SystemClock_Config+0xcc>)
 80018ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ce:	6413      	str	r3, [r2, #64]	; 0x40
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <SystemClock_Config+0xcc>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	4b22      	ldr	r3, [pc, #136]	; (800196c <SystemClock_Config+0xd0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a21      	ldr	r2, [pc, #132]	; (800196c <SystemClock_Config+0xd0>)
 80018e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b1f      	ldr	r3, [pc, #124]	; (800196c <SystemClock_Config+0xd0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018f8:	2302      	movs	r3, #2
 80018fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018fc:	2301      	movs	r3, #1
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001900:	2310      	movs	r3, #16
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001904:	2302      	movs	r3, #2
 8001906:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001908:	2300      	movs	r3, #0
 800190a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800190c:	2310      	movs	r3, #16
 800190e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001910:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001914:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001916:	2304      	movs	r3, #4
 8001918:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800191a:	2304      	movs	r3, #4
 800191c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800191e:	f107 0320 	add.w	r3, r7, #32
 8001922:	4618      	mov	r0, r3
 8001924:	f006 fb5a 	bl	8007fdc <HAL_RCC_OscConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800192e:	f000 f81f 	bl	8001970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001932:	230f      	movs	r3, #15
 8001934:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001936:	2302      	movs	r3, #2
 8001938:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800193e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001942:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	2102      	movs	r1, #2
 800194e:	4618      	mov	r0, r3
 8001950:	f006 fdbc 	bl	80084cc <HAL_RCC_ClockConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800195a:	f000 f809 	bl	8001970 <Error_Handler>
  }
}
 800195e:	bf00      	nop
 8001960:	3750      	adds	r7, #80	; 0x50
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	40007000 	.word	0x40007000

08001970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001974:	b672      	cpsid	i
}
 8001976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001978:	e7fe      	b.n	8001978 <Error_Handler+0x8>
	...

0800197c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <HAL_MspInit+0x4c>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	4a0f      	ldr	r2, [pc, #60]	; (80019c8 <HAL_MspInit+0x4c>)
 800198c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001990:	6453      	str	r3, [r2, #68]	; 0x44
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <HAL_MspInit+0x4c>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	603b      	str	r3, [r7, #0]
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_MspInit+0x4c>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	4a08      	ldr	r2, [pc, #32]	; (80019c8 <HAL_MspInit+0x4c>)
 80019a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ac:	6413      	str	r3, [r2, #64]	; 0x40
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_MspInit+0x4c>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ba:	2007      	movs	r0, #7
 80019bc:	f004 ffdc 	bl	8006978 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <NMI_Handler+0x4>

080019d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <MemManage_Handler+0x4>

080019de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a18:	f004 fe9a 	bl	8006750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <EXTI15_10_IRQHandler+0x10>)
 8001a26:	f005 f817 	bl	8006a58 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200000dc 	.word	0x200000dc

08001a34 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <BSP_I2C1_Init+0x58>)
 8001a40:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <BSP_I2C1_Init+0x5c>)
 8001a42:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <BSP_I2C1_Init+0x60>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	4912      	ldr	r1, [pc, #72]	; (8001a94 <BSP_I2C1_Init+0x60>)
 8001a4c:	600a      	str	r2, [r1, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d117      	bne.n	8001a82 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001a52:	480e      	ldr	r0, [pc, #56]	; (8001a8c <BSP_I2C1_Init+0x58>)
 8001a54:	f005 ff4c 	bl	80078f0 <HAL_I2C_GetState>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d111      	bne.n	8001a82 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001a5e:	480b      	ldr	r0, [pc, #44]	; (8001a8c <BSP_I2C1_Init+0x58>)
 8001a60:	f000 f8e2 	bl	8001c28 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10b      	bne.n	8001a82 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001a6a:	4808      	ldr	r0, [pc, #32]	; (8001a8c <BSP_I2C1_Init+0x58>)
 8001a6c:	f000 f8a8 	bl	8001bc0 <MX_I2C1_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001a76:	f06f 0307 	mvn.w	r3, #7
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	e001      	b.n	8001a82 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001a82:	687b      	ldr	r3, [r7, #4]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200002d0 	.word	0x200002d0
 8001a90:	40005400 	.word	0x40005400
 8001a94:	20000324 	.word	0x20000324

08001a98 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <BSP_I2C1_DeInit+0x48>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d014      	beq.n	8001ad4 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <BSP_I2C1_DeInit+0x48>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <BSP_I2C1_DeInit+0x48>)
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <BSP_I2C1_DeInit+0x48>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10b      	bne.n	8001ad4 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001abc:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <BSP_I2C1_DeInit+0x4c>)
 8001abe:	f000 f8fd 	bl	8001cbc <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001ac2:	4808      	ldr	r0, [pc, #32]	; (8001ae4 <BSP_I2C1_DeInit+0x4c>)
 8001ac4:	f005 fbb0 	bl	8007228 <HAL_I2C_DeInit>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001ace:	f06f 0307 	mvn.w	r3, #7
 8001ad2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001ad4:	687b      	ldr	r3, [r7, #4]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000324 	.word	0x20000324
 8001ae4:	200002d0 	.word	0x200002d0

08001ae8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af04      	add	r7, sp, #16
 8001aee:	60ba      	str	r2, [r7, #8]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4603      	mov	r3, r0
 8001af4:	81fb      	strh	r3, [r7, #14]
 8001af6:	460b      	mov	r3, r1
 8001af8:	81bb      	strh	r3, [r7, #12]
 8001afa:	4613      	mov	r3, r2
 8001afc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001b02:	89ba      	ldrh	r2, [r7, #12]
 8001b04:	89f9      	ldrh	r1, [r7, #14]
 8001b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0a:	9302      	str	r3, [sp, #8]
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2301      	movs	r3, #1
 8001b16:	480c      	ldr	r0, [pc, #48]	; (8001b48 <BSP_I2C1_WriteReg+0x60>)
 8001b18:	f005 fbca 	bl	80072b0 <HAL_I2C_Mem_Write>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00c      	beq.n	8001b3c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001b22:	4809      	ldr	r0, [pc, #36]	; (8001b48 <BSP_I2C1_WriteReg+0x60>)
 8001b24:	f005 fef2 	bl	800790c <HAL_I2C_GetError>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d103      	bne.n	8001b36 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001b2e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	e002      	b.n	8001b3c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001b36:	f06f 0303 	mvn.w	r3, #3
 8001b3a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001b3c:	697b      	ldr	r3, [r7, #20]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200002d0 	.word	0x200002d0

08001b4c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af04      	add	r7, sp, #16
 8001b52:	60ba      	str	r2, [r7, #8]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	81fb      	strh	r3, [r7, #14]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	81bb      	strh	r3, [r7, #12]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001b66:	89ba      	ldrh	r2, [r7, #12]
 8001b68:	89f9      	ldrh	r1, [r7, #14]
 8001b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	2301      	movs	r3, #1
 8001b7a:	480c      	ldr	r0, [pc, #48]	; (8001bac <BSP_I2C1_ReadReg+0x60>)
 8001b7c:	f005 fc92 	bl	80074a4 <HAL_I2C_Mem_Read>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00c      	beq.n	8001ba0 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001b86:	4809      	ldr	r0, [pc, #36]	; (8001bac <BSP_I2C1_ReadReg+0x60>)
 8001b88:	f005 fec0 	bl	800790c <HAL_I2C_GetError>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d103      	bne.n	8001b9a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001b92:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e002      	b.n	8001ba0 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b9a:	f06f 0303 	mvn.w	r3, #3
 8001b9e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001ba0:	697b      	ldr	r3, [r7, #20]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200002d0 	.word	0x200002d0

08001bb0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001bb4:	f004 fde0 	bl	8006778 <HAL_GetTick>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a14      	ldr	r2, [pc, #80]	; (8001c20 <MX_I2C1_Init+0x60>)
 8001bd0:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a13      	ldr	r2, [pc, #76]	; (8001c24 <MX_I2C1_Init+0x64>)
 8001bd6:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bea:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f005 f9cb 	bl	8006fa0 <HAL_I2C_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40005400 	.word	0x40005400
 8001c24:	00061a80 	.word	0x00061a80

08001c28 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <I2C1_MspInit+0x8c>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	4a1e      	ldr	r2, [pc, #120]	; (8001cb4 <I2C1_MspInit+0x8c>)
 8001c3a:	f043 0302 	orr.w	r3, r3, #2
 8001c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c40:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <I2C1_MspInit+0x8c>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c52:	2312      	movs	r3, #18
 8001c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001c5e:	2304      	movs	r3, #4
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	4813      	ldr	r0, [pc, #76]	; (8001cb8 <I2C1_MspInit+0x90>)
 8001c6a:	f004 ff19 	bl	8006aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c74:	2312      	movs	r3, #18
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001c80:	2304      	movs	r3, #4
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <I2C1_MspInit+0x90>)
 8001c8c:	f004 ff08 	bl	8006aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <I2C1_MspInit+0x8c>)
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	4a06      	ldr	r2, [pc, #24]	; (8001cb4 <I2C1_MspInit+0x8c>)
 8001c9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <I2C1_MspInit+0x8c>)
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001cac:	bf00      	nop
 8001cae:	3728      	adds	r7, #40	; 0x28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020400 	.word	0x40020400

08001cbc <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <I2C1_MspDeInit+0x30>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	4a08      	ldr	r2, [pc, #32]	; (8001cec <I2C1_MspDeInit+0x30>)
 8001cca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001cce:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001cd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd4:	4806      	ldr	r0, [pc, #24]	; (8001cf0 <I2C1_MspDeInit+0x34>)
 8001cd6:	f005 f867 	bl	8006da8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001cda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cde:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <I2C1_MspDeInit+0x34>)
 8001ce0:	f005 f862 	bl	8006da8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020400 	.word	0x40020400

08001cf4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e00a      	b.n	8001d1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d06:	f3af 8000 	nop.w
 8001d0a:	4601      	mov	r1, r0
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	60ba      	str	r2, [r7, #8]
 8001d12:	b2ca      	uxtb	r2, r1
 8001d14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dbf0      	blt.n	8001d06 <_read+0x12>
	}

return len;
 8001d24:	687b      	ldr	r3, [r7, #4]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	e009      	b.n	8001d54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	60ba      	str	r2, [r7, #8]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f004 fc39 	bl	80065c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	3301      	adds	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	dbf1      	blt.n	8001d40 <_write+0x12>
	}
	return len;
 8001d5c:	687b      	ldr	r3, [r7, #4]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <_close>:

int _close(int file)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
	return -1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d8e:	605a      	str	r2, [r3, #4]
	return 0;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <_isatty>:

int _isatty(int file)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
	return 1;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
	return 0;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd8:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <_sbrk+0x5c>)
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <_sbrk+0x60>)
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de4:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <_sbrk+0x64>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <_sbrk+0x64>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <_sbrk+0x68>)
 8001df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d207      	bcs.n	8001e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e00:	f007 f950 	bl	80090a4 <__errno>
 8001e04:	4603      	mov	r3, r0
 8001e06:	220c      	movs	r2, #12
 8001e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	e009      	b.n	8001e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <_sbrk+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <_sbrk+0x64>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <_sbrk+0x64>)
 8001e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e22:	68fb      	ldr	r3, [r7, #12]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20020000 	.word	0x20020000
 8001e30:	00000400 	.word	0x00000400
 8001e34:	20000328 	.word	0x20000328
 8001e38:	20000460 	.word	0x20000460

08001e3c <IIS2DLPC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_RegisterBusIO(IIS2DLPC_Object_t *pObj, IIS2DLPC_IO_t *pIO)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d103      	bne.n	8001e58 <IIS2DLPC_RegisterBusIO+0x1c>
  {
    ret = IIS2DLPC_ERROR;
 8001e50:	f04f 33ff 	mov.w	r3, #4294967295
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	e04d      	b.n	8001ef4 <IIS2DLPC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	7b1a      	ldrb	r2, [r3, #12]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	699a      	ldr	r2, [r3, #24]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a1b      	ldr	r2, [pc, #108]	; (8001f00 <IIS2DLPC_RegisterBusIO+0xc4>)
 8001e94:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <IIS2DLPC_RegisterBusIO+0xc8>)
 8001e9a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d103      	bne.n	8001eb2 <IIS2DLPC_RegisterBusIO+0x76>
    {
      ret = IIS2DLPC_ERROR;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e020      	b.n	8001ef4 <IIS2DLPC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != IIS2DLPC_OK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4798      	blx	r3
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <IIS2DLPC_RegisterBusIO+0x8a>
    {
      ret = IIS2DLPC_ERROR;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	e016      	b.n	8001ef4 <IIS2DLPC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == IIS2DLPC_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d112      	bne.n	8001ef4 <IIS2DLPC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10d      	bne.n	8001ef4 <IIS2DLPC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001ed8:	2305      	movs	r3, #5
 8001eda:	72fb      	strb	r3, [r7, #11]

          if (IIS2DLPC_Write_Reg(pObj, IIS2DLPC_CTRL2, data) != IIS2DLPC_OK)
 8001edc:	7afb      	ldrb	r3, [r7, #11]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2121      	movs	r1, #33	; 0x21
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fd67 	bl	80029b6 <IIS2DLPC_Write_Reg>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <IIS2DLPC_RegisterBusIO+0xb8>
          {
            ret = IIS2DLPC_ERROR;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	08002d49 	.word	0x08002d49
 8001f04:	08002d7f 	.word	0x08002d7f

08001f08 <IIS2DLPC_Init>:
  * @brief  Initialize the IIS2DLPC sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_Init(IIS2DLPC_Object_t *pObj)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (iis2dlpc_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DLPC_OK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	331c      	adds	r3, #28
 8001f14:	2101      	movs	r1, #1
 8001f16:	4618      	mov	r0, r3
 8001f18:	f001 fa52 	bl	80033c0 <iis2dlpc_auto_increment_set>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <IIS2DLPC_Init+0x20>
  {
    return IIS2DLPC_ERROR;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
 8001f26:	e04b      	b.n	8001fc0 <IIS2DLPC_Init+0xb8>
  }

  /* Enable BDU */
  if (iis2dlpc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DLPC_OK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	331c      	adds	r3, #28
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f001 f966 	bl	8003200 <iis2dlpc_block_data_update_set>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <IIS2DLPC_Init+0x38>
  {
    return IIS2DLPC_ERROR;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	e03f      	b.n	8001fc0 <IIS2DLPC_Init+0xb8>
  }

  /* FIFO mode selection */
  if (iis2dlpc_fifo_mode_set(&(pObj->Ctx), IIS2DLPC_BYPASS_MODE) != IIS2DLPC_OK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	331c      	adds	r3, #28
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f001 fa60 	bl	800340c <iis2dlpc_fifo_mode_set>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <IIS2DLPC_Init+0x50>
  {
    return IIS2DLPC_ERROR;
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295
 8001f56:	e033      	b.n	8001fc0 <IIS2DLPC_Init+0xb8>
  }

  /* Power mode selection */
  if (iis2dlpc_power_mode_set(&(pObj->Ctx), IIS2DLPC_HIGH_PERFORMANCE) != IIS2DLPC_OK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	331c      	adds	r3, #28
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 ff58 	bl	8002e14 <iis2dlpc_power_mode_set>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <IIS2DLPC_Init+0x68>
  {
    return IIS2DLPC_ERROR;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6e:	e027      	b.n	8001fc0 <IIS2DLPC_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <IIS2DLPC_Init+0xc0>)
 8001f74:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = IIS2DLPC_HIGH_PERFORMANCE_MODE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = IIS2DLPC_LOW_NOISE_DISABLE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), IIS2DLPC_XL_ODR_OFF) != IIS2DLPC_OK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	331c      	adds	r3, #28
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f001 f849 	bl	8003024 <iis2dlpc_data_rate_set>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <IIS2DLPC_Init+0x96>
  {
    return IIS2DLPC_ERROR;
 8001f98:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9c:	e010      	b.n	8001fc0 <IIS2DLPC_Init+0xb8>
  }

  /* Full scale selection. */
  if (iis2dlpc_full_scale_set(&(pObj->Ctx), IIS2DLPC_2g) != IIS2DLPC_OK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	331c      	adds	r3, #28
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f001 f951 	bl	800324c <iis2dlpc_full_scale_set>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <IIS2DLPC_Init+0xae>
  {
    return IIS2DLPC_ERROR;
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb4:	e004      	b.n	8001fc0 <IIS2DLPC_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2DLPC_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	42c80000 	.word	0x42c80000

08001fcc <IIS2DLPC_DeInit>:
  * @brief  Deinitialize the IIS2DLPC sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_DeInit(IIS2DLPC_Object_t *pObj)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2DLPC_ACC_Disable(pObj) != IIS2DLPC_OK)
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f888 	bl	80020ea <IIS2DLPC_ACC_Disable>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <IIS2DLPC_DeInit+0x1a>
  {
    return IIS2DLPC_ERROR;
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe4:	e010      	b.n	8002008 <IIS2DLPC_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = IIS2DLPC_HIGH_PERFORMANCE_MODE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = IIS2DLPC_LOW_NOISE_DISABLE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2DLPC_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <IIS2DLPC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ReadID(IIS2DLPC_Object_t *pObj, uint8_t *Id)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  if (iis2dlpc_device_id_get(&(pObj->Ctx), Id) != IIS2DLPC_OK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	331c      	adds	r3, #28
 800201e:	6839      	ldr	r1, [r7, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f001 f9bc 	bl	800339e <iis2dlpc_device_id_get>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <IIS2DLPC_ReadID+0x22>
  {
    return IIS2DLPC_ERROR;
 800202c:	f04f 33ff 	mov.w	r3, #4294967295
 8002030:	e000      	b.n	8002034 <IIS2DLPC_ReadID+0x24>
  }

  return IIS2DLPC_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <IIS2DLPC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to IIS2DLPC sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_GetCapabilities(IIS2DLPC_Object_t *pObj, IIS2DLPC_Capabilities_t *Capabilities)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	2200      	movs	r2, #0
 8002050:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2200      	movs	r2, #0
 8002056:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2200      	movs	r2, #0
 800205c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2200      	movs	r2, #0
 8002062:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2210      	movs	r2, #16
 8002068:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2200      	movs	r2, #0
 800206e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	4a06      	ldr	r2, [pc, #24]	; (8002094 <IIS2DLPC_GetCapabilities+0x58>)
 800207c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	619a      	str	r2, [r3, #24]
  return IIS2DLPC_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	44c80000 	.word	0x44c80000

08002098 <IIS2DLPC_ACC_Enable>:
  * @brief  Enable the IIS2DLPC accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_Enable(IIS2DLPC_Object_t *pObj)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <IIS2DLPC_ACC_Enable+0x16>
  {
    return IIS2DLPC_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e019      	b.n	80020e2 <IIS2DLPC_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80020c0:	461a      	mov	r2, r3
 80020c2:	eeb0 0a67 	vmov.f32	s0, s15
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fc90 	bl	80029ec <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <IIS2DLPC_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != IIS2DLPC_OK)
  {
    return IIS2DLPC_ERROR;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	e004      	b.n	80020e2 <IIS2DLPC_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2DLPC_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <IIS2DLPC_ACC_Disable>:
  * @brief  Disable the IIS2DLPC accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_Disable(IIS2DLPC_Object_t *pObj)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <IIS2DLPC_ACC_Disable+0x16>
  {
    return IIS2DLPC_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	e010      	b.n	8002122 <IIS2DLPC_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), IIS2DLPC_XL_ODR_OFF) != IIS2DLPC_OK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	331c      	adds	r3, #28
 8002104:	2100      	movs	r1, #0
 8002106:	4618      	mov	r0, r3
 8002108:	f000 ff8c 	bl	8003024 <iis2dlpc_data_rate_set>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <IIS2DLPC_ACC_Disable+0x2e>
  {
    return IIS2DLPC_ERROR;
 8002112:	f04f 33ff 	mov.w	r3, #4294967295
 8002116:	e004      	b.n	8002122 <IIS2DLPC_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2DLPC_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <IIS2DLPC_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetSensitivity(IIS2DLPC_Object_t *pObj, float *Sensitivity)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
  iis2dlpc_fs_t full_scale;
  iis2dlpc_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (iis2dlpc_full_scale_get(&(pObj->Ctx), &full_scale) != IIS2DLPC_OK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	331c      	adds	r3, #28
 800213e:	f107 020b 	add.w	r2, r7, #11
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f001 f8a7 	bl	8003298 <iis2dlpc_full_scale_get>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <IIS2DLPC_ACC_GetSensitivity+0x2a>
  {
    return IIS2DLPC_ERROR;
 8002150:	f04f 33ff 	mov.w	r3, #4294967295
 8002154:	e0a0      	b.n	8002298 <IIS2DLPC_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	331c      	adds	r3, #28
 800215a:	f107 020a 	add.w	r2, r7, #10
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f000 fea5 	bl	8002eb0 <iis2dlpc_power_mode_get>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <IIS2DLPC_ACC_GetSensitivity+0x46>
  {
    return IIS2DLPC_ERROR;
 800216c:	f04f 33ff 	mov.w	r3, #4294967295
 8002170:	e092      	b.n	8002298 <IIS2DLPC_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 8002172:	7abb      	ldrb	r3, [r7, #10]
 8002174:	2b1b      	cmp	r3, #27
 8002176:	f200 8087 	bhi.w	8002288 <IIS2DLPC_ACC_GetSensitivity+0x15c>
 800217a:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <IIS2DLPC_ACC_GetSensitivity+0x54>)
 800217c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002180:	080021f1 	.word	0x080021f1
 8002184:	0800223d 	.word	0x0800223d
 8002188:	0800223d 	.word	0x0800223d
 800218c:	0800223d 	.word	0x0800223d
 8002190:	0800223d 	.word	0x0800223d
 8002194:	08002289 	.word	0x08002289
 8002198:	08002289 	.word	0x08002289
 800219c:	08002289 	.word	0x08002289
 80021a0:	080021f1 	.word	0x080021f1
 80021a4:	0800223d 	.word	0x0800223d
 80021a8:	0800223d 	.word	0x0800223d
 80021ac:	0800223d 	.word	0x0800223d
 80021b0:	08002289 	.word	0x08002289
 80021b4:	08002289 	.word	0x08002289
 80021b8:	08002289 	.word	0x08002289
 80021bc:	08002289 	.word	0x08002289
 80021c0:	080021f1 	.word	0x080021f1
 80021c4:	0800223d 	.word	0x0800223d
 80021c8:	0800223d 	.word	0x0800223d
 80021cc:	0800223d 	.word	0x0800223d
 80021d0:	0800223d 	.word	0x0800223d
 80021d4:	08002289 	.word	0x08002289
 80021d8:	08002289 	.word	0x08002289
 80021dc:	08002289 	.word	0x08002289
 80021e0:	080021f1 	.word	0x080021f1
 80021e4:	0800223d 	.word	0x0800223d
 80021e8:	0800223d 	.word	0x0800223d
 80021ec:	0800223d 	.word	0x0800223d
  {
    case IIS2DLPC_CONT_LOW_PWR_12bit:
    case IIS2DLPC_SINGLE_LOW_PWR_12bit:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
    case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 80021f0:	7afb      	ldrb	r3, [r7, #11]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d81a      	bhi.n	800222c <IIS2DLPC_ACC_GetSensitivity+0x100>
 80021f6:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <IIS2DLPC_ACC_GetSensitivity+0xd0>)
 80021f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fc:	0800220d 	.word	0x0800220d
 8002200:	08002215 	.word	0x08002215
 8002204:	0800221d 	.word	0x0800221d
 8002208:	08002225 	.word	0x08002225
      {
        case IIS2DLPC_2g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	4a24      	ldr	r2, [pc, #144]	; (80022a0 <IIS2DLPC_ACC_GetSensitivity+0x174>)
 8002210:	601a      	str	r2, [r3, #0]
          break;
 8002212:	e012      	b.n	800223a <IIS2DLPC_ACC_GetSensitivity+0x10e>

        case IIS2DLPC_4g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4a23      	ldr	r2, [pc, #140]	; (80022a4 <IIS2DLPC_ACC_GetSensitivity+0x178>)
 8002218:	601a      	str	r2, [r3, #0]
          break;
 800221a:	e00e      	b.n	800223a <IIS2DLPC_ACC_GetSensitivity+0x10e>

        case IIS2DLPC_8g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	4a22      	ldr	r2, [pc, #136]	; (80022a8 <IIS2DLPC_ACC_GetSensitivity+0x17c>)
 8002220:	601a      	str	r2, [r3, #0]
          break;
 8002222:	e00a      	b.n	800223a <IIS2DLPC_ACC_GetSensitivity+0x10e>

        case IIS2DLPC_16g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4a21      	ldr	r2, [pc, #132]	; (80022ac <IIS2DLPC_ACC_GetSensitivity+0x180>)
 8002228:	601a      	str	r2, [r3, #0]
          break;
 800222a:	e006      	b.n	800223a <IIS2DLPC_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	4a20      	ldr	r2, [pc, #128]	; (80022b0 <IIS2DLPC_ACC_GetSensitivity+0x184>)
 8002230:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	60fb      	str	r3, [r7, #12]
          break;
 8002238:	bf00      	nop
      }
      break;
 800223a:	e02c      	b.n	8002296 <IIS2DLPC_ACC_GetSensitivity+0x16a>
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 800223c:	7afb      	ldrb	r3, [r7, #11]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d81a      	bhi.n	8002278 <IIS2DLPC_ACC_GetSensitivity+0x14c>
 8002242:	a201      	add	r2, pc, #4	; (adr r2, 8002248 <IIS2DLPC_ACC_GetSensitivity+0x11c>)
 8002244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002248:	08002259 	.word	0x08002259
 800224c:	08002261 	.word	0x08002261
 8002250:	08002269 	.word	0x08002269
 8002254:	08002271 	.word	0x08002271
      {
        case IIS2DLPC_2g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	4a16      	ldr	r2, [pc, #88]	; (80022b4 <IIS2DLPC_ACC_GetSensitivity+0x188>)
 800225c:	601a      	str	r2, [r3, #0]
          break;
 800225e:	e012      	b.n	8002286 <IIS2DLPC_ACC_GetSensitivity+0x15a>

        case IIS2DLPC_4g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	4a15      	ldr	r2, [pc, #84]	; (80022b8 <IIS2DLPC_ACC_GetSensitivity+0x18c>)
 8002264:	601a      	str	r2, [r3, #0]
          break;
 8002266:	e00e      	b.n	8002286 <IIS2DLPC_ACC_GetSensitivity+0x15a>

        case IIS2DLPC_8g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <IIS2DLPC_ACC_GetSensitivity+0x174>)
 800226c:	601a      	str	r2, [r3, #0]
          break;
 800226e:	e00a      	b.n	8002286 <IIS2DLPC_ACC_GetSensitivity+0x15a>

        case IIS2DLPC_16g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <IIS2DLPC_ACC_GetSensitivity+0x178>)
 8002274:	601a      	str	r2, [r3, #0]
          break;
 8002276:	e006      	b.n	8002286 <IIS2DLPC_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <IIS2DLPC_ACC_GetSensitivity+0x184>)
 800227c:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	60fb      	str	r3, [r7, #12]
          break;
 8002284:	bf00      	nop
      }
      break;
 8002286:	e006      	b.n	8002296 <IIS2DLPC_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <IIS2DLPC_ACC_GetSensitivity+0x184>)
 800228c:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	60fb      	str	r3, [r7, #12]
      break;
 8002294:	bf00      	nop
  }

  return ret;
 8002296:	68fb      	ldr	r3, [r7, #12]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	3f79db23 	.word	0x3f79db23
 80022a4:	3ff9db23 	.word	0x3ff9db23
 80022a8:	4079db23 	.word	0x4079db23
 80022ac:	40f9db23 	.word	0x40f9db23
 80022b0:	bf800000 	.word	0xbf800000
 80022b4:	3e79db23 	.word	0x3e79db23
 80022b8:	3ef9db23 	.word	0x3ef9db23

080022bc <IIS2DLPC_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetOutputDataRate(IIS2DLPC_Object_t *pObj, float *Odr)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
  iis2dlpc_odr_t odr_low_level;
  iis2dlpc_mode_t mode;

  /* Get current output data rate. */
  if (iis2dlpc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2DLPC_OK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	331c      	adds	r3, #28
 80022ce:	f107 020b 	add.w	r2, r7, #11
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 feeb 	bl	80030b0 <iis2dlpc_data_rate_get>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <IIS2DLPC_ACC_GetOutputDataRate+0x2a>
  {
    return IIS2DLPC_ERROR;
 80022e0:	f04f 33ff 	mov.w	r3, #4294967295
 80022e4:	e1b4      	b.n	8002650 <IIS2DLPC_ACC_GetOutputDataRate+0x394>
  }

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	331c      	adds	r3, #28
 80022ea:	f107 020a 	add.w	r2, r7, #10
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 fddd 	bl	8002eb0 <iis2dlpc_power_mode_get>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <IIS2DLPC_ACC_GetOutputDataRate+0x46>
  {
    return IIS2DLPC_ERROR;
 80022fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002300:	e1a6      	b.n	8002650 <IIS2DLPC_ACC_GetOutputDataRate+0x394>
  }

  switch (odr_low_level)
 8002302:	7afb      	ldrb	r3, [r7, #11]
 8002304:	2b22      	cmp	r3, #34	; 0x22
 8002306:	f200 819b 	bhi.w	8002640 <IIS2DLPC_ACC_GetOutputDataRate+0x384>
 800230a:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <IIS2DLPC_ACC_GetOutputDataRate+0x54>)
 800230c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002310:	0800239d 	.word	0x0800239d
 8002314:	080023a7 	.word	0x080023a7
 8002318:	08002445 	.word	0x08002445
 800231c:	0800244d 	.word	0x0800244d
 8002320:	08002455 	.word	0x08002455
 8002324:	0800245d 	.word	0x0800245d
 8002328:	08002465 	.word	0x08002465
 800232c:	0800246d 	.word	0x0800246d
 8002330:	08002509 	.word	0x08002509
 8002334:	080025a5 	.word	0x080025a5
 8002338:	08002641 	.word	0x08002641
 800233c:	08002641 	.word	0x08002641
 8002340:	08002641 	.word	0x08002641
 8002344:	08002641 	.word	0x08002641
 8002348:	08002641 	.word	0x08002641
 800234c:	08002641 	.word	0x08002641
 8002350:	08002641 	.word	0x08002641
 8002354:	08002641 	.word	0x08002641
 8002358:	0800239d 	.word	0x0800239d
 800235c:	08002641 	.word	0x08002641
 8002360:	08002641 	.word	0x08002641
 8002364:	08002641 	.word	0x08002641
 8002368:	08002641 	.word	0x08002641
 800236c:	08002641 	.word	0x08002641
 8002370:	08002641 	.word	0x08002641
 8002374:	08002641 	.word	0x08002641
 8002378:	08002641 	.word	0x08002641
 800237c:	08002641 	.word	0x08002641
 8002380:	08002641 	.word	0x08002641
 8002384:	08002641 	.word	0x08002641
 8002388:	08002641 	.word	0x08002641
 800238c:	08002641 	.word	0x08002641
 8002390:	08002641 	.word	0x08002641
 8002394:	08002641 	.word	0x08002641
 8002398:	0800239d 	.word	0x0800239d
  {
    case IIS2DLPC_XL_ODR_OFF:
    case IIS2DLPC_XL_SET_SW_TRIG:
    case IIS2DLPC_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
      break;
 80023a4:	e153      	b.n	800264e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 80023a6:	7abb      	ldrb	r3, [r7, #10]
 80023a8:	2b1b      	cmp	r3, #27
 80023aa:	d843      	bhi.n	8002434 <IIS2DLPC_ACC_GetOutputDataRate+0x178>
 80023ac:	a201      	add	r2, pc, #4	; (adr r2, 80023b4 <IIS2DLPC_ACC_GetOutputDataRate+0xf8>)
 80023ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b2:	bf00      	nop
 80023b4:	0800242d 	.word	0x0800242d
 80023b8:	0800242d 	.word	0x0800242d
 80023bc:	0800242d 	.word	0x0800242d
 80023c0:	0800242d 	.word	0x0800242d
 80023c4:	08002425 	.word	0x08002425
 80023c8:	08002435 	.word	0x08002435
 80023cc:	08002435 	.word	0x08002435
 80023d0:	08002435 	.word	0x08002435
 80023d4:	0800242d 	.word	0x0800242d
 80023d8:	0800242d 	.word	0x0800242d
 80023dc:	0800242d 	.word	0x0800242d
 80023e0:	0800242d 	.word	0x0800242d
 80023e4:	08002435 	.word	0x08002435
 80023e8:	08002435 	.word	0x08002435
 80023ec:	08002435 	.word	0x08002435
 80023f0:	08002435 	.word	0x08002435
 80023f4:	0800242d 	.word	0x0800242d
 80023f8:	0800242d 	.word	0x0800242d
 80023fc:	0800242d 	.word	0x0800242d
 8002400:	0800242d 	.word	0x0800242d
 8002404:	08002425 	.word	0x08002425
 8002408:	08002435 	.word	0x08002435
 800240c:	08002435 	.word	0x08002435
 8002410:	08002435 	.word	0x08002435
 8002414:	0800242d 	.word	0x0800242d
 8002418:	0800242d 	.word	0x0800242d
 800241c:	0800242d 	.word	0x0800242d
 8002420:	0800242d 	.word	0x0800242d
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4a8c      	ldr	r2, [pc, #560]	; (8002658 <IIS2DLPC_ACC_GetOutputDataRate+0x39c>)
 8002428:	601a      	str	r2, [r3, #0]
          break;
 800242a:	e00a      	b.n	8002442 <IIS2DLPC_ACC_GetOutputDataRate+0x186>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4a8b      	ldr	r2, [pc, #556]	; (800265c <IIS2DLPC_ACC_GetOutputDataRate+0x3a0>)
 8002430:	601a      	str	r2, [r3, #0]
          break;
 8002432:	e006      	b.n	8002442 <IIS2DLPC_ACC_GetOutputDataRate+0x186>

        default:
          *Odr = -1.0f;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	4a8a      	ldr	r2, [pc, #552]	; (8002660 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8002438:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	60fb      	str	r3, [r7, #12]
          break;
 8002440:	bf00      	nop
      }
      break;
 8002442:	e104      	b.n	800264e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4a84      	ldr	r2, [pc, #528]	; (8002658 <IIS2DLPC_ACC_GetOutputDataRate+0x39c>)
 8002448:	601a      	str	r2, [r3, #0]
      break;
 800244a:	e100      	b.n	800264e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_25Hz:
      *Odr = 25.0f;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	4a85      	ldr	r2, [pc, #532]	; (8002664 <IIS2DLPC_ACC_GetOutputDataRate+0x3a8>)
 8002450:	601a      	str	r2, [r3, #0]
      break;
 8002452:	e0fc      	b.n	800264e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_50Hz:
      *Odr = 50.0f;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	4a84      	ldr	r2, [pc, #528]	; (8002668 <IIS2DLPC_ACC_GetOutputDataRate+0x3ac>)
 8002458:	601a      	str	r2, [r3, #0]
      break;
 800245a:	e0f8      	b.n	800264e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_100Hz:
      *Odr = 100.0f;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	4a83      	ldr	r2, [pc, #524]	; (800266c <IIS2DLPC_ACC_GetOutputDataRate+0x3b0>)
 8002460:	601a      	str	r2, [r3, #0]
      break;
 8002462:	e0f4      	b.n	800264e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_200Hz:
      *Odr = 200.0f;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	4a82      	ldr	r2, [pc, #520]	; (8002670 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 8002468:	601a      	str	r2, [r3, #0]
      break;
 800246a:	e0f0      	b.n	800264e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_400Hz:
      switch (mode)
 800246c:	7abb      	ldrb	r3, [r7, #10]
 800246e:	2b1b      	cmp	r3, #27
 8002470:	d842      	bhi.n	80024f8 <IIS2DLPC_ACC_GetOutputDataRate+0x23c>
 8002472:	a201      	add	r2, pc, #4	; (adr r2, 8002478 <IIS2DLPC_ACC_GetOutputDataRate+0x1bc>)
 8002474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002478:	080024f1 	.word	0x080024f1
 800247c:	080024f1 	.word	0x080024f1
 8002480:	080024f1 	.word	0x080024f1
 8002484:	080024f1 	.word	0x080024f1
 8002488:	080024e9 	.word	0x080024e9
 800248c:	080024f9 	.word	0x080024f9
 8002490:	080024f9 	.word	0x080024f9
 8002494:	080024f9 	.word	0x080024f9
 8002498:	080024f1 	.word	0x080024f1
 800249c:	080024f1 	.word	0x080024f1
 80024a0:	080024f1 	.word	0x080024f1
 80024a4:	080024f1 	.word	0x080024f1
 80024a8:	080024f9 	.word	0x080024f9
 80024ac:	080024f9 	.word	0x080024f9
 80024b0:	080024f9 	.word	0x080024f9
 80024b4:	080024f9 	.word	0x080024f9
 80024b8:	080024f1 	.word	0x080024f1
 80024bc:	080024f1 	.word	0x080024f1
 80024c0:	080024f1 	.word	0x080024f1
 80024c4:	080024f1 	.word	0x080024f1
 80024c8:	080024e9 	.word	0x080024e9
 80024cc:	080024f9 	.word	0x080024f9
 80024d0:	080024f9 	.word	0x080024f9
 80024d4:	080024f9 	.word	0x080024f9
 80024d8:	080024f1 	.word	0x080024f1
 80024dc:	080024f1 	.word	0x080024f1
 80024e0:	080024f1 	.word	0x080024f1
 80024e4:	080024f1 	.word	0x080024f1
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	4a62      	ldr	r2, [pc, #392]	; (8002674 <IIS2DLPC_ACC_GetOutputDataRate+0x3b8>)
 80024ec:	601a      	str	r2, [r3, #0]
          break;
 80024ee:	e00a      	b.n	8002506 <IIS2DLPC_ACC_GetOutputDataRate+0x24a>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	4a5f      	ldr	r2, [pc, #380]	; (8002670 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 80024f4:	601a      	str	r2, [r3, #0]
          break;
 80024f6:	e006      	b.n	8002506 <IIS2DLPC_ACC_GetOutputDataRate+0x24a>

        default:
          *Odr = -1.0f;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4a59      	ldr	r2, [pc, #356]	; (8002660 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 80024fc:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002502:	60fb      	str	r3, [r7, #12]
          break;
 8002504:	bf00      	nop
      }
      break;
 8002506:	e0a2      	b.n	800264e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_800Hz:
      switch (mode)
 8002508:	7abb      	ldrb	r3, [r7, #10]
 800250a:	2b1b      	cmp	r3, #27
 800250c:	d842      	bhi.n	8002594 <IIS2DLPC_ACC_GetOutputDataRate+0x2d8>
 800250e:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <IIS2DLPC_ACC_GetOutputDataRate+0x258>)
 8002510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002514:	0800258d 	.word	0x0800258d
 8002518:	0800258d 	.word	0x0800258d
 800251c:	0800258d 	.word	0x0800258d
 8002520:	0800258d 	.word	0x0800258d
 8002524:	08002585 	.word	0x08002585
 8002528:	08002595 	.word	0x08002595
 800252c:	08002595 	.word	0x08002595
 8002530:	08002595 	.word	0x08002595
 8002534:	0800258d 	.word	0x0800258d
 8002538:	0800258d 	.word	0x0800258d
 800253c:	0800258d 	.word	0x0800258d
 8002540:	0800258d 	.word	0x0800258d
 8002544:	08002595 	.word	0x08002595
 8002548:	08002595 	.word	0x08002595
 800254c:	08002595 	.word	0x08002595
 8002550:	08002595 	.word	0x08002595
 8002554:	0800258d 	.word	0x0800258d
 8002558:	0800258d 	.word	0x0800258d
 800255c:	0800258d 	.word	0x0800258d
 8002560:	0800258d 	.word	0x0800258d
 8002564:	08002585 	.word	0x08002585
 8002568:	08002595 	.word	0x08002595
 800256c:	08002595 	.word	0x08002595
 8002570:	08002595 	.word	0x08002595
 8002574:	0800258d 	.word	0x0800258d
 8002578:	0800258d 	.word	0x0800258d
 800257c:	0800258d 	.word	0x0800258d
 8002580:	0800258d 	.word	0x0800258d
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	4a3c      	ldr	r2, [pc, #240]	; (8002678 <IIS2DLPC_ACC_GetOutputDataRate+0x3bc>)
 8002588:	601a      	str	r2, [r3, #0]
          break;
 800258a:	e00a      	b.n	80025a2 <IIS2DLPC_ACC_GetOutputDataRate+0x2e6>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4a38      	ldr	r2, [pc, #224]	; (8002670 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 8002590:	601a      	str	r2, [r3, #0]
          break;
 8002592:	e006      	b.n	80025a2 <IIS2DLPC_ACC_GetOutputDataRate+0x2e6>

        default:
          *Odr = -1.0f;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4a32      	ldr	r2, [pc, #200]	; (8002660 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8002598:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
 800259e:	60fb      	str	r3, [r7, #12]
          break;
 80025a0:	bf00      	nop
      }
      break;
 80025a2:	e054      	b.n	800264e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_1k6Hz:
      switch (mode)
 80025a4:	7abb      	ldrb	r3, [r7, #10]
 80025a6:	2b1b      	cmp	r3, #27
 80025a8:	d842      	bhi.n	8002630 <IIS2DLPC_ACC_GetOutputDataRate+0x374>
 80025aa:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <IIS2DLPC_ACC_GetOutputDataRate+0x2f4>)
 80025ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b0:	08002629 	.word	0x08002629
 80025b4:	08002629 	.word	0x08002629
 80025b8:	08002629 	.word	0x08002629
 80025bc:	08002629 	.word	0x08002629
 80025c0:	08002621 	.word	0x08002621
 80025c4:	08002631 	.word	0x08002631
 80025c8:	08002631 	.word	0x08002631
 80025cc:	08002631 	.word	0x08002631
 80025d0:	08002629 	.word	0x08002629
 80025d4:	08002629 	.word	0x08002629
 80025d8:	08002629 	.word	0x08002629
 80025dc:	08002629 	.word	0x08002629
 80025e0:	08002631 	.word	0x08002631
 80025e4:	08002631 	.word	0x08002631
 80025e8:	08002631 	.word	0x08002631
 80025ec:	08002631 	.word	0x08002631
 80025f0:	08002629 	.word	0x08002629
 80025f4:	08002629 	.word	0x08002629
 80025f8:	08002629 	.word	0x08002629
 80025fc:	08002629 	.word	0x08002629
 8002600:	08002621 	.word	0x08002621
 8002604:	08002631 	.word	0x08002631
 8002608:	08002631 	.word	0x08002631
 800260c:	08002631 	.word	0x08002631
 8002610:	08002629 	.word	0x08002629
 8002614:	08002629 	.word	0x08002629
 8002618:	08002629 	.word	0x08002629
 800261c:	08002629 	.word	0x08002629
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	4a16      	ldr	r2, [pc, #88]	; (800267c <IIS2DLPC_ACC_GetOutputDataRate+0x3c0>)
 8002624:	601a      	str	r2, [r3, #0]
          break;
 8002626:	e00a      	b.n	800263e <IIS2DLPC_ACC_GetOutputDataRate+0x382>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4a11      	ldr	r2, [pc, #68]	; (8002670 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 800262c:	601a      	str	r2, [r3, #0]
          break;
 800262e:	e006      	b.n	800263e <IIS2DLPC_ACC_GetOutputDataRate+0x382>

        default:
          *Odr = -1.0f;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8002634:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8002636:	f04f 33ff 	mov.w	r3, #4294967295
 800263a:	60fb      	str	r3, [r7, #12]
          break;
 800263c:	bf00      	nop
      }
      break;
 800263e:	e006      	b.n	800264e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    default:
      *Odr = -1.0f;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	4a07      	ldr	r2, [pc, #28]	; (8002660 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8002644:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 8002646:	f04f 33ff 	mov.w	r3, #4294967295
 800264a:	60fb      	str	r3, [r7, #12]
      break;
 800264c:	bf00      	nop
  }

  return ret;
 800264e:	68fb      	ldr	r3, [r7, #12]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	41480000 	.word	0x41480000
 800265c:	3fcccccd 	.word	0x3fcccccd
 8002660:	bf800000 	.word	0xbf800000
 8002664:	41c80000 	.word	0x41c80000
 8002668:	42480000 	.word	0x42480000
 800266c:	42c80000 	.word	0x42c80000
 8002670:	43480000 	.word	0x43480000
 8002674:	43c80000 	.word	0x43c80000
 8002678:	44480000 	.word	0x44480000
 800267c:	44c80000 	.word	0x44c80000

08002680 <IIS2DLPC_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_SetOutputDataRate(IIS2DLPC_Object_t *pObj, float Odr)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return IIS2DLPC_ACC_SetOutputDataRate_With_Mode(pObj, Odr, IIS2DLPC_HIGH_PERFORMANCE_MODE, IIS2DLPC_LOW_NOISE_DISABLE);
 800268c:	2200      	movs	r2, #0
 800268e:	2100      	movs	r1, #0
 8002690:	ed97 0a00 	vldr	s0, [r7]
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f805 	bl	80026a4 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode>
 800269a:	4603      	mov	r3, r0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_SetOutputDataRate_With_Mode(IIS2DLPC_Object_t *pObj, float Odr, IIS2DLPC_Operating_Mode_t Mode,
                                                 IIS2DLPC_Low_Noise_t Noise)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80026b0:	460b      	mov	r3, r1
 80026b2:	71fb      	strb	r3, [r7, #7]
 80026b4:	4613      	mov	r3, r2
 80026b6:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d109      	bne.n	80026d6 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80026c2:	79ba      	ldrb	r2, [r7, #6]
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	4619      	mov	r1, r3
 80026c8:	ed97 0a02 	vldr	s0, [r7, #8]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f98d 	bl	80029ec <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>
 80026d2:	4603      	mov	r3, r0
 80026d4:	e008      	b.n	80026e8 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return IIS2DLPC_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80026d6:	79ba      	ldrb	r2, [r7, #6]
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	4619      	mov	r1, r3
 80026dc:	ed97 0a02 	vldr	s0, [r7, #8]
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 fa9f 	bl	8002c24 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled>
 80026e6:	4603      	mov	r3, r0
  }
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <IIS2DLPC_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetFullScale(IIS2DLPC_Object_t *pObj, int32_t *FullScale)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
  iis2dlpc_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (iis2dlpc_full_scale_get(&(pObj->Ctx), &fs_low_level) != IIS2DLPC_OK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	331c      	adds	r3, #28
 8002702:	f107 020b 	add.w	r2, r7, #11
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fdc5 	bl	8003298 <iis2dlpc_full_scale_get>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <IIS2DLPC_ACC_GetFullScale+0x2a>
  {
    return IIS2DLPC_ERROR;
 8002714:	f04f 33ff 	mov.w	r3, #4294967295
 8002718:	e027      	b.n	800276a <IIS2DLPC_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800271a:	7afb      	ldrb	r3, [r7, #11]
 800271c:	2b03      	cmp	r3, #3
 800271e:	d81b      	bhi.n	8002758 <IIS2DLPC_ACC_GetFullScale+0x68>
 8002720:	a201      	add	r2, pc, #4	; (adr r2, 8002728 <IIS2DLPC_ACC_GetFullScale+0x38>)
 8002722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002726:	bf00      	nop
 8002728:	08002739 	.word	0x08002739
 800272c:	08002741 	.word	0x08002741
 8002730:	08002749 	.word	0x08002749
 8002734:	08002751 	.word	0x08002751
  {
    case IIS2DLPC_2g:
      *FullScale =  2;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2202      	movs	r2, #2
 800273c:	601a      	str	r2, [r3, #0]
      break;
 800273e:	e013      	b.n	8002768 <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_4g:
      *FullScale =  4;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2204      	movs	r2, #4
 8002744:	601a      	str	r2, [r3, #0]
      break;
 8002746:	e00f      	b.n	8002768 <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_8g:
      *FullScale =  8;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	2208      	movs	r2, #8
 800274c:	601a      	str	r2, [r3, #0]
      break;
 800274e:	e00b      	b.n	8002768 <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_16g:
      *FullScale = 16;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2210      	movs	r2, #16
 8002754:	601a      	str	r2, [r3, #0]
      break;
 8002756:	e007      	b.n	8002768 <IIS2DLPC_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	f04f 32ff 	mov.w	r2, #4294967295
 800275e:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 8002760:	f04f 33ff 	mov.w	r3, #4294967295
 8002764:	60fb      	str	r3, [r7, #12]
      break;
 8002766:	bf00      	nop
  }

  return ret;
 8002768:	68fb      	ldr	r3, [r7, #12]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop

08002774 <IIS2DLPC_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_SetFullScale(IIS2DLPC_Object_t *pObj, int32_t FullScale)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  iis2dlpc_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? IIS2DLPC_2g
           : (FullScale <= 4) ? IIS2DLPC_4g
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b02      	cmp	r3, #2
 8002782:	dd0b      	ble.n	800279c <IIS2DLPC_ACC_SetFullScale+0x28>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b04      	cmp	r3, #4
 8002788:	dd06      	ble.n	8002798 <IIS2DLPC_ACC_SetFullScale+0x24>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b08      	cmp	r3, #8
 800278e:	dc01      	bgt.n	8002794 <IIS2DLPC_ACC_SetFullScale+0x20>
 8002790:	2302      	movs	r3, #2
 8002792:	e004      	b.n	800279e <IIS2DLPC_ACC_SetFullScale+0x2a>
 8002794:	2303      	movs	r3, #3
 8002796:	e002      	b.n	800279e <IIS2DLPC_ACC_SetFullScale+0x2a>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <IIS2DLPC_ACC_SetFullScale+0x2a>
 800279c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? IIS2DLPC_2g
 800279e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? IIS2DLPC_8g
           :                    IIS2DLPC_16g;

  if (iis2dlpc_full_scale_set(&(pObj->Ctx), new_fs) != IIS2DLPC_OK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	331c      	adds	r3, #28
 80027a4:	7bfa      	ldrb	r2, [r7, #15]
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 fd4f 	bl	800324c <iis2dlpc_full_scale_set>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <IIS2DLPC_ACC_SetFullScale+0x46>
  {
    return IIS2DLPC_ERROR;
 80027b4:	f04f 33ff 	mov.w	r3, #4294967295
 80027b8:	e000      	b.n	80027bc <IIS2DLPC_ACC_SetFullScale+0x48>
  }

  return IIS2DLPC_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <IIS2DLPC_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetAxesRaw(IIS2DLPC_Object_t *pObj, IIS2DLPC_AxesRaw_t *Value)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  iis2dlpc_axis3bit16_t data_raw;
  iis2dlpc_mode_t mode;
  int32_t ret = IIS2DLPC_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	331c      	adds	r3, #28
 80027d6:	f107 020b 	add.w	r2, r7, #11
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fb67 	bl	8002eb0 <iis2dlpc_power_mode_get>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <IIS2DLPC_ACC_GetAxesRaw+0x2a>
  {
    return IIS2DLPC_ERROR;
 80027e8:	f04f 33ff 	mov.w	r3, #4294967295
 80027ec:	e089      	b.n	8002902 <IIS2DLPC_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (iis2dlpc_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2DLPC_OK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	331c      	adds	r3, #28
 80027f2:	f107 020c 	add.w	r2, r7, #12
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fd85 	bl	8003308 <iis2dlpc_acceleration_raw_get>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <IIS2DLPC_ACC_GetAxesRaw+0x46>
  {
    return IIS2DLPC_ERROR;
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
 8002808:	e07b      	b.n	8002902 <IIS2DLPC_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 800280a:	7afb      	ldrb	r3, [r7, #11]
 800280c:	2b1b      	cmp	r3, #27
 800280e:	d873      	bhi.n	80028f8 <IIS2DLPC_ACC_GetAxesRaw+0x134>
 8002810:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <IIS2DLPC_ACC_GetAxesRaw+0x54>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	08002889 	.word	0x08002889
 800281c:	080028c1 	.word	0x080028c1
 8002820:	080028c1 	.word	0x080028c1
 8002824:	080028c1 	.word	0x080028c1
 8002828:	080028c1 	.word	0x080028c1
 800282c:	080028f9 	.word	0x080028f9
 8002830:	080028f9 	.word	0x080028f9
 8002834:	080028f9 	.word	0x080028f9
 8002838:	08002889 	.word	0x08002889
 800283c:	080028c1 	.word	0x080028c1
 8002840:	080028c1 	.word	0x080028c1
 8002844:	080028c1 	.word	0x080028c1
 8002848:	080028f9 	.word	0x080028f9
 800284c:	080028f9 	.word	0x080028f9
 8002850:	080028f9 	.word	0x080028f9
 8002854:	080028f9 	.word	0x080028f9
 8002858:	08002889 	.word	0x08002889
 800285c:	080028c1 	.word	0x080028c1
 8002860:	080028c1 	.word	0x080028c1
 8002864:	080028c1 	.word	0x080028c1
 8002868:	080028c1 	.word	0x080028c1
 800286c:	080028f9 	.word	0x080028f9
 8002870:	080028f9 	.word	0x080028f9
 8002874:	080028f9 	.word	0x080028f9
 8002878:	08002889 	.word	0x08002889
 800287c:	080028c1 	.word	0x080028c1
 8002880:	080028c1 	.word	0x080028c1
 8002884:	080028c1 	.word	0x080028c1
    case IIS2DLPC_CONT_LOW_PWR_12bit:
    case IIS2DLPC_SINGLE_LOW_PWR_12bit:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
    case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8002888:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	da00      	bge.n	8002892 <IIS2DLPC_ACC_GetAxesRaw+0xce>
 8002890:	330f      	adds	r3, #15
 8002892:	111b      	asrs	r3, r3, #4
 8002894:	b21a      	sxth	r2, r3
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800289a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	da00      	bge.n	80028a4 <IIS2DLPC_ACC_GetAxesRaw+0xe0>
 80028a2:	330f      	adds	r3, #15
 80028a4:	111b      	asrs	r3, r3, #4
 80028a6:	b21a      	sxth	r2, r3
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 80028ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	da00      	bge.n	80028b6 <IIS2DLPC_ACC_GetAxesRaw+0xf2>
 80028b4:	330f      	adds	r3, #15
 80028b6:	111b      	asrs	r3, r3, #4
 80028b8:	b21a      	sxth	r2, r3
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	809a      	strh	r2, [r3, #4]
      break;
 80028be:	e01f      	b.n	8002900 <IIS2DLPC_ACC_GetAxesRaw+0x13c>
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 80028c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	da00      	bge.n	80028ca <IIS2DLPC_ACC_GetAxesRaw+0x106>
 80028c8:	3303      	adds	r3, #3
 80028ca:	109b      	asrs	r3, r3, #2
 80028cc:	b21a      	sxth	r2, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 80028d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	da00      	bge.n	80028dc <IIS2DLPC_ACC_GetAxesRaw+0x118>
 80028da:	3303      	adds	r3, #3
 80028dc:	109b      	asrs	r3, r3, #2
 80028de:	b21a      	sxth	r2, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80028e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	da00      	bge.n	80028ee <IIS2DLPC_ACC_GetAxesRaw+0x12a>
 80028ec:	3303      	adds	r3, #3
 80028ee:	109b      	asrs	r3, r3, #2
 80028f0:	b21a      	sxth	r2, r3
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	809a      	strh	r2, [r3, #4]
      break;
 80028f6:	e003      	b.n	8002900 <IIS2DLPC_ACC_GetAxesRaw+0x13c>

    default:
      ret = IIS2DLPC_ERROR;
 80028f8:	f04f 33ff 	mov.w	r3, #4294967295
 80028fc:	617b      	str	r3, [r7, #20]
      break;
 80028fe:	bf00      	nop
  }

  return ret;
 8002900:	697b      	ldr	r3, [r7, #20]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop

0800290c <IIS2DLPC_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetAxes(IIS2DLPC_Object_t *pObj, IIS2DLPC_Axes_t *Acceleration)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  IIS2DLPC_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (IIS2DLPC_ACC_GetAxesRaw(pObj, &data_raw) != IIS2DLPC_OK)
 800291c:	f107 0310 	add.w	r3, r7, #16
 8002920:	4619      	mov	r1, r3
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ff4e 	bl	80027c4 <IIS2DLPC_ACC_GetAxesRaw>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <IIS2DLPC_ACC_GetAxes+0x28>
  {
    return IIS2DLPC_ERROR;
 800292e:	f04f 33ff 	mov.w	r3, #4294967295
 8002932:	e03c      	b.n	80029ae <IIS2DLPC_ACC_GetAxes+0xa2>
  }

  /* Get IIS2DLPC actual sensitivity. */
  if (IIS2DLPC_ACC_GetSensitivity(pObj, &sensitivity) != IIS2DLPC_OK)
 8002934:	f107 030c 	add.w	r3, r7, #12
 8002938:	4619      	mov	r1, r3
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff fbf6 	bl	800212c <IIS2DLPC_ACC_GetSensitivity>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <IIS2DLPC_ACC_GetAxes+0x40>
  {
    return IIS2DLPC_ERROR;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
 800294a:	e030      	b.n	80029ae <IIS2DLPC_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800294c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002950:	ee07 3a90 	vmov	s15, r3
 8002954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002958:	edd7 7a03 	vldr	s15, [r7, #12]
 800295c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002960:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002964:	ee17 2a90 	vmov	r2, s15
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800296c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002970:	ee07 3a90 	vmov	s15, r3
 8002974:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002978:	edd7 7a03 	vldr	s15, [r7, #12]
 800297c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002984:	ee17 2a90 	vmov	r2, s15
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800298c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002990:	ee07 3a90 	vmov	s15, r3
 8002994:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002998:	edd7 7a03 	vldr	s15, [r7, #12]
 800299c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029a4:	ee17 2a90 	vmov	r2, s15
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	609a      	str	r2, [r3, #8]

  return IIS2DLPC_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <IIS2DLPC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_Write_Reg(IIS2DLPC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	70fb      	strb	r3, [r7, #3]
 80029c2:	4613      	mov	r3, r2
 80029c4:	70bb      	strb	r3, [r7, #2]
  if (iis2dlpc_write_reg(&(pObj->Ctx), Reg, &Data, 1) != IIS2DLPC_OK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f103 001c 	add.w	r0, r3, #28
 80029cc:	1cba      	adds	r2, r7, #2
 80029ce:	78f9      	ldrb	r1, [r7, #3]
 80029d0:	2301      	movs	r3, #1
 80029d2:	f000 fa07 	bl	8002de4 <iis2dlpc_write_reg>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <IIS2DLPC_Write_Reg+0x2c>
  {
    return IIS2DLPC_ERROR;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295
 80029e0:	e000      	b.n	80029e4 <IIS2DLPC_Write_Reg+0x2e>
  }

  return IIS2DLPC_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(IIS2DLPC_Object_t *pObj, float Odr,
                                                           IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80029f8:	460b      	mov	r3, r1
 80029fa:	71fb      	strb	r3, [r7, #7]
 80029fc:	4613      	mov	r3, r2
 80029fe:	71bb      	strb	r3, [r7, #6]
  iis2dlpc_odr_t new_odr;
  iis2dlpc_mode_t new_power_mode;

  switch (Mode)
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d80b      	bhi.n	8002a20 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x34>
 8002a08:	a201      	add	r2, pc, #4	; (adr r2, 8002a10 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8002a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0e:	bf00      	nop
 8002a10:	08002a4d 	.word	0x08002a4d
 8002a14:	08002a79 	.word	0x08002a79
 8002a18:	08002aa5 	.word	0x08002aa5
 8002a1c:	08002ad1 	.word	0x08002ad1
  {
    case IIS2DLPC_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8002a20:	79bb      	ldrb	r3, [r7, #6]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d002      	beq.n	8002a2c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_HIGH_PERFORMANCE;
 8002a26:	2304      	movs	r3, #4
 8002a28:	75fb      	strb	r3, [r7, #23]
          break;
 8002a2a:	e002      	b.n	8002a32 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x46>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE;
 8002a2c:	2314      	movs	r3, #20
 8002a2e:	75fb      	strb	r3, [r7, #23]
          break;
 8002a30:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8002a32:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a36:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a42:	d400      	bmi.n	8002a46 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8002a44:	e05a      	b.n	8002afc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8002a46:	4b6f      	ldr	r3, [pc, #444]	; (8002c04 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8002a48:	60bb      	str	r3, [r7, #8]
      break;
 8002a4a:	e057      	b.n	8002afc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE4:
      switch (Noise)
 8002a4c:	79bb      	ldrb	r3, [r7, #6]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d002      	beq.n	8002a58 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_4;
 8002a52:	2303      	movs	r3, #3
 8002a54:	75fb      	strb	r3, [r7, #23]
          break;
 8002a56:	e002      	b.n	8002a5e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x72>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4;
 8002a58:	2313      	movs	r3, #19
 8002a5a:	75fb      	strb	r3, [r7, #23]
          break;
 8002a5c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002a5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a62:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002c08 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002a66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6e:	dc00      	bgt.n	8002a72 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8002a70:	e044      	b.n	8002afc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002a72:	4b66      	ldr	r3, [pc, #408]	; (8002c0c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002a74:	60bb      	str	r3, [r7, #8]
      break;
 8002a76:	e041      	b.n	8002afc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE3:
      switch (Noise)
 8002a78:	79bb      	ldrb	r3, [r7, #6]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d002      	beq.n	8002a84 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_3;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	75fb      	strb	r3, [r7, #23]
          break;
 8002a82:	e002      	b.n	8002a8a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3;
 8002a84:	2312      	movs	r3, #18
 8002a86:	75fb      	strb	r3, [r7, #23]
          break;
 8002a88:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002a8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a8e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002c08 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9a:	dc00      	bgt.n	8002a9e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8002a9c:	e02e      	b.n	8002afc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002a9e:	4b5b      	ldr	r3, [pc, #364]	; (8002c0c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002aa0:	60bb      	str	r3, [r7, #8]
      break;
 8002aa2:	e02b      	b.n	8002afc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE2:
      switch (Noise)
 8002aa4:	79bb      	ldrb	r3, [r7, #6]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d002      	beq.n	8002ab0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_2;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	75fb      	strb	r3, [r7, #23]
          break;
 8002aae:	e002      	b.n	8002ab6 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xca>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2;
 8002ab0:	2311      	movs	r3, #17
 8002ab2:	75fb      	strb	r3, [r7, #23]
          break;
 8002ab4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002ab6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002aba:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002c08 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac6:	dc00      	bgt.n	8002aca <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8002ac8:	e018      	b.n	8002afc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002aca:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002acc:	60bb      	str	r3, [r7, #8]
      break;
 8002ace:	e015      	b.n	8002afc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE1:
      switch (Noise)
 8002ad0:	79bb      	ldrb	r3, [r7, #6]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d002      	beq.n	8002adc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_12bit;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	75fb      	strb	r3, [r7, #23]
          break;
 8002ada:	e002      	b.n	8002ae2 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002adc:	2310      	movs	r3, #16
 8002ade:	75fb      	strb	r3, [r7, #23]
          break;
 8002ae0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002ae2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ae6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002c08 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af2:	dc00      	bgt.n	8002af6 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8002af4:	e001      	b.n	8002afa <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8002af6:	4b45      	ldr	r3, [pc, #276]	; (8002c0c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002af8:	60bb      	str	r3, [r7, #8]
      break;
 8002afa:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? IIS2DLPC_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? IIS2DLPC_XL_ODR_12Hz5
 8002afc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b00:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002c10 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x224>
 8002b04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0c:	d801      	bhi.n	8002b12 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x126>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e04d      	b.n	8002bae <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002b12:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b16:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b22:	d801      	bhi.n	8002b28 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e042      	b.n	8002bae <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002b28:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b2c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b38:	d801      	bhi.n	8002b3e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x152>
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e037      	b.n	8002bae <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002b3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b42:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002c14 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x228>
 8002b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4e:	d801      	bhi.n	8002b54 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x168>
 8002b50:	2304      	movs	r3, #4
 8002b52:	e02c      	b.n	8002bae <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002b54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b58:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002c18 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8002b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b64:	d801      	bhi.n	8002b6a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8002b66:	2305      	movs	r3, #5
 8002b68:	e021      	b.n	8002bae <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002b6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b6e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002c08 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002b72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7a:	d801      	bhi.n	8002b80 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x194>
 8002b7c:	2306      	movs	r3, #6
 8002b7e:	e016      	b.n	8002bae <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002b80:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b84:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002c1c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x230>
 8002b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b90:	d801      	bhi.n	8002b96 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8002b92:	2307      	movs	r3, #7
 8002b94:	e00b      	b.n	8002bae <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002b96:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b9a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002c20 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x234>
 8002b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba6:	d801      	bhi.n	8002bac <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8002ba8:	2308      	movs	r3, #8
 8002baa:	e000      	b.n	8002bae <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002bac:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? IIS2DLPC_XL_ODR_1Hz6_LP_ONLY
 8002bae:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? IIS2DLPC_XL_ODR_400Hz
            : (Odr <=  800.0f) ? IIS2DLPC_XL_ODR_800Hz
            :                    IIS2DLPC_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2DLPC_OK)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	331c      	adds	r3, #28
 8002bb4:	7dba      	ldrb	r2, [r7, #22]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fa33 	bl	8003024 <iis2dlpc_data_rate_set>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return IIS2DLPC_ERROR;
 8002bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc8:	e018      	b.n	8002bfc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (iis2dlpc_power_mode_set(&(pObj->Ctx), new_power_mode) != IIS2DLPC_OK)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	331c      	adds	r3, #28
 8002bce:	7dfa      	ldrb	r2, [r7, #23]
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f91e 	bl	8002e14 <iis2dlpc_power_mode_set>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return IIS2DLPC_ERROR;
 8002bde:	f04f 33ff 	mov.w	r3, #4294967295
 8002be2:	e00b      	b.n	8002bfc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	79fa      	ldrb	r2, [r7, #7]
 8002bee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	79ba      	ldrb	r2, [r7, #6]
 8002bf6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2DLPC_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	41480000 	.word	0x41480000
 8002c08:	43480000 	.word	0x43480000
 8002c0c:	43480000 	.word	0x43480000
 8002c10:	3fcccccd 	.word	0x3fcccccd
 8002c14:	42480000 	.word	0x42480000
 8002c18:	42c80000 	.word	0x42c80000
 8002c1c:	43c80000 	.word	0x43c80000
 8002c20:	44480000 	.word	0x44480000

08002c24 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t IIS2DLPC_ACC_SetOutputDataRate_When_Disabled(IIS2DLPC_Object_t *pObj, float Odr,
                                                            IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c30:	460b      	mov	r3, r1
 8002c32:	71fb      	strb	r3, [r7, #7]
 8002c34:	4613      	mov	r3, r2
 8002c36:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	79fa      	ldrb	r2, [r7, #7]
 8002c3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	79ba      	ldrb	r2, [r7, #6]
 8002c44:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8002c48:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c4c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002d0c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c58:	d801      	bhi.n	8002c5e <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8002c5a:	4b2d      	ldr	r3, [pc, #180]	; (8002d10 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8002c5c:	e04d      	b.n	8002cfa <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8002c5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c62:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6e:	d801      	bhi.n	8002c74 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x50>
 8002c70:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8002c72:	e042      	b.n	8002cfa <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8002c74:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c78:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c84:	d801      	bhi.n	8002c8a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x66>
 8002c86:	4b24      	ldr	r3, [pc, #144]	; (8002d18 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8002c88:	e037      	b.n	8002cfa <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8002c8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c8e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002d1c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9a:	d801      	bhi.n	8002ca0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002c9c:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8002c9e:	e02c      	b.n	8002cfa <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8002ca0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002d24 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb0:	d801      	bhi.n	8002cb6 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002cb4:	e021      	b.n	8002cfa <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8002cb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cba:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002d2c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x108>
 8002cbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc6:	d801      	bhi.n	8002ccc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8002cca:	e016      	b.n	8002cfa <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8002ccc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cd0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002d34 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cdc:	d801      	bhi.n	8002ce2 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8002cde:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002ce0:	e00b      	b.n	8002cfa <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8002ce2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ce6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002d3c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x118>
 8002cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf2:	d801      	bhi.n	8002cf8 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002cf4:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002cf6:	e000      	b.n	8002cfa <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

  return IIS2DLPC_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	3fcccccd 	.word	0x3fcccccd
 8002d10:	3fcccccd 	.word	0x3fcccccd
 8002d14:	41480000 	.word	0x41480000
 8002d18:	41c80000 	.word	0x41c80000
 8002d1c:	42480000 	.word	0x42480000
 8002d20:	42480000 	.word	0x42480000
 8002d24:	42c80000 	.word	0x42c80000
 8002d28:	42c80000 	.word	0x42c80000
 8002d2c:	43480000 	.word	0x43480000
 8002d30:	43480000 	.word	0x43480000
 8002d34:	43c80000 	.word	0x43c80000
 8002d38:	43c80000 	.word	0x43c80000
 8002d3c:	44480000 	.word	0x44480000
 8002d40:	44480000 	.word	0x44480000
 8002d44:	44c80000 	.word	0x44c80000

08002d48 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	461a      	mov	r2, r3
 8002d54:	460b      	mov	r3, r1
 8002d56:	72fb      	strb	r3, [r7, #11]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	813b      	strh	r3, [r7, #8]
  IIS2DLPC_Object_t *pObj = (IIS2DLPC_Object_t *)Handle;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	695c      	ldr	r4, [r3, #20]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	7b1b      	ldrb	r3, [r3, #12]
 8002d68:	b298      	uxth	r0, r3
 8002d6a:	7afb      	ldrb	r3, [r7, #11]
 8002d6c:	b299      	uxth	r1, r3
 8002d6e:	893b      	ldrh	r3, [r7, #8]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	47a0      	blx	r4
 8002d74:	4603      	mov	r3, r0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd90      	pop	{r4, r7, pc}

08002d7e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d7e:	b590      	push	{r4, r7, lr}
 8002d80:	b087      	sub	sp, #28
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	72fb      	strb	r3, [r7, #11]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	813b      	strh	r3, [r7, #8]
  IIS2DLPC_Object_t *pObj = (IIS2DLPC_Object_t *)Handle;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	691c      	ldr	r4, [r3, #16]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	7b1b      	ldrb	r3, [r3, #12]
 8002d9e:	b298      	uxth	r0, r3
 8002da0:	7afb      	ldrb	r3, [r7, #11]
 8002da2:	b299      	uxth	r1, r3
 8002da4:	893b      	ldrh	r3, [r7, #8]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	47a0      	blx	r4
 8002daa:	4603      	mov	r3, r0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	371c      	adds	r7, #28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd90      	pop	{r4, r7, pc}

08002db4 <iis2dlpc_read_reg>:
  *
  */
int32_t iis2dlpc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	72fb      	strb	r3, [r7, #11]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	685c      	ldr	r4, [r3, #4]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6898      	ldr	r0, [r3, #8]
 8002dd0:	893b      	ldrh	r3, [r7, #8]
 8002dd2:	7af9      	ldrb	r1, [r7, #11]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	47a0      	blx	r4
 8002dd8:	6178      	str	r0, [r7, #20]

  return ret;
 8002dda:	697b      	ldr	r3, [r7, #20]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	371c      	adds	r7, #28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd90      	pop	{r4, r7, pc}

08002de4 <iis2dlpc_write_reg>:
  *
  */
int32_t iis2dlpc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002de4:	b590      	push	{r4, r7, lr}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	461a      	mov	r2, r3
 8002df0:	460b      	mov	r3, r1
 8002df2:	72fb      	strb	r3, [r7, #11]
 8002df4:	4613      	mov	r3, r2
 8002df6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681c      	ldr	r4, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6898      	ldr	r0, [r3, #8]
 8002e00:	893b      	ldrh	r3, [r7, #8]
 8002e02:	7af9      	ldrb	r1, [r7, #11]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	47a0      	blx	r4
 8002e08:	6178      	str	r0, [r7, #20]

  return ret;
 8002e0a:	697b      	ldr	r3, [r7, #20]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	371c      	adds	r7, #28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd90      	pop	{r4, r7, pc}

08002e14 <iis2dlpc_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_set(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t val)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002e20:	f107 0210 	add.w	r2, r7, #16
 8002e24:	2301      	movs	r3, #1
 8002e26:	2120      	movs	r1, #32
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ffc3 	bl	8002db4 <iis2dlpc_read_reg>
 8002e2e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d118      	bne.n	8002e68 <iis2dlpc_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	089b      	lsrs	r3, r3, #2
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	7c3b      	ldrb	r3, [r7, #16]
 8002e42:	f362 0383 	bfi	r3, r2, #2, #2
 8002e46:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	7c3b      	ldrb	r3, [r7, #16]
 8002e52:	f362 0301 	bfi	r3, r2, #0, #2
 8002e56:	743b      	strb	r3, [r7, #16]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002e58:	f107 0210 	add.w	r2, r7, #16
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	2120      	movs	r1, #32
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff ffbf 	bl	8002de4 <iis2dlpc_write_reg>
 8002e66:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d107      	bne.n	8002e7e <iis2dlpc_power_mode_set+0x6a>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8002e6e:	f107 020c 	add.w	r2, r7, #12
 8002e72:	2301      	movs	r3, #1
 8002e74:	2125      	movs	r1, #37	; 0x25
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff ff9c 	bl	8002db4 <iis2dlpc_read_reg>
 8002e7c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d110      	bne.n	8002ea6 <iis2dlpc_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	7b3b      	ldrb	r3, [r7, #12]
 8002e90:	f362 0382 	bfi	r3, r2, #2, #1
 8002e94:	733b      	strb	r3, [r7, #12]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8002e96:	f107 020c 	add.w	r2, r7, #12
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	2125      	movs	r1, #37	; 0x25
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff ffa0 	bl	8002de4 <iis2dlpc_write_reg>
 8002ea4:	6178      	str	r0, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 8002ea6:	697b      	ldr	r3, [r7, #20]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <iis2dlpc_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_get(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t *val)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002eba:	f107 0210 	add.w	r2, r7, #16
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	2120      	movs	r1, #32
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ff76 	bl	8002db4 <iis2dlpc_read_reg>
 8002ec8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f040 80a3 	bne.w	8003018 <iis2dlpc_power_mode_get+0x168>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8002ed2:	f107 020c 	add.w	r2, r7, #12
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	2125      	movs	r1, #37	; 0x25
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ff6a 	bl	8002db4 <iis2dlpc_read_reg>
 8002ee0:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002ee2:	7b3b      	ldrb	r3, [r7, #12]
 8002ee4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	011a      	lsls	r2, r3, #4
 8002eec:	7c3b      	ldrb	r3, [r7, #16]
 8002eee:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8002ef8:	7c3a      	ldrb	r2, [r7, #16]
 8002efa:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8002efe:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002f00:	4413      	add	r3, r2
 8002f02:	2b1b      	cmp	r3, #27
 8002f04:	f200 8084 	bhi.w	8003010 <iis2dlpc_power_mode_get+0x160>
 8002f08:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <iis2dlpc_power_mode_get+0x60>)
 8002f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0e:	bf00      	nop
 8002f10:	08002fa1 	.word	0x08002fa1
 8002f14:	08002f99 	.word	0x08002f99
 8002f18:	08002f91 	.word	0x08002f91
 8002f1c:	08002f89 	.word	0x08002f89
 8002f20:	08002f81 	.word	0x08002f81
 8002f24:	08003011 	.word	0x08003011
 8002f28:	08003011 	.word	0x08003011
 8002f2c:	08003011 	.word	0x08003011
 8002f30:	08002fc1 	.word	0x08002fc1
 8002f34:	08002fb9 	.word	0x08002fb9
 8002f38:	08002fb1 	.word	0x08002fb1
 8002f3c:	08002fa9 	.word	0x08002fa9
 8002f40:	08003011 	.word	0x08003011
 8002f44:	08003011 	.word	0x08003011
 8002f48:	08003011 	.word	0x08003011
 8002f4c:	08003011 	.word	0x08003011
 8002f50:	08002fe9 	.word	0x08002fe9
 8002f54:	08002fe1 	.word	0x08002fe1
 8002f58:	08002fd9 	.word	0x08002fd9
 8002f5c:	08002fd1 	.word	0x08002fd1
 8002f60:	08002fc9 	.word	0x08002fc9
 8002f64:	08003011 	.word	0x08003011
 8002f68:	08003011 	.word	0x08003011
 8002f6c:	08003011 	.word	0x08003011
 8002f70:	08003009 	.word	0x08003009
 8002f74:	08003001 	.word	0x08003001
 8002f78:	08002ff9 	.word	0x08002ff9
 8002f7c:	08002ff1 	.word	0x08002ff1
    {
      case IIS2DLPC_HIGH_PERFORMANCE:
        *val = IIS2DLPC_HIGH_PERFORMANCE;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2204      	movs	r2, #4
 8002f84:	701a      	strb	r2, [r3, #0]
        break;
 8002f86:	e048      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_4:
        *val = IIS2DLPC_CONT_LOW_PWR_4;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	701a      	strb	r2, [r3, #0]
        break;
 8002f8e:	e044      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_3:
        *val = IIS2DLPC_CONT_LOW_PWR_3;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2202      	movs	r2, #2
 8002f94:	701a      	strb	r2, [r3, #0]
        break;
 8002f96:	e040      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_2:
        *val = IIS2DLPC_CONT_LOW_PWR_2;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
        break;
 8002f9e:	e03c      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_12bit:
        *val = IIS2DLPC_CONT_LOW_PWR_12bit;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
        break;
 8002fa6:	e038      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_4:
        *val = IIS2DLPC_SINGLE_LOW_PWR_4;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	220b      	movs	r2, #11
 8002fac:	701a      	strb	r2, [r3, #0]
        break;
 8002fae:	e034      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_3:
        *val = IIS2DLPC_SINGLE_LOW_PWR_3;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	220a      	movs	r2, #10
 8002fb4:	701a      	strb	r2, [r3, #0]
        break;
 8002fb6:	e030      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_2:
        *val = IIS2DLPC_SINGLE_LOW_PWR_2;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2209      	movs	r2, #9
 8002fbc:	701a      	strb	r2, [r3, #0]
        break;
 8002fbe:	e02c      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_12bit:
        *val = IIS2DLPC_SINGLE_LOW_PWR_12bit;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	701a      	strb	r2, [r3, #0]
        break;
 8002fc6:	e028      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
        *val = IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2214      	movs	r2, #20
 8002fcc:	701a      	strb	r2, [r3, #0]
        break;
 8002fce:	e024      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2213      	movs	r2, #19
 8002fd4:	701a      	strb	r2, [r3, #0]
        break;
 8002fd6:	e020      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2212      	movs	r2, #18
 8002fdc:	701a      	strb	r2, [r3, #0]
        break;
 8002fde:	e01c      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2211      	movs	r2, #17
 8002fe4:	701a      	strb	r2, [r3, #0]
        break;
 8002fe6:	e018      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2210      	movs	r2, #16
 8002fec:	701a      	strb	r2, [r3, #0]
        break;
 8002fee:	e014      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	221b      	movs	r2, #27
 8002ff4:	701a      	strb	r2, [r3, #0]
        break;
 8002ff6:	e010      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	221a      	movs	r2, #26
 8002ffc:	701a      	strb	r2, [r3, #0]
        break;
 8002ffe:	e00c      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2219      	movs	r2, #25
 8003004:	701a      	strb	r2, [r3, #0]
        break;
 8003006:	e008      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2218      	movs	r2, #24
 800300c:	701a      	strb	r2, [r3, #0]
        break;
 800300e:	e004      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>

      default:
        *val = IIS2DLPC_HIGH_PERFORMANCE;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2204      	movs	r2, #4
 8003014:	701a      	strb	r2, [r3, #0]
        break;
 8003016:	e000      	b.n	800301a <iis2dlpc_power_mode_get+0x16a>
    }
  }
 8003018:	bf00      	nop

  return ret;
 800301a:	697b      	ldr	r3, [r7, #20]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <iis2dlpc_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_set(stmdev_ctx_t *ctx, iis2dlpc_odr_t val)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8003030:	f107 0210 	add.w	r2, r7, #16
 8003034:	2301      	movs	r3, #1
 8003036:	2120      	movs	r1, #32
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff febb 	bl	8002db4 <iis2dlpc_read_reg>
 800303e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10f      	bne.n	8003066 <iis2dlpc_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	b2da      	uxtb	r2, r3
 800304e:	7c3b      	ldrb	r3, [r7, #16]
 8003050:	f362 1307 	bfi	r3, r2, #4, #4
 8003054:	743b      	strb	r3, [r7, #16]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8003056:	f107 0210 	add.w	r2, r7, #16
 800305a:	2301      	movs	r3, #1
 800305c:	2120      	movs	r1, #32
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff fec0 	bl	8002de4 <iis2dlpc_write_reg>
 8003064:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d107      	bne.n	800307c <iis2dlpc_data_rate_set+0x58>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 800306c:	f107 020c 	add.w	r2, r7, #12
 8003070:	2301      	movs	r3, #1
 8003072:	2122      	movs	r1, #34	; 0x22
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff fe9d 	bl	8002db4 <iis2dlpc_read_reg>
 800307a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d110      	bne.n	80030a4 <iis2dlpc_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	b2da      	uxtb	r2, r3
 800308c:	7b3b      	ldrb	r3, [r7, #12]
 800308e:	f362 0301 	bfi	r3, r2, #0, #2
 8003092:	733b      	strb	r3, [r7, #12]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8003094:	f107 020c 	add.w	r2, r7, #12
 8003098:	2301      	movs	r3, #1
 800309a:	2122      	movs	r1, #34	; 0x22
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff fea1 	bl	8002de4 <iis2dlpc_write_reg>
 80030a2:	6178      	str	r0, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 80030a4:	697b      	ldr	r3, [r7, #20]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <iis2dlpc_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_get(stmdev_ctx_t *ctx, iis2dlpc_odr_t *val)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 80030ba:	f107 0210 	add.w	r2, r7, #16
 80030be:	2301      	movs	r3, #1
 80030c0:	2120      	movs	r1, #32
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff fe76 	bl	8002db4 <iis2dlpc_read_reg>
 80030c8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f040 8091 	bne.w	80031f4 <iis2dlpc_data_rate_get+0x144>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 80030d2:	f107 020c 	add.w	r2, r7, #12
 80030d6:	2301      	movs	r3, #1
 80030d8:	2122      	movs	r1, #34	; 0x22
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff fe6a 	bl	8002db4 <iis2dlpc_read_reg>
 80030e0:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 80030e2:	7b3b      	ldrb	r3, [r7, #12]
 80030e4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	7c3a      	ldrb	r2, [r7, #16]
 80030ee:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	4413      	add	r3, r2
 80030f6:	2b22      	cmp	r3, #34	; 0x22
 80030f8:	d878      	bhi.n	80031ec <iis2dlpc_data_rate_get+0x13c>
 80030fa:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <iis2dlpc_data_rate_get+0x50>)
 80030fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003100:	0800318d 	.word	0x0800318d
 8003104:	08003195 	.word	0x08003195
 8003108:	0800319d 	.word	0x0800319d
 800310c:	080031a5 	.word	0x080031a5
 8003110:	080031ad 	.word	0x080031ad
 8003114:	080031b5 	.word	0x080031b5
 8003118:	080031bd 	.word	0x080031bd
 800311c:	080031c5 	.word	0x080031c5
 8003120:	080031cd 	.word	0x080031cd
 8003124:	080031d5 	.word	0x080031d5
 8003128:	080031ed 	.word	0x080031ed
 800312c:	080031ed 	.word	0x080031ed
 8003130:	080031ed 	.word	0x080031ed
 8003134:	080031ed 	.word	0x080031ed
 8003138:	080031ed 	.word	0x080031ed
 800313c:	080031ed 	.word	0x080031ed
 8003140:	080031ed 	.word	0x080031ed
 8003144:	080031ed 	.word	0x080031ed
 8003148:	080031dd 	.word	0x080031dd
 800314c:	080031ed 	.word	0x080031ed
 8003150:	080031ed 	.word	0x080031ed
 8003154:	080031ed 	.word	0x080031ed
 8003158:	080031ed 	.word	0x080031ed
 800315c:	080031ed 	.word	0x080031ed
 8003160:	080031ed 	.word	0x080031ed
 8003164:	080031ed 	.word	0x080031ed
 8003168:	080031ed 	.word	0x080031ed
 800316c:	080031ed 	.word	0x080031ed
 8003170:	080031ed 	.word	0x080031ed
 8003174:	080031ed 	.word	0x080031ed
 8003178:	080031ed 	.word	0x080031ed
 800317c:	080031ed 	.word	0x080031ed
 8003180:	080031ed 	.word	0x080031ed
 8003184:	080031ed 	.word	0x080031ed
 8003188:	080031e5 	.word	0x080031e5
    {
      case IIS2DLPC_XL_ODR_OFF:
        *val = IIS2DLPC_XL_ODR_OFF;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
        break;
 8003192:	e030      	b.n	80031f6 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_1Hz6_LP_ONLY:
        *val = IIS2DLPC_XL_ODR_1Hz6_LP_ONLY;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2201      	movs	r2, #1
 8003198:	701a      	strb	r2, [r3, #0]
        break;
 800319a:	e02c      	b.n	80031f6 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_12Hz5:
        *val = IIS2DLPC_XL_ODR_12Hz5;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2202      	movs	r2, #2
 80031a0:	701a      	strb	r2, [r3, #0]
        break;
 80031a2:	e028      	b.n	80031f6 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_25Hz:
        *val = IIS2DLPC_XL_ODR_25Hz;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2203      	movs	r2, #3
 80031a8:	701a      	strb	r2, [r3, #0]
        break;
 80031aa:	e024      	b.n	80031f6 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_50Hz:
        *val = IIS2DLPC_XL_ODR_50Hz;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	2204      	movs	r2, #4
 80031b0:	701a      	strb	r2, [r3, #0]
        break;
 80031b2:	e020      	b.n	80031f6 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_100Hz:
        *val = IIS2DLPC_XL_ODR_100Hz;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2205      	movs	r2, #5
 80031b8:	701a      	strb	r2, [r3, #0]
        break;
 80031ba:	e01c      	b.n	80031f6 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_200Hz:
        *val = IIS2DLPC_XL_ODR_200Hz;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2206      	movs	r2, #6
 80031c0:	701a      	strb	r2, [r3, #0]
        break;
 80031c2:	e018      	b.n	80031f6 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_400Hz:
        *val = IIS2DLPC_XL_ODR_400Hz;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2207      	movs	r2, #7
 80031c8:	701a      	strb	r2, [r3, #0]
        break;
 80031ca:	e014      	b.n	80031f6 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_800Hz:
        *val = IIS2DLPC_XL_ODR_800Hz;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2208      	movs	r2, #8
 80031d0:	701a      	strb	r2, [r3, #0]
        break;
 80031d2:	e010      	b.n	80031f6 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_1k6Hz:
        *val = IIS2DLPC_XL_ODR_1k6Hz;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2209      	movs	r2, #9
 80031d8:	701a      	strb	r2, [r3, #0]
        break;
 80031da:	e00c      	b.n	80031f6 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_SET_SW_TRIG:
        *val = IIS2DLPC_XL_SET_SW_TRIG;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2212      	movs	r2, #18
 80031e0:	701a      	strb	r2, [r3, #0]
        break;
 80031e2:	e008      	b.n	80031f6 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_SET_PIN_TRIG:
        *val = IIS2DLPC_XL_SET_PIN_TRIG;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2222      	movs	r2, #34	; 0x22
 80031e8:	701a      	strb	r2, [r3, #0]
        break;
 80031ea:	e004      	b.n	80031f6 <iis2dlpc_data_rate_get+0x146>

      default:
        *val = IIS2DLPC_XL_ODR_OFF;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
        break;
 80031f2:	e000      	b.n	80031f6 <iis2dlpc_data_rate_get+0x146>
    }
  }
 80031f4:	bf00      	nop

  return ret;
 80031f6:	697b      	ldr	r3, [r7, #20]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <iis2dlpc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 800320c:	f107 0208 	add.w	r2, r7, #8
 8003210:	2301      	movs	r3, #1
 8003212:	2121      	movs	r1, #33	; 0x21
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fdcd 	bl	8002db4 <iis2dlpc_read_reg>
 800321a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10f      	bne.n	8003242 <iis2dlpc_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	b2da      	uxtb	r2, r3
 800322a:	7a3b      	ldrb	r3, [r7, #8]
 800322c:	f362 03c3 	bfi	r3, r2, #3, #1
 8003230:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8003232:	f107 0208 	add.w	r2, r7, #8
 8003236:	2301      	movs	r3, #1
 8003238:	2121      	movs	r1, #33	; 0x21
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff fdd2 	bl	8002de4 <iis2dlpc_write_reg>
 8003240:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003242:	68fb      	ldr	r3, [r7, #12]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <iis2dlpc_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_set(stmdev_ctx_t *ctx, iis2dlpc_fs_t val)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl6_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8003258:	f107 0208 	add.w	r2, r7, #8
 800325c:	2301      	movs	r3, #1
 800325e:	2125      	movs	r1, #37	; 0x25
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff fda7 	bl	8002db4 <iis2dlpc_read_reg>
 8003266:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10f      	bne.n	800328e <iis2dlpc_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	b2da      	uxtb	r2, r3
 8003276:	7a3b      	ldrb	r3, [r7, #8]
 8003278:	f362 1305 	bfi	r3, r2, #4, #2
 800327c:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 800327e:	f107 0208 	add.w	r2, r7, #8
 8003282:	2301      	movs	r3, #1
 8003284:	2125      	movs	r1, #37	; 0x25
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff fdac 	bl	8002de4 <iis2dlpc_write_reg>
 800328c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800328e:	68fb      	ldr	r3, [r7, #12]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <iis2dlpc_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_get(stmdev_ctx_t *ctx, iis2dlpc_fs_t *val)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl6_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 80032a2:	f107 0208 	add.w	r2, r7, #8
 80032a6:	2301      	movs	r3, #1
 80032a8:	2125      	movs	r1, #37	; 0x25
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff fd82 	bl	8002db4 <iis2dlpc_read_reg>
 80032b0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 80032b2:	7a3b      	ldrb	r3, [r7, #8]
 80032b4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d81a      	bhi.n	80032f4 <iis2dlpc_full_scale_get+0x5c>
 80032be:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <iis2dlpc_full_scale_get+0x2c>)
 80032c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c4:	080032d5 	.word	0x080032d5
 80032c8:	080032dd 	.word	0x080032dd
 80032cc:	080032e5 	.word	0x080032e5
 80032d0:	080032ed 	.word	0x080032ed
  {
    case IIS2DLPC_2g:
      *val = IIS2DLPC_2g;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
      break;
 80032da:	e00f      	b.n	80032fc <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_4g:
      *val = IIS2DLPC_4g;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2201      	movs	r2, #1
 80032e0:	701a      	strb	r2, [r3, #0]
      break;
 80032e2:	e00b      	b.n	80032fc <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_8g:
      *val = IIS2DLPC_8g;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]
      break;
 80032ea:	e007      	b.n	80032fc <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_16g:
      *val = IIS2DLPC_16g;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2203      	movs	r2, #3
 80032f0:	701a      	strb	r2, [r3, #0]
      break;
 80032f2:	e003      	b.n	80032fc <iis2dlpc_full_scale_get+0x64>

    default:
      *val = IIS2DLPC_2g;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
      break;
 80032fa:	bf00      	nop
  }

  return ret;
 80032fc:	68fb      	ldr	r3, [r7, #12]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop

08003308 <iis2dlpc_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_OUT_X_L, buff, 6);
 8003312:	f107 020c 	add.w	r2, r7, #12
 8003316:	2306      	movs	r3, #6
 8003318:	2128      	movs	r1, #40	; 0x28
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff fd4a 	bl	8002db4 <iis2dlpc_read_reg>
 8003320:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003322:	7b7b      	ldrb	r3, [r7, #13]
 8003324:	b21a      	sxth	r2, r3
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003330:	b29b      	uxth	r3, r3
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	b29a      	uxth	r2, r3
 8003336:	7b3b      	ldrb	r3, [r7, #12]
 8003338:	b29b      	uxth	r3, r3
 800333a:	4413      	add	r3, r2
 800333c:	b29b      	uxth	r3, r3
 800333e:	b21a      	sxth	r2, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	3302      	adds	r3, #2
 800334a:	b212      	sxth	r2, r2
 800334c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	3302      	adds	r3, #2
 8003352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003356:	b29b      	uxth	r3, r3
 8003358:	021b      	lsls	r3, r3, #8
 800335a:	b29a      	uxth	r2, r3
 800335c:	7bbb      	ldrb	r3, [r7, #14]
 800335e:	b29b      	uxth	r3, r3
 8003360:	4413      	add	r3, r2
 8003362:	b29a      	uxth	r2, r3
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	3302      	adds	r3, #2
 8003368:	b212      	sxth	r2, r2
 800336a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800336c:	7c7a      	ldrb	r2, [r7, #17]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	3304      	adds	r3, #4
 8003372:	b212      	sxth	r2, r2
 8003374:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	3304      	adds	r3, #4
 800337a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800337e:	b29b      	uxth	r3, r3
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	b29a      	uxth	r2, r3
 8003384:	7c3b      	ldrb	r3, [r7, #16]
 8003386:	b29b      	uxth	r3, r3
 8003388:	4413      	add	r3, r2
 800338a:	b29a      	uxth	r2, r3
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	3304      	adds	r3, #4
 8003390:	b212      	sxth	r2, r2
 8003392:	801a      	strh	r2, [r3, #0]

  return ret;
 8003394:	697b      	ldr	r3, [r7, #20]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <iis2dlpc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WHO_AM_I, buff, 1);
 80033a8:	2301      	movs	r3, #1
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	210f      	movs	r1, #15
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff fd00 	bl	8002db4 <iis2dlpc_read_reg>
 80033b4:	60f8      	str	r0, [r7, #12]

  return ret;
 80033b6:	68fb      	ldr	r3, [r7, #12]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <iis2dlpc_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 80033cc:	f107 0208 	add.w	r2, r7, #8
 80033d0:	2301      	movs	r3, #1
 80033d2:	2121      	movs	r1, #33	; 0x21
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff fced 	bl	8002db4 <iis2dlpc_read_reg>
 80033da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10f      	bne.n	8003402 <iis2dlpc_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80033e2:	78fb      	ldrb	r3, [r7, #3]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	7a3b      	ldrb	r3, [r7, #8]
 80033ec:	f362 0382 	bfi	r3, r2, #2, #1
 80033f0:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 80033f2:	f107 0208 	add.w	r2, r7, #8
 80033f6:	2301      	movs	r3, #1
 80033f8:	2121      	movs	r1, #33	; 0x21
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff fcf2 	bl	8002de4 <iis2dlpc_write_reg>
 8003400:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003402:	68fb      	ldr	r3, [r7, #12]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <iis2dlpc_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_fifo_mode_set(stmdev_ctx_t *ctx,
                               iis2dlpc_fmode_t val)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_fifo_ctrl_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003418:	f107 0208 	add.w	r2, r7, #8
 800341c:	2301      	movs	r3, #1
 800341e:	212e      	movs	r1, #46	; 0x2e
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff fcc7 	bl	8002db4 <iis2dlpc_read_reg>
 8003426:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10f      	bne.n	800344e <iis2dlpc_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 800342e:	78fb      	ldrb	r3, [r7, #3]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	b2da      	uxtb	r2, r3
 8003436:	7a3b      	ldrb	r3, [r7, #8]
 8003438:	f362 1347 	bfi	r3, r2, #5, #3
 800343c:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg, 1);
 800343e:	f107 0208 	add.w	r2, r7, #8
 8003442:	2301      	movs	r3, #1
 8003444:	212e      	movs	r1, #46	; 0x2e
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff fccc 	bl	8002de4 <iis2dlpc_write_reg>
 800344c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800344e:	68fb      	ldr	r3, [r7, #12]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <IIS2MDC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d103      	bne.n	8003474 <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 800346c:	f04f 33ff 	mov.w	r3, #4294967295
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e04b      	b.n	800350c <IIS2MDC_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	7b1a      	ldrb	r2, [r3, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	699a      	ldr	r2, [r3, #24]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a1a      	ldr	r2, [pc, #104]	; (8003518 <IIS2MDC_RegisterBusIO+0xc0>)
 80034b0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a19      	ldr	r2, [pc, #100]	; (800351c <IIS2MDC_RegisterBusIO+0xc4>)
 80034b6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d103      	bne.n	80034ce <IIS2MDC_RegisterBusIO+0x76>
    {
      ret = IIS2MDC_ERROR;
 80034c6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	e01e      	b.n	800350c <IIS2MDC_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4798      	blx	r3
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <IIS2MDC_RegisterBusIO+0x8a>
    {
      ret = IIS2MDC_ERROR;
 80034da:	f04f 33ff 	mov.w	r3, #4294967295
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	e014      	b.n	800350c <IIS2MDC_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d010      	beq.n	800350c <IIS2MDC_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10b      	bne.n	800350c <IIS2MDC_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	331c      	adds	r3, #28
 80034f8:	2101      	movs	r1, #1
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fbc8 	bl	8003c90 <iis2mdc_i2c_interface_set>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <IIS2MDC_RegisterBusIO+0xb4>
          {
            ret = IIS2MDC_ERROR;
 8003506:	f04f 33ff 	mov.w	r3, #4294967295
 800350a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800350c:	68fb      	ldr	r3, [r7, #12]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	08003913 	.word	0x08003913
 800351c:	08003975 	.word	0x08003975

08003520 <IIS2MDC_Init>:
  * @brief  Initialize the IIS2MDC sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	331c      	adds	r3, #28
 800352c:	2101      	movs	r1, #1
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fb06 	bl	8003b40 <iis2mdc_block_data_update_set>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 800353a:	f04f 33ff 	mov.w	r3, #4294967295
 800353e:	e028      	b.n	8003592 <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	331c      	adds	r3, #28
 8003544:	2102      	movs	r1, #2
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fa75 	bl	8003a36 <iis2mdc_operating_mode_set>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 8003552:	f04f 33ff 	mov.w	r3, #4294967295
 8003556:	e01c      	b.n	8003592 <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	331c      	adds	r3, #28
 800355c:	2103      	movs	r1, #3
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fa8f 	bl	8003a82 <iis2mdc_data_rate_set>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 800356a:	f04f 33ff 	mov.w	r3, #4294967295
 800356e:	e010      	b.n	8003592 <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	331c      	adds	r3, #28
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fb64 	bl	8003c44 <iis2mdc_self_test_set>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	e004      	b.n	8003592 <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <IIS2MDC_DeInit>:
  * @brief  Deinitialize the IIS2MDC magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_DeInit(IIS2MDC_Object_t *pObj)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f874 	bl	8003690 <IIS2MDC_MAG_Disable>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <IIS2MDC_DeInit+0x1a>
  {
    return IIS2MDC_ERROR;
 80035ae:	f04f 33ff 	mov.w	r3, #4294967295
 80035b2:	e004      	b.n	80035be <IIS2MDC_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <IIS2MDC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_ReadID(IIS2MDC_Object_t *pObj, uint8_t *Id)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	331c      	adds	r3, #28
 80035d4:	6839      	ldr	r1, [r7, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fb23 	bl	8003c22 <iis2mdc_device_id_get>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <IIS2MDC_ReadID+0x22>
  {
    return IIS2MDC_ERROR;
 80035e2:	f04f 33ff 	mov.w	r3, #4294967295
 80035e6:	e000      	b.n	80035ea <IIS2MDC_ReadID+0x24>
  }

  return IIS2MDC_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <IIS2MDC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
  * @retval Component status
  */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2200      	movs	r2, #0
 8003608:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2201      	movs	r2, #1
 800360e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	2200      	movs	r2, #0
 8003614:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2200      	movs	r2, #0
 800361a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2232      	movs	r2, #50	; 0x32
 8003626:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	4a04      	ldr	r2, [pc, #16]	; (800364c <IIS2MDC_GetCapabilities+0x58>)
 800363c:	619a      	str	r2, [r3, #24]
  return IIS2MDC_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	42c80000 	.word	0x42c80000

08003650 <IIS2MDC_MAG_Enable>:
  * @brief Enable the IIS2MDC magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	e010      	b.n	8003688 <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	331c      	adds	r3, #28
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f000 f9e2 	bl	8003a36 <iis2mdc_operating_mode_set>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 8003678:	f04f 33ff 	mov.w	r3, #4294967295
 800367c:	e004      	b.n	8003688 <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <IIS2MDC_MAG_Disable>:
  * @brief Disable the IIS2MDC magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_Disable(IIS2MDC_Object_t *pObj)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <IIS2MDC_MAG_Disable+0x16>
  {
    return IIS2MDC_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e010      	b.n	80036c8 <IIS2MDC_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	331c      	adds	r3, #28
 80036aa:	2102      	movs	r1, #2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 f9c2 	bl	8003a36 <iis2mdc_operating_mode_set>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <IIS2MDC_MAG_Disable+0x2e>
  {
    return IIS2MDC_ERROR;
 80036b8:	f04f 33ff 	mov.w	r3, #4294967295
 80036bc:	e004      	b.n	80036c8 <IIS2MDC_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <IIS2MDC_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80036e0:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <IIS2MDC_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetOutputDataRate(IIS2MDC_Object_t *pObj, float *Odr)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
  iis2mdc_odr_t odr_low_level;

  /* Get current output data rate. */
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	331c      	adds	r3, #28
 8003702:	f107 020b 	add.w	r2, r7, #11
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f9e1 	bl	8003ad0 <iis2mdc_data_rate_get>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <IIS2MDC_MAG_GetOutputDataRate+0x2a>
  {
    return IIS2MDC_ERROR;
 8003714:	f04f 33ff 	mov.w	r3, #4294967295
 8003718:	e023      	b.n	8003762 <IIS2MDC_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800371a:	7afb      	ldrb	r3, [r7, #11]
 800371c:	2b03      	cmp	r3, #3
 800371e:	d81b      	bhi.n	8003758 <IIS2MDC_MAG_GetOutputDataRate+0x68>
 8003720:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <IIS2MDC_MAG_GetOutputDataRate+0x38>)
 8003722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003726:	bf00      	nop
 8003728:	08003739 	.word	0x08003739
 800372c:	08003741 	.word	0x08003741
 8003730:	08003749 	.word	0x08003749
 8003734:	08003751 	.word	0x08003751
  {
    case IIS2MDC_ODR_10Hz:
      *Odr = 10.0f;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	4a0c      	ldr	r2, [pc, #48]	; (800376c <IIS2MDC_MAG_GetOutputDataRate+0x7c>)
 800373c:	601a      	str	r2, [r3, #0]
      break;
 800373e:	e00f      	b.n	8003760 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_20Hz:
      *Odr = 20.0f;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <IIS2MDC_MAG_GetOutputDataRate+0x80>)
 8003744:	601a      	str	r2, [r3, #0]
      break;
 8003746:	e00b      	b.n	8003760 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_50Hz:
      *Odr = 50.0f;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <IIS2MDC_MAG_GetOutputDataRate+0x84>)
 800374c:	601a      	str	r2, [r3, #0]
      break;
 800374e:	e007      	b.n	8003760 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_100Hz:
      *Odr = 100.0f;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	4a09      	ldr	r2, [pc, #36]	; (8003778 <IIS2MDC_MAG_GetOutputDataRate+0x88>)
 8003754:	601a      	str	r2, [r3, #0]
      break;
 8003756:	e003      	b.n	8003760 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    default:
      ret = IIS2MDC_ERROR;
 8003758:	f04f 33ff 	mov.w	r3, #4294967295
 800375c:	60fb      	str	r3, [r7, #12]
      break;
 800375e:	bf00      	nop
  }

  return ret;
 8003760:	68fb      	ldr	r3, [r7, #12]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	41200000 	.word	0x41200000
 8003770:	41a00000 	.word	0x41a00000
 8003774:	42480000 	.word	0x42480000
 8003778:	42c80000 	.word	0x42c80000

0800377c <IIS2MDC_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_SetOutputDataRate(IIS2MDC_Object_t *pObj, float Odr)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	ed87 0a00 	vstr	s0, [r7]
  iis2mdc_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8003788:	edd7 7a00 	vldr	s15, [r7]
 800378c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003790:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	d801      	bhi.n	800379e <IIS2MDC_MAG_SetOutputDataRate+0x22>
 800379a:	2300      	movs	r3, #0
 800379c:	e016      	b.n	80037cc <IIS2MDC_MAG_SetOutputDataRate+0x50>
 800379e:	edd7 7a00 	vldr	s15, [r7]
 80037a2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80037a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ae:	d801      	bhi.n	80037b4 <IIS2MDC_MAG_SetOutputDataRate+0x38>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e00b      	b.n	80037cc <IIS2MDC_MAG_SetOutputDataRate+0x50>
 80037b4:	edd7 7a00 	vldr	s15, [r7]
 80037b8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80037f4 <IIS2MDC_MAG_SetOutputDataRate+0x78>
 80037bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c4:	d801      	bhi.n	80037ca <IIS2MDC_MAG_SetOutputDataRate+0x4e>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e000      	b.n	80037cc <IIS2MDC_MAG_SetOutputDataRate+0x50>
 80037ca:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
 80037cc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? IIS2MDC_ODR_50Hz
            :                    IIS2MDC_ODR_100Hz;

  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	331c      	adds	r3, #28
 80037d2:	7bfa      	ldrb	r2, [r7, #15]
 80037d4:	4611      	mov	r1, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 f953 	bl	8003a82 <iis2mdc_data_rate_set>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <IIS2MDC_MAG_SetOutputDataRate+0x6c>
  {
    return IIS2MDC_ERROR;
 80037e2:	f04f 33ff 	mov.w	r3, #4294967295
 80037e6:	e000      	b.n	80037ea <IIS2MDC_MAG_SetOutputDataRate+0x6e>
  }

  return IIS2MDC_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	42480000 	.word	0x42480000

080037f8 <IIS2MDC_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *FullScale = 50;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2232      	movs	r2, #50	; 0x32
 8003806:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <IIS2MDC_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <IIS2MDC_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	331c      	adds	r3, #28
 800383c:	f107 0208 	add.w	r2, r7, #8
 8003840:	4611      	mov	r1, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f000 f9a2 	bl	8003b8c <iis2mdc_magnetic_raw_get>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <IIS2MDC_MAG_GetAxesRaw+0x26>
  {
    return IIS2MDC_ERROR;
 800384e:	f04f 33ff 	mov.w	r3, #4294967295
 8003852:	e00c      	b.n	800386e <IIS2MDC_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003854:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800385c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003864:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	809a      	strh	r2, [r3, #4]

  return IIS2MDC_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <IIS2MDC_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b086      	sub	sp, #24
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	331c      	adds	r3, #28
 8003884:	f107 0210 	add.w	r2, r7, #16
 8003888:	4611      	mov	r1, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f97e 	bl	8003b8c <iis2mdc_magnetic_raw_get>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 8003896:	f04f 33ff 	mov.w	r3, #4294967295
 800389a:	e036      	b.n	800390a <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 800389c:	f107 030c 	add.w	r3, r7, #12
 80038a0:	4619      	mov	r1, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff ff14 	bl	80036d0 <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80038a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80038ac:	ee07 3a90 	vmov	s15, r3
 80038b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80038b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038c0:	ee17 2a90 	vmov	r2, s15
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80038c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80038cc:	ee07 3a90 	vmov	s15, r3
 80038d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80038d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038e0:	ee17 2a90 	vmov	r2, s15
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80038e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80038ec:	ee07 3a90 	vmov	s15, r3
 80038f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80038f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003900:	ee17 2a90 	vmov	r2, s15
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003912:	b590      	push	{r4, r7, lr}
 8003914:	b087      	sub	sp, #28
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	461a      	mov	r2, r3
 800391e:	460b      	mov	r3, r1
 8003920:	72fb      	strb	r3, [r7, #11]
 8003922:	4613      	mov	r3, r2
 8003924:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10e      	bne.n	8003950 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	695c      	ldr	r4, [r3, #20]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	7b1b      	ldrb	r3, [r3, #12]
 800393a:	b298      	uxth	r0, r3
 800393c:	7afb      	ldrb	r3, [r7, #11]
 800393e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003942:	b2db      	uxtb	r3, r3
 8003944:	b299      	uxth	r1, r3
 8003946:	893b      	ldrh	r3, [r7, #8]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	47a0      	blx	r4
 800394c:	4603      	mov	r3, r0
 800394e:	e00d      	b.n	800396c <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	695c      	ldr	r4, [r3, #20]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	7b1b      	ldrb	r3, [r3, #12]
 8003958:	b298      	uxth	r0, r3
 800395a:	7afb      	ldrb	r3, [r7, #11]
 800395c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003960:	b2db      	uxtb	r3, r3
 8003962:	b299      	uxth	r1, r3
 8003964:	893b      	ldrh	r3, [r7, #8]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	47a0      	blx	r4
 800396a:	4603      	mov	r3, r0
  }
}
 800396c:	4618      	mov	r0, r3
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	bd90      	pop	{r4, r7, pc}

08003974 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003974:	b590      	push	{r4, r7, lr}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	607a      	str	r2, [r7, #4]
 800397e:	461a      	mov	r2, r3
 8003980:	460b      	mov	r3, r1
 8003982:	72fb      	strb	r3, [r7, #11]
 8003984:	4613      	mov	r3, r2
 8003986:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10e      	bne.n	80039b2 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	691c      	ldr	r4, [r3, #16]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	7b1b      	ldrb	r3, [r3, #12]
 800399c:	b298      	uxth	r0, r3
 800399e:	7afb      	ldrb	r3, [r7, #11]
 80039a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	b299      	uxth	r1, r3
 80039a8:	893b      	ldrh	r3, [r7, #8]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	47a0      	blx	r4
 80039ae:	4603      	mov	r3, r0
 80039b0:	e00d      	b.n	80039ce <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	691c      	ldr	r4, [r3, #16]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	7b1b      	ldrb	r3, [r3, #12]
 80039ba:	b298      	uxth	r0, r3
 80039bc:	7afb      	ldrb	r3, [r7, #11]
 80039be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	b299      	uxth	r1, r3
 80039c6:	893b      	ldrh	r3, [r7, #8]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	47a0      	blx	r4
 80039cc:	4603      	mov	r3, r0
  }
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd90      	pop	{r4, r7, pc}

080039d6 <iis2mdc_read_reg>:
  *
  */
int32_t iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80039d6:	b590      	push	{r4, r7, lr}
 80039d8:	b087      	sub	sp, #28
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	461a      	mov	r2, r3
 80039e2:	460b      	mov	r3, r1
 80039e4:	72fb      	strb	r3, [r7, #11]
 80039e6:	4613      	mov	r3, r2
 80039e8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	685c      	ldr	r4, [r3, #4]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6898      	ldr	r0, [r3, #8]
 80039f2:	893b      	ldrh	r3, [r7, #8]
 80039f4:	7af9      	ldrb	r1, [r7, #11]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	47a0      	blx	r4
 80039fa:	6178      	str	r0, [r7, #20]

  return ret;
 80039fc:	697b      	ldr	r3, [r7, #20]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	371c      	adds	r7, #28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd90      	pop	{r4, r7, pc}

08003a06 <iis2mdc_write_reg>:
  *
  */
int32_t iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003a06:	b590      	push	{r4, r7, lr}
 8003a08:	b087      	sub	sp, #28
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	461a      	mov	r2, r3
 8003a12:	460b      	mov	r3, r1
 8003a14:	72fb      	strb	r3, [r7, #11]
 8003a16:	4613      	mov	r3, r2
 8003a18:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681c      	ldr	r4, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6898      	ldr	r0, [r3, #8]
 8003a22:	893b      	ldrh	r3, [r7, #8]
 8003a24:	7af9      	ldrb	r1, [r7, #11]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	47a0      	blx	r4
 8003a2a:	6178      	str	r0, [r7, #20]

  return ret;
 8003a2c:	697b      	ldr	r3, [r7, #20]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd90      	pop	{r4, r7, pc}

08003a36 <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003a42:	f107 0208 	add.w	r2, r7, #8
 8003a46:	2301      	movs	r3, #1
 8003a48:	2160      	movs	r1, #96	; 0x60
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff ffc3 	bl	80039d6 <iis2mdc_read_reg>
 8003a50:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10f      	bne.n	8003a78 <iis2mdc_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	7a3b      	ldrb	r3, [r7, #8]
 8003a62:	f362 0301 	bfi	r3, r2, #0, #2
 8003a66:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003a68:	f107 0208 	add.w	r2, r7, #8
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	2160      	movs	r1, #96	; 0x60
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff ffc8 	bl	8003a06 <iis2mdc_write_reg>
 8003a76:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003a78:	68fb      	ldr	r3, [r7, #12]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003a8e:	f107 0208 	add.w	r2, r7, #8
 8003a92:	2301      	movs	r3, #1
 8003a94:	2160      	movs	r1, #96	; 0x60
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ff9d 	bl	80039d6 <iis2mdc_read_reg>
 8003a9c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10f      	bne.n	8003ac4 <iis2mdc_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	7a3b      	ldrb	r3, [r7, #8]
 8003aae:	f362 0383 	bfi	r3, r2, #2, #2
 8003ab2:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003ab4:	f107 0208 	add.w	r2, r7, #8
 8003ab8:	2301      	movs	r3, #1
 8003aba:	2160      	movs	r1, #96	; 0x60
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff ffa2 	bl	8003a06 <iis2mdc_write_reg>
 8003ac2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003ada:	f107 0208 	add.w	r2, r7, #8
 8003ade:	2301      	movs	r3, #1
 8003ae0:	2160      	movs	r1, #96	; 0x60
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff ff77 	bl	80039d6 <iis2mdc_read_reg>
 8003ae8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8003aea:	7a3b      	ldrb	r3, [r7, #8]
 8003aec:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d81a      	bhi.n	8003b2c <iis2mdc_data_rate_get+0x5c>
 8003af6:	a201      	add	r2, pc, #4	; (adr r2, 8003afc <iis2mdc_data_rate_get+0x2c>)
 8003af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afc:	08003b0d 	.word	0x08003b0d
 8003b00:	08003b15 	.word	0x08003b15
 8003b04:	08003b1d 	.word	0x08003b1d
 8003b08:	08003b25 	.word	0x08003b25
  {
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	701a      	strb	r2, [r3, #0]
      break;
 8003b12:	e00f      	b.n	8003b34 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_20Hz:
      *val = IIS2MDC_ODR_20Hz;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2201      	movs	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
      break;
 8003b1a:	e00b      	b.n	8003b34 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_50Hz:
      *val = IIS2MDC_ODR_50Hz;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	701a      	strb	r2, [r3, #0]
      break;
 8003b22:	e007      	b.n	8003b34 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_100Hz:
      *val = IIS2MDC_ODR_100Hz;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2203      	movs	r2, #3
 8003b28:	701a      	strb	r2, [r3, #0]
      break;
 8003b2a:	e003      	b.n	8003b34 <iis2mdc_data_rate_get+0x64>

    default:
      *val = IIS2MDC_ODR_10Hz;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	701a      	strb	r2, [r3, #0]
      break;
 8003b32:	bf00      	nop
  }

  return ret;
 8003b34:	68fb      	ldr	r3, [r7, #12]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop

08003b40 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003b4c:	f107 0208 	add.w	r2, r7, #8
 8003b50:	2301      	movs	r3, #1
 8003b52:	2162      	movs	r1, #98	; 0x62
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ff3e 	bl	80039d6 <iis2mdc_read_reg>
 8003b5a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10f      	bne.n	8003b82 <iis2mdc_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	7a3b      	ldrb	r3, [r7, #8]
 8003b6c:	f362 1304 	bfi	r3, r2, #4, #1
 8003b70:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003b72:	f107 0208 	add.w	r2, r7, #8
 8003b76:	2301      	movs	r3, #1
 8003b78:	2162      	movs	r1, #98	; 0x62
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7ff ff43 	bl	8003a06 <iis2mdc_write_reg>
 8003b80:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003b82:	68fb      	ldr	r3, [r7, #12]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 8003b96:	f107 020c 	add.w	r2, r7, #12
 8003b9a:	2306      	movs	r3, #6
 8003b9c:	2168      	movs	r1, #104	; 0x68
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff ff19 	bl	80039d6 <iis2mdc_read_reg>
 8003ba4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003ba6:	7b7b      	ldrb	r3, [r7, #13]
 8003ba8:	b21a      	sxth	r2, r3
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	7b3b      	ldrb	r3, [r7, #12]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	b21a      	sxth	r2, r3
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003bc8:	7bfa      	ldrb	r2, [r7, #15]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	3302      	adds	r3, #2
 8003bce:	b212      	sxth	r2, r2
 8003bd0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	7bbb      	ldrb	r3, [r7, #14]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	3302      	adds	r3, #2
 8003bec:	b212      	sxth	r2, r2
 8003bee:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003bf0:	7c7a      	ldrb	r2, [r7, #17]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	b212      	sxth	r2, r2
 8003bf8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	021b      	lsls	r3, r3, #8
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	7c3b      	ldrb	r3, [r7, #16]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	3304      	adds	r3, #4
 8003c14:	b212      	sxth	r2, r2
 8003c16:	801a      	strh	r2, [r3, #0]

  return ret;
 8003c18:	697b      	ldr	r3, [r7, #20]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	214f      	movs	r1, #79	; 0x4f
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff fecf 	bl	80039d6 <iis2mdc_read_reg>
 8003c38:	60f8      	str	r0, [r7, #12]

  return ret;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003c50:	f107 0208 	add.w	r2, r7, #8
 8003c54:	2301      	movs	r3, #1
 8003c56:	2162      	movs	r1, #98	; 0x62
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff febc 	bl	80039d6 <iis2mdc_read_reg>
 8003c5e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10f      	bne.n	8003c86 <iis2mdc_self_test_set+0x42>
  {
    reg.self_test = val;
 8003c66:	78fb      	ldrb	r3, [r7, #3]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	7a3b      	ldrb	r3, [r7, #8]
 8003c70:	f362 0341 	bfi	r3, r2, #1, #1
 8003c74:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003c76:	f107 0208 	add.w	r2, r7, #8
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	2162      	movs	r1, #98	; 0x62
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff fec1 	bl	8003a06 <iis2mdc_write_reg>
 8003c84:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003c86:	68fb      	ldr	r3, [r7, #12]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003c9c:	f107 0208 	add.w	r2, r7, #8
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	2162      	movs	r1, #98	; 0x62
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff fe96 	bl	80039d6 <iis2mdc_read_reg>
 8003caa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10f      	bne.n	8003cd2 <iis2mdc_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	7a3b      	ldrb	r3, [r7, #8]
 8003cbc:	f362 1345 	bfi	r3, r2, #5, #1
 8003cc0:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003cc2:	f107 0208 	add.w	r2, r7, #8
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	2162      	movs	r1, #98	; 0x62
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff fe9b 	bl	8003a06 <iis2mdc_write_reg>
 8003cd0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <ISM330DHCX_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d103      	bne.n	8003cf8 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 8003cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	e04d      	b.n	8003d94 <ISM330DHCX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	7b1a      	ldrb	r2, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	699a      	ldr	r2, [r3, #24]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a1b      	ldr	r2, [pc, #108]	; (8003da0 <ISM330DHCX_RegisterBusIO+0xc4>)
 8003d34:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a1a      	ldr	r2, [pc, #104]	; (8003da4 <ISM330DHCX_RegisterBusIO+0xc8>)
 8003d3a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d103      	bne.n	8003d52 <ISM330DHCX_RegisterBusIO+0x76>
    {
      ret = ISM330DHCX_ERROR;
 8003d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	e020      	b.n	8003d94 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4798      	blx	r3
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <ISM330DHCX_RegisterBusIO+0x8a>
    {
      ret = ISM330DHCX_ERROR;
 8003d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	e016      	b.n	8003d94 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d112      	bne.n	8003d94 <ISM330DHCX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10d      	bne.n	8003d94 <ISM330DHCX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003d78:	230c      	movs	r3, #12
 8003d7a:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2112      	movs	r1, #18
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fd61 	bl	800484a <ISM330DHCX_Write_Reg>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <ISM330DHCX_RegisterBusIO+0xb8>
          {
            ret = ISM330DHCX_ERROR;
 8003d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d92:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003d94:	68fb      	ldr	r3, [r7, #12]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	08004cb9 	.word	0x08004cb9
 8003da4:	08004cef 	.word	0x08004cef

08003da8 <ISM330DHCX_Init>:
  * @brief  Initialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	331c      	adds	r3, #28
 8003db4:	2101      	movs	r1, #1
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 fd20 	bl	80057fc <ism330dhcx_device_conf_set>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc6:	e078      	b.n	8003eba <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	331c      	adds	r3, #28
 8003dcc:	2101      	movs	r1, #1
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f001 fd97 	bl	8005902 <ism330dhcx_auto_increment_set>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 8003dda:	f04f 33ff 	mov.w	r3, #4294967295
 8003dde:	e06c      	b.n	8003eba <ISM330DHCX_Init+0x112>
  }

  /* SW reset */
  if (ism330dhcx_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	331c      	adds	r3, #28
 8003de4:	2101      	movs	r1, #1
 8003de6:	4618      	mov	r0, r3
 8003de8:	f001 fd65 	bl	80058b6 <ism330dhcx_reset_set>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 8003df2:	f04f 33ff 	mov.w	r3, #4294967295
 8003df6:	e060      	b.n	8003eba <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	331c      	adds	r3, #28
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 fd7f 	bl	8005902 <ism330dhcx_auto_increment_set>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 8003e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0e:	e054      	b.n	8003eba <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	331c      	adds	r3, #28
 8003e14:	2101      	movs	r1, #1
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 fc34 	bl	8005684 <ism330dhcx_block_data_update_set>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
 8003e26:	e048      	b.n	8003eba <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	331c      	adds	r3, #28
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 fd8d 	bl	800594e <ism330dhcx_fifo_mode_set>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 8003e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3e:	e03c      	b.n	8003eba <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2204      	movs	r2, #4
 8003e44:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	331c      	adds	r3, #28
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fff6 	bl	8004e40 <ism330dhcx_xl_data_rate_set>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 8003e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5e:	e02c      	b.n	8003eba <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	331c      	adds	r3, #28
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 ff8c 	bl	8004d84 <ism330dhcx_xl_full_scale_set>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 8003e72:	f04f 33ff 	mov.w	r3, #4294967295
 8003e76:	e020      	b.n	8003eba <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	331c      	adds	r3, #28
 8003e84:	2100      	movs	r1, #0
 8003e86:	4618      	mov	r0, r3
 8003e88:	f001 fa2a 	bl	80052e0 <ism330dhcx_gy_data_rate_set>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 8003e92:	f04f 33ff 	mov.w	r3, #4294967295
 8003e96:	e010      	b.n	8003eba <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	331c      	adds	r3, #28
 8003e9c:	210c      	movs	r1, #12
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f001 f9a6 	bl	80051f0 <ism330dhcx_gy_full_scale_set>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 8003eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003eae:	e004      	b.n	8003eba <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <ISM330DHCX_DeInit>:
  * @brief  Deinitialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f888 	bl	8003fe0 <ISM330DHCX_ACC_Disable>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 8003ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eda:	e015      	b.n	8003f08 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fa92 	bl	8004406 <ISM330DHCX_GYRO_Disable>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 8003ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8003eec:	e00c      	b.n	8003f08 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <ISM330DHCX_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	331c      	adds	r3, #28
 8003f1e:	6839      	ldr	r1, [r7, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f001 fcb7 	bl	8005894 <ism330dhcx_device_id_get>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 8003f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f30:	e000      	b.n	8003f34 <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <ISM330DHCX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to ISM330DHCX sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2200      	movs	r2, #0
 8003f56:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003f64:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2210      	movs	r2, #16
 8003f6a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	4a07      	ldr	r2, [pc, #28]	; (8003f94 <ISM330DHCX_GetCapabilities+0x58>)
 8003f76:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	4a06      	ldr	r2, [pc, #24]	; (8003f94 <ISM330DHCX_GetCapabilities+0x58>)
 8003f7c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	45d05800 	.word	0x45d05800

08003f98 <ISM330DHCX_ACC_Enable>:
  * @brief  Enable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e014      	b.n	8003fd8 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f103 021c 	add.w	r2, r3, #28
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	f000 ff3f 	bl	8004e40 <ism330dhcx_xl_data_rate_set>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8003fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fcc:	e004      	b.n	8003fd8 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <ISM330DHCX_ACC_Disable>:
  * @brief  Disable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e01f      	b.n	8004036 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f103 021c 	add.w	r2, r3, #28
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	332b      	adds	r3, #43	; 0x2b
 8004000:	4619      	mov	r1, r3
 8004002:	4610      	mov	r0, r2
 8004004:	f001 f88c 	bl	8005120 <ism330dhcx_xl_data_rate_get>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 800400e:	f04f 33ff 	mov.w	r3, #4294967295
 8004012:	e010      	b.n	8004036 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	331c      	adds	r3, #28
 8004018:	2100      	movs	r1, #0
 800401a:	4618      	mov	r0, r3
 800401c:	f000 ff10 	bl	8004e40 <ism330dhcx_xl_data_rate_set>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8004026:	f04f 33ff 	mov.w	r3, #4294967295
 800402a:	e004      	b.n	8004036 <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <ISM330DHCX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	331c      	adds	r3, #28
 8004052:	f107 020b 	add.w	r2, r7, #11
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f000 feb9 	bl	8004dd0 <ism330dhcx_xl_full_scale_get>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004064:	f04f 33ff 	mov.w	r3, #4294967295
 8004068:	e023      	b.n	80040b2 <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800406a:	7afb      	ldrb	r3, [r7, #11]
 800406c:	2b03      	cmp	r3, #3
 800406e:	d81b      	bhi.n	80040a8 <ISM330DHCX_ACC_GetSensitivity+0x68>
 8004070:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 8004072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004076:	bf00      	nop
 8004078:	08004089 	.word	0x08004089
 800407c:	080040a1 	.word	0x080040a1
 8004080:	08004091 	.word	0x08004091
 8004084:	08004099 	.word	0x08004099
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	4a0c      	ldr	r2, [pc, #48]	; (80040bc <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 800408c:	601a      	str	r2, [r3, #0]
      break;
 800408e:	e00f      	b.n	80040b0 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	4a0b      	ldr	r2, [pc, #44]	; (80040c0 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 8004094:	601a      	str	r2, [r3, #0]
      break;
 8004096:	e00b      	b.n	80040b0 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	4a0a      	ldr	r2, [pc, #40]	; (80040c4 <ISM330DHCX_ACC_GetSensitivity+0x84>)
 800409c:	601a      	str	r2, [r3, #0]
      break;
 800409e:	e007      	b.n	80040b0 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	4a09      	ldr	r2, [pc, #36]	; (80040c8 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 80040a4:	601a      	str	r2, [r3, #0]
      break;
 80040a6:	e003      	b.n	80040b0 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 80040a8:	f04f 33ff 	mov.w	r3, #4294967295
 80040ac:	60fb      	str	r3, [r7, #12]
      break;
 80040ae:	bf00      	nop
  }

  return ret;
 80040b0:	68fb      	ldr	r3, [r7, #12]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	3d79db23 	.word	0x3d79db23
 80040c0:	3df9db23 	.word	0x3df9db23
 80040c4:	3e79db23 	.word	0x3e79db23
 80040c8:	3ef9db23 	.word	0x3ef9db23

080040cc <ISM330DHCX_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	331c      	adds	r3, #28
 80040de:	f107 020b 	add.w	r2, r7, #11
 80040e2:	4611      	mov	r1, r2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 f81b 	bl	8005120 <ism330dhcx_xl_data_rate_get>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 80040f0:	f04f 33ff 	mov.w	r3, #4294967295
 80040f4:	e04e      	b.n	8004194 <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80040f6:	7afb      	ldrb	r3, [r7, #11]
 80040f8:	2b0a      	cmp	r3, #10
 80040fa:	d846      	bhi.n	800418a <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004131 	.word	0x08004131
 8004108:	0800413b 	.word	0x0800413b
 800410c:	08004143 	.word	0x08004143
 8004110:	0800414b 	.word	0x0800414b
 8004114:	08004153 	.word	0x08004153
 8004118:	0800415b 	.word	0x0800415b
 800411c:	08004163 	.word	0x08004163
 8004120:	0800416b 	.word	0x0800416b
 8004124:	08004173 	.word	0x08004173
 8004128:	0800417b 	.word	0x0800417b
 800412c:	08004183 	.word	0x08004183
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
      break;
 8004138:	e02b      	b.n	8004192 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	4a17      	ldr	r2, [pc, #92]	; (800419c <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 800413e:	601a      	str	r2, [r3, #0]
      break;
 8004140:	e027      	b.n	8004192 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	4a16      	ldr	r2, [pc, #88]	; (80041a0 <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 8004146:	601a      	str	r2, [r3, #0]
      break;
 8004148:	e023      	b.n	8004192 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	4a15      	ldr	r2, [pc, #84]	; (80041a4 <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 800414e:	601a      	str	r2, [r3, #0]
      break;
 8004150:	e01f      	b.n	8004192 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	4a14      	ldr	r2, [pc, #80]	; (80041a8 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 8004156:	601a      	str	r2, [r3, #0]
      break;
 8004158:	e01b      	b.n	8004192 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	4a13      	ldr	r2, [pc, #76]	; (80041ac <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 800415e:	601a      	str	r2, [r3, #0]
      break;
 8004160:	e017      	b.n	8004192 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_416Hz:
      *Odr = 416.0f;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	4a12      	ldr	r2, [pc, #72]	; (80041b0 <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 8004166:	601a      	str	r2, [r3, #0]
      break;
 8004168:	e013      	b.n	8004192 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	4a11      	ldr	r2, [pc, #68]	; (80041b4 <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 800416e:	601a      	str	r2, [r3, #0]
      break;
 8004170:	e00f      	b.n	8004192 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1666Hz:
      *Odr = 1666.0f;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	4a10      	ldr	r2, [pc, #64]	; (80041b8 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 8004176:	601a      	str	r2, [r3, #0]
      break;
 8004178:	e00b      	b.n	8004192 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3332Hz:
      *Odr = 3332.0f;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	4a0f      	ldr	r2, [pc, #60]	; (80041bc <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 800417e:	601a      	str	r2, [r3, #0]
      break;
 8004180:	e007      	b.n	8004192 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	4a0e      	ldr	r2, [pc, #56]	; (80041c0 <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 8004186:	601a      	str	r2, [r3, #0]
      break;
 8004188:	e003      	b.n	8004192 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 800418a:	f04f 33ff 	mov.w	r3, #4294967295
 800418e:	60fb      	str	r3, [r7, #12]
      break;
 8004190:	bf00      	nop
  }

  return ret;
 8004192:	68fb      	ldr	r3, [r7, #12]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	41480000 	.word	0x41480000
 80041a0:	41d00000 	.word	0x41d00000
 80041a4:	42500000 	.word	0x42500000
 80041a8:	42d00000 	.word	0x42d00000
 80041ac:	43500000 	.word	0x43500000
 80041b0:	43d00000 	.word	0x43d00000
 80041b4:	44504000 	.word	0x44504000
 80041b8:	44d04000 	.word	0x44d04000
 80041bc:	45504000 	.word	0x45504000
 80041c0:	45d05800 	.word	0x45d05800

080041c4 <ISM330DHCX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d106      	bne.n	80041e8 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80041da:	ed97 0a00 	vldr	s0, [r7]
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fb4e 	bl	8004880 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 80041e4:	4603      	mov	r3, r0
 80041e6:	e005      	b.n	80041f4 <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80041e8:	ed97 0a00 	vldr	s0, [r7]
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fbd3 	bl	8004998 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 80041f2:	4603      	mov	r3, r0
  }
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <ISM330DHCX_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	331c      	adds	r3, #28
 800420e:	f107 020b 	add.w	r2, r7, #11
 8004212:	4611      	mov	r1, r2
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fddb 	bl	8004dd0 <ism330dhcx_xl_full_scale_get>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004220:	f04f 33ff 	mov.w	r3, #4294967295
 8004224:	e023      	b.n	800426e <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004226:	7afb      	ldrb	r3, [r7, #11]
 8004228:	2b03      	cmp	r3, #3
 800422a:	d81b      	bhi.n	8004264 <ISM330DHCX_ACC_GetFullScale+0x68>
 800422c:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <ISM330DHCX_ACC_GetFullScale+0x38>)
 800422e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004232:	bf00      	nop
 8004234:	08004245 	.word	0x08004245
 8004238:	0800425d 	.word	0x0800425d
 800423c:	0800424d 	.word	0x0800424d
 8004240:	08004255 	.word	0x08004255
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2202      	movs	r2, #2
 8004248:	601a      	str	r2, [r3, #0]
      break;
 800424a:	e00f      	b.n	800426c <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2204      	movs	r2, #4
 8004250:	601a      	str	r2, [r3, #0]
      break;
 8004252:	e00b      	b.n	800426c <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2208      	movs	r2, #8
 8004258:	601a      	str	r2, [r3, #0]
      break;
 800425a:	e007      	b.n	800426c <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2210      	movs	r2, #16
 8004260:	601a      	str	r2, [r3, #0]
      break;
 8004262:	e003      	b.n	800426c <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8004264:	f04f 33ff 	mov.w	r3, #4294967295
 8004268:	60fb      	str	r3, [r7, #12]
      break;
 800426a:	bf00      	nop
  }

  return ret;
 800426c:	68fb      	ldr	r3, [r7, #12]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop

08004278 <ISM330DHCX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b02      	cmp	r3, #2
 8004286:	dd0b      	ble.n	80042a0 <ISM330DHCX_ACC_SetFullScale+0x28>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b04      	cmp	r3, #4
 800428c:	dd06      	ble.n	800429c <ISM330DHCX_ACC_SetFullScale+0x24>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b08      	cmp	r3, #8
 8004292:	dc01      	bgt.n	8004298 <ISM330DHCX_ACC_SetFullScale+0x20>
 8004294:	2303      	movs	r3, #3
 8004296:	e004      	b.n	80042a2 <ISM330DHCX_ACC_SetFullScale+0x2a>
 8004298:	2301      	movs	r3, #1
 800429a:	e002      	b.n	80042a2 <ISM330DHCX_ACC_SetFullScale+0x2a>
 800429c:	2302      	movs	r3, #2
 800429e:	e000      	b.n	80042a2 <ISM330DHCX_ACC_SetFullScale+0x2a>
 80042a0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 80042a2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	331c      	adds	r3, #28
 80042a8:	7bfa      	ldrb	r2, [r7, #15]
 80042aa:	4611      	mov	r1, r2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fd69 	bl	8004d84 <ism330dhcx_xl_full_scale_set>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 80042b8:	f04f 33ff 	mov.w	r3, #4294967295
 80042bc:	e000      	b.n	80042c0 <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <ISM330DHCX_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	331c      	adds	r3, #28
 80042d6:	f107 0208 	add.w	r2, r7, #8
 80042da:	4611      	mov	r1, r2
 80042dc:	4618      	mov	r0, r3
 80042de:	f001 fa42 	bl	8005766 <ism330dhcx_acceleration_raw_get>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 80042e8:	f04f 33ff 	mov.w	r3, #4294967295
 80042ec:	e00c      	b.n	8004308 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80042ee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80042f6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80042fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <ISM330DHCX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	331c      	adds	r3, #28
 8004324:	f107 0210 	add.w	r2, r7, #16
 8004328:	4611      	mov	r1, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f001 fa1b 	bl	8005766 <ism330dhcx_acceleration_raw_get>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004336:	f04f 33ff 	mov.w	r3, #4294967295
 800433a:	e03c      	b.n	80043b6 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 800433c:	f107 030c 	add.w	r3, r7, #12
 8004340:	4619      	mov	r1, r3
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff fe7c 	bl	8004040 <ISM330DHCX_ACC_GetSensitivity>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 800434e:	f04f 33ff 	mov.w	r3, #4294967295
 8004352:	e030      	b.n	80043b6 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004354:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004358:	ee07 3a90 	vmov	s15, r3
 800435c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004360:	edd7 7a03 	vldr	s15, [r7, #12]
 8004364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800436c:	ee17 2a90 	vmov	r2, s15
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004374:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004378:	ee07 3a90 	vmov	s15, r3
 800437c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004380:	edd7 7a03 	vldr	s15, [r7, #12]
 8004384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800438c:	ee17 2a90 	vmov	r2, s15
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004394:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004398:	ee07 3a90 	vmov	s15, r3
 800439c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80043a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043ac:	ee17 2a90 	vmov	r2, s15
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <ISM330DHCX_GYRO_Enable>:
  * @brief  Enable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e014      	b.n	80043fe <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f103 021c 	add.w	r2, r3, #28
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80043e0:	4619      	mov	r1, r3
 80043e2:	4610      	mov	r0, r2
 80043e4:	f000 ff7c 	bl	80052e0 <ism330dhcx_gy_data_rate_set>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295
 80043f2:	e004      	b.n	80043fe <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <ISM330DHCX_GYRO_Disable>:
  * @brief  Disable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e01f      	b.n	800445c <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f103 021c 	add.w	r2, r3, #28
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	332c      	adds	r3, #44	; 0x2c
 8004426:	4619      	mov	r1, r3
 8004428:	4610      	mov	r0, r2
 800442a:	f001 f8c9 	bl	80055c0 <ism330dhcx_gy_data_rate_get>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8004434:	f04f 33ff 	mov.w	r3, #4294967295
 8004438:	e010      	b.n	800445c <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	331c      	adds	r3, #28
 800443e:	2100      	movs	r1, #0
 8004440:	4618      	mov	r0, r3
 8004442:	f000 ff4d 	bl	80052e0 <ism330dhcx_gy_data_rate_set>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 800444c:	f04f 33ff 	mov.w	r3, #4294967295
 8004450:	e004      	b.n	800445c <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <ISM330DHCX_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	331c      	adds	r3, #28
 8004476:	f107 020b 	add.w	r2, r7, #11
 800447a:	4611      	mov	r1, r2
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fedd 	bl	800523c <ism330dhcx_gy_full_scale_get>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004488:	f04f 33ff 	mov.w	r3, #4294967295
 800448c:	e039      	b.n	8004502 <ISM330DHCX_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800448e:	7afb      	ldrb	r3, [r7, #11]
 8004490:	2b0c      	cmp	r3, #12
 8004492:	d831      	bhi.n	80044f8 <ISM330DHCX_GYRO_GetSensitivity+0x94>
 8004494:	a201      	add	r2, pc, #4	; (adr r2, 800449c <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044d9 	.word	0x080044d9
 80044a0:	080044f9 	.word	0x080044f9
 80044a4:	080044d1 	.word	0x080044d1
 80044a8:	080044f9 	.word	0x080044f9
 80044ac:	080044e1 	.word	0x080044e1
 80044b0:	080044f9 	.word	0x080044f9
 80044b4:	080044f9 	.word	0x080044f9
 80044b8:	080044f9 	.word	0x080044f9
 80044bc:	080044e9 	.word	0x080044e9
 80044c0:	080044f9 	.word	0x080044f9
 80044c4:	080044f9 	.word	0x080044f9
 80044c8:	080044f9 	.word	0x080044f9
 80044cc:	080044f1 	.word	0x080044f1
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4a0e      	ldr	r2, [pc, #56]	; (800450c <ISM330DHCX_GYRO_GetSensitivity+0xa8>)
 80044d4:	601a      	str	r2, [r3, #0]
      break;
 80044d6:	e013      	b.n	8004500 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	4a0d      	ldr	r2, [pc, #52]	; (8004510 <ISM330DHCX_GYRO_GetSensitivity+0xac>)
 80044dc:	601a      	str	r2, [r3, #0]
      break;
 80044de:	e00f      	b.n	8004500 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	4a0c      	ldr	r2, [pc, #48]	; (8004514 <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 80044e4:	601a      	str	r2, [r3, #0]
      break;
 80044e6:	e00b      	b.n	8004500 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	4a0b      	ldr	r2, [pc, #44]	; (8004518 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 80044ec:	601a      	str	r2, [r3, #0]
      break;
 80044ee:	e007      	b.n	8004500 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	4a0a      	ldr	r2, [pc, #40]	; (800451c <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 80044f4:	601a      	str	r2, [r3, #0]
      break;
 80044f6:	e003      	b.n	8004500 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    default:
      ret = ISM330DHCX_ERROR;
 80044f8:	f04f 33ff 	mov.w	r3, #4294967295
 80044fc:	60fb      	str	r3, [r7, #12]
      break;
 80044fe:	bf00      	nop
  }

  return ret;
 8004500:	68fb      	ldr	r3, [r7, #12]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	408c0000 	.word	0x408c0000
 8004510:	410c0000 	.word	0x410c0000
 8004514:	418c0000 	.word	0x418c0000
 8004518:	420c0000 	.word	0x420c0000
 800451c:	428c0000 	.word	0x428c0000

08004520 <ISM330DHCX_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	331c      	adds	r3, #28
 8004532:	f107 020b 	add.w	r2, r7, #11
 8004536:	4611      	mov	r1, r2
 8004538:	4618      	mov	r0, r3
 800453a:	f001 f841 	bl	80055c0 <ism330dhcx_gy_data_rate_get>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004544:	f04f 33ff 	mov.w	r3, #4294967295
 8004548:	e04e      	b.n	80045e8 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800454a:	7afb      	ldrb	r3, [r7, #11]
 800454c:	2b0a      	cmp	r3, #10
 800454e:	d846      	bhi.n	80045de <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 8004550:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 8004552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004556:	bf00      	nop
 8004558:	08004585 	.word	0x08004585
 800455c:	0800458f 	.word	0x0800458f
 8004560:	08004597 	.word	0x08004597
 8004564:	0800459f 	.word	0x0800459f
 8004568:	080045a7 	.word	0x080045a7
 800456c:	080045af 	.word	0x080045af
 8004570:	080045b7 	.word	0x080045b7
 8004574:	080045bf 	.word	0x080045bf
 8004578:	080045c7 	.word	0x080045c7
 800457c:	080045cf 	.word	0x080045cf
 8004580:	080045d7 	.word	0x080045d7
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
      break;
 800458c:	e02b      	b.n	80045e6 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	4a17      	ldr	r2, [pc, #92]	; (80045f0 <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 8004592:	601a      	str	r2, [r3, #0]
      break;
 8004594:	e027      	b.n	80045e6 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	4a16      	ldr	r2, [pc, #88]	; (80045f4 <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 800459a:	601a      	str	r2, [r3, #0]
      break;
 800459c:	e023      	b.n	80045e6 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 80045a2:	601a      	str	r2, [r3, #0]
      break;
 80045a4:	e01f      	b.n	80045e6 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	4a14      	ldr	r2, [pc, #80]	; (80045fc <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 80045aa:	601a      	str	r2, [r3, #0]
      break;
 80045ac:	e01b      	b.n	80045e6 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	4a13      	ldr	r2, [pc, #76]	; (8004600 <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 80045b2:	601a      	str	r2, [r3, #0]
      break;
 80045b4:	e017      	b.n	80045e6 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_416Hz:
      *Odr = 416.0f;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	4a12      	ldr	r2, [pc, #72]	; (8004604 <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 80045ba:	601a      	str	r2, [r3, #0]
      break;
 80045bc:	e013      	b.n	80045e6 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	4a11      	ldr	r2, [pc, #68]	; (8004608 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 80045c2:	601a      	str	r2, [r3, #0]
      break;
 80045c4:	e00f      	b.n	80045e6 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1666Hz:
      *Odr =  1666.0f;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	4a10      	ldr	r2, [pc, #64]	; (800460c <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 80045ca:	601a      	str	r2, [r3, #0]
      break;
 80045cc:	e00b      	b.n	80045e6 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3332Hz:
      *Odr =  3332.0f;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	4a0f      	ldr	r2, [pc, #60]	; (8004610 <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 80045d2:	601a      	str	r2, [r3, #0]
      break;
 80045d4:	e007      	b.n	80045e6 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	4a0e      	ldr	r2, [pc, #56]	; (8004614 <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 80045da:	601a      	str	r2, [r3, #0]
      break;
 80045dc:	e003      	b.n	80045e6 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 80045de:	f04f 33ff 	mov.w	r3, #4294967295
 80045e2:	60fb      	str	r3, [r7, #12]
      break;
 80045e4:	bf00      	nop
  }

  return ret;
 80045e6:	68fb      	ldr	r3, [r7, #12]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	41480000 	.word	0x41480000
 80045f4:	41d00000 	.word	0x41d00000
 80045f8:	42500000 	.word	0x42500000
 80045fc:	42d00000 	.word	0x42d00000
 8004600:	43500000 	.word	0x43500000
 8004604:	43d00000 	.word	0x43d00000
 8004608:	44504000 	.word	0x44504000
 800460c:	44d04000 	.word	0x44d04000
 8004610:	45504000 	.word	0x45504000
 8004614:	45d05800 	.word	0x45d05800

08004618 <ISM330DHCX_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800462a:	2b01      	cmp	r3, #1
 800462c:	d106      	bne.n	800463c <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800462e:	ed97 0a00 	vldr	s0, [r7]
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fa32 	bl	8004a9c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 8004638:	4603      	mov	r3, r0
 800463a:	e005      	b.n	8004648 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 800463c:	ed97 0a00 	vldr	s0, [r7]
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fab7 	bl	8004bb4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 8004646:	4603      	mov	r3, r0
  }
}
 8004648:	4618      	mov	r0, r3
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <ISM330DHCX_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	331c      	adds	r3, #28
 8004662:	f107 020b 	add.w	r2, r7, #11
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fde7 	bl	800523c <ism330dhcx_gy_full_scale_get>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004674:	f04f 33ff 	mov.w	r3, #4294967295
 8004678:	e03c      	b.n	80046f4 <ISM330DHCX_GYRO_GetFullScale+0xa4>
  }

  switch (fs_low_level)
 800467a:	7afb      	ldrb	r3, [r7, #11]
 800467c:	2b0c      	cmp	r3, #12
 800467e:	d834      	bhi.n	80046ea <ISM330DHCX_GYRO_GetFullScale+0x9a>
 8004680:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 8004682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004686:	bf00      	nop
 8004688:	080046c5 	.word	0x080046c5
 800468c:	080046eb 	.word	0x080046eb
 8004690:	080046bd 	.word	0x080046bd
 8004694:	080046eb 	.word	0x080046eb
 8004698:	080046cd 	.word	0x080046cd
 800469c:	080046eb 	.word	0x080046eb
 80046a0:	080046eb 	.word	0x080046eb
 80046a4:	080046eb 	.word	0x080046eb
 80046a8:	080046d7 	.word	0x080046d7
 80046ac:	080046eb 	.word	0x080046eb
 80046b0:	080046eb 	.word	0x080046eb
 80046b4:	080046eb 	.word	0x080046eb
 80046b8:	080046e1 	.word	0x080046e1
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	227d      	movs	r2, #125	; 0x7d
 80046c0:	601a      	str	r2, [r3, #0]
      break;
 80046c2:	e016      	b.n	80046f2 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	22fa      	movs	r2, #250	; 0xfa
 80046c8:	601a      	str	r2, [r3, #0]
      break;
 80046ca:	e012      	b.n	80046f2 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80046d2:	601a      	str	r2, [r3, #0]
      break;
 80046d4:	e00d      	b.n	80046f2 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046dc:	601a      	str	r2, [r3, #0]
      break;
 80046de:	e008      	b.n	80046f2 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80046e6:	601a      	str	r2, [r3, #0]
      break;
 80046e8:	e003      	b.n	80046f2 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    default:
      ret = ISM330DHCX_ERROR;
 80046ea:	f04f 33ff 	mov.w	r3, #4294967295
 80046ee:	60fb      	str	r3, [r7, #12]
      break;
 80046f0:	bf00      	nop
  }

  return ret;
 80046f2:	68fb      	ldr	r3, [r7, #12]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <ISM330DHCX_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b7d      	cmp	r3, #125	; 0x7d
 800470a:	dd12      	ble.n	8004732 <ISM330DHCX_GYRO_SetFullScale+0x36>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2bfa      	cmp	r3, #250	; 0xfa
 8004710:	dd0d      	ble.n	800472e <ISM330DHCX_GYRO_SetFullScale+0x32>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004718:	dd07      	ble.n	800472a <ISM330DHCX_GYRO_SetFullScale+0x2e>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004720:	dc01      	bgt.n	8004726 <ISM330DHCX_GYRO_SetFullScale+0x2a>
 8004722:	2308      	movs	r3, #8
 8004724:	e006      	b.n	8004734 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004726:	230c      	movs	r3, #12
 8004728:	e004      	b.n	8004734 <ISM330DHCX_GYRO_SetFullScale+0x38>
 800472a:	2304      	movs	r3, #4
 800472c:	e002      	b.n	8004734 <ISM330DHCX_GYRO_SetFullScale+0x38>
 800472e:	2300      	movs	r3, #0
 8004730:	e000      	b.n	8004734 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004732:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 8004734:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           :                       ISM330DHCX_2000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	331c      	adds	r3, #28
 800473a:	7bfa      	ldrb	r2, [r7, #15]
 800473c:	4611      	mov	r1, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fd56 	bl	80051f0 <ism330dhcx_gy_full_scale_set>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <ISM330DHCX_GYRO_SetFullScale+0x54>
  {
    return ISM330DHCX_ERROR;
 800474a:	f04f 33ff 	mov.w	r3, #4294967295
 800474e:	e000      	b.n	8004752 <ISM330DHCX_GYRO_SetFullScale+0x56>
  }

  return ISM330DHCX_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <ISM330DHCX_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	331c      	adds	r3, #28
 8004768:	f107 0208 	add.w	r2, r7, #8
 800476c:	4611      	mov	r1, r2
 800476e:	4618      	mov	r0, r3
 8004770:	f000 ffae 	bl	80056d0 <ism330dhcx_angular_rate_raw_get>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 800477a:	f04f 33ff 	mov.w	r3, #4294967295
 800477e:	e00c      	b.n	800479a <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004780:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004788:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004790:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <ISM330DHCX_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b086      	sub	sp, #24
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	331c      	adds	r3, #28
 80047b0:	f107 0210 	add.w	r2, r7, #16
 80047b4:	4611      	mov	r1, r2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 ff8a 	bl	80056d0 <ism330dhcx_angular_rate_raw_get>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 80047c2:	f04f 33ff 	mov.w	r3, #4294967295
 80047c6:	e03c      	b.n	8004842 <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 80047c8:	f107 030c 	add.w	r3, r7, #12
 80047cc:	4619      	mov	r1, r3
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff fe48 	bl	8004464 <ISM330DHCX_GYRO_GetSensitivity>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 80047da:	f04f 33ff 	mov.w	r3, #4294967295
 80047de:	e030      	b.n	8004842 <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80047e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80047e4:	ee07 3a90 	vmov	s15, r3
 80047e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80047f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047f8:	ee17 2a90 	vmov	r2, s15
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004800:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004804:	ee07 3a90 	vmov	s15, r3
 8004808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800480c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004818:	ee17 2a90 	vmov	r2, s15
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004820:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004824:	ee07 3a90 	vmov	s15, r3
 8004828:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800482c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004838:	ee17 2a90 	vmov	r2, s15
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <ISM330DHCX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	70fb      	strb	r3, [r7, #3]
 8004856:	4613      	mov	r3, r2
 8004858:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f103 001c 	add.w	r0, r3, #28
 8004860:	1cba      	adds	r2, r7, #2
 8004862:	78f9      	ldrb	r1, [r7, #3]
 8004864:	2301      	movs	r3, #1
 8004866:	f000 fa75 	bl	8004d54 <ism330dhcx_write_reg>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004870:	f04f 33ff 	mov.w	r3, #4294967295
 8004874:	e000      	b.n	8004878 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 800488c:	edd7 7a00 	vldr	s15, [r7]
 8004890:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489c:	d801      	bhi.n	80048a2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 800489e:	2301      	movs	r3, #1
 80048a0:	e058      	b.n	8004954 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80048a2:	edd7 7a00 	vldr	s15, [r7]
 80048a6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80048aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b2:	d801      	bhi.n	80048b8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e04d      	b.n	8004954 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80048b8:	edd7 7a00 	vldr	s15, [r7]
 80048bc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800497c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80048c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c8:	d801      	bhi.n	80048ce <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80048ca:	2303      	movs	r3, #3
 80048cc:	e042      	b.n	8004954 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80048ce:	edd7 7a00 	vldr	s15, [r7]
 80048d2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004980 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 80048d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048de:	d801      	bhi.n	80048e4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 80048e0:	2304      	movs	r3, #4
 80048e2:	e037      	b.n	8004954 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80048e4:	edd7 7a00 	vldr	s15, [r7]
 80048e8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004984 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 80048ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f4:	d801      	bhi.n	80048fa <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80048f6:	2305      	movs	r3, #5
 80048f8:	e02c      	b.n	8004954 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80048fa:	edd7 7a00 	vldr	s15, [r7]
 80048fe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004988 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490a:	d801      	bhi.n	8004910 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 800490c:	2306      	movs	r3, #6
 800490e:	e021      	b.n	8004954 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004910:	edd7 7a00 	vldr	s15, [r7]
 8004914:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800498c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004918:	eef4 7ac7 	vcmpe.f32	s15, s14
 800491c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004920:	d801      	bhi.n	8004926 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004922:	2307      	movs	r3, #7
 8004924:	e016      	b.n	8004954 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004926:	edd7 7a00 	vldr	s15, [r7]
 800492a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004990 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 800492e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004936:	d801      	bhi.n	800493c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004938:	2308      	movs	r3, #8
 800493a:	e00b      	b.n	8004954 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800493c:	edd7 7a00 	vldr	s15, [r7]
 8004940:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004994 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494c:	d801      	bhi.n	8004952 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800494e:	2309      	movs	r3, #9
 8004950:	e000      	b.n	8004954 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004952:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8004954:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
            :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	331c      	adds	r3, #28
 800495a:	7bfa      	ldrb	r2, [r7, #15]
 800495c:	4611      	mov	r1, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fa6e 	bl	8004e40 <ism330dhcx_xl_data_rate_set>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 800496a:	f04f 33ff 	mov.w	r3, #4294967295
 800496e:	e000      	b.n	8004972 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	42500000 	.word	0x42500000
 8004980:	42d00000 	.word	0x42d00000
 8004984:	43500000 	.word	0x43500000
 8004988:	43d00000 	.word	0x43d00000
 800498c:	44504000 	.word	0x44504000
 8004990:	44d04000 	.word	0x44d04000
 8004994:	45504000 	.word	0x45504000

08004998 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80049a4:	edd7 7a00 	vldr	s15, [r7]
 80049a8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80049ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b4:	d801      	bhi.n	80049ba <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e058      	b.n	8004a6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80049ba:	edd7 7a00 	vldr	s15, [r7]
 80049be:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80049c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ca:	d801      	bhi.n	80049d0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e04d      	b.n	8004a6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80049d0:	edd7 7a00 	vldr	s15, [r7]
 80049d4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004a80 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80049d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e0:	d801      	bhi.n	80049e6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80049e2:	2303      	movs	r3, #3
 80049e4:	e042      	b.n	8004a6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80049e6:	edd7 7a00 	vldr	s15, [r7]
 80049ea:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004a84 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 80049ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f6:	d801      	bhi.n	80049fc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 80049f8:	2304      	movs	r3, #4
 80049fa:	e037      	b.n	8004a6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80049fc:	edd7 7a00 	vldr	s15, [r7]
 8004a00:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004a88 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0c:	d801      	bhi.n	8004a12 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004a0e:	2305      	movs	r3, #5
 8004a10:	e02c      	b.n	8004a6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a12:	edd7 7a00 	vldr	s15, [r7]
 8004a16:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004a8c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8004a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a22:	d801      	bhi.n	8004a28 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004a24:	2306      	movs	r3, #6
 8004a26:	e021      	b.n	8004a6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a28:	edd7 7a00 	vldr	s15, [r7]
 8004a2c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004a90 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a38:	d801      	bhi.n	8004a3e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004a3a:	2307      	movs	r3, #7
 8004a3c:	e016      	b.n	8004a6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a3e:	edd7 7a00 	vldr	s15, [r7]
 8004a42:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004a94 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8004a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4e:	d801      	bhi.n	8004a54 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004a50:	2308      	movs	r3, #8
 8004a52:	e00b      	b.n	8004a6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a54:	edd7 7a00 	vldr	s15, [r7]
 8004a58:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004a98 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a64:	d801      	bhi.n	8004a6a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004a66:	2309      	movs	r3, #9
 8004a68:	e000      	b.n	8004a6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a6a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                  : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                  : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
                  : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
                  :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	42500000 	.word	0x42500000
 8004a84:	42d00000 	.word	0x42d00000
 8004a88:	43500000 	.word	0x43500000
 8004a8c:	43d00000 	.word	0x43d00000
 8004a90:	44504000 	.word	0x44504000
 8004a94:	44d04000 	.word	0x44d04000
 8004a98:	45504000 	.word	0x45504000

08004a9c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8004aa8:	edd7 7a00 	vldr	s15, [r7]
 8004aac:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004ab0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab8:	d801      	bhi.n	8004abe <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e058      	b.n	8004b70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004abe:	edd7 7a00 	vldr	s15, [r7]
 8004ac2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ace:	d801      	bhi.n	8004ad4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e04d      	b.n	8004b70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004ad4:	edd7 7a00 	vldr	s15, [r7]
 8004ad8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004b98 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae4:	d801      	bhi.n	8004aea <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e042      	b.n	8004b70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004aea:	edd7 7a00 	vldr	s15, [r7]
 8004aee:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004b9c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afa:	d801      	bhi.n	8004b00 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004afc:	2304      	movs	r3, #4
 8004afe:	e037      	b.n	8004b70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b00:	edd7 7a00 	vldr	s15, [r7]
 8004b04:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004ba0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b10:	d801      	bhi.n	8004b16 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004b12:	2305      	movs	r3, #5
 8004b14:	e02c      	b.n	8004b70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b16:	edd7 7a00 	vldr	s15, [r7]
 8004b1a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004ba4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b26:	d801      	bhi.n	8004b2c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004b28:	2306      	movs	r3, #6
 8004b2a:	e021      	b.n	8004b70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b2c:	edd7 7a00 	vldr	s15, [r7]
 8004b30:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004ba8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3c:	d801      	bhi.n	8004b42 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004b3e:	2307      	movs	r3, #7
 8004b40:	e016      	b.n	8004b70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b42:	edd7 7a00 	vldr	s15, [r7]
 8004b46:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004bac <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b52:	d801      	bhi.n	8004b58 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004b54:	2308      	movs	r3, #8
 8004b56:	e00b      	b.n	8004b70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b58:	edd7 7a00 	vldr	s15, [r7]
 8004b5c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004bb0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b68:	d801      	bhi.n	8004b6e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004b6a:	2309      	movs	r3, #9
 8004b6c:	e000      	b.n	8004b70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b6e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8004b70:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
            :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	331c      	adds	r3, #28
 8004b76:	7bfa      	ldrb	r2, [r7, #15]
 8004b78:	4611      	mov	r1, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fbb0 	bl	80052e0 <ism330dhcx_gy_data_rate_set>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8004b86:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8a:	e000      	b.n	8004b8e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	42500000 	.word	0x42500000
 8004b9c:	42d00000 	.word	0x42d00000
 8004ba0:	43500000 	.word	0x43500000
 8004ba4:	43d00000 	.word	0x43d00000
 8004ba8:	44504000 	.word	0x44504000
 8004bac:	44d04000 	.word	0x44d04000
 8004bb0:	45504000 	.word	0x45504000

08004bb4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8004bc0:	edd7 7a00 	vldr	s15, [r7]
 8004bc4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004bc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd0:	d801      	bhi.n	8004bd6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e058      	b.n	8004c88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004bd6:	edd7 7a00 	vldr	s15, [r7]
 8004bda:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be6:	d801      	bhi.n	8004bec <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e04d      	b.n	8004c88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004bec:	edd7 7a00 	vldr	s15, [r7]
 8004bf0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004c9c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfc:	d801      	bhi.n	8004c02 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e042      	b.n	8004c88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c02:	edd7 7a00 	vldr	s15, [r7]
 8004c06:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004ca0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c12:	d801      	bhi.n	8004c18 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004c14:	2304      	movs	r3, #4
 8004c16:	e037      	b.n	8004c88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c18:	edd7 7a00 	vldr	s15, [r7]
 8004c1c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004ca4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c28:	d801      	bhi.n	8004c2e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004c2a:	2305      	movs	r3, #5
 8004c2c:	e02c      	b.n	8004c88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c2e:	edd7 7a00 	vldr	s15, [r7]
 8004c32:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004ca8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004c36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3e:	d801      	bhi.n	8004c44 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004c40:	2306      	movs	r3, #6
 8004c42:	e021      	b.n	8004c88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c44:	edd7 7a00 	vldr	s15, [r7]
 8004c48:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004cac <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004c4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c54:	d801      	bhi.n	8004c5a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004c56:	2307      	movs	r3, #7
 8004c58:	e016      	b.n	8004c88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c5a:	edd7 7a00 	vldr	s15, [r7]
 8004c5e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004cb0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6a:	d801      	bhi.n	8004c70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004c6c:	2308      	movs	r3, #8
 8004c6e:	e00b      	b.n	8004c88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c70:	edd7 7a00 	vldr	s15, [r7]
 8004c74:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004cb4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c80:	d801      	bhi.n	8004c86 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004c82:	2309      	movs	r3, #9
 8004c84:	e000      	b.n	8004c88 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c86:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                   : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                   : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
                   : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
                   :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	42500000 	.word	0x42500000
 8004ca0:	42d00000 	.word	0x42d00000
 8004ca4:	43500000 	.word	0x43500000
 8004ca8:	43d00000 	.word	0x43d00000
 8004cac:	44504000 	.word	0x44504000
 8004cb0:	44d04000 	.word	0x44d04000
 8004cb4:	45504000 	.word	0x45504000

08004cb8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004cb8:	b590      	push	{r4, r7, lr}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	607a      	str	r2, [r7, #4]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	72fb      	strb	r3, [r7, #11]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	695c      	ldr	r4, [r3, #20]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	7b1b      	ldrb	r3, [r3, #12]
 8004cd8:	b298      	uxth	r0, r3
 8004cda:	7afb      	ldrb	r3, [r7, #11]
 8004cdc:	b299      	uxth	r1, r3
 8004cde:	893b      	ldrh	r3, [r7, #8]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	47a0      	blx	r4
 8004ce4:	4603      	mov	r3, r0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd90      	pop	{r4, r7, pc}

08004cee <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004cee:	b590      	push	{r4, r7, lr}
 8004cf0:	b087      	sub	sp, #28
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	72fb      	strb	r3, [r7, #11]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	691c      	ldr	r4, [r3, #16]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	7b1b      	ldrb	r3, [r3, #12]
 8004d0e:	b298      	uxth	r0, r3
 8004d10:	7afb      	ldrb	r3, [r7, #11]
 8004d12:	b299      	uxth	r1, r3
 8004d14:	893b      	ldrh	r3, [r7, #8]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	47a0      	blx	r4
 8004d1a:	4603      	mov	r3, r0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	371c      	adds	r7, #28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd90      	pop	{r4, r7, pc}

08004d24 <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8004d24:	b590      	push	{r4, r7, lr}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	460b      	mov	r3, r1
 8004d32:	72fb      	strb	r3, [r7, #11]
 8004d34:	4613      	mov	r3, r2
 8004d36:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	685c      	ldr	r4, [r3, #4]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6898      	ldr	r0, [r3, #8]
 8004d40:	893b      	ldrh	r3, [r7, #8]
 8004d42:	7af9      	ldrb	r1, [r7, #11]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	47a0      	blx	r4
 8004d48:	6178      	str	r0, [r7, #20]

  return ret;
 8004d4a:	697b      	ldr	r3, [r7, #20]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd90      	pop	{r4, r7, pc}

08004d54 <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 8004d54:	b590      	push	{r4, r7, lr}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	460b      	mov	r3, r1
 8004d62:	72fb      	strb	r3, [r7, #11]
 8004d64:	4613      	mov	r3, r2
 8004d66:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681c      	ldr	r4, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6898      	ldr	r0, [r3, #8]
 8004d70:	893b      	ldrh	r3, [r7, #8]
 8004d72:	7af9      	ldrb	r1, [r7, #11]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	47a0      	blx	r4
 8004d78:	6178      	str	r0, [r7, #20]

  return ret;
 8004d7a:	697b      	ldr	r3, [r7, #20]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	371c      	adds	r7, #28
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd90      	pop	{r4, r7, pc}

08004d84 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004d90:	f107 0208 	add.w	r2, r7, #8
 8004d94:	2301      	movs	r3, #1
 8004d96:	2110      	movs	r1, #16
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff ffc3 	bl	8004d24 <ism330dhcx_read_reg>
 8004d9e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10f      	bne.n	8004dc6 <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	7a3b      	ldrb	r3, [r7, #8]
 8004db0:	f362 0383 	bfi	r3, r2, #2, #2
 8004db4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004db6:	f107 0208 	add.w	r2, r7, #8
 8004dba:	2301      	movs	r3, #1
 8004dbc:	2110      	movs	r1, #16
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff ffc8 	bl	8004d54 <ism330dhcx_write_reg>
 8004dc4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004dda:	f107 0208 	add.w	r2, r7, #8
 8004dde:	2301      	movs	r3, #1
 8004de0:	2110      	movs	r1, #16
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff ff9e 	bl	8004d24 <ism330dhcx_read_reg>
 8004de8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 8004dea:	7a3b      	ldrb	r3, [r7, #8]
 8004dec:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	d81a      	bhi.n	8004e2c <ism330dhcx_xl_full_scale_get+0x5c>
 8004df6:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <ism330dhcx_xl_full_scale_get+0x2c>)
 8004df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfc:	08004e0d 	.word	0x08004e0d
 8004e00:	08004e15 	.word	0x08004e15
 8004e04:	08004e1d 	.word	0x08004e1d
 8004e08:	08004e25 	.word	0x08004e25
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
      break;
 8004e12:	e00f      	b.n	8004e34 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2201      	movs	r2, #1
 8004e18:	701a      	strb	r2, [r3, #0]
      break;
 8004e1a:	e00b      	b.n	8004e34 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	701a      	strb	r2, [r3, #0]
      break;
 8004e22:	e007      	b.n	8004e34 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2203      	movs	r2, #3
 8004e28:	701a      	strb	r2, [r3, #0]
      break;
 8004e2a:	e003      	b.n	8004e34 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	701a      	strb	r2, [r3, #0]
      break;
 8004e32:	bf00      	nop
  }

  return ret;
 8004e34:	68fb      	ldr	r3, [r7, #12]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop

08004e40 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8004e50:	f107 030c 	add.w	r3, r7, #12
 8004e54:	4619      	mov	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fd9f 	bl	800599a <ism330dhcx_fsm_enable_get>
 8004e5c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f040 80c4 	bne.w	8004fee <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004e66:	7b3b      	ldrb	r3, [r7, #12]
 8004e68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004e6e:	7b3b      	ldrb	r3, [r7, #12]
 8004e70:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004e74:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004e76:	4313      	orrs	r3, r2
 8004e78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004e7a:	7b3b      	ldrb	r3, [r7, #12]
 8004e7c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004e80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004e82:	4313      	orrs	r3, r2
 8004e84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004e86:	7b3b      	ldrb	r3, [r7, #12]
 8004e88:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004e8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004e92:	7b3b      	ldrb	r3, [r7, #12]
 8004e94:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004e98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004e9e:	7b3b      	ldrb	r3, [r7, #12]
 8004ea0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004ea4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004eaa:	7b3b      	ldrb	r3, [r7, #12]
 8004eac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004eb0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004eb6:	7b3b      	ldrb	r3, [r7, #12]
 8004eb8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ebc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004ec2:	7b7b      	ldrb	r3, [r7, #13]
 8004ec4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ec8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004ece:	7b7b      	ldrb	r3, [r7, #13]
 8004ed0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004ed4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004eda:	7b7b      	ldrb	r3, [r7, #13]
 8004edc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004ee0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004ee6:	7b7b      	ldrb	r3, [r7, #13]
 8004ee8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004eec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004ef2:	7b7b      	ldrb	r3, [r7, #13]
 8004ef4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004ef8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004efa:	4313      	orrs	r3, r2
 8004efc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004efe:	7b7b      	ldrb	r3, [r7, #13]
 8004f00:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004f04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004f06:	4313      	orrs	r3, r2
 8004f08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004f0a:	7b7b      	ldrb	r3, [r7, #13]
 8004f0c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004f10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004f12:	4313      	orrs	r3, r2
 8004f14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004f16:	7b7b      	ldrb	r3, [r7, #13]
 8004f18:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004f1c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d163      	bne.n	8004fee <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8004f26:	f107 030b 	add.w	r3, r7, #11
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fd61 	bl	80059f4 <ism330dhcx_fsm_data_rate_get>
 8004f32:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d159      	bne.n	8004fee <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004f3a:	7afb      	ldrb	r3, [r7, #11]
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d853      	bhi.n	8004fe8 <ism330dhcx_xl_data_rate_set+0x1a8>
 8004f40:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <ism330dhcx_xl_data_rate_set+0x108>)
 8004f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f46:	bf00      	nop
 8004f48:	08004f59 	.word	0x08004f59
 8004f4c:	08004f6b 	.word	0x08004f6b
 8004f50:	08004f89 	.word	0x08004f89
 8004f54:	08004fb3 	.word	0x08004fb3
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d102      	bne.n	8004f64 <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004f62:	e045      	b.n	8004ff0 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004f64:	78fb      	ldrb	r3, [r7, #3]
 8004f66:	75fb      	strb	r3, [r7, #23]
            break;
 8004f68:	e042      	b.n	8004ff0 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d102      	bne.n	8004f76 <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8004f70:	2302      	movs	r3, #2
 8004f72:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004f74:	e03c      	b.n	8004ff0 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d102      	bne.n	8004f82 <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	75fb      	strb	r3, [r7, #23]
            break;
 8004f80:	e036      	b.n	8004ff0 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004f82:	78fb      	ldrb	r3, [r7, #3]
 8004f84:	75fb      	strb	r3, [r7, #23]
            break;
 8004f86:	e033      	b.n	8004ff0 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d102      	bne.n	8004f94 <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004f92:	e02d      	b.n	8004ff0 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d102      	bne.n	8004fa0 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	75fb      	strb	r3, [r7, #23]
            break;
 8004f9e:	e027      	b.n	8004ff0 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d102      	bne.n	8004fac <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	75fb      	strb	r3, [r7, #23]
            break;
 8004faa:	e021      	b.n	8004ff0 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004fac:	78fb      	ldrb	r3, [r7, #3]
 8004fae:	75fb      	strb	r3, [r7, #23]
            break;
 8004fb0:	e01e      	b.n	8004ff0 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004fb2:	78fb      	ldrb	r3, [r7, #3]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d102      	bne.n	8004fbe <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004fb8:	2304      	movs	r3, #4
 8004fba:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004fbc:	e018      	b.n	8004ff0 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004fbe:	78fb      	ldrb	r3, [r7, #3]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d102      	bne.n	8004fca <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	75fb      	strb	r3, [r7, #23]
            break;
 8004fc8:	e012      	b.n	8004ff0 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d102      	bne.n	8004fd6 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	75fb      	strb	r3, [r7, #23]
            break;
 8004fd4:	e00c      	b.n	8004ff0 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8004fd6:	78fb      	ldrb	r3, [r7, #3]
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d102      	bne.n	8004fe2 <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004fdc:	2304      	movs	r3, #4
 8004fde:	75fb      	strb	r3, [r7, #23]
            break;
 8004fe0:	e006      	b.n	8004ff0 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	75fb      	strb	r3, [r7, #23]
            break;
 8004fe6:	e003      	b.n	8004ff0 <ism330dhcx_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	75fb      	strb	r3, [r7, #23]
            break;
 8004fec:	e000      	b.n	8004ff0 <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 8004fee:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d16d      	bne.n	80050d6 <ism330dhcx_xl_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8004ffa:	f107 030a 	add.w	r3, r7, #10
 8004ffe:	4619      	mov	r1, r3
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fd3f 	bl	8005a84 <ism330dhcx_mlc_get>
 8005006:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8005008:	7abb      	ldrb	r3, [r7, #10]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d163      	bne.n	80050d6 <ism330dhcx_xl_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 800500e:	f107 0309 	add.w	r3, r7, #9
 8005012:	4619      	mov	r1, r3
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fd5f 	bl	8005ad8 <ism330dhcx_mlc_data_rate_get>
 800501a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d159      	bne.n	80050d6 <ism330dhcx_xl_data_rate_set+0x296>
      {
        switch (mlc_odr)
 8005022:	7a7b      	ldrb	r3, [r7, #9]
 8005024:	2b03      	cmp	r3, #3
 8005026:	d853      	bhi.n	80050d0 <ism330dhcx_xl_data_rate_set+0x290>
 8005028:	a201      	add	r2, pc, #4	; (adr r2, 8005030 <ism330dhcx_xl_data_rate_set+0x1f0>)
 800502a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502e:	bf00      	nop
 8005030:	08005041 	.word	0x08005041
 8005034:	08005053 	.word	0x08005053
 8005038:	08005071 	.word	0x08005071
 800503c:	0800509b 	.word	0x0800509b
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005040:	78fb      	ldrb	r3, [r7, #3]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <ism330dhcx_xl_data_rate_set+0x20c>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8005046:	2301      	movs	r3, #1
 8005048:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800504a:	e045      	b.n	80050d8 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	75fb      	strb	r3, [r7, #23]
            break;
 8005050:	e042      	b.n	80050d8 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005052:	78fb      	ldrb	r3, [r7, #3]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d102      	bne.n	800505e <ism330dhcx_xl_data_rate_set+0x21e>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8005058:	2302      	movs	r3, #2
 800505a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800505c:	e03c      	b.n	80050d8 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800505e:	78fb      	ldrb	r3, [r7, #3]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d102      	bne.n	800506a <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8005064:	2302      	movs	r3, #2
 8005066:	75fb      	strb	r3, [r7, #23]
            break;
 8005068:	e036      	b.n	80050d8 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 800506a:	78fb      	ldrb	r3, [r7, #3]
 800506c:	75fb      	strb	r3, [r7, #23]
            break;
 800506e:	e033      	b.n	80050d8 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d102      	bne.n	800507c <ism330dhcx_xl_data_rate_set+0x23c>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005076:	2303      	movs	r3, #3
 8005078:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800507a:	e02d      	b.n	80050d8 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800507c:	78fb      	ldrb	r3, [r7, #3]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d102      	bne.n	8005088 <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005082:	2303      	movs	r3, #3
 8005084:	75fb      	strb	r3, [r7, #23]
            break;
 8005086:	e027      	b.n	80050d8 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d102      	bne.n	8005094 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800508e:	2303      	movs	r3, #3
 8005090:	75fb      	strb	r3, [r7, #23]
            break;
 8005092:	e021      	b.n	80050d8 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	75fb      	strb	r3, [r7, #23]
            break;
 8005098:	e01e      	b.n	80050d8 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800509a:	78fb      	ldrb	r3, [r7, #3]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d102      	bne.n	80050a6 <ism330dhcx_xl_data_rate_set+0x266>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80050a0:	2304      	movs	r3, #4
 80050a2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80050a4:	e018      	b.n	80050d8 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80050a6:	78fb      	ldrb	r3, [r7, #3]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d102      	bne.n	80050b2 <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80050ac:	2304      	movs	r3, #4
 80050ae:	75fb      	strb	r3, [r7, #23]
            break;
 80050b0:	e012      	b.n	80050d8 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d102      	bne.n	80050be <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80050b8:	2304      	movs	r3, #4
 80050ba:	75fb      	strb	r3, [r7, #23]
            break;
 80050bc:	e00c      	b.n	80050d8 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 80050be:	78fb      	ldrb	r3, [r7, #3]
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d102      	bne.n	80050ca <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80050c4:	2304      	movs	r3, #4
 80050c6:	75fb      	strb	r3, [r7, #23]
            break;
 80050c8:	e006      	b.n	80050d8 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80050ca:	78fb      	ldrb	r3, [r7, #3]
 80050cc:	75fb      	strb	r3, [r7, #23]
            break;
 80050ce:	e003      	b.n	80050d8 <ism330dhcx_xl_data_rate_set+0x298>

          default:
            odr_xl = val;
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	75fb      	strb	r3, [r7, #23]
            break;
 80050d4:	e000      	b.n	80050d8 <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 80050d6:	bf00      	nop
    }
  }

  if (ret == 0)
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d107      	bne.n	80050ee <ism330dhcx_xl_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80050de:	f107 0208 	add.w	r2, r7, #8
 80050e2:	2301      	movs	r3, #1
 80050e4:	2110      	movs	r1, #16
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff fe1c 	bl	8004d24 <ism330dhcx_read_reg>
 80050ec:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10f      	bne.n	8005114 <ism330dhcx_xl_data_rate_set+0x2d4>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	7a3b      	ldrb	r3, [r7, #8]
 80050fe:	f362 1307 	bfi	r3, r2, #4, #4
 8005102:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005104:	f107 0208 	add.w	r2, r7, #8
 8005108:	2301      	movs	r3, #1
 800510a:	2110      	movs	r1, #16
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff fe21 	bl	8004d54 <ism330dhcx_write_reg>
 8005112:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005114:	693b      	ldr	r3, [r7, #16]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop

08005120 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800512a:	f107 0208 	add.w	r2, r7, #8
 800512e:	2301      	movs	r3, #1
 8005130:	2110      	movs	r1, #16
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff fdf6 	bl	8004d24 <ism330dhcx_read_reg>
 8005138:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl)
 800513a:	7a3b      	ldrb	r3, [r7, #8]
 800513c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b0b      	cmp	r3, #11
 8005144:	d84a      	bhi.n	80051dc <ism330dhcx_xl_data_rate_get+0xbc>
 8005146:	a201      	add	r2, pc, #4	; (adr r2, 800514c <ism330dhcx_xl_data_rate_get+0x2c>)
 8005148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514c:	0800517d 	.word	0x0800517d
 8005150:	08005185 	.word	0x08005185
 8005154:	0800518d 	.word	0x0800518d
 8005158:	08005195 	.word	0x08005195
 800515c:	0800519d 	.word	0x0800519d
 8005160:	080051a5 	.word	0x080051a5
 8005164:	080051ad 	.word	0x080051ad
 8005168:	080051b5 	.word	0x080051b5
 800516c:	080051bd 	.word	0x080051bd
 8005170:	080051c5 	.word	0x080051c5
 8005174:	080051cd 	.word	0x080051cd
 8005178:	080051d5 	.word	0x080051d5
  {
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2200      	movs	r2, #0
 8005180:	701a      	strb	r2, [r3, #0]
      break;
 8005182:	e02f      	b.n	80051e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2201      	movs	r2, #1
 8005188:	701a      	strb	r2, [r3, #0]
      break;
 800518a:	e02b      	b.n	80051e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2202      	movs	r2, #2
 8005190:	701a      	strb	r2, [r3, #0]
      break;
 8005192:	e027      	b.n	80051e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2203      	movs	r2, #3
 8005198:	701a      	strb	r2, [r3, #0]
      break;
 800519a:	e023      	b.n	80051e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2204      	movs	r2, #4
 80051a0:	701a      	strb	r2, [r3, #0]
      break;
 80051a2:	e01f      	b.n	80051e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2205      	movs	r2, #5
 80051a8:	701a      	strb	r2, [r3, #0]
      break;
 80051aa:	e01b      	b.n	80051e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_416Hz:
      *val = ISM330DHCX_XL_ODR_416Hz;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2206      	movs	r2, #6
 80051b0:	701a      	strb	r2, [r3, #0]
      break;
 80051b2:	e017      	b.n	80051e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2207      	movs	r2, #7
 80051b8:	701a      	strb	r2, [r3, #0]
      break;
 80051ba:	e013      	b.n	80051e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1666Hz:
      *val = ISM330DHCX_XL_ODR_1666Hz;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2208      	movs	r2, #8
 80051c0:	701a      	strb	r2, [r3, #0]
      break;
 80051c2:	e00f      	b.n	80051e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3332Hz:
      *val = ISM330DHCX_XL_ODR_3332Hz;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2209      	movs	r2, #9
 80051c8:	701a      	strb	r2, [r3, #0]
      break;
 80051ca:	e00b      	b.n	80051e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	220a      	movs	r2, #10
 80051d0:	701a      	strb	r2, [r3, #0]
      break;
 80051d2:	e007      	b.n	80051e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1Hz6:
      *val = ISM330DHCX_XL_ODR_1Hz6;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	220b      	movs	r2, #11
 80051d8:	701a      	strb	r2, [r3, #0]
      break;
 80051da:	e003      	b.n	80051e4 <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2200      	movs	r2, #0
 80051e0:	701a      	strb	r2, [r3, #0]
      break;
 80051e2:	bf00      	nop
  }

  return ret;
 80051e4:	68fb      	ldr	r3, [r7, #12]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop

080051f0 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80051fc:	f107 0208 	add.w	r2, r7, #8
 8005200:	2301      	movs	r3, #1
 8005202:	2111      	movs	r1, #17
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7ff fd8d 	bl	8004d24 <ism330dhcx_read_reg>
 800520a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10f      	bne.n	8005232 <ism330dhcx_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	f003 030f 	and.w	r3, r3, #15
 8005218:	b2da      	uxtb	r2, r3
 800521a:	7a3b      	ldrb	r3, [r7, #8]
 800521c:	f362 0303 	bfi	r3, r2, #0, #4
 8005220:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8005222:	f107 0208 	add.w	r2, r7, #8
 8005226:	2301      	movs	r3, #1
 8005228:	2111      	movs	r1, #17
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7ff fd92 	bl	8004d54 <ism330dhcx_write_reg>
 8005230:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8005232:	68fb      	ldr	r3, [r7, #12]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005246:	f107 0208 	add.w	r2, r7, #8
 800524a:	2301      	movs	r3, #1
 800524c:	2111      	movs	r1, #17
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff fd68 	bl	8004d24 <ism330dhcx_read_reg>
 8005254:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g)
 8005256:	7a3b      	ldrb	r3, [r7, #8]
 8005258:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b0c      	cmp	r3, #12
 8005260:	d834      	bhi.n	80052cc <ism330dhcx_gy_full_scale_get+0x90>
 8005262:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <ism330dhcx_gy_full_scale_get+0x2c>)
 8005264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005268:	080052a5 	.word	0x080052a5
 800526c:	080052c5 	.word	0x080052c5
 8005270:	0800529d 	.word	0x0800529d
 8005274:	080052cd 	.word	0x080052cd
 8005278:	080052ad 	.word	0x080052ad
 800527c:	080052cd 	.word	0x080052cd
 8005280:	080052cd 	.word	0x080052cd
 8005284:	080052cd 	.word	0x080052cd
 8005288:	080052b5 	.word	0x080052b5
 800528c:	080052cd 	.word	0x080052cd
 8005290:	080052cd 	.word	0x080052cd
 8005294:	080052cd 	.word	0x080052cd
 8005298:	080052bd 	.word	0x080052bd
  {
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	2202      	movs	r2, #2
 80052a0:	701a      	strb	r2, [r3, #0]
      break;
 80052a2:	e017      	b.n	80052d4 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2200      	movs	r2, #0
 80052a8:	701a      	strb	r2, [r3, #0]
      break;
 80052aa:	e013      	b.n	80052d4 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2204      	movs	r2, #4
 80052b0:	701a      	strb	r2, [r3, #0]
      break;
 80052b2:	e00f      	b.n	80052d4 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2208      	movs	r2, #8
 80052b8:	701a      	strb	r2, [r3, #0]
      break;
 80052ba:	e00b      	b.n	80052d4 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	220c      	movs	r2, #12
 80052c0:	701a      	strb	r2, [r3, #0]
      break;
 80052c2:	e007      	b.n	80052d4 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2201      	movs	r2, #1
 80052c8:	701a      	strb	r2, [r3, #0]
      break;
 80052ca:	e003      	b.n	80052d4 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2202      	movs	r2, #2
 80052d0:	701a      	strb	r2, [r3, #0]
      break;
 80052d2:	bf00      	nop
  }

  return ret;
 80052d4:	68fb      	ldr	r3, [r7, #12]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop

080052e0 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 80052ec:	78fb      	ldrb	r3, [r7, #3]
 80052ee:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 80052f0:	f107 030c 	add.w	r3, r7, #12
 80052f4:	4619      	mov	r1, r3
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fb4f 	bl	800599a <ism330dhcx_fsm_enable_get>
 80052fc:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	f040 80c4 	bne.w	800548e <ism330dhcx_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005306:	7b3b      	ldrb	r3, [r7, #12]
 8005308:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800530c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800530e:	7b3b      	ldrb	r3, [r7, #12]
 8005310:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005314:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005316:	4313      	orrs	r3, r2
 8005318:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800531a:	7b3b      	ldrb	r3, [r7, #12]
 800531c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005320:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005322:	4313      	orrs	r3, r2
 8005324:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005326:	7b3b      	ldrb	r3, [r7, #12]
 8005328:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800532c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800532e:	4313      	orrs	r3, r2
 8005330:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005332:	7b3b      	ldrb	r3, [r7, #12]
 8005334:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005338:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800533a:	4313      	orrs	r3, r2
 800533c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800533e:	7b3b      	ldrb	r3, [r7, #12]
 8005340:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005344:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005346:	4313      	orrs	r3, r2
 8005348:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800534a:	7b3b      	ldrb	r3, [r7, #12]
 800534c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005350:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005352:	4313      	orrs	r3, r2
 8005354:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005356:	7b3b      	ldrb	r3, [r7, #12]
 8005358:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800535c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800535e:	4313      	orrs	r3, r2
 8005360:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005362:	7b7b      	ldrb	r3, [r7, #13]
 8005364:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005368:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800536a:	4313      	orrs	r3, r2
 800536c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800536e:	7b7b      	ldrb	r3, [r7, #13]
 8005370:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005374:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005376:	4313      	orrs	r3, r2
 8005378:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800537a:	7b7b      	ldrb	r3, [r7, #13]
 800537c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005380:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005382:	4313      	orrs	r3, r2
 8005384:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005386:	7b7b      	ldrb	r3, [r7, #13]
 8005388:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800538c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800538e:	4313      	orrs	r3, r2
 8005390:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005392:	7b7b      	ldrb	r3, [r7, #13]
 8005394:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005398:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800539a:	4313      	orrs	r3, r2
 800539c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800539e:	7b7b      	ldrb	r3, [r7, #13]
 80053a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80053a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80053a6:	4313      	orrs	r3, r2
 80053a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80053aa:	7b7b      	ldrb	r3, [r7, #13]
 80053ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80053b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80053b2:	4313      	orrs	r3, r2
 80053b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80053b6:	7b7b      	ldrb	r3, [r7, #13]
 80053b8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80053bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80053be:	4313      	orrs	r3, r2
 80053c0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d163      	bne.n	800548e <ism330dhcx_gy_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 80053c6:	f107 030b 	add.w	r3, r7, #11
 80053ca:	4619      	mov	r1, r3
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fb11 	bl	80059f4 <ism330dhcx_fsm_data_rate_get>
 80053d2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d159      	bne.n	800548e <ism330dhcx_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80053da:	7afb      	ldrb	r3, [r7, #11]
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d853      	bhi.n	8005488 <ism330dhcx_gy_data_rate_set+0x1a8>
 80053e0:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <ism330dhcx_gy_data_rate_set+0x108>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	080053f9 	.word	0x080053f9
 80053ec:	0800540b 	.word	0x0800540b
 80053f0:	08005429 	.word	0x08005429
 80053f4:	08005453 	.word	0x08005453
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d102      	bne.n	8005404 <ism330dhcx_gy_data_rate_set+0x124>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 80053fe:	2301      	movs	r3, #1
 8005400:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005402:	e045      	b.n	8005490 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005404:	78fb      	ldrb	r3, [r7, #3]
 8005406:	75fb      	strb	r3, [r7, #23]
            break;
 8005408:	e042      	b.n	8005490 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800540a:	78fb      	ldrb	r3, [r7, #3]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d102      	bne.n	8005416 <ism330dhcx_gy_data_rate_set+0x136>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005410:	2302      	movs	r3, #2
 8005412:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005414:	e03c      	b.n	8005490 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005416:	78fb      	ldrb	r3, [r7, #3]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d102      	bne.n	8005422 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 800541c:	2302      	movs	r3, #2
 800541e:	75fb      	strb	r3, [r7, #23]
            break;
 8005420:	e036      	b.n	8005490 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	75fb      	strb	r3, [r7, #23]
            break;
 8005426:	e033      	b.n	8005490 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d102      	bne.n	8005434 <ism330dhcx_gy_data_rate_set+0x154>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800542e:	2303      	movs	r3, #3
 8005430:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005432:	e02d      	b.n	8005490 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d102      	bne.n	8005440 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800543a:	2303      	movs	r3, #3
 800543c:	75fb      	strb	r3, [r7, #23]
            break;
 800543e:	e027      	b.n	8005490 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d102      	bne.n	800544c <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005446:	2303      	movs	r3, #3
 8005448:	75fb      	strb	r3, [r7, #23]
            break;
 800544a:	e021      	b.n	8005490 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	75fb      	strb	r3, [r7, #23]
            break;
 8005450:	e01e      	b.n	8005490 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d102      	bne.n	800545e <ism330dhcx_gy_data_rate_set+0x17e>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005458:	2304      	movs	r3, #4
 800545a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800545c:	e018      	b.n	8005490 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d102      	bne.n	800546a <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005464:	2304      	movs	r3, #4
 8005466:	75fb      	strb	r3, [r7, #23]
            break;
 8005468:	e012      	b.n	8005490 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 800546a:	78fb      	ldrb	r3, [r7, #3]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d102      	bne.n	8005476 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005470:	2304      	movs	r3, #4
 8005472:	75fb      	strb	r3, [r7, #23]
            break;
 8005474:	e00c      	b.n	8005490 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8005476:	78fb      	ldrb	r3, [r7, #3]
 8005478:	2b03      	cmp	r3, #3
 800547a:	d102      	bne.n	8005482 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800547c:	2304      	movs	r3, #4
 800547e:	75fb      	strb	r3, [r7, #23]
            break;
 8005480:	e006      	b.n	8005490 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005482:	78fb      	ldrb	r3, [r7, #3]
 8005484:	75fb      	strb	r3, [r7, #23]
            break;
 8005486:	e003      	b.n	8005490 <ism330dhcx_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	75fb      	strb	r3, [r7, #23]
            break;
 800548c:	e000      	b.n	8005490 <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 800548e:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8005490:	2300      	movs	r3, #0
 8005492:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d16d      	bne.n	8005576 <ism330dhcx_gy_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 800549a:	f107 030a 	add.w	r3, r7, #10
 800549e:	4619      	mov	r1, r3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 faef 	bl	8005a84 <ism330dhcx_mlc_get>
 80054a6:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 80054a8:	7abb      	ldrb	r3, [r7, #10]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d163      	bne.n	8005576 <ism330dhcx_gy_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80054ae:	f107 0309 	add.w	r3, r7, #9
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fb0f 	bl	8005ad8 <ism330dhcx_mlc_data_rate_get>
 80054ba:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d159      	bne.n	8005576 <ism330dhcx_gy_data_rate_set+0x296>
      {
        switch (mlc_odr)
 80054c2:	7a7b      	ldrb	r3, [r7, #9]
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	d853      	bhi.n	8005570 <ism330dhcx_gy_data_rate_set+0x290>
 80054c8:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <ism330dhcx_gy_data_rate_set+0x1f0>)
 80054ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ce:	bf00      	nop
 80054d0:	080054e1 	.word	0x080054e1
 80054d4:	080054f3 	.word	0x080054f3
 80054d8:	08005511 	.word	0x08005511
 80054dc:	0800553b 	.word	0x0800553b
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d102      	bne.n	80054ec <ism330dhcx_gy_data_rate_set+0x20c>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 80054e6:	2301      	movs	r3, #1
 80054e8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80054ea:	e045      	b.n	8005578 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	75fb      	strb	r3, [r7, #23]
            break;
 80054f0:	e042      	b.n	8005578 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80054f2:	78fb      	ldrb	r3, [r7, #3]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d102      	bne.n	80054fe <ism330dhcx_gy_data_rate_set+0x21e>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80054f8:	2302      	movs	r3, #2
 80054fa:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80054fc:	e03c      	b.n	8005578 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d102      	bne.n	800550a <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005504:	2302      	movs	r3, #2
 8005506:	75fb      	strb	r3, [r7, #23]
            break;
 8005508:	e036      	b.n	8005578 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 800550a:	78fb      	ldrb	r3, [r7, #3]
 800550c:	75fb      	strb	r3, [r7, #23]
            break;
 800550e:	e033      	b.n	8005578 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d102      	bne.n	800551c <ism330dhcx_gy_data_rate_set+0x23c>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005516:	2303      	movs	r3, #3
 8005518:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800551a:	e02d      	b.n	8005578 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d102      	bne.n	8005528 <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005522:	2303      	movs	r3, #3
 8005524:	75fb      	strb	r3, [r7, #23]
            break;
 8005526:	e027      	b.n	8005578 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	2b02      	cmp	r3, #2
 800552c:	d102      	bne.n	8005534 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800552e:	2303      	movs	r3, #3
 8005530:	75fb      	strb	r3, [r7, #23]
            break;
 8005532:	e021      	b.n	8005578 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	75fb      	strb	r3, [r7, #23]
            break;
 8005538:	e01e      	b.n	8005578 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d102      	bne.n	8005546 <ism330dhcx_gy_data_rate_set+0x266>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005540:	2304      	movs	r3, #4
 8005542:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005544:	e018      	b.n	8005578 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005546:	78fb      	ldrb	r3, [r7, #3]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d102      	bne.n	8005552 <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800554c:	2304      	movs	r3, #4
 800554e:	75fb      	strb	r3, [r7, #23]
            break;
 8005550:	e012      	b.n	8005578 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005552:	78fb      	ldrb	r3, [r7, #3]
 8005554:	2b02      	cmp	r3, #2
 8005556:	d102      	bne.n	800555e <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005558:	2304      	movs	r3, #4
 800555a:	75fb      	strb	r3, [r7, #23]
            break;
 800555c:	e00c      	b.n	8005578 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	2b03      	cmp	r3, #3
 8005562:	d102      	bne.n	800556a <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005564:	2304      	movs	r3, #4
 8005566:	75fb      	strb	r3, [r7, #23]
            break;
 8005568:	e006      	b.n	8005578 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	75fb      	strb	r3, [r7, #23]
            break;
 800556e:	e003      	b.n	8005578 <ism330dhcx_gy_data_rate_set+0x298>

          default:
            odr_gy = val;
 8005570:	78fb      	ldrb	r3, [r7, #3]
 8005572:	75fb      	strb	r3, [r7, #23]
            break;
 8005574:	e000      	b.n	8005578 <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8005576:	bf00      	nop
    }
  }

  if (ret == 0)
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d107      	bne.n	800558e <ism330dhcx_gy_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800557e:	f107 0208 	add.w	r2, r7, #8
 8005582:	2301      	movs	r3, #1
 8005584:	2111      	movs	r1, #17
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7ff fbcc 	bl	8004d24 <ism330dhcx_read_reg>
 800558c:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10f      	bne.n	80055b4 <ism330dhcx_gy_data_rate_set+0x2d4>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8005594:	7dfb      	ldrb	r3, [r7, #23]
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	b2da      	uxtb	r2, r3
 800559c:	7a3b      	ldrb	r3, [r7, #8]
 800559e:	f362 1307 	bfi	r3, r2, #4, #4
 80055a2:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 80055a4:	f107 0208 	add.w	r2, r7, #8
 80055a8:	2301      	movs	r3, #1
 80055aa:	2111      	movs	r1, #17
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff fbd1 	bl	8004d54 <ism330dhcx_write_reg>
 80055b2:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 80055b4:	693b      	ldr	r3, [r7, #16]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3718      	adds	r7, #24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop

080055c0 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80055ca:	f107 0208 	add.w	r2, r7, #8
 80055ce:	2301      	movs	r3, #1
 80055d0:	2111      	movs	r1, #17
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7ff fba6 	bl	8004d24 <ism330dhcx_read_reg>
 80055d8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g)
 80055da:	7a3b      	ldrb	r3, [r7, #8]
 80055dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b0a      	cmp	r3, #10
 80055e4:	d844      	bhi.n	8005670 <ism330dhcx_gy_data_rate_get+0xb0>
 80055e6:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <ism330dhcx_gy_data_rate_get+0x2c>)
 80055e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ec:	08005619 	.word	0x08005619
 80055f0:	08005621 	.word	0x08005621
 80055f4:	08005629 	.word	0x08005629
 80055f8:	08005631 	.word	0x08005631
 80055fc:	08005639 	.word	0x08005639
 8005600:	08005641 	.word	0x08005641
 8005604:	08005649 	.word	0x08005649
 8005608:	08005651 	.word	0x08005651
 800560c:	08005659 	.word	0x08005659
 8005610:	08005661 	.word	0x08005661
 8005614:	08005669 	.word	0x08005669
  {
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2200      	movs	r2, #0
 800561c:	701a      	strb	r2, [r3, #0]
      break;
 800561e:	e02b      	b.n	8005678 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2201      	movs	r2, #1
 8005624:	701a      	strb	r2, [r3, #0]
      break;
 8005626:	e027      	b.n	8005678 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2202      	movs	r2, #2
 800562c:	701a      	strb	r2, [r3, #0]
      break;
 800562e:	e023      	b.n	8005678 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	2203      	movs	r2, #3
 8005634:	701a      	strb	r2, [r3, #0]
      break;
 8005636:	e01f      	b.n	8005678 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2204      	movs	r2, #4
 800563c:	701a      	strb	r2, [r3, #0]
      break;
 800563e:	e01b      	b.n	8005678 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2205      	movs	r2, #5
 8005644:	701a      	strb	r2, [r3, #0]
      break;
 8005646:	e017      	b.n	8005678 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_416Hz:
      *val = ISM330DHCX_GY_ODR_416Hz;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2206      	movs	r2, #6
 800564c:	701a      	strb	r2, [r3, #0]
      break;
 800564e:	e013      	b.n	8005678 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2207      	movs	r2, #7
 8005654:	701a      	strb	r2, [r3, #0]
      break;
 8005656:	e00f      	b.n	8005678 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1666Hz:
      *val = ISM330DHCX_GY_ODR_1666Hz;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2208      	movs	r2, #8
 800565c:	701a      	strb	r2, [r3, #0]
      break;
 800565e:	e00b      	b.n	8005678 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3332Hz:
      *val = ISM330DHCX_GY_ODR_3332Hz;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	2209      	movs	r2, #9
 8005664:	701a      	strb	r2, [r3, #0]
      break;
 8005666:	e007      	b.n	8005678 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	220a      	movs	r2, #10
 800566c:	701a      	strb	r2, [r3, #0]
      break;
 800566e:	e003      	b.n	8005678 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2200      	movs	r2, #0
 8005674:	701a      	strb	r2, [r3, #0]
      break;
 8005676:	bf00      	nop
  }

  return ret;
 8005678:	68fb      	ldr	r3, [r7, #12]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop

08005684 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005690:	f107 0208 	add.w	r2, r7, #8
 8005694:	2301      	movs	r3, #1
 8005696:	2112      	movs	r1, #18
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff fb43 	bl	8004d24 <ism330dhcx_read_reg>
 800569e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10f      	bne.n	80056c6 <ism330dhcx_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	7a3b      	ldrb	r3, [r7, #8]
 80056b0:	f362 1386 	bfi	r3, r2, #6, #1
 80056b4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80056b6:	f107 0208 	add.w	r2, r7, #8
 80056ba:	2301      	movs	r3, #1
 80056bc:	2112      	movs	r1, #18
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff fb48 	bl	8004d54 <ism330dhcx_write_reg>
 80056c4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80056c6:	68fb      	ldr	r3, [r7, #12]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 80056da:	f107 020c 	add.w	r2, r7, #12
 80056de:	2306      	movs	r3, #6
 80056e0:	2122      	movs	r1, #34	; 0x22
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff fb1e 	bl	8004d24 <ism330dhcx_read_reg>
 80056e8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80056ea:	7b7b      	ldrb	r3, [r7, #13]
 80056ec:	b21a      	sxth	r2, r3
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	021b      	lsls	r3, r3, #8
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	7b3b      	ldrb	r3, [r7, #12]
 8005700:	b29b      	uxth	r3, r3
 8005702:	4413      	add	r3, r2
 8005704:	b29b      	uxth	r3, r3
 8005706:	b21a      	sxth	r2, r3
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800570c:	7bfa      	ldrb	r2, [r7, #15]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	3302      	adds	r3, #2
 8005712:	b212      	sxth	r2, r2
 8005714:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	3302      	adds	r3, #2
 800571a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800571e:	b29b      	uxth	r3, r3
 8005720:	021b      	lsls	r3, r3, #8
 8005722:	b29a      	uxth	r2, r3
 8005724:	7bbb      	ldrb	r3, [r7, #14]
 8005726:	b29b      	uxth	r3, r3
 8005728:	4413      	add	r3, r2
 800572a:	b29a      	uxth	r2, r3
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	3302      	adds	r3, #2
 8005730:	b212      	sxth	r2, r2
 8005732:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005734:	7c7a      	ldrb	r2, [r7, #17]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	3304      	adds	r3, #4
 800573a:	b212      	sxth	r2, r2
 800573c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	3304      	adds	r3, #4
 8005742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005746:	b29b      	uxth	r3, r3
 8005748:	021b      	lsls	r3, r3, #8
 800574a:	b29a      	uxth	r2, r3
 800574c:	7c3b      	ldrb	r3, [r7, #16]
 800574e:	b29b      	uxth	r3, r3
 8005750:	4413      	add	r3, r2
 8005752:	b29a      	uxth	r2, r3
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	3304      	adds	r3, #4
 8005758:	b212      	sxth	r2, r2
 800575a:	801a      	strh	r2, [r3, #0]

  return ret;
 800575c:	697b      	ldr	r3, [r7, #20]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b086      	sub	sp, #24
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8005770:	f107 020c 	add.w	r2, r7, #12
 8005774:	2306      	movs	r3, #6
 8005776:	2128      	movs	r1, #40	; 0x28
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff fad3 	bl	8004d24 <ism330dhcx_read_reg>
 800577e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005780:	7b7b      	ldrb	r3, [r7, #13]
 8005782:	b21a      	sxth	r2, r3
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800578e:	b29b      	uxth	r3, r3
 8005790:	021b      	lsls	r3, r3, #8
 8005792:	b29a      	uxth	r2, r3
 8005794:	7b3b      	ldrb	r3, [r7, #12]
 8005796:	b29b      	uxth	r3, r3
 8005798:	4413      	add	r3, r2
 800579a:	b29b      	uxth	r3, r3
 800579c:	b21a      	sxth	r2, r3
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80057a2:	7bfa      	ldrb	r2, [r7, #15]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	3302      	adds	r3, #2
 80057a8:	b212      	sxth	r2, r2
 80057aa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	3302      	adds	r3, #2
 80057b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	7bbb      	ldrb	r3, [r7, #14]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	4413      	add	r3, r2
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	3302      	adds	r3, #2
 80057c6:	b212      	sxth	r2, r2
 80057c8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80057ca:	7c7a      	ldrb	r2, [r7, #17]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	3304      	adds	r3, #4
 80057d0:	b212      	sxth	r2, r2
 80057d2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	3304      	adds	r3, #4
 80057d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	021b      	lsls	r3, r3, #8
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	7c3b      	ldrb	r3, [r7, #16]
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	4413      	add	r3, r2
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	3304      	adds	r3, #4
 80057ee:	b212      	sxth	r2, r2
 80057f0:	801a      	strh	r2, [r3, #0]

  return ret;
 80057f2:	697b      	ldr	r3, [r7, #20]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 8005808:	f107 0208 	add.w	r2, r7, #8
 800580c:	2301      	movs	r3, #1
 800580e:	2118      	movs	r1, #24
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7ff fa87 	bl	8004d24 <ism330dhcx_read_reg>
 8005816:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10f      	bne.n	800583e <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 800581e:	78fb      	ldrb	r3, [r7, #3]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	b2da      	uxtb	r2, r3
 8005826:	7a3b      	ldrb	r3, [r7, #8]
 8005828:	f362 0341 	bfi	r3, r2, #1, #1
 800582c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 800582e:	f107 0208 	add.w	r2, r7, #8
 8005832:	2301      	movs	r3, #1
 8005834:	2118      	movs	r1, #24
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff fa8c 	bl	8004d54 <ism330dhcx_write_reg>
 800583c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 800583e:	68fb      	ldr	r3, [r7, #12]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8005854:	f107 0208 	add.w	r2, r7, #8
 8005858:	2301      	movs	r3, #1
 800585a:	2101      	movs	r1, #1
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff fa61 	bl	8004d24 <ism330dhcx_read_reg>
 8005862:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10f      	bne.n	800588a <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800586a:	78fb      	ldrb	r3, [r7, #3]
 800586c:	f003 0303 	and.w	r3, r3, #3
 8005870:	b2da      	uxtb	r2, r3
 8005872:	7a3b      	ldrb	r3, [r7, #8]
 8005874:	f362 1387 	bfi	r3, r2, #6, #2
 8005878:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 800587a:	f107 0208 	add.w	r2, r7, #8
 800587e:	2301      	movs	r3, #1
 8005880:	2101      	movs	r1, #1
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff fa66 	bl	8004d54 <ism330dhcx_write_reg>
 8005888:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800588a:	68fb      	ldr	r3, [r7, #12]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 800589e:	2301      	movs	r3, #1
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	210f      	movs	r1, #15
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff fa3d 	bl	8004d24 <ism330dhcx_read_reg>
 80058aa:	60f8      	str	r0, [r7, #12]

  return ret;
 80058ac:	68fb      	ldr	r3, [r7, #12]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	460b      	mov	r3, r1
 80058c0:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80058c2:	f107 0208 	add.w	r2, r7, #8
 80058c6:	2301      	movs	r3, #1
 80058c8:	2112      	movs	r1, #18
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7ff fa2a 	bl	8004d24 <ism330dhcx_read_reg>
 80058d0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10f      	bne.n	80058f8 <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80058d8:	78fb      	ldrb	r3, [r7, #3]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	7a3b      	ldrb	r3, [r7, #8]
 80058e2:	f362 0300 	bfi	r3, r2, #0, #1
 80058e6:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80058e8:	f107 0208 	add.w	r2, r7, #8
 80058ec:	2301      	movs	r3, #1
 80058ee:	2112      	movs	r1, #18
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff fa2f 	bl	8004d54 <ism330dhcx_write_reg>
 80058f6:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80058f8:	68fb      	ldr	r3, [r7, #12]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b084      	sub	sp, #16
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	460b      	mov	r3, r1
 800590c:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800590e:	f107 0208 	add.w	r2, r7, #8
 8005912:	2301      	movs	r3, #1
 8005914:	2112      	movs	r1, #18
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff fa04 	bl	8004d24 <ism330dhcx_read_reg>
 800591c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10f      	bne.n	8005944 <ism330dhcx_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = (uint8_t)val;
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	b2da      	uxtb	r2, r3
 800592c:	7a3b      	ldrb	r3, [r7, #8]
 800592e:	f362 0382 	bfi	r3, r2, #2, #1
 8005932:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8005934:	f107 0208 	add.w	r2, r7, #8
 8005938:	2301      	movs	r3, #1
 800593a:	2112      	movs	r1, #18
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff fa09 	bl	8004d54 <ism330dhcx_write_reg>
 8005942:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8005944:	68fb      	ldr	r3, [r7, #12]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	460b      	mov	r3, r1
 8005958:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 800595a:	f107 0208 	add.w	r2, r7, #8
 800595e:	2301      	movs	r3, #1
 8005960:	210a      	movs	r1, #10
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff f9de 	bl	8004d24 <ism330dhcx_read_reg>
 8005968:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10f      	bne.n	8005990 <ism330dhcx_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	b2da      	uxtb	r2, r3
 8005978:	7a3b      	ldrb	r3, [r7, #8]
 800597a:	f362 0302 	bfi	r3, r2, #0, #3
 800597e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8005980:	f107 0208 	add.w	r2, r7, #8
 8005984:	2301      	movs	r3, #1
 8005986:	210a      	movs	r1, #10
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff f9e3 	bl	8004d54 <ism330dhcx_write_reg>
 800598e:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8005990:	68fb      	ldr	r3, [r7, #12]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80059a4:	2102      	movs	r1, #2
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff ff4e 	bl	8005848 <ism330dhcx_mem_bank_set>
 80059ac:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d106      	bne.n	80059c2 <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 80059b4:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 80059b6:	2301      	movs	r3, #1
 80059b8:	2146      	movs	r1, #70	; 0x46
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff f9b2 	bl	8004d24 <ism330dhcx_read_reg>
 80059c0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d107      	bne.n	80059d8 <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 80059cc:	2301      	movs	r3, #1
 80059ce:	2147      	movs	r1, #71	; 0x47
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7ff f9a7 	bl	8004d24 <ism330dhcx_read_reg>
 80059d6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d104      	bne.n	80059e8 <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80059de:	2100      	movs	r1, #0
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7ff ff31 	bl	8005848 <ism330dhcx_mem_bank_set>
 80059e6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80059e8:	68fb      	ldr	r3, [r7, #12]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
	...

080059f4 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80059fe:	2102      	movs	r1, #2
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff ff21 	bl	8005848 <ism330dhcx_mem_bank_set>
 8005a06:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d107      	bne.n	8005a1e <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8005a0e:	f107 0208 	add.w	r2, r7, #8
 8005a12:	2301      	movs	r3, #1
 8005a14:	215f      	movs	r1, #95	; 0x5f
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff f984 	bl	8004d24 <ism330dhcx_read_reg>
 8005a1c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d104      	bne.n	8005a2e <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005a24:	2100      	movs	r1, #0
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff ff0e 	bl	8005848 <ism330dhcx_mem_bank_set>
 8005a2c:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8005a2e:	7a3b      	ldrb	r3, [r7, #8]
 8005a30:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d81a      	bhi.n	8005a70 <ism330dhcx_fsm_data_rate_get+0x7c>
 8005a3a:	a201      	add	r2, pc, #4	; (adr r2, 8005a40 <ism330dhcx_fsm_data_rate_get+0x4c>)
 8005a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a40:	08005a51 	.word	0x08005a51
 8005a44:	08005a59 	.word	0x08005a59
 8005a48:	08005a61 	.word	0x08005a61
 8005a4c:	08005a69 	.word	0x08005a69
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2200      	movs	r2, #0
 8005a54:	701a      	strb	r2, [r3, #0]
      break;
 8005a56:	e00f      	b.n	8005a78 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	701a      	strb	r2, [r3, #0]
      break;
 8005a5e:	e00b      	b.n	8005a78 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2202      	movs	r2, #2
 8005a64:	701a      	strb	r2, [r3, #0]
      break;
 8005a66:	e007      	b.n	8005a78 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2203      	movs	r2, #3
 8005a6c:	701a      	strb	r2, [r3, #0]
      break;
 8005a6e:	e003      	b.n	8005a78 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2200      	movs	r2, #0
 8005a74:	701a      	strb	r2, [r3, #0]
      break;
 8005a76:	bf00      	nop
  }

  return ret;
 8005a78:	68fb      	ldr	r3, [r7, #12]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop

08005a84 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005a8e:	2102      	movs	r1, #2
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff fed9 	bl	8005848 <ism330dhcx_mem_bank_set>
 8005a96:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d107      	bne.n	8005aae <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 8005a9e:	f107 0208 	add.w	r2, r7, #8
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	2105      	movs	r1, #5
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff f93c 	bl	8004d24 <ism330dhcx_read_reg>
 8005aac:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10b      	bne.n	8005acc <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff fec6 	bl	8005848 <ism330dhcx_mem_bank_set>
 8005abc:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 8005abe:	7a3b      	ldrb	r3, [r7, #8]
 8005ac0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005acc:	68fb      	ldr	r3, [r7, #12]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005ae2:	2102      	movs	r1, #2
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff feaf 	bl	8005848 <ism330dhcx_mem_bank_set>
 8005aea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d107      	bne.n	8005b02 <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8005af2:	f107 0208 	add.w	r2, r7, #8
 8005af6:	2301      	movs	r3, #1
 8005af8:	2160      	movs	r1, #96	; 0x60
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff f912 	bl	8004d24 <ism330dhcx_read_reg>
 8005b00:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d12a      	bne.n	8005b5e <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 8005b08:	7a3b      	ldrb	r3, [r7, #8]
 8005b0a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d81b      	bhi.n	8005b4c <ism330dhcx_mlc_data_rate_get+0x74>
 8005b14:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <ism330dhcx_mlc_data_rate_get+0x44>)
 8005b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1a:	bf00      	nop
 8005b1c:	08005b2d 	.word	0x08005b2d
 8005b20:	08005b35 	.word	0x08005b35
 8005b24:	08005b3d 	.word	0x08005b3d
 8005b28:	08005b45 	.word	0x08005b45
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	701a      	strb	r2, [r3, #0]
        break;
 8005b32:	e00f      	b.n	8005b54 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2201      	movs	r2, #1
 8005b38:	701a      	strb	r2, [r3, #0]
        break;
 8005b3a:	e00b      	b.n	8005b54 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	701a      	strb	r2, [r3, #0]
        break;
 8005b42:	e007      	b.n	8005b54 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2203      	movs	r2, #3
 8005b48:	701a      	strb	r2, [r3, #0]
        break;
 8005b4a:	e003      	b.n	8005b54 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	701a      	strb	r2, [r3, #0]
        break;
 8005b52:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005b54:	2100      	movs	r1, #0
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff fe76 	bl	8005848 <ism330dhcx_mem_bank_set>
 8005b5c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <IKS02A1_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08e      	sub	sp, #56	; 0x38
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005b72:	2300      	movs	r3, #0
 8005b74:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005b76:	2301      	movs	r3, #1
 8005b78:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS02A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d06e      	beq.n	8005c62 <IKS02A1_MOTION_SENSOR_Init+0xfa>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	f200 809d 	bhi.w	8005cc6 <IKS02A1_MOTION_SENSOR_Init+0x15e>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <IKS02A1_MOTION_SENSOR_Init+0x32>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d032      	beq.n	8005bfe <IKS02A1_MOTION_SENSOR_Init+0x96>
 8005b98:	e095      	b.n	8005cc6 <IKS02A1_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS02A1_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case IKS02A1_ISM330DHCX_0:
      if (ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 8005b9a:	6838      	ldr	r0, [r7, #0]
 8005b9c:	f000 fa00 	bl	8005fa0 <ISM330DHCX_0_Probe>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <IKS02A1_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8005baa:	e0cc      	b.n	8005d46 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005bac:	4a68      	ldr	r2, [pc, #416]	; (8005d50 <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	4967      	ldr	r1, [pc, #412]	; (8005d54 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005bbe:	f107 010c 	add.w	r1, r7, #12
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	4798      	blx	r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <IKS02A1_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005bcc:	f06f 0306 	mvn.w	r3, #6
 8005bd0:	e0b9      	b.n	8005d46 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005bd2:	7b3b      	ldrb	r3, [r7, #12]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d103      	bne.n	8005be0 <IKS02A1_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	f043 0302 	orr.w	r3, r3, #2
 8005bde:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005be0:	7b7b      	ldrb	r3, [r7, #13]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d103      	bne.n	8005bee <IKS02A1_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	f043 0301 	orr.w	r3, r3, #1
 8005bec:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005bee:	7bbb      	ldrb	r3, [r7, #14]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d16c      	bne.n	8005cce <IKS02A1_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	f043 0304 	orr.w	r3, r3, #4
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005bfc:	e067      	b.n	8005cce <IKS02A1_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS02A1_MOTION_SENSOR_IIS2DLPC_0 == 1)
    case IKS02A1_IIS2DLPC_0:
      if (IIS2DLPC_0_Probe(Functions) != BSP_ERROR_NONE)
 8005bfe:	6838      	ldr	r0, [r7, #0]
 8005c00:	f000 fa8a 	bl	8006118 <IIS2DLPC_0_Probe>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <IKS02A1_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8005c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0e:	e09a      	b.n	8005d46 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005c10:	4a4f      	ldr	r2, [pc, #316]	; (8005d50 <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	494e      	ldr	r1, [pc, #312]	; (8005d54 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c22:	f107 010c 	add.w	r1, r7, #12
 8005c26:	4610      	mov	r0, r2
 8005c28:	4798      	blx	r3
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <IKS02A1_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005c30:	f06f 0306 	mvn.w	r3, #6
 8005c34:	e087      	b.n	8005d46 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005c36:	7b3b      	ldrb	r3, [r7, #12]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d103      	bne.n	8005c44 <IKS02A1_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	f043 0302 	orr.w	r3, r3, #2
 8005c42:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005c44:	7b7b      	ldrb	r3, [r7, #13]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d103      	bne.n	8005c52 <IKS02A1_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	f043 0301 	orr.w	r3, r3, #1
 8005c50:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005c52:	7bbb      	ldrb	r3, [r7, #14]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d13c      	bne.n	8005cd2 <IKS02A1_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	f043 0304 	orr.w	r3, r3, #4
 8005c5e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005c60:	e037      	b.n	8005cd2 <IKS02A1_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS02A1_MOTION_SENSOR_IIS2MDC_0 == 1)
    case IKS02A1_IIS2MDC_0:
      if (IIS2MDC_0_Probe(Functions) != BSP_ERROR_NONE)
 8005c62:	6838      	ldr	r0, [r7, #0]
 8005c64:	f000 fb00 	bl	8006268 <IIS2MDC_0_Probe>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <IKS02A1_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c72:	e068      	b.n	8005d46 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005c74:	4a36      	ldr	r2, [pc, #216]	; (8005d50 <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	4935      	ldr	r1, [pc, #212]	; (8005d54 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c86:	f107 010c 	add.w	r1, r7, #12
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	4798      	blx	r3
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <IKS02A1_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005c94:	f06f 0306 	mvn.w	r3, #6
 8005c98:	e055      	b.n	8005d46 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005c9a:	7b3b      	ldrb	r3, [r7, #12]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d103      	bne.n	8005ca8 <IKS02A1_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	f043 0302 	orr.w	r3, r3, #2
 8005ca6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005ca8:	7b7b      	ldrb	r3, [r7, #13]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d103      	bne.n	8005cb6 <IKS02A1_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	f043 0301 	orr.w	r3, r3, #1
 8005cb4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005cb6:	7bbb      	ldrb	r3, [r7, #14]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d10c      	bne.n	8005cd6 <IKS02A1_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbe:	f043 0304 	orr.w	r3, r3, #4
 8005cc2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005cc4:	e007      	b.n	8005cd6 <IKS02A1_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005cc6:	f06f 0301 	mvn.w	r3, #1
 8005cca:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005ccc:	e004      	b.n	8005cd8 <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 8005cce:	bf00      	nop
 8005cd0:	e002      	b.n	8005cd8 <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 8005cd2:	bf00      	nop
 8005cd4:	e000      	b.n	8005cd8 <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 8005cd6:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <IKS02A1_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce0:	e031      	b.n	8005d46 <IKS02A1_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ce6:	e02a      	b.n	8005d3e <IKS02A1_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	4013      	ands	r3, r2
 8005cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d11e      	bne.n	8005d32 <IKS02A1_MOTION_SENSOR_Init+0x1ca>
 8005cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d118      	bne.n	8005d32 <IKS02A1_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005d00:	4a15      	ldr	r2, [pc, #84]	; (8005d58 <IKS02A1_MOTION_SENSOR_Init+0x1f0>)
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d08:	4814      	ldr	r0, [pc, #80]	; (8005d5c <IKS02A1_MOTION_SENSOR_Init+0x1f4>)
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	4413      	add	r3, r2
 8005d12:	440b      	add	r3, r1
 8005d14:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	490e      	ldr	r1, [pc, #56]	; (8005d54 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d22:	4610      	mov	r0, r2
 8005d24:	4798      	blx	r3
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <IKS02A1_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005d2c:	f06f 0304 	mvn.w	r3, #4
 8005d30:	e009      	b.n	8005d46 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 8005d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d9d1      	bls.n	8005ce8 <IKS02A1_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3738      	adds	r7, #56	; 0x38
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	2000035c 	.word	0x2000035c
 8005d54:	2000032c 	.word	0x2000032c
 8005d58:	200000c4 	.word	0x200000c4
 8005d5c:	20000338 	.word	0x20000338

08005d60 <IKS02A1_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance
  * @param  Capabilities pointer to motion sensor capabilities
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS02A1_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d903      	bls.n	8005d78 <IKS02A1_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005d70:	f06f 0301 	mvn.w	r3, #1
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	e014      	b.n	8005da2 <IKS02A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8005d78:	4a0c      	ldr	r2, [pc, #48]	; (8005dac <IKS02A1_MOTION_SENSOR_GetCapabilities+0x4c>)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	490b      	ldr	r1, [pc, #44]	; (8005db0 <IKS02A1_MOTION_SENSOR_GetCapabilities+0x50>)
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d8a:	6839      	ldr	r1, [r7, #0]
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	4798      	blx	r3
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <IKS02A1_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005d96:	f06f 0306 	mvn.w	r3, #6
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	e001      	b.n	8005da2 <IKS02A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005da2:	68fb      	ldr	r3, [r7, #12]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	2000035c 	.word	0x2000035c
 8005db0:	2000032c 	.word	0x2000032c

08005db4 <IKS02A1_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d903      	bls.n	8005dcc <IKS02A1_MOTION_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005dc4:	f06f 0301 	mvn.w	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	e014      	b.n	8005df6 <IKS02A1_MOTION_SENSOR_ReadID+0x42>
  }
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 8005dcc:	4a0c      	ldr	r2, [pc, #48]	; (8005e00 <IKS02A1_MOTION_SENSOR_ReadID+0x4c>)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	490b      	ldr	r1, [pc, #44]	; (8005e04 <IKS02A1_MOTION_SENSOR_ReadID+0x50>)
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	4610      	mov	r0, r2
 8005de2:	4798      	blx	r3
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <IKS02A1_MOTION_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005dea:	f06f 0306 	mvn.w	r3, #6
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	e001      	b.n	8005df6 <IKS02A1_MOTION_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8005df2:	2300      	movs	r3, #0
 8005df4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005df6:	68fb      	ldr	r3, [r7, #12]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	2000035c 	.word	0x2000035c
 8005e04:	2000032c 	.word	0x2000032c

08005e08 <IKS02A1_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS02A1_MOTION_SENSOR_Axes_t *Axes)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d903      	bls.n	8005e22 <IKS02A1_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005e1a:	f06f 0301 	mvn.w	r3, #1
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	e029      	b.n	8005e76 <IKS02A1_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005e22:	4a17      	ldr	r2, [pc, #92]	; (8005e80 <IKS02A1_MOTION_SENSOR_GetAxes+0x78>)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d11d      	bne.n	8005e70 <IKS02A1_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005e34:	4a13      	ldr	r2, [pc, #76]	; (8005e84 <IKS02A1_MOTION_SENSOR_GetAxes+0x7c>)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e3c:	4812      	ldr	r0, [pc, #72]	; (8005e88 <IKS02A1_MOTION_SENSOR_GetAxes+0x80>)
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4613      	mov	r3, r2
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	4413      	add	r3, r2
 8005e46:	440b      	add	r3, r1
 8005e48:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	490f      	ldr	r1, [pc, #60]	; (8005e8c <IKS02A1_MOTION_SENSOR_GetAxes+0x84>)
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	4610      	mov	r0, r2
 8005e5a:	4798      	blx	r3
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <IKS02A1_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e62:	f06f 0304 	mvn.w	r3, #4
 8005e66:	617b      	str	r3, [r7, #20]
 8005e68:	e005      	b.n	8005e76 <IKS02A1_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	617b      	str	r3, [r7, #20]
 8005e6e:	e002      	b.n	8005e76 <IKS02A1_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005e70:	f06f 0301 	mvn.w	r3, #1
 8005e74:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005e76:	697b      	ldr	r3, [r7, #20]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	20000368 	.word	0x20000368
 8005e84:	200000c4 	.word	0x200000c4
 8005e88:	20000338 	.word	0x20000338
 8005e8c:	2000032c 	.word	0x2000032c

08005e90 <IKS02A1_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d903      	bls.n	8005eaa <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005ea2:	f06f 0301 	mvn.w	r3, #1
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	e029      	b.n	8005efe <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005eaa:	4a17      	ldr	r2, [pc, #92]	; (8005f08 <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x78>)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d11d      	bne.n	8005ef8 <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8005ebc:	4a13      	ldr	r2, [pc, #76]	; (8005f0c <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ec4:	4812      	ldr	r0, [pc, #72]	; (8005f10 <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x80>)
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	4413      	add	r3, r2
 8005ece:	440b      	add	r3, r1
 8005ed0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	490f      	ldr	r1, [pc, #60]	; (8005f14 <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x84>)
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	4798      	blx	r3
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005eea:	f06f 0304 	mvn.w	r3, #4
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	e005      	b.n	8005efe <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	e002      	b.n	8005efe <IKS02A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005ef8:	f06f 0301 	mvn.w	r3, #1
 8005efc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005efe:	697b      	ldr	r3, [r7, #20]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	20000368 	.word	0x20000368
 8005f0c:	200000c4 	.word	0x200000c4
 8005f10:	20000338 	.word	0x20000338
 8005f14:	2000032c 	.word	0x2000032c

08005f18 <IKS02A1_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale pointer to Fullscale read value
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d903      	bls.n	8005f32 <IKS02A1_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005f2a:	f06f 0301 	mvn.w	r3, #1
 8005f2e:	617b      	str	r3, [r7, #20]
 8005f30:	e029      	b.n	8005f86 <IKS02A1_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005f32:	4a17      	ldr	r2, [pc, #92]	; (8005f90 <IKS02A1_MOTION_SENSOR_GetFullScale+0x78>)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d11d      	bne.n	8005f80 <IKS02A1_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 8005f44:	4a13      	ldr	r2, [pc, #76]	; (8005f94 <IKS02A1_MOTION_SENSOR_GetFullScale+0x7c>)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005f4c:	4812      	ldr	r0, [pc, #72]	; (8005f98 <IKS02A1_MOTION_SENSOR_GetFullScale+0x80>)
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4613      	mov	r3, r2
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	4413      	add	r3, r2
 8005f56:	440b      	add	r3, r1
 8005f58:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	490f      	ldr	r1, [pc, #60]	; (8005f9c <IKS02A1_MOTION_SENSOR_GetFullScale+0x84>)
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005f66:	6879      	ldr	r1, [r7, #4]
 8005f68:	4610      	mov	r0, r2
 8005f6a:	4798      	blx	r3
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <IKS02A1_MOTION_SENSOR_GetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f72:	f06f 0304 	mvn.w	r3, #4
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	e005      	b.n	8005f86 <IKS02A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	617b      	str	r3, [r7, #20]
 8005f7e:	e002      	b.n	8005f86 <IKS02A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005f80:	f06f 0301 	mvn.w	r3, #1
 8005f84:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005f86:	697b      	ldr	r3, [r7, #20]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20000368 	.word	0x20000368
 8005f94:	200000c4 	.word	0x200000c4
 8005f98:	20000338 	.word	0x20000338
 8005f9c:	2000032c 	.word	0x2000032c

08005fa0 <ISM330DHCX_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t ISM330DHCX_0_Probe(uint32_t Functions)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b092      	sub	sp, #72	; 0x48
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  ISM330DHCX_IO_t            io_ctx;
  uint8_t                    id;
  static ISM330DHCX_Object_t ism330dhcx_obj_0;
  ISM330DHCX_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = ISM330DHCX_I2C_BUS; /* I2C */
 8005fac:	2300      	movs	r3, #0
 8005fae:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = ISM330DHCX_I2C_ADD_H;
 8005fb0:	23d7      	movs	r3, #215	; 0xd7
 8005fb2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS02A1_I2C_Init;
 8005fb6:	4b4a      	ldr	r3, [pc, #296]	; (80060e0 <ISM330DHCX_0_Probe+0x140>)
 8005fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 8005fba:	4b4a      	ldr	r3, [pc, #296]	; (80060e4 <ISM330DHCX_0_Probe+0x144>)
 8005fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 8005fbe:	4b4a      	ldr	r3, [pc, #296]	; (80060e8 <ISM330DHCX_0_Probe+0x148>)
 8005fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 8005fc2:	4b4a      	ldr	r3, [pc, #296]	; (80060ec <ISM330DHCX_0_Probe+0x14c>)
 8005fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS02A1_GetTick;
 8005fc6:	4b4a      	ldr	r3, [pc, #296]	; (80060f0 <ISM330DHCX_0_Probe+0x150>)
 8005fc8:	643b      	str	r3, [r7, #64]	; 0x40

  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 8005fca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4848      	ldr	r0, [pc, #288]	; (80060f4 <ISM330DHCX_0_Probe+0x154>)
 8005fd2:	f7fd fe83 	bl	8003cdc <ISM330DHCX_RegisterBusIO>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <ISM330DHCX_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005fdc:	f06f 0306 	mvn.w	r3, #6
 8005fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8005fe2:	e077      	b.n	80060d4 <ISM330DHCX_0_Probe+0x134>
  }
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 8005fe4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4842      	ldr	r0, [pc, #264]	; (80060f4 <ISM330DHCX_0_Probe+0x154>)
 8005fec:	f7fd ff90 	bl	8003f10 <ISM330DHCX_ReadID>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <ISM330DHCX_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005ff6:	f06f 0306 	mvn.w	r3, #6
 8005ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8005ffc:	e06a      	b.n	80060d4 <ISM330DHCX_0_Probe+0x134>
  }
  else if (id != ISM330DHCX_ID)
 8005ffe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006002:	2b6b      	cmp	r3, #107	; 0x6b
 8006004:	d003      	beq.n	800600e <ISM330DHCX_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006006:	f06f 0306 	mvn.w	r3, #6
 800600a:	647b      	str	r3, [r7, #68]	; 0x44
 800600c:	e062      	b.n	80060d4 <ISM330DHCX_0_Probe+0x134>
  }
  else
  {
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 800600e:	f107 0308 	add.w	r3, r7, #8
 8006012:	4619      	mov	r1, r3
 8006014:	4837      	ldr	r0, [pc, #220]	; (80060f4 <ISM330DHCX_0_Probe+0x154>)
 8006016:	f7fd ff91 	bl	8003f3c <ISM330DHCX_GetCapabilities>
    MotionCtx[IKS02A1_ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800601a:	7a7b      	ldrb	r3, [r7, #9]
 800601c:	461a      	mov	r2, r3
 800601e:	7a3b      	ldrb	r3, [r7, #8]
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	431a      	orrs	r2, r3
 8006024:	7abb      	ldrb	r3, [r7, #10]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4313      	orrs	r3, r2
 800602a:	4a33      	ldr	r2, [pc, #204]	; (80060f8 <ISM330DHCX_0_Probe+0x158>)
 800602c:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS02A1_ISM330DHCX_0] = &ism330dhcx_obj_0;
 800602e:	4b33      	ldr	r3, [pc, #204]	; (80060fc <ISM330DHCX_0_Probe+0x15c>)
 8006030:	4a30      	ldr	r2, [pc, #192]	; (80060f4 <ISM330DHCX_0_Probe+0x154>)
 8006032:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 8006034:	4b32      	ldr	r3, [pc, #200]	; (8006100 <ISM330DHCX_0_Probe+0x160>)
 8006036:	4a33      	ldr	r2, [pc, #204]	; (8006104 <ISM330DHCX_0_Probe+0x164>)
 8006038:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800603a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800603c:	2b00      	cmp	r3, #0
 800603e:	d11d      	bne.n	800607c <ISM330DHCX_0_Probe+0xdc>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d018      	beq.n	800607c <ISM330DHCX_0_Probe+0xdc>
 800604a:	7a7b      	ldrb	r3, [r7, #9]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d115      	bne.n	800607c <ISM330DHCX_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 8006050:	4b2d      	ldr	r3, [pc, #180]	; (8006108 <ISM330DHCX_0_Probe+0x168>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	4a2d      	ldr	r2, [pc, #180]	; (800610c <ISM330DHCX_0_Probe+0x16c>)
 8006056:	492e      	ldr	r1, [pc, #184]	; (8006110 <ISM330DHCX_0_Probe+0x170>)
 8006058:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 800605c:	4b28      	ldr	r3, [pc, #160]	; (8006100 <ISM330DHCX_0_Probe+0x160>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a26      	ldr	r2, [pc, #152]	; (80060fc <ISM330DHCX_0_Probe+0x15c>)
 8006064:	6812      	ldr	r2, [r2, #0]
 8006066:	4610      	mov	r0, r2
 8006068:	4798      	blx	r3
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <ISM330DHCX_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006070:	f06f 0304 	mvn.w	r3, #4
 8006074:	647b      	str	r3, [r7, #68]	; 0x44
 8006076:	e001      	b.n	800607c <ISM330DHCX_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006078:	2300      	movs	r3, #0
 800607a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800607c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800607e:	2b00      	cmp	r3, #0
 8006080:	d11d      	bne.n	80060be <ISM330DHCX_0_Probe+0x11e>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d018      	beq.n	80060be <ISM330DHCX_0_Probe+0x11e>
 800608c:	7a3b      	ldrb	r3, [r7, #8]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d115      	bne.n	80060be <ISM330DHCX_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006092:	4b1d      	ldr	r3, [pc, #116]	; (8006108 <ISM330DHCX_0_Probe+0x168>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	4a1d      	ldr	r2, [pc, #116]	; (800610c <ISM330DHCX_0_Probe+0x16c>)
 8006098:	491e      	ldr	r1, [pc, #120]	; (8006114 <ISM330DHCX_0_Probe+0x174>)
 800609a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                              void *)&ISM330DHCX_ACC_Driver;

      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 800609e:	4b18      	ldr	r3, [pc, #96]	; (8006100 <ISM330DHCX_0_Probe+0x160>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a15      	ldr	r2, [pc, #84]	; (80060fc <ISM330DHCX_0_Probe+0x15c>)
 80060a6:	6812      	ldr	r2, [r2, #0]
 80060a8:	4610      	mov	r0, r2
 80060aa:	4798      	blx	r3
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <ISM330DHCX_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80060b2:	f06f 0304 	mvn.w	r3, #4
 80060b6:	647b      	str	r3, [r7, #68]	; 0x44
 80060b8:	e001      	b.n	80060be <ISM330DHCX_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80060be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d107      	bne.n	80060d4 <ISM330DHCX_0_Probe+0x134>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <ISM330DHCX_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80060ce:	f06f 0304 	mvn.w	r3, #4
 80060d2:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80060d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3748      	adds	r7, #72	; 0x48
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	08001a35 	.word	0x08001a35
 80060e4:	08001a99 	.word	0x08001a99
 80060e8:	08001b4d 	.word	0x08001b4d
 80060ec:	08001ae9 	.word	0x08001ae9
 80060f0:	08001bb1 	.word	0x08001bb1
 80060f4:	20000374 	.word	0x20000374
 80060f8:	20000368 	.word	0x20000368
 80060fc:	2000032c 	.word	0x2000032c
 8006100:	2000035c 	.word	0x2000035c
 8006104:	2000006c 	.word	0x2000006c
 8006108:	200000c4 	.word	0x200000c4
 800610c:	20000338 	.word	0x20000338
 8006110:	200000a0 	.word	0x200000a0
 8006114:	2000007c 	.word	0x2000007c

08006118 <IIS2DLPC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t IIS2DLPC_0_Probe(uint32_t Functions)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b092      	sub	sp, #72	; 0x48
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  IIS2DLPC_IO_t            io_ctx;
  uint8_t                  id;
  static IIS2DLPC_Object_t iis2dlpc_obj_0;
  IIS2DLPC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8006120:	2300      	movs	r3, #0
 8006122:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = IIS2DLPC_I2C_BUS; /* I2C */
 8006124:	2300      	movs	r3, #0
 8006126:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = IIS2DLPC_I2C_ADD_H;
 8006128:	2333      	movs	r3, #51	; 0x33
 800612a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS02A1_I2C_Init;
 800612e:	4b41      	ldr	r3, [pc, #260]	; (8006234 <IIS2DLPC_0_Probe+0x11c>)
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 8006132:	4b41      	ldr	r3, [pc, #260]	; (8006238 <IIS2DLPC_0_Probe+0x120>)
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 8006136:	4b41      	ldr	r3, [pc, #260]	; (800623c <IIS2DLPC_0_Probe+0x124>)
 8006138:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 800613a:	4b41      	ldr	r3, [pc, #260]	; (8006240 <IIS2DLPC_0_Probe+0x128>)
 800613c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS02A1_GetTick;
 800613e:	4b41      	ldr	r3, [pc, #260]	; (8006244 <IIS2DLPC_0_Probe+0x12c>)
 8006140:	643b      	str	r3, [r7, #64]	; 0x40

  if (IIS2DLPC_RegisterBusIO(&iis2dlpc_obj_0, &io_ctx) != IIS2DLPC_OK)
 8006142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006146:	4619      	mov	r1, r3
 8006148:	483f      	ldr	r0, [pc, #252]	; (8006248 <IIS2DLPC_0_Probe+0x130>)
 800614a:	f7fb fe77 	bl	8001e3c <IIS2DLPC_RegisterBusIO>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <IIS2DLPC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006154:	f06f 0306 	mvn.w	r3, #6
 8006158:	647b      	str	r3, [r7, #68]	; 0x44
 800615a:	e065      	b.n	8006228 <IIS2DLPC_0_Probe+0x110>
  }
  else if (IIS2DLPC_ReadID(&iis2dlpc_obj_0, &id) != IIS2DLPC_OK)
 800615c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006160:	4619      	mov	r1, r3
 8006162:	4839      	ldr	r0, [pc, #228]	; (8006248 <IIS2DLPC_0_Probe+0x130>)
 8006164:	f7fb ff54 	bl	8002010 <IIS2DLPC_ReadID>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <IIS2DLPC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800616e:	f06f 0306 	mvn.w	r3, #6
 8006172:	647b      	str	r3, [r7, #68]	; 0x44
 8006174:	e058      	b.n	8006228 <IIS2DLPC_0_Probe+0x110>
  }
  else if (id != IIS2DLPC_ID)
 8006176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800617a:	2b44      	cmp	r3, #68	; 0x44
 800617c:	d003      	beq.n	8006186 <IIS2DLPC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800617e:	f06f 0306 	mvn.w	r3, #6
 8006182:	647b      	str	r3, [r7, #68]	; 0x44
 8006184:	e050      	b.n	8006228 <IIS2DLPC_0_Probe+0x110>
  }
  else
  {
    (void)IIS2DLPC_GetCapabilities(&iis2dlpc_obj_0, &cap);
 8006186:	f107 0308 	add.w	r3, r7, #8
 800618a:	4619      	mov	r1, r3
 800618c:	482e      	ldr	r0, [pc, #184]	; (8006248 <IIS2DLPC_0_Probe+0x130>)
 800618e:	f7fb ff55 	bl	800203c <IIS2DLPC_GetCapabilities>
    MotionCtx[IKS02A1_IIS2DLPC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006192:	7a7b      	ldrb	r3, [r7, #9]
 8006194:	461a      	mov	r2, r3
 8006196:	7a3b      	ldrb	r3, [r7, #8]
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	431a      	orrs	r2, r3
 800619c:	7abb      	ldrb	r3, [r7, #10]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4313      	orrs	r3, r2
 80061a2:	4a2a      	ldr	r2, [pc, #168]	; (800624c <IIS2DLPC_0_Probe+0x134>)
 80061a4:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS02A1_IIS2DLPC_0] = &iis2dlpc_obj_0;
 80061a6:	4b2a      	ldr	r3, [pc, #168]	; (8006250 <IIS2DLPC_0_Probe+0x138>)
 80061a8:	4a27      	ldr	r2, [pc, #156]	; (8006248 <IIS2DLPC_0_Probe+0x130>)
 80061aa:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_IIS2DLPC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2DLPC_COMMON_Driver;
 80061ac:	4b29      	ldr	r3, [pc, #164]	; (8006254 <IIS2DLPC_0_Probe+0x13c>)
 80061ae:	4a2a      	ldr	r2, [pc, #168]	; (8006258 <IIS2DLPC_0_Probe+0x140>)
 80061b0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80061b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <IIS2DLPC_0_Probe+0xb6>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d005      	beq.n	80061ce <IIS2DLPC_0_Probe+0xb6>
 80061c2:	7a7b      	ldrb	r3, [r7, #9]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d102      	bne.n	80061ce <IIS2DLPC_0_Probe+0xb6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80061c8:	f06f 0304 	mvn.w	r3, #4
 80061cc:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80061ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d11e      	bne.n	8006212 <IIS2DLPC_0_Probe+0xfa>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d019      	beq.n	8006212 <IIS2DLPC_0_Probe+0xfa>
 80061de:	7a3b      	ldrb	r3, [r7, #8]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d116      	bne.n	8006212 <IIS2DLPC_0_Probe+0xfa>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_IIS2DLPC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80061e4:	4b1d      	ldr	r3, [pc, #116]	; (800625c <IIS2DLPC_0_Probe+0x144>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	4a1d      	ldr	r2, [pc, #116]	; (8006260 <IIS2DLPC_0_Probe+0x148>)
 80061ea:	3303      	adds	r3, #3
 80061ec:	491d      	ldr	r1, [pc, #116]	; (8006264 <IIS2DLPC_0_Probe+0x14c>)
 80061ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&IIS2DLPC_ACC_Driver;

      if (MotionDrv[IKS02A1_IIS2DLPC_0]->Init(MotionCompObj[IKS02A1_IIS2DLPC_0]) != IIS2DLPC_OK)
 80061f2:	4b18      	ldr	r3, [pc, #96]	; (8006254 <IIS2DLPC_0_Probe+0x13c>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a15      	ldr	r2, [pc, #84]	; (8006250 <IIS2DLPC_0_Probe+0x138>)
 80061fa:	6852      	ldr	r2, [r2, #4]
 80061fc:	4610      	mov	r0, r2
 80061fe:	4798      	blx	r3
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <IIS2DLPC_0_Probe+0xf6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006206:	f06f 0304 	mvn.w	r3, #4
 800620a:	647b      	str	r3, [r7, #68]	; 0x44
 800620c:	e001      	b.n	8006212 <IIS2DLPC_0_Probe+0xfa>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800620e:	2300      	movs	r3, #0
 8006210:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006214:	2b00      	cmp	r3, #0
 8006216:	d107      	bne.n	8006228 <IIS2DLPC_0_Probe+0x110>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f003 0304 	and.w	r3, r3, #4
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <IIS2DLPC_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006222:	f06f 0304 	mvn.w	r3, #4
 8006226:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8006228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800622a:	4618      	mov	r0, r3
 800622c:	3748      	adds	r7, #72	; 0x48
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	08001a35 	.word	0x08001a35
 8006238:	08001a99 	.word	0x08001a99
 800623c:	08001b4d 	.word	0x08001b4d
 8006240:	08001ae9 	.word	0x08001ae9
 8006244:	08001bb1 	.word	0x08001bb1
 8006248:	200003a4 	.word	0x200003a4
 800624c:	20000368 	.word	0x20000368
 8006250:	2000032c 	.word	0x2000032c
 8006254:	2000035c 	.word	0x2000035c
 8006258:	20000004 	.word	0x20000004
 800625c:	200000c4 	.word	0x200000c4
 8006260:	20000338 	.word	0x20000338
 8006264:	20000014 	.word	0x20000014

08006268 <IIS2MDC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t IIS2MDC_0_Probe(uint32_t Functions)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b092      	sub	sp, #72	; 0x48
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  IIS2MDC_IO_t            io_ctx;
  uint8_t                 id;
  static IIS2MDC_Object_t iis2mdc_obj_0;
  IIS2MDC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8006270:	2300      	movs	r3, #0
 8006272:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = IIS2MDC_I2C_BUS; /* I2C */
 8006274:	2300      	movs	r3, #0
 8006276:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = IIS2MDC_I2C_ADD;
 8006278:	233d      	movs	r3, #61	; 0x3d
 800627a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS02A1_I2C_Init;
 800627e:	4b41      	ldr	r3, [pc, #260]	; (8006384 <IIS2MDC_0_Probe+0x11c>)
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 8006282:	4b41      	ldr	r3, [pc, #260]	; (8006388 <IIS2MDC_0_Probe+0x120>)
 8006284:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 8006286:	4b41      	ldr	r3, [pc, #260]	; (800638c <IIS2MDC_0_Probe+0x124>)
 8006288:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 800628a:	4b41      	ldr	r3, [pc, #260]	; (8006390 <IIS2MDC_0_Probe+0x128>)
 800628c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS02A1_GetTick;
 800628e:	4b41      	ldr	r3, [pc, #260]	; (8006394 <IIS2MDC_0_Probe+0x12c>)
 8006290:	643b      	str	r3, [r7, #64]	; 0x40

  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8006292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006296:	4619      	mov	r1, r3
 8006298:	483f      	ldr	r0, [pc, #252]	; (8006398 <IIS2MDC_0_Probe+0x130>)
 800629a:	f7fd f8dd 	bl	8003458 <IIS2MDC_RegisterBusIO>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <IIS2MDC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80062a4:	f06f 0306 	mvn.w	r3, #6
 80062a8:	647b      	str	r3, [r7, #68]	; 0x44
 80062aa:	e065      	b.n	8006378 <IIS2MDC_0_Probe+0x110>
  }
  else if (IIS2MDC_ReadID(&iis2mdc_obj_0, &id) != IIS2MDC_OK)
 80062ac:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80062b0:	4619      	mov	r1, r3
 80062b2:	4839      	ldr	r0, [pc, #228]	; (8006398 <IIS2MDC_0_Probe+0x130>)
 80062b4:	f7fd f987 	bl	80035c6 <IIS2MDC_ReadID>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <IIS2MDC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80062be:	f06f 0306 	mvn.w	r3, #6
 80062c2:	647b      	str	r3, [r7, #68]	; 0x44
 80062c4:	e058      	b.n	8006378 <IIS2MDC_0_Probe+0x110>
  }
  else if (id != IIS2MDC_ID)
 80062c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062ca:	2b40      	cmp	r3, #64	; 0x40
 80062cc:	d003      	beq.n	80062d6 <IIS2MDC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80062ce:	f06f 0306 	mvn.w	r3, #6
 80062d2:	647b      	str	r3, [r7, #68]	; 0x44
 80062d4:	e050      	b.n	8006378 <IIS2MDC_0_Probe+0x110>
  }
  else
  {
    (void)IIS2MDC_GetCapabilities(&iis2mdc_obj_0, &cap);
 80062d6:	f107 0308 	add.w	r3, r7, #8
 80062da:	4619      	mov	r1, r3
 80062dc:	482e      	ldr	r0, [pc, #184]	; (8006398 <IIS2MDC_0_Probe+0x130>)
 80062de:	f7fd f989 	bl	80035f4 <IIS2MDC_GetCapabilities>
    MotionCtx[IKS02A1_IIS2MDC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80062e2:	7a7b      	ldrb	r3, [r7, #9]
 80062e4:	461a      	mov	r2, r3
 80062e6:	7a3b      	ldrb	r3, [r7, #8]
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	431a      	orrs	r2, r3
 80062ec:	7abb      	ldrb	r3, [r7, #10]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4313      	orrs	r3, r2
 80062f2:	4a2a      	ldr	r2, [pc, #168]	; (800639c <IIS2MDC_0_Probe+0x134>)
 80062f4:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS02A1_IIS2MDC_0] = &iis2mdc_obj_0;
 80062f6:	4b2a      	ldr	r3, [pc, #168]	; (80063a0 <IIS2MDC_0_Probe+0x138>)
 80062f8:	4a27      	ldr	r2, [pc, #156]	; (8006398 <IIS2MDC_0_Probe+0x130>)
 80062fa:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_IIS2MDC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2MDC_COMMON_Driver;
 80062fc:	4b29      	ldr	r3, [pc, #164]	; (80063a4 <IIS2MDC_0_Probe+0x13c>)
 80062fe:	4a2a      	ldr	r2, [pc, #168]	; (80063a8 <IIS2MDC_0_Probe+0x140>)
 8006300:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10a      	bne.n	800631e <IIS2MDC_0_Probe+0xb6>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <IIS2MDC_0_Probe+0xb6>
 8006312:	7a7b      	ldrb	r3, [r7, #9]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d102      	bne.n	800631e <IIS2MDC_0_Probe+0xb6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006318:	f06f 0304 	mvn.w	r3, #4
 800631c:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800631e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <IIS2MDC_0_Probe+0xd2>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d005      	beq.n	800633a <IIS2MDC_0_Probe+0xd2>
 800632e:	7a3b      	ldrb	r3, [r7, #8]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d102      	bne.n	800633a <IIS2MDC_0_Probe+0xd2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006334:	f06f 0304 	mvn.w	r3, #4
 8006338:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800633a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800633c:	2b00      	cmp	r3, #0
 800633e:	d11b      	bne.n	8006378 <IIS2MDC_0_Probe+0x110>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f003 0304 	and.w	r3, r3, #4
 8006346:	2b00      	cmp	r3, #0
 8006348:	d016      	beq.n	8006378 <IIS2MDC_0_Probe+0x110>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_IIS2MDC_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800634a:	4b18      	ldr	r3, [pc, #96]	; (80063ac <IIS2MDC_0_Probe+0x144>)
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	4a18      	ldr	r2, [pc, #96]	; (80063b0 <IIS2MDC_0_Probe+0x148>)
 8006350:	3306      	adds	r3, #6
 8006352:	4918      	ldr	r1, [pc, #96]	; (80063b4 <IIS2MDC_0_Probe+0x14c>)
 8006354:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&IIS2MDC_MAG_Driver;

      if (MotionDrv[IKS02A1_IIS2MDC_0]->Init(MotionCompObj[IKS02A1_IIS2MDC_0]) != IIS2MDC_OK)
 8006358:	4b12      	ldr	r3, [pc, #72]	; (80063a4 <IIS2MDC_0_Probe+0x13c>)
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a10      	ldr	r2, [pc, #64]	; (80063a0 <IIS2MDC_0_Probe+0x138>)
 8006360:	6892      	ldr	r2, [r2, #8]
 8006362:	4610      	mov	r0, r2
 8006364:	4798      	blx	r3
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <IIS2MDC_0_Probe+0x10c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800636c:	f06f 0304 	mvn.w	r3, #4
 8006370:	647b      	str	r3, [r7, #68]	; 0x44
 8006372:	e001      	b.n	8006378 <IIS2MDC_0_Probe+0x110>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006374:	2300      	movs	r3, #0
 8006376:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
  }
  return ret;
 8006378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800637a:	4618      	mov	r0, r3
 800637c:	3748      	adds	r7, #72	; 0x48
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	08001a35 	.word	0x08001a35
 8006388:	08001a99 	.word	0x08001a99
 800638c:	08001b4d 	.word	0x08001b4d
 8006390:	08001ae9 	.word	0x08001ae9
 8006394:	08001bb1 	.word	0x08001bb1
 8006398:	200003d8 	.word	0x200003d8
 800639c:	20000368 	.word	0x20000368
 80063a0:	2000032c 	.word	0x2000032c
 80063a4:	2000035c 	.word	0x2000035c
 80063a8:	20000038 	.word	0x20000038
 80063ac:	200000c4 	.word	0x200000c4
 80063b0:	20000338 	.word	0x20000338
 80063b4:	20000048 	.word	0x20000048

080063b8 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	4603      	mov	r3, r0
 80063c0:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	4a04      	ldr	r2, [pc, #16]	; (80063d8 <BSP_LED_Init+0x20>)
 80063c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ca:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	0800b520 	.word	0x0800b520

080063dc <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
}
 80063e0:	bf00      	nop
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
	...

080063ec <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	4603      	mov	r3, r0
 80063f4:	460a      	mov	r2, r1
 80063f6:	71fb      	strb	r3, [r7, #7]
 80063f8:	4613      	mov	r3, r2
 80063fa:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80063fc:	2300      	movs	r3, #0
 80063fe:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	4a1f      	ldr	r2, [pc, #124]	; (8006480 <BSP_PB_Init+0x94>)
 8006404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006408:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800640a:	79bb      	ldrb	r3, [r7, #6]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d132      	bne.n	8006476 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8006410:	79fb      	ldrb	r3, [r7, #7]
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	4a1b      	ldr	r2, [pc, #108]	; (8006484 <BSP_PB_Init+0x98>)
 8006416:	441a      	add	r2, r3
 8006418:	79fb      	ldrb	r3, [r7, #7]
 800641a:	491b      	ldr	r1, [pc, #108]	; (8006488 <BSP_PB_Init+0x9c>)
 800641c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006420:	4619      	mov	r1, r3
 8006422:	4610      	mov	r0, r2
 8006424:	f000 fb03 	bl	8006a2e <HAL_EXTI_GetHandle>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800642e:	f06f 0303 	mvn.w	r3, #3
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	e01f      	b.n	8006476 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8006436:	79fb      	ldrb	r3, [r7, #7]
 8006438:	00db      	lsls	r3, r3, #3
 800643a:	4a12      	ldr	r2, [pc, #72]	; (8006484 <BSP_PB_Init+0x98>)
 800643c:	1898      	adds	r0, r3, r2
 800643e:	79fb      	ldrb	r3, [r7, #7]
 8006440:	4a12      	ldr	r2, [pc, #72]	; (800648c <BSP_PB_Init+0xa0>)
 8006442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006446:	461a      	mov	r2, r3
 8006448:	2100      	movs	r1, #0
 800644a:	f000 fad6 	bl	80069fa <HAL_EXTI_RegisterCallback>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006454:	f06f 0303 	mvn.w	r3, #3
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	e00c      	b.n	8006476 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800645c:	2028      	movs	r0, #40	; 0x28
 800645e:	79fb      	ldrb	r3, [r7, #7]
 8006460:	4a0b      	ldr	r2, [pc, #44]	; (8006490 <BSP_PB_Init+0xa4>)
 8006462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006466:	2200      	movs	r2, #0
 8006468:	4619      	mov	r1, r3
 800646a:	f000 fa90 	bl	800698e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800646e:	2328      	movs	r3, #40	; 0x28
 8006470:	4618      	mov	r0, r3
 8006472:	f000 faa8 	bl	80069c6 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8006476:	68fb      	ldr	r3, [r7, #12]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	0800b524 	.word	0x0800b524
 8006484:	200000dc 	.word	0x200000dc
 8006488:	0800b528 	.word	0x0800b528
 800648c:	0800b52c 	.word	0x0800b52c
 8006490:	0800b530 	.word	0x0800b530

08006494 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	4603      	mov	r3, r0
 800649c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	4a09      	ldr	r2, [pc, #36]	; (80064c8 <BSP_PB_GetState+0x34>)
 80064a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80064aa:	4611      	mov	r1, r2
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fd5f 	bl	8006f70 <HAL_GPIO_ReadPin>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	bf0c      	ite	eq
 80064b8:	2301      	moveq	r3, #1
 80064ba:	2300      	movne	r3, #0
 80064bc:	b2db      	uxtb	r3, r3
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	200000d8 	.word	0x200000d8

080064cc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80064d0:	2000      	movs	r0, #0
 80064d2:	f7fa fe77 	bl	80011c4 <BSP_PB_Callback>
}
 80064d6:	bf00      	nop
 80064d8:	bd80      	pop	{r7, pc}

080064da <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80064da:	b480      	push	{r7}
 80064dc:	af00      	add	r7, sp, #0
}
 80064de:	bf00      	nop
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	4603      	mov	r3, r0
 80064f0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d903      	bls.n	8006504 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80064fc:	f06f 0301 	mvn.w	r3, #1
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	e025      	b.n	8006550 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8006504:	79fb      	ldrb	r3, [r7, #7]
 8006506:	79fa      	ldrb	r2, [r7, #7]
 8006508:	4914      	ldr	r1, [pc, #80]	; (800655c <BSP_COM_Init+0x74>)
 800650a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800650e:	4814      	ldr	r0, [pc, #80]	; (8006560 <BSP_COM_Init+0x78>)
 8006510:	4613      	mov	r3, r2
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4403      	add	r3, r0
 800651a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800651c:	79fa      	ldrb	r2, [r7, #7]
 800651e:	4613      	mov	r3, r2
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4a0e      	ldr	r2, [pc, #56]	; (8006560 <BSP_COM_Init+0x78>)
 8006528:	4413      	add	r3, r2
 800652a:	4618      	mov	r0, r3
 800652c:	f000 f864 	bl	80065f8 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8006530:	79fa      	ldrb	r2, [r7, #7]
 8006532:	4613      	mov	r3, r2
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4a09      	ldr	r2, [pc, #36]	; (8006560 <BSP_COM_Init+0x78>)
 800653c:	4413      	add	r3, r2
 800653e:	4618      	mov	r0, r3
 8006540:	f000 f810 	bl	8006564 <MX_USART2_UART_Init>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800654a:	f06f 0303 	mvn.w	r3, #3
 800654e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8006550:	68fb      	ldr	r3, [r7, #12]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	200000e4 	.word	0x200000e4
 8006560:	20000404 	.word	0x20000404

08006564 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a12      	ldr	r2, [pc, #72]	; (80065bc <MX_USART2_UART_Init+0x58>)
 8006574:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800657c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	220c      	movs	r2, #12
 8006594:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f002 f9b2 	bl	800890c <HAL_UART_Init>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	40004400 	.word	0x40004400

080065c0 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80065c8:	4b09      	ldr	r3, [pc, #36]	; (80065f0 <__io_putchar+0x30>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	4613      	mov	r3, r2
 80065d0:	011b      	lsls	r3, r3, #4
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4a07      	ldr	r2, [pc, #28]	; (80065f4 <__io_putchar+0x34>)
 80065d8:	1898      	adds	r0, r3, r2
 80065da:	1d39      	adds	r1, r7, #4
 80065dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065e0:	2201      	movs	r2, #1
 80065e2:	f002 f9ea 	bl	80089ba <HAL_UART_Transmit>
  return ch;
 80065e6:	687b      	ldr	r3, [r7, #4]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20000448 	.word	0x20000448
 80065f4:	20000404 	.word	0x20000404

080065f8 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08a      	sub	sp, #40	; 0x28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006600:	2300      	movs	r3, #0
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	4b1e      	ldr	r3, [pc, #120]	; (8006680 <USART2_MspInit+0x88>)
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	4a1d      	ldr	r2, [pc, #116]	; (8006680 <USART2_MspInit+0x88>)
 800660a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800660e:	6413      	str	r3, [r2, #64]	; 0x40
 8006610:	4b1b      	ldr	r3, [pc, #108]	; (8006680 <USART2_MspInit+0x88>)
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800661c:	2300      	movs	r3, #0
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	4b17      	ldr	r3, [pc, #92]	; (8006680 <USART2_MspInit+0x88>)
 8006622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006624:	4a16      	ldr	r2, [pc, #88]	; (8006680 <USART2_MspInit+0x88>)
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	6313      	str	r3, [r2, #48]	; 0x30
 800662c:	4b14      	ldr	r3, [pc, #80]	; (8006680 <USART2_MspInit+0x88>)
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8006638:	2304      	movs	r3, #4
 800663a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800663c:	2302      	movs	r3, #2
 800663e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006640:	2300      	movs	r3, #0
 8006642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006644:	2303      	movs	r3, #3
 8006646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8006648:	2307      	movs	r3, #7
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800664c:	f107 0314 	add.w	r3, r7, #20
 8006650:	4619      	mov	r1, r3
 8006652:	480c      	ldr	r0, [pc, #48]	; (8006684 <USART2_MspInit+0x8c>)
 8006654:	f000 fa24 	bl	8006aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8006658:	2308      	movs	r3, #8
 800665a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800665c:	2302      	movs	r3, #2
 800665e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006660:	2300      	movs	r3, #0
 8006662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006664:	2303      	movs	r3, #3
 8006666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8006668:	2307      	movs	r3, #7
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800666c:	f107 0314 	add.w	r3, r7, #20
 8006670:	4619      	mov	r1, r3
 8006672:	4804      	ldr	r0, [pc, #16]	; (8006684 <USART2_MspInit+0x8c>)
 8006674:	f000 fa14 	bl	8006aa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8006678:	bf00      	nop
 800667a:	3728      	adds	r7, #40	; 0x28
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40023800 	.word	0x40023800
 8006684:	40020000 	.word	0x40020000

08006688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006688:	b480      	push	{r7}
 800668a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800668c:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <SystemInit+0x20>)
 800668e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006692:	4a05      	ldr	r2, [pc, #20]	; (80066a8 <SystemInit+0x20>)
 8006694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800669c:	bf00      	nop
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	e000ed00 	.word	0xe000ed00

080066ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80066b0:	4b0e      	ldr	r3, [pc, #56]	; (80066ec <HAL_Init+0x40>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a0d      	ldr	r2, [pc, #52]	; (80066ec <HAL_Init+0x40>)
 80066b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80066bc:	4b0b      	ldr	r3, [pc, #44]	; (80066ec <HAL_Init+0x40>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a0a      	ldr	r2, [pc, #40]	; (80066ec <HAL_Init+0x40>)
 80066c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066c8:	4b08      	ldr	r3, [pc, #32]	; (80066ec <HAL_Init+0x40>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a07      	ldr	r2, [pc, #28]	; (80066ec <HAL_Init+0x40>)
 80066ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80066d4:	2003      	movs	r0, #3
 80066d6:	f000 f94f 	bl	8006978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80066da:	2000      	movs	r0, #0
 80066dc:	f000 f808 	bl	80066f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80066e0:	f7fb f94c 	bl	800197c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40023c00 	.word	0x40023c00

080066f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80066f8:	4b12      	ldr	r3, [pc, #72]	; (8006744 <HAL_InitTick+0x54>)
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	4b12      	ldr	r3, [pc, #72]	; (8006748 <HAL_InitTick+0x58>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	4619      	mov	r1, r3
 8006702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006706:	fbb3 f3f1 	udiv	r3, r3, r1
 800670a:	fbb2 f3f3 	udiv	r3, r2, r3
 800670e:	4618      	mov	r0, r3
 8006710:	f000 f967 	bl	80069e2 <HAL_SYSTICK_Config>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e00e      	b.n	800673c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b0f      	cmp	r3, #15
 8006722:	d80a      	bhi.n	800673a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006724:	2200      	movs	r2, #0
 8006726:	6879      	ldr	r1, [r7, #4]
 8006728:	f04f 30ff 	mov.w	r0, #4294967295
 800672c:	f000 f92f 	bl	800698e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006730:	4a06      	ldr	r2, [pc, #24]	; (800674c <HAL_InitTick+0x5c>)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	e000      	b.n	800673c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	200000e8 	.word	0x200000e8
 8006748:	200000f0 	.word	0x200000f0
 800674c:	200000ec 	.word	0x200000ec

08006750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006750:	b480      	push	{r7}
 8006752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006754:	4b06      	ldr	r3, [pc, #24]	; (8006770 <HAL_IncTick+0x20>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	461a      	mov	r2, r3
 800675a:	4b06      	ldr	r3, [pc, #24]	; (8006774 <HAL_IncTick+0x24>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4413      	add	r3, r2
 8006760:	4a04      	ldr	r2, [pc, #16]	; (8006774 <HAL_IncTick+0x24>)
 8006762:	6013      	str	r3, [r2, #0]
}
 8006764:	bf00      	nop
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	200000f0 	.word	0x200000f0
 8006774:	2000044c 	.word	0x2000044c

08006778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006778:	b480      	push	{r7}
 800677a:	af00      	add	r7, sp, #0
  return uwTick;
 800677c:	4b03      	ldr	r3, [pc, #12]	; (800678c <HAL_GetTick+0x14>)
 800677e:	681b      	ldr	r3, [r3, #0]
}
 8006780:	4618      	mov	r0, r3
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	2000044c 	.word	0x2000044c

08006790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006798:	f7ff ffee 	bl	8006778 <HAL_GetTick>
 800679c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a8:	d005      	beq.n	80067b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067aa:	4b0a      	ldr	r3, [pc, #40]	; (80067d4 <HAL_Delay+0x44>)
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4413      	add	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80067b6:	bf00      	nop
 80067b8:	f7ff ffde 	bl	8006778 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d8f7      	bhi.n	80067b8 <HAL_Delay+0x28>
  {
  }
}
 80067c8:	bf00      	nop
 80067ca:	bf00      	nop
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	200000f0 	.word	0x200000f0

080067d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067e8:	4b0c      	ldr	r3, [pc, #48]	; (800681c <__NVIC_SetPriorityGrouping+0x44>)
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80067f4:	4013      	ands	r3, r2
 80067f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800680a:	4a04      	ldr	r2, [pc, #16]	; (800681c <__NVIC_SetPriorityGrouping+0x44>)
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	60d3      	str	r3, [r2, #12]
}
 8006810:	bf00      	nop
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	e000ed00 	.word	0xe000ed00

08006820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006824:	4b04      	ldr	r3, [pc, #16]	; (8006838 <__NVIC_GetPriorityGrouping+0x18>)
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	0a1b      	lsrs	r3, r3, #8
 800682a:	f003 0307 	and.w	r3, r3, #7
}
 800682e:	4618      	mov	r0, r3
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	e000ed00 	.word	0xe000ed00

0800683c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800684a:	2b00      	cmp	r3, #0
 800684c:	db0b      	blt.n	8006866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	f003 021f 	and.w	r2, r3, #31
 8006854:	4907      	ldr	r1, [pc, #28]	; (8006874 <__NVIC_EnableIRQ+0x38>)
 8006856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	2001      	movs	r0, #1
 800685e:	fa00 f202 	lsl.w	r2, r0, r2
 8006862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	e000e100 	.word	0xe000e100

08006878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	4603      	mov	r3, r0
 8006880:	6039      	str	r1, [r7, #0]
 8006882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006888:	2b00      	cmp	r3, #0
 800688a:	db0a      	blt.n	80068a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	b2da      	uxtb	r2, r3
 8006890:	490c      	ldr	r1, [pc, #48]	; (80068c4 <__NVIC_SetPriority+0x4c>)
 8006892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006896:	0112      	lsls	r2, r2, #4
 8006898:	b2d2      	uxtb	r2, r2
 800689a:	440b      	add	r3, r1
 800689c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068a0:	e00a      	b.n	80068b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	4908      	ldr	r1, [pc, #32]	; (80068c8 <__NVIC_SetPriority+0x50>)
 80068a8:	79fb      	ldrb	r3, [r7, #7]
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	3b04      	subs	r3, #4
 80068b0:	0112      	lsls	r2, r2, #4
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	440b      	add	r3, r1
 80068b6:	761a      	strb	r2, [r3, #24]
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	e000e100 	.word	0xe000e100
 80068c8:	e000ed00 	.word	0xe000ed00

080068cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b089      	sub	sp, #36	; 0x24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f003 0307 	and.w	r3, r3, #7
 80068de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	f1c3 0307 	rsb	r3, r3, #7
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	bf28      	it	cs
 80068ea:	2304      	movcs	r3, #4
 80068ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	3304      	adds	r3, #4
 80068f2:	2b06      	cmp	r3, #6
 80068f4:	d902      	bls.n	80068fc <NVIC_EncodePriority+0x30>
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	3b03      	subs	r3, #3
 80068fa:	e000      	b.n	80068fe <NVIC_EncodePriority+0x32>
 80068fc:	2300      	movs	r3, #0
 80068fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006900:	f04f 32ff 	mov.w	r2, #4294967295
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	fa02 f303 	lsl.w	r3, r2, r3
 800690a:	43da      	mvns	r2, r3
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	401a      	ands	r2, r3
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006914:	f04f 31ff 	mov.w	r1, #4294967295
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	fa01 f303 	lsl.w	r3, r1, r3
 800691e:	43d9      	mvns	r1, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006924:	4313      	orrs	r3, r2
         );
}
 8006926:	4618      	mov	r0, r3
 8006928:	3724      	adds	r7, #36	; 0x24
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
	...

08006934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	3b01      	subs	r3, #1
 8006940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006944:	d301      	bcc.n	800694a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006946:	2301      	movs	r3, #1
 8006948:	e00f      	b.n	800696a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800694a:	4a0a      	ldr	r2, [pc, #40]	; (8006974 <SysTick_Config+0x40>)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3b01      	subs	r3, #1
 8006950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006952:	210f      	movs	r1, #15
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	f7ff ff8e 	bl	8006878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800695c:	4b05      	ldr	r3, [pc, #20]	; (8006974 <SysTick_Config+0x40>)
 800695e:	2200      	movs	r2, #0
 8006960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006962:	4b04      	ldr	r3, [pc, #16]	; (8006974 <SysTick_Config+0x40>)
 8006964:	2207      	movs	r2, #7
 8006966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	e000e010 	.word	0xe000e010

08006978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff ff29 	bl	80067d8 <__NVIC_SetPriorityGrouping>
}
 8006986:	bf00      	nop
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800698e:	b580      	push	{r7, lr}
 8006990:	b086      	sub	sp, #24
 8006992:	af00      	add	r7, sp, #0
 8006994:	4603      	mov	r3, r0
 8006996:	60b9      	str	r1, [r7, #8]
 8006998:	607a      	str	r2, [r7, #4]
 800699a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80069a0:	f7ff ff3e 	bl	8006820 <__NVIC_GetPriorityGrouping>
 80069a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	68b9      	ldr	r1, [r7, #8]
 80069aa:	6978      	ldr	r0, [r7, #20]
 80069ac:	f7ff ff8e 	bl	80068cc <NVIC_EncodePriority>
 80069b0:	4602      	mov	r2, r0
 80069b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069b6:	4611      	mov	r1, r2
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7ff ff5d 	bl	8006878 <__NVIC_SetPriority>
}
 80069be:	bf00      	nop
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b082      	sub	sp, #8
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	4603      	mov	r3, r0
 80069ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff ff31 	bl	800683c <__NVIC_EnableIRQ>
}
 80069da:	bf00      	nop
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b082      	sub	sp, #8
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff ffa2 	bl	8006934 <SysTick_Config>
 80069f0:	4603      	mov	r3, r0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80069fa:	b480      	push	{r7}
 80069fc:	b087      	sub	sp, #28
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	460b      	mov	r3, r1
 8006a04:	607a      	str	r2, [r7, #4]
 8006a06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8006a0c:	7afb      	ldrb	r3, [r7, #11]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d103      	bne.n	8006a1a <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	605a      	str	r2, [r3, #4]
      break;
 8006a18:	e002      	b.n	8006a20 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a1e:	bf00      	nop
  }

  return status;
 8006a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e003      	b.n	8006a4a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006a48:	2300      	movs	r3, #0
  }
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
	...

08006a58 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 031f 	and.w	r3, r3, #31
 8006a68:	2201      	movs	r2, #1
 8006a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8006a70:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <HAL_EXTI_IRQHandler+0x44>)
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4013      	ands	r3, r2
 8006a78:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d009      	beq.n	8006a94 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8006a80:	4a06      	ldr	r2, [pc, #24]	; (8006a9c <HAL_EXTI_IRQHandler+0x44>)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	4798      	blx	r3
    }
  }
}
 8006a94:	bf00      	nop
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	40013c00 	.word	0x40013c00

08006aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b089      	sub	sp, #36	; 0x24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	61fb      	str	r3, [r7, #28]
 8006aba:	e159      	b.n	8006d70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006abc:	2201      	movs	r2, #1
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	4013      	ands	r3, r2
 8006ace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	f040 8148 	bne.w	8006d6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d005      	beq.n	8006af2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d130      	bne.n	8006b54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	2203      	movs	r2, #3
 8006afe:	fa02 f303 	lsl.w	r3, r2, r3
 8006b02:	43db      	mvns	r3, r3
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	4013      	ands	r3, r2
 8006b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	fa02 f303 	lsl.w	r3, r2, r3
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b28:	2201      	movs	r2, #1
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b30:	43db      	mvns	r3, r3
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	4013      	ands	r3, r2
 8006b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	091b      	lsrs	r3, r3, #4
 8006b3e:	f003 0201 	and.w	r2, r3, #1
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	fa02 f303 	lsl.w	r3, r2, r3
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f003 0303 	and.w	r3, r3, #3
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d017      	beq.n	8006b90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	2203      	movs	r2, #3
 8006b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b70:	43db      	mvns	r3, r3
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	4013      	ands	r3, r2
 8006b76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	fa02 f303 	lsl.w	r3, r2, r3
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f003 0303 	and.w	r3, r3, #3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d123      	bne.n	8006be4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	08da      	lsrs	r2, r3, #3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	3208      	adds	r2, #8
 8006ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	220f      	movs	r2, #15
 8006bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb8:	43db      	mvns	r3, r3
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	691a      	ldr	r2, [r3, #16]
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	f003 0307 	and.w	r3, r3, #7
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	08da      	lsrs	r2, r3, #3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	3208      	adds	r2, #8
 8006bde:	69b9      	ldr	r1, [r7, #24]
 8006be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	2203      	movs	r2, #3
 8006bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf4:	43db      	mvns	r3, r3
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f003 0203 	and.w	r2, r3, #3
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 80a2 	beq.w	8006d6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c26:	2300      	movs	r3, #0
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	4b57      	ldr	r3, [pc, #348]	; (8006d88 <HAL_GPIO_Init+0x2e8>)
 8006c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2e:	4a56      	ldr	r2, [pc, #344]	; (8006d88 <HAL_GPIO_Init+0x2e8>)
 8006c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c34:	6453      	str	r3, [r2, #68]	; 0x44
 8006c36:	4b54      	ldr	r3, [pc, #336]	; (8006d88 <HAL_GPIO_Init+0x2e8>)
 8006c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c3e:	60fb      	str	r3, [r7, #12]
 8006c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c42:	4a52      	ldr	r2, [pc, #328]	; (8006d8c <HAL_GPIO_Init+0x2ec>)
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	089b      	lsrs	r3, r3, #2
 8006c48:	3302      	adds	r3, #2
 8006c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	220f      	movs	r2, #15
 8006c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5e:	43db      	mvns	r3, r3
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	4013      	ands	r3, r2
 8006c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a49      	ldr	r2, [pc, #292]	; (8006d90 <HAL_GPIO_Init+0x2f0>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d019      	beq.n	8006ca2 <HAL_GPIO_Init+0x202>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a48      	ldr	r2, [pc, #288]	; (8006d94 <HAL_GPIO_Init+0x2f4>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d013      	beq.n	8006c9e <HAL_GPIO_Init+0x1fe>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a47      	ldr	r2, [pc, #284]	; (8006d98 <HAL_GPIO_Init+0x2f8>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d00d      	beq.n	8006c9a <HAL_GPIO_Init+0x1fa>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a46      	ldr	r2, [pc, #280]	; (8006d9c <HAL_GPIO_Init+0x2fc>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d007      	beq.n	8006c96 <HAL_GPIO_Init+0x1f6>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a45      	ldr	r2, [pc, #276]	; (8006da0 <HAL_GPIO_Init+0x300>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d101      	bne.n	8006c92 <HAL_GPIO_Init+0x1f2>
 8006c8e:	2304      	movs	r3, #4
 8006c90:	e008      	b.n	8006ca4 <HAL_GPIO_Init+0x204>
 8006c92:	2307      	movs	r3, #7
 8006c94:	e006      	b.n	8006ca4 <HAL_GPIO_Init+0x204>
 8006c96:	2303      	movs	r3, #3
 8006c98:	e004      	b.n	8006ca4 <HAL_GPIO_Init+0x204>
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	e002      	b.n	8006ca4 <HAL_GPIO_Init+0x204>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e000      	b.n	8006ca4 <HAL_GPIO_Init+0x204>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	69fa      	ldr	r2, [r7, #28]
 8006ca6:	f002 0203 	and.w	r2, r2, #3
 8006caa:	0092      	lsls	r2, r2, #2
 8006cac:	4093      	lsls	r3, r2
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006cb4:	4935      	ldr	r1, [pc, #212]	; (8006d8c <HAL_GPIO_Init+0x2ec>)
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	089b      	lsrs	r3, r3, #2
 8006cba:	3302      	adds	r3, #2
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006cc2:	4b38      	ldr	r3, [pc, #224]	; (8006da4 <HAL_GPIO_Init+0x304>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	43db      	mvns	r3, r3
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006ce6:	4a2f      	ldr	r2, [pc, #188]	; (8006da4 <HAL_GPIO_Init+0x304>)
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006cec:	4b2d      	ldr	r3, [pc, #180]	; (8006da4 <HAL_GPIO_Init+0x304>)
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	43db      	mvns	r3, r3
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d10:	4a24      	ldr	r2, [pc, #144]	; (8006da4 <HAL_GPIO_Init+0x304>)
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006d16:	4b23      	ldr	r3, [pc, #140]	; (8006da4 <HAL_GPIO_Init+0x304>)
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	43db      	mvns	r3, r3
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	4013      	ands	r3, r2
 8006d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d3a:	4a1a      	ldr	r2, [pc, #104]	; (8006da4 <HAL_GPIO_Init+0x304>)
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d40:	4b18      	ldr	r3, [pc, #96]	; (8006da4 <HAL_GPIO_Init+0x304>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	43db      	mvns	r3, r3
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d64:	4a0f      	ldr	r2, [pc, #60]	; (8006da4 <HAL_GPIO_Init+0x304>)
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	61fb      	str	r3, [r7, #28]
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	2b0f      	cmp	r3, #15
 8006d74:	f67f aea2 	bls.w	8006abc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006d78:	bf00      	nop
 8006d7a:	bf00      	nop
 8006d7c:	3724      	adds	r7, #36	; 0x24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	40023800 	.word	0x40023800
 8006d8c:	40013800 	.word	0x40013800
 8006d90:	40020000 	.word	0x40020000
 8006d94:	40020400 	.word	0x40020400
 8006d98:	40020800 	.word	0x40020800
 8006d9c:	40020c00 	.word	0x40020c00
 8006da0:	40021000 	.word	0x40021000
 8006da4:	40013c00 	.word	0x40013c00

08006da8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	e0bb      	b.n	8006f3c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dcc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	f040 80ab 	bne.w	8006f36 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006de0:	4a5c      	ldr	r2, [pc, #368]	; (8006f54 <HAL_GPIO_DeInit+0x1ac>)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	089b      	lsrs	r3, r3, #2
 8006de6:	3302      	adds	r3, #2
 8006de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dec:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f003 0303 	and.w	r3, r3, #3
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	220f      	movs	r2, #15
 8006df8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a54      	ldr	r2, [pc, #336]	; (8006f58 <HAL_GPIO_DeInit+0x1b0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d019      	beq.n	8006e3e <HAL_GPIO_DeInit+0x96>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a53      	ldr	r2, [pc, #332]	; (8006f5c <HAL_GPIO_DeInit+0x1b4>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d013      	beq.n	8006e3a <HAL_GPIO_DeInit+0x92>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a52      	ldr	r2, [pc, #328]	; (8006f60 <HAL_GPIO_DeInit+0x1b8>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d00d      	beq.n	8006e36 <HAL_GPIO_DeInit+0x8e>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a51      	ldr	r2, [pc, #324]	; (8006f64 <HAL_GPIO_DeInit+0x1bc>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d007      	beq.n	8006e32 <HAL_GPIO_DeInit+0x8a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a50      	ldr	r2, [pc, #320]	; (8006f68 <HAL_GPIO_DeInit+0x1c0>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d101      	bne.n	8006e2e <HAL_GPIO_DeInit+0x86>
 8006e2a:	2304      	movs	r3, #4
 8006e2c:	e008      	b.n	8006e40 <HAL_GPIO_DeInit+0x98>
 8006e2e:	2307      	movs	r3, #7
 8006e30:	e006      	b.n	8006e40 <HAL_GPIO_DeInit+0x98>
 8006e32:	2303      	movs	r3, #3
 8006e34:	e004      	b.n	8006e40 <HAL_GPIO_DeInit+0x98>
 8006e36:	2302      	movs	r3, #2
 8006e38:	e002      	b.n	8006e40 <HAL_GPIO_DeInit+0x98>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e000      	b.n	8006e40 <HAL_GPIO_DeInit+0x98>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	f002 0203 	and.w	r2, r2, #3
 8006e46:	0092      	lsls	r2, r2, #2
 8006e48:	4093      	lsls	r3, r2
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d132      	bne.n	8006eb6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006e50:	4b46      	ldr	r3, [pc, #280]	; (8006f6c <HAL_GPIO_DeInit+0x1c4>)
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	43db      	mvns	r3, r3
 8006e58:	4944      	ldr	r1, [pc, #272]	; (8006f6c <HAL_GPIO_DeInit+0x1c4>)
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006e5e:	4b43      	ldr	r3, [pc, #268]	; (8006f6c <HAL_GPIO_DeInit+0x1c4>)
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	43db      	mvns	r3, r3
 8006e66:	4941      	ldr	r1, [pc, #260]	; (8006f6c <HAL_GPIO_DeInit+0x1c4>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006e6c:	4b3f      	ldr	r3, [pc, #252]	; (8006f6c <HAL_GPIO_DeInit+0x1c4>)
 8006e6e:	68da      	ldr	r2, [r3, #12]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	43db      	mvns	r3, r3
 8006e74:	493d      	ldr	r1, [pc, #244]	; (8006f6c <HAL_GPIO_DeInit+0x1c4>)
 8006e76:	4013      	ands	r3, r2
 8006e78:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006e7a:	4b3c      	ldr	r3, [pc, #240]	; (8006f6c <HAL_GPIO_DeInit+0x1c4>)
 8006e7c:	689a      	ldr	r2, [r3, #8]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	43db      	mvns	r3, r3
 8006e82:	493a      	ldr	r1, [pc, #232]	; (8006f6c <HAL_GPIO_DeInit+0x1c4>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f003 0303 	and.w	r3, r3, #3
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	220f      	movs	r2, #15
 8006e92:	fa02 f303 	lsl.w	r3, r2, r3
 8006e96:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006e98:	4a2e      	ldr	r2, [pc, #184]	; (8006f54 <HAL_GPIO_DeInit+0x1ac>)
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	089b      	lsrs	r3, r3, #2
 8006e9e:	3302      	adds	r3, #2
 8006ea0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	43da      	mvns	r2, r3
 8006ea8:	482a      	ldr	r0, [pc, #168]	; (8006f54 <HAL_GPIO_DeInit+0x1ac>)
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	089b      	lsrs	r3, r3, #2
 8006eae:	400a      	ands	r2, r1
 8006eb0:	3302      	adds	r3, #2
 8006eb2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	2103      	movs	r1, #3
 8006ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec4:	43db      	mvns	r3, r3
 8006ec6:	401a      	ands	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	08da      	lsrs	r2, r3, #3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3208      	adds	r2, #8
 8006ed4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f003 0307 	and.w	r3, r3, #7
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	220f      	movs	r2, #15
 8006ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee6:	43db      	mvns	r3, r3
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	08d2      	lsrs	r2, r2, #3
 8006eec:	4019      	ands	r1, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	3208      	adds	r2, #8
 8006ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	2103      	movs	r1, #3
 8006f00:	fa01 f303 	lsl.w	r3, r1, r3
 8006f04:	43db      	mvns	r3, r3
 8006f06:	401a      	ands	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	2101      	movs	r1, #1
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	fa01 f303 	lsl.w	r3, r1, r3
 8006f18:	43db      	mvns	r3, r3
 8006f1a:	401a      	ands	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	2103      	movs	r1, #3
 8006f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2e:	43db      	mvns	r3, r3
 8006f30:	401a      	ands	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	617b      	str	r3, [r7, #20]
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2b0f      	cmp	r3, #15
 8006f40:	f67f af40 	bls.w	8006dc4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40013800 	.word	0x40013800
 8006f58:	40020000 	.word	0x40020000
 8006f5c:	40020400 	.word	0x40020400
 8006f60:	40020800 	.word	0x40020800
 8006f64:	40020c00 	.word	0x40020c00
 8006f68:	40021000 	.word	0x40021000
 8006f6c:	40013c00 	.word	0x40013c00

08006f70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	460b      	mov	r3, r1
 8006f7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691a      	ldr	r2, [r3, #16]
 8006f80:	887b      	ldrh	r3, [r7, #2]
 8006f82:	4013      	ands	r3, r2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	73fb      	strb	r3, [r7, #15]
 8006f8c:	e001      	b.n	8006f92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e12b      	b.n	800720a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d106      	bne.n	8006fcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f95d 	bl	8007286 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2224      	movs	r2, #36	; 0x24
 8006fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0201 	bic.w	r2, r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ff2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007002:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007004:	f001 fc5a 	bl	80088bc <HAL_RCC_GetPCLK1Freq>
 8007008:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	4a81      	ldr	r2, [pc, #516]	; (8007214 <HAL_I2C_Init+0x274>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d807      	bhi.n	8007024 <HAL_I2C_Init+0x84>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4a80      	ldr	r2, [pc, #512]	; (8007218 <HAL_I2C_Init+0x278>)
 8007018:	4293      	cmp	r3, r2
 800701a:	bf94      	ite	ls
 800701c:	2301      	movls	r3, #1
 800701e:	2300      	movhi	r3, #0
 8007020:	b2db      	uxtb	r3, r3
 8007022:	e006      	b.n	8007032 <HAL_I2C_Init+0x92>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4a7d      	ldr	r2, [pc, #500]	; (800721c <HAL_I2C_Init+0x27c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	bf94      	ite	ls
 800702c:	2301      	movls	r3, #1
 800702e:	2300      	movhi	r3, #0
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e0e7      	b.n	800720a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4a78      	ldr	r2, [pc, #480]	; (8007220 <HAL_I2C_Init+0x280>)
 800703e:	fba2 2303 	umull	r2, r3, r2, r3
 8007042:	0c9b      	lsrs	r3, r3, #18
 8007044:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	430a      	orrs	r2, r1
 8007058:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	4a6a      	ldr	r2, [pc, #424]	; (8007214 <HAL_I2C_Init+0x274>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d802      	bhi.n	8007074 <HAL_I2C_Init+0xd4>
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	3301      	adds	r3, #1
 8007072:	e009      	b.n	8007088 <HAL_I2C_Init+0xe8>
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800707a:	fb02 f303 	mul.w	r3, r2, r3
 800707e:	4a69      	ldr	r2, [pc, #420]	; (8007224 <HAL_I2C_Init+0x284>)
 8007080:	fba2 2303 	umull	r2, r3, r2, r3
 8007084:	099b      	lsrs	r3, r3, #6
 8007086:	3301      	adds	r3, #1
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6812      	ldr	r2, [r2, #0]
 800708c:	430b      	orrs	r3, r1
 800708e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800709a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	495c      	ldr	r1, [pc, #368]	; (8007214 <HAL_I2C_Init+0x274>)
 80070a4:	428b      	cmp	r3, r1
 80070a6:	d819      	bhi.n	80070dc <HAL_I2C_Init+0x13c>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	1e59      	subs	r1, r3, #1
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	005b      	lsls	r3, r3, #1
 80070b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80070b6:	1c59      	adds	r1, r3, #1
 80070b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80070bc:	400b      	ands	r3, r1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00a      	beq.n	80070d8 <HAL_I2C_Init+0x138>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	1e59      	subs	r1, r3, #1
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80070d0:	3301      	adds	r3, #1
 80070d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070d6:	e051      	b.n	800717c <HAL_I2C_Init+0x1dc>
 80070d8:	2304      	movs	r3, #4
 80070da:	e04f      	b.n	800717c <HAL_I2C_Init+0x1dc>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d111      	bne.n	8007108 <HAL_I2C_Init+0x168>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	1e58      	subs	r0, r3, #1
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6859      	ldr	r1, [r3, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	005b      	lsls	r3, r3, #1
 80070f0:	440b      	add	r3, r1
 80070f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80070f6:	3301      	adds	r3, #1
 80070f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bf0c      	ite	eq
 8007100:	2301      	moveq	r3, #1
 8007102:	2300      	movne	r3, #0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	e012      	b.n	800712e <HAL_I2C_Init+0x18e>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	1e58      	subs	r0, r3, #1
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6859      	ldr	r1, [r3, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	440b      	add	r3, r1
 8007116:	0099      	lsls	r1, r3, #2
 8007118:	440b      	add	r3, r1
 800711a:	fbb0 f3f3 	udiv	r3, r0, r3
 800711e:	3301      	adds	r3, #1
 8007120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007124:	2b00      	cmp	r3, #0
 8007126:	bf0c      	ite	eq
 8007128:	2301      	moveq	r3, #1
 800712a:	2300      	movne	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <HAL_I2C_Init+0x196>
 8007132:	2301      	movs	r3, #1
 8007134:	e022      	b.n	800717c <HAL_I2C_Init+0x1dc>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10e      	bne.n	800715c <HAL_I2C_Init+0x1bc>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1e58      	subs	r0, r3, #1
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6859      	ldr	r1, [r3, #4]
 8007146:	460b      	mov	r3, r1
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	440b      	add	r3, r1
 800714c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007150:	3301      	adds	r3, #1
 8007152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800715a:	e00f      	b.n	800717c <HAL_I2C_Init+0x1dc>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	1e58      	subs	r0, r3, #1
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6859      	ldr	r1, [r3, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	440b      	add	r3, r1
 800716a:	0099      	lsls	r1, r3, #2
 800716c:	440b      	add	r3, r1
 800716e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007172:	3301      	adds	r3, #1
 8007174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007178:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	6809      	ldr	r1, [r1, #0]
 8007180:	4313      	orrs	r3, r2
 8007182:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69da      	ldr	r2, [r3, #28]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	431a      	orrs	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80071aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	6911      	ldr	r1, [r2, #16]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	68d2      	ldr	r2, [r2, #12]
 80071b6:	4311      	orrs	r1, r2
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	6812      	ldr	r2, [r2, #0]
 80071bc:	430b      	orrs	r3, r1
 80071be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	695a      	ldr	r2, [r3, #20]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	431a      	orrs	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0201 	orr.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	000186a0 	.word	0x000186a0
 8007218:	001e847f 	.word	0x001e847f
 800721c:	003d08ff 	.word	0x003d08ff
 8007220:	431bde83 	.word	0x431bde83
 8007224:	10624dd3 	.word	0x10624dd3

08007228 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e021      	b.n	800727e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2224      	movs	r2, #36	; 0x24
 800723e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0201 	bic.w	r2, r2, #1
 8007250:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f821 	bl	800729a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007286:	b480      	push	{r7}
 8007288:	b083      	sub	sp, #12
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800728e:	bf00      	nop
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80072a2:	bf00      	nop
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
	...

080072b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b088      	sub	sp, #32
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	4608      	mov	r0, r1
 80072ba:	4611      	mov	r1, r2
 80072bc:	461a      	mov	r2, r3
 80072be:	4603      	mov	r3, r0
 80072c0:	817b      	strh	r3, [r7, #10]
 80072c2:	460b      	mov	r3, r1
 80072c4:	813b      	strh	r3, [r7, #8]
 80072c6:	4613      	mov	r3, r2
 80072c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80072ca:	f7ff fa55 	bl	8006778 <HAL_GetTick>
 80072ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b20      	cmp	r3, #32
 80072da:	f040 80d9 	bne.w	8007490 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	2319      	movs	r3, #25
 80072e4:	2201      	movs	r2, #1
 80072e6:	496d      	ldr	r1, [pc, #436]	; (800749c <HAL_I2C_Mem_Write+0x1ec>)
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 fc99 	bl	8007c20 <I2C_WaitOnFlagUntilTimeout>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80072f4:	2302      	movs	r3, #2
 80072f6:	e0cc      	b.n	8007492 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d101      	bne.n	8007306 <HAL_I2C_Mem_Write+0x56>
 8007302:	2302      	movs	r3, #2
 8007304:	e0c5      	b.n	8007492 <HAL_I2C_Mem_Write+0x1e2>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b01      	cmp	r3, #1
 800731a:	d007      	beq.n	800732c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0201 	orr.w	r2, r2, #1
 800732a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800733a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2221      	movs	r2, #33	; 0x21
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2240      	movs	r2, #64	; 0x40
 8007348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6a3a      	ldr	r2, [r7, #32]
 8007356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800735c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007362:	b29a      	uxth	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4a4d      	ldr	r2, [pc, #308]	; (80074a0 <HAL_I2C_Mem_Write+0x1f0>)
 800736c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800736e:	88f8      	ldrh	r0, [r7, #6]
 8007370:	893a      	ldrh	r2, [r7, #8]
 8007372:	8979      	ldrh	r1, [r7, #10]
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	4603      	mov	r3, r0
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f000 fad0 	bl	8007924 <I2C_RequestMemoryWrite>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d052      	beq.n	8007430 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e081      	b.n	8007492 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f000 fd1a 	bl	8007dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00d      	beq.n	80073ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	d107      	bne.n	80073b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e06b      	b.n	8007492 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	781a      	ldrb	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d4:	3b01      	subs	r3, #1
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	f003 0304 	and.w	r3, r3, #4
 80073f4:	2b04      	cmp	r3, #4
 80073f6:	d11b      	bne.n	8007430 <HAL_I2C_Mem_Write+0x180>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d017      	beq.n	8007430 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007404:	781a      	ldrb	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800741a:	3b01      	subs	r3, #1
 800741c:	b29a      	uxth	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007426:	b29b      	uxth	r3, r3
 8007428:	3b01      	subs	r3, #1
 800742a:	b29a      	uxth	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1aa      	bne.n	800738e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 fd06 	bl	8007e4e <I2C_WaitOnBTFFlagUntilTimeout>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00d      	beq.n	8007464 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744c:	2b04      	cmp	r3, #4
 800744e:	d107      	bne.n	8007460 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800745e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e016      	b.n	8007492 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2220      	movs	r2, #32
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	e000      	b.n	8007492 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007490:	2302      	movs	r3, #2
  }
}
 8007492:	4618      	mov	r0, r3
 8007494:	3718      	adds	r7, #24
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	00100002 	.word	0x00100002
 80074a0:	ffff0000 	.word	0xffff0000

080074a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08c      	sub	sp, #48	; 0x30
 80074a8:	af02      	add	r7, sp, #8
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	4608      	mov	r0, r1
 80074ae:	4611      	mov	r1, r2
 80074b0:	461a      	mov	r2, r3
 80074b2:	4603      	mov	r3, r0
 80074b4:	817b      	strh	r3, [r7, #10]
 80074b6:	460b      	mov	r3, r1
 80074b8:	813b      	strh	r3, [r7, #8]
 80074ba:	4613      	mov	r3, r2
 80074bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80074be:	f7ff f95b 	bl	8006778 <HAL_GetTick>
 80074c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	f040 8208 	bne.w	80078e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	2319      	movs	r3, #25
 80074d8:	2201      	movs	r2, #1
 80074da:	497b      	ldr	r1, [pc, #492]	; (80076c8 <HAL_I2C_Mem_Read+0x224>)
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 fb9f 	bl	8007c20 <I2C_WaitOnFlagUntilTimeout>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80074e8:	2302      	movs	r3, #2
 80074ea:	e1fb      	b.n	80078e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d101      	bne.n	80074fa <HAL_I2C_Mem_Read+0x56>
 80074f6:	2302      	movs	r3, #2
 80074f8:	e1f4      	b.n	80078e4 <HAL_I2C_Mem_Read+0x440>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b01      	cmp	r3, #1
 800750e:	d007      	beq.n	8007520 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f042 0201 	orr.w	r2, r2, #1
 800751e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800752e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2222      	movs	r2, #34	; 0x22
 8007534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2240      	movs	r2, #64	; 0x40
 800753c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800754a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007556:	b29a      	uxth	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4a5b      	ldr	r2, [pc, #364]	; (80076cc <HAL_I2C_Mem_Read+0x228>)
 8007560:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007562:	88f8      	ldrh	r0, [r7, #6]
 8007564:	893a      	ldrh	r2, [r7, #8]
 8007566:	8979      	ldrh	r1, [r7, #10]
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	9301      	str	r3, [sp, #4]
 800756c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	4603      	mov	r3, r0
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 fa6c 	bl	8007a50 <I2C_RequestMemoryRead>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e1b0      	b.n	80078e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007586:	2b00      	cmp	r3, #0
 8007588:	d113      	bne.n	80075b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800758a:	2300      	movs	r3, #0
 800758c:	623b      	str	r3, [r7, #32]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	623b      	str	r3, [r7, #32]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	623b      	str	r3, [r7, #32]
 800759e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	e184      	b.n	80078bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d11b      	bne.n	80075f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075ca:	2300      	movs	r3, #0
 80075cc:	61fb      	str	r3, [r7, #28]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	61fb      	str	r3, [r7, #28]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	61fb      	str	r3, [r7, #28]
 80075de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	e164      	b.n	80078bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d11b      	bne.n	8007632 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007608:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007618:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800761a:	2300      	movs	r3, #0
 800761c:	61bb      	str	r3, [r7, #24]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	61bb      	str	r3, [r7, #24]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	61bb      	str	r3, [r7, #24]
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	e144      	b.n	80078bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007632:	2300      	movs	r3, #0
 8007634:	617b      	str	r3, [r7, #20]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	617b      	str	r3, [r7, #20]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	617b      	str	r3, [r7, #20]
 8007646:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007648:	e138      	b.n	80078bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800764e:	2b03      	cmp	r3, #3
 8007650:	f200 80f1 	bhi.w	8007836 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007658:	2b01      	cmp	r3, #1
 800765a:	d123      	bne.n	80076a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800765c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800765e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 fc35 	bl	8007ed0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e139      	b.n	80078e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	691a      	ldr	r2, [r3, #16]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800768c:	3b01      	subs	r3, #1
 800768e:	b29a      	uxth	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007698:	b29b      	uxth	r3, r3
 800769a:	3b01      	subs	r3, #1
 800769c:	b29a      	uxth	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076a2:	e10b      	b.n	80078bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d14e      	bne.n	800774a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	2200      	movs	r2, #0
 80076b4:	4906      	ldr	r1, [pc, #24]	; (80076d0 <HAL_I2C_Mem_Read+0x22c>)
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 fab2 	bl	8007c20 <I2C_WaitOnFlagUntilTimeout>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d008      	beq.n	80076d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e10e      	b.n	80078e4 <HAL_I2C_Mem_Read+0x440>
 80076c6:	bf00      	nop
 80076c8:	00100002 	.word	0x00100002
 80076cc:	ffff0000 	.word	0xffff0000
 80076d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	691a      	ldr	r2, [r3, #16]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007700:	3b01      	subs	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	691a      	ldr	r2, [r3, #16]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	b2d2      	uxtb	r2, r2
 8007722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007732:	3b01      	subs	r3, #1
 8007734:	b29a      	uxth	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800773e:	b29b      	uxth	r3, r3
 8007740:	3b01      	subs	r3, #1
 8007742:	b29a      	uxth	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007748:	e0b8      	b.n	80078bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007750:	2200      	movs	r2, #0
 8007752:	4966      	ldr	r1, [pc, #408]	; (80078ec <HAL_I2C_Mem_Read+0x448>)
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f000 fa63 	bl	8007c20 <I2C_WaitOnFlagUntilTimeout>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e0bf      	b.n	80078e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007772:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	691a      	ldr	r2, [r3, #16]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007790:	3b01      	subs	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779c:	b29b      	uxth	r3, r3
 800779e:	3b01      	subs	r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	2200      	movs	r2, #0
 80077ae:	494f      	ldr	r1, [pc, #316]	; (80078ec <HAL_I2C_Mem_Read+0x448>)
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 fa35 	bl	8007c20 <I2C_WaitOnFlagUntilTimeout>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e091      	b.n	80078e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	691a      	ldr	r2, [r3, #16]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ec:	3b01      	subs	r3, #1
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	3b01      	subs	r3, #1
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	691a      	ldr	r2, [r3, #16]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780c:	b2d2      	uxtb	r2, r2
 800780e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800781e:	3b01      	subs	r3, #1
 8007820:	b29a      	uxth	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800782a:	b29b      	uxth	r3, r3
 800782c:	3b01      	subs	r3, #1
 800782e:	b29a      	uxth	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007834:	e042      	b.n	80078bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007838:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f000 fb48 	bl	8007ed0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e04c      	b.n	80078e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	691a      	ldr	r2, [r3, #16]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007854:	b2d2      	uxtb	r2, r2
 8007856:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785c:	1c5a      	adds	r2, r3, #1
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007866:	3b01      	subs	r3, #1
 8007868:	b29a      	uxth	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007872:	b29b      	uxth	r3, r3
 8007874:	3b01      	subs	r3, #1
 8007876:	b29a      	uxth	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	f003 0304 	and.w	r3, r3, #4
 8007886:	2b04      	cmp	r3, #4
 8007888:	d118      	bne.n	80078bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	691a      	ldr	r2, [r3, #16]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	b2d2      	uxtb	r2, r2
 8007896:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	1c5a      	adds	r2, r3, #1
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078a6:	3b01      	subs	r3, #1
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	3b01      	subs	r3, #1
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f47f aec2 	bne.w	800764a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2220      	movs	r2, #32
 80078ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	e000      	b.n	80078e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80078e2:	2302      	movs	r3, #2
  }
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3728      	adds	r7, #40	; 0x28
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	00010004 	.word	0x00010004

080078f0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078fe:	b2db      	uxtb	r3, r3
}
 8007900:	4618      	mov	r0, r3
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007918:	4618      	mov	r0, r3
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af02      	add	r7, sp, #8
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	4608      	mov	r0, r1
 800792e:	4611      	mov	r1, r2
 8007930:	461a      	mov	r2, r3
 8007932:	4603      	mov	r3, r0
 8007934:	817b      	strh	r3, [r7, #10]
 8007936:	460b      	mov	r3, r1
 8007938:	813b      	strh	r3, [r7, #8]
 800793a:	4613      	mov	r3, r2
 800793c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800794c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	2200      	movs	r2, #0
 8007956:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f000 f960 	bl	8007c20 <I2C_WaitOnFlagUntilTimeout>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00d      	beq.n	8007982 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007974:	d103      	bne.n	800797e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800797c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e05f      	b.n	8007a42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007982:	897b      	ldrh	r3, [r7, #10]
 8007984:	b2db      	uxtb	r3, r3
 8007986:	461a      	mov	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007990:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	6a3a      	ldr	r2, [r7, #32]
 8007996:	492d      	ldr	r1, [pc, #180]	; (8007a4c <I2C_RequestMemoryWrite+0x128>)
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 f998 	bl	8007cce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e04c      	b.n	8007a42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079a8:	2300      	movs	r3, #0
 80079aa:	617b      	str	r3, [r7, #20]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	617b      	str	r3, [r7, #20]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	617b      	str	r3, [r7, #20]
 80079bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c0:	6a39      	ldr	r1, [r7, #32]
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 fa02 	bl	8007dcc <I2C_WaitOnTXEFlagUntilTimeout>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00d      	beq.n	80079ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d107      	bne.n	80079e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e02b      	b.n	8007a42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079ea:	88fb      	ldrh	r3, [r7, #6]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d105      	bne.n	80079fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079f0:	893b      	ldrh	r3, [r7, #8]
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	611a      	str	r2, [r3, #16]
 80079fa:	e021      	b.n	8007a40 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80079fc:	893b      	ldrh	r3, [r7, #8]
 80079fe:	0a1b      	lsrs	r3, r3, #8
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0c:	6a39      	ldr	r1, [r7, #32]
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 f9dc 	bl	8007dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00d      	beq.n	8007a36 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d107      	bne.n	8007a32 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e005      	b.n	8007a42 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a36:	893b      	ldrh	r3, [r7, #8]
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3718      	adds	r7, #24
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	00010002 	.word	0x00010002

08007a50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af02      	add	r7, sp, #8
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	4608      	mov	r0, r1
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	4603      	mov	r3, r0
 8007a60:	817b      	strh	r3, [r7, #10]
 8007a62:	460b      	mov	r3, r1
 8007a64:	813b      	strh	r3, [r7, #8]
 8007a66:	4613      	mov	r3, r2
 8007a68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 f8c2 	bl	8007c20 <I2C_WaitOnFlagUntilTimeout>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00d      	beq.n	8007abe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ab0:	d103      	bne.n	8007aba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ab8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e0aa      	b.n	8007c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007abe:	897b      	ldrh	r3, [r7, #10]
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007acc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	6a3a      	ldr	r2, [r7, #32]
 8007ad2:	4952      	ldr	r1, [pc, #328]	; (8007c1c <I2C_RequestMemoryRead+0x1cc>)
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 f8fa 	bl	8007cce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e097      	b.n	8007c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	617b      	str	r3, [r7, #20]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	617b      	str	r3, [r7, #20]
 8007af8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007afc:	6a39      	ldr	r1, [r7, #32]
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 f964 	bl	8007dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00d      	beq.n	8007b26 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d107      	bne.n	8007b22 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e076      	b.n	8007c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b26:	88fb      	ldrh	r3, [r7, #6]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d105      	bne.n	8007b38 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b2c:	893b      	ldrh	r3, [r7, #8]
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	611a      	str	r2, [r3, #16]
 8007b36:	e021      	b.n	8007b7c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007b38:	893b      	ldrh	r3, [r7, #8]
 8007b3a:	0a1b      	lsrs	r3, r3, #8
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	b2da      	uxtb	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b48:	6a39      	ldr	r1, [r7, #32]
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 f93e 	bl	8007dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00d      	beq.n	8007b72 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5a:	2b04      	cmp	r3, #4
 8007b5c:	d107      	bne.n	8007b6e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e050      	b.n	8007c14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b72:	893b      	ldrh	r3, [r7, #8]
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b7e:	6a39      	ldr	r1, [r7, #32]
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 f923 	bl	8007dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00d      	beq.n	8007ba8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b90:	2b04      	cmp	r3, #4
 8007b92:	d107      	bne.n	8007ba4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ba2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e035      	b.n	8007c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bb6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 f82b 	bl	8007c20 <I2C_WaitOnFlagUntilTimeout>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00d      	beq.n	8007bec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bde:	d103      	bne.n	8007be8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007be6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e013      	b.n	8007c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007bec:	897b      	ldrh	r3, [r7, #10]
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	f043 0301 	orr.w	r3, r3, #1
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	6a3a      	ldr	r2, [r7, #32]
 8007c00:	4906      	ldr	r1, [pc, #24]	; (8007c1c <I2C_RequestMemoryRead+0x1cc>)
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 f863 	bl	8007cce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e000      	b.n	8007c14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	00010002 	.word	0x00010002

08007c20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	603b      	str	r3, [r7, #0]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c30:	e025      	b.n	8007c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c38:	d021      	beq.n	8007c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c3a:	f7fe fd9d 	bl	8006778 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d302      	bcc.n	8007c50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d116      	bne.n	8007c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6a:	f043 0220 	orr.w	r2, r3, #32
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e023      	b.n	8007cc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	0c1b      	lsrs	r3, r3, #16
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d10d      	bne.n	8007ca4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	43da      	mvns	r2, r3
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	4013      	ands	r3, r2
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	bf0c      	ite	eq
 8007c9a:	2301      	moveq	r3, #1
 8007c9c:	2300      	movne	r3, #0
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	e00c      	b.n	8007cbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	43da      	mvns	r2, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	4013      	ands	r3, r2
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	bf0c      	ite	eq
 8007cb6:	2301      	moveq	r3, #1
 8007cb8:	2300      	movne	r3, #0
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	79fb      	ldrb	r3, [r7, #7]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d0b6      	beq.n	8007c32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	60b9      	str	r1, [r7, #8]
 8007cd8:	607a      	str	r2, [r7, #4]
 8007cda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007cdc:	e051      	b.n	8007d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cec:	d123      	bne.n	8007d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cfc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2220      	movs	r2, #32
 8007d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	f043 0204 	orr.w	r2, r3, #4
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e046      	b.n	8007dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3c:	d021      	beq.n	8007d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d3e:	f7fe fd1b 	bl	8006778 <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d302      	bcc.n	8007d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d116      	bne.n	8007d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6e:	f043 0220 	orr.w	r2, r3, #32
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e020      	b.n	8007dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	0c1b      	lsrs	r3, r3, #16
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d10c      	bne.n	8007da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	43da      	mvns	r2, r3
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	4013      	ands	r3, r2
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	bf14      	ite	ne
 8007d9e:	2301      	movne	r3, #1
 8007da0:	2300      	moveq	r3, #0
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	e00b      	b.n	8007dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	43da      	mvns	r2, r3
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	4013      	ands	r3, r2
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	bf14      	ite	ne
 8007db8:	2301      	movne	r3, #1
 8007dba:	2300      	moveq	r3, #0
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d18d      	bne.n	8007cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007dd8:	e02d      	b.n	8007e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 f8ce 	bl	8007f7c <I2C_IsAcknowledgeFailed>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e02d      	b.n	8007e46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df0:	d021      	beq.n	8007e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007df2:	f7fe fcc1 	bl	8006778 <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d302      	bcc.n	8007e08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d116      	bne.n	8007e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	f043 0220 	orr.w	r2, r3, #32
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e007      	b.n	8007e46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e40:	2b80      	cmp	r3, #128	; 0x80
 8007e42:	d1ca      	bne.n	8007dda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	60f8      	str	r0, [r7, #12]
 8007e56:	60b9      	str	r1, [r7, #8]
 8007e58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e5a:	e02d      	b.n	8007eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 f88d 	bl	8007f7c <I2C_IsAcknowledgeFailed>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e02d      	b.n	8007ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e72:	d021      	beq.n	8007eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e74:	f7fe fc80 	bl	8006778 <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d302      	bcc.n	8007e8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d116      	bne.n	8007eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2220      	movs	r2, #32
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea4:	f043 0220 	orr.w	r2, r3, #32
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e007      	b.n	8007ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	f003 0304 	and.w	r3, r3, #4
 8007ec2:	2b04      	cmp	r3, #4
 8007ec4:	d1ca      	bne.n	8007e5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007edc:	e042      	b.n	8007f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	f003 0310 	and.w	r3, r3, #16
 8007ee8:	2b10      	cmp	r3, #16
 8007eea:	d119      	bne.n	8007f20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f06f 0210 	mvn.w	r2, #16
 8007ef4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2220      	movs	r2, #32
 8007f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e029      	b.n	8007f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f20:	f7fe fc2a 	bl	8006778 <HAL_GetTick>
 8007f24:	4602      	mov	r2, r0
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d302      	bcc.n	8007f36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d116      	bne.n	8007f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2220      	movs	r2, #32
 8007f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f50:	f043 0220 	orr.w	r2, r3, #32
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e007      	b.n	8007f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6e:	2b40      	cmp	r3, #64	; 0x40
 8007f70:	d1b5      	bne.n	8007ede <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f92:	d11b      	bne.n	8007fcc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb8:	f043 0204 	orr.w	r2, r3, #4
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e000      	b.n	8007fce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
	...

08007fdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e267      	b.n	80084be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d075      	beq.n	80080e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ffa:	4b88      	ldr	r3, [pc, #544]	; (800821c <HAL_RCC_OscConfig+0x240>)
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f003 030c 	and.w	r3, r3, #12
 8008002:	2b04      	cmp	r3, #4
 8008004:	d00c      	beq.n	8008020 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008006:	4b85      	ldr	r3, [pc, #532]	; (800821c <HAL_RCC_OscConfig+0x240>)
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800800e:	2b08      	cmp	r3, #8
 8008010:	d112      	bne.n	8008038 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008012:	4b82      	ldr	r3, [pc, #520]	; (800821c <HAL_RCC_OscConfig+0x240>)
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800801a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800801e:	d10b      	bne.n	8008038 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008020:	4b7e      	ldr	r3, [pc, #504]	; (800821c <HAL_RCC_OscConfig+0x240>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d05b      	beq.n	80080e4 <HAL_RCC_OscConfig+0x108>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d157      	bne.n	80080e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e242      	b.n	80084be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008040:	d106      	bne.n	8008050 <HAL_RCC_OscConfig+0x74>
 8008042:	4b76      	ldr	r3, [pc, #472]	; (800821c <HAL_RCC_OscConfig+0x240>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a75      	ldr	r2, [pc, #468]	; (800821c <HAL_RCC_OscConfig+0x240>)
 8008048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	e01d      	b.n	800808c <HAL_RCC_OscConfig+0xb0>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008058:	d10c      	bne.n	8008074 <HAL_RCC_OscConfig+0x98>
 800805a:	4b70      	ldr	r3, [pc, #448]	; (800821c <HAL_RCC_OscConfig+0x240>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a6f      	ldr	r2, [pc, #444]	; (800821c <HAL_RCC_OscConfig+0x240>)
 8008060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008064:	6013      	str	r3, [r2, #0]
 8008066:	4b6d      	ldr	r3, [pc, #436]	; (800821c <HAL_RCC_OscConfig+0x240>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a6c      	ldr	r2, [pc, #432]	; (800821c <HAL_RCC_OscConfig+0x240>)
 800806c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	e00b      	b.n	800808c <HAL_RCC_OscConfig+0xb0>
 8008074:	4b69      	ldr	r3, [pc, #420]	; (800821c <HAL_RCC_OscConfig+0x240>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a68      	ldr	r2, [pc, #416]	; (800821c <HAL_RCC_OscConfig+0x240>)
 800807a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800807e:	6013      	str	r3, [r2, #0]
 8008080:	4b66      	ldr	r3, [pc, #408]	; (800821c <HAL_RCC_OscConfig+0x240>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a65      	ldr	r2, [pc, #404]	; (800821c <HAL_RCC_OscConfig+0x240>)
 8008086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800808a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d013      	beq.n	80080bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008094:	f7fe fb70 	bl	8006778 <HAL_GetTick>
 8008098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800809a:	e008      	b.n	80080ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800809c:	f7fe fb6c 	bl	8006778 <HAL_GetTick>
 80080a0:	4602      	mov	r2, r0
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	2b64      	cmp	r3, #100	; 0x64
 80080a8:	d901      	bls.n	80080ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e207      	b.n	80084be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080ae:	4b5b      	ldr	r3, [pc, #364]	; (800821c <HAL_RCC_OscConfig+0x240>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d0f0      	beq.n	800809c <HAL_RCC_OscConfig+0xc0>
 80080ba:	e014      	b.n	80080e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080bc:	f7fe fb5c 	bl	8006778 <HAL_GetTick>
 80080c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080c2:	e008      	b.n	80080d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080c4:	f7fe fb58 	bl	8006778 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b64      	cmp	r3, #100	; 0x64
 80080d0:	d901      	bls.n	80080d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e1f3      	b.n	80084be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080d6:	4b51      	ldr	r3, [pc, #324]	; (800821c <HAL_RCC_OscConfig+0x240>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1f0      	bne.n	80080c4 <HAL_RCC_OscConfig+0xe8>
 80080e2:	e000      	b.n	80080e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0302 	and.w	r3, r3, #2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d063      	beq.n	80081ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080f2:	4b4a      	ldr	r3, [pc, #296]	; (800821c <HAL_RCC_OscConfig+0x240>)
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f003 030c 	and.w	r3, r3, #12
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00b      	beq.n	8008116 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080fe:	4b47      	ldr	r3, [pc, #284]	; (800821c <HAL_RCC_OscConfig+0x240>)
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008106:	2b08      	cmp	r3, #8
 8008108:	d11c      	bne.n	8008144 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800810a:	4b44      	ldr	r3, [pc, #272]	; (800821c <HAL_RCC_OscConfig+0x240>)
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d116      	bne.n	8008144 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008116:	4b41      	ldr	r3, [pc, #260]	; (800821c <HAL_RCC_OscConfig+0x240>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	2b00      	cmp	r3, #0
 8008120:	d005      	beq.n	800812e <HAL_RCC_OscConfig+0x152>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d001      	beq.n	800812e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e1c7      	b.n	80084be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800812e:	4b3b      	ldr	r3, [pc, #236]	; (800821c <HAL_RCC_OscConfig+0x240>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	00db      	lsls	r3, r3, #3
 800813c:	4937      	ldr	r1, [pc, #220]	; (800821c <HAL_RCC_OscConfig+0x240>)
 800813e:	4313      	orrs	r3, r2
 8008140:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008142:	e03a      	b.n	80081ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d020      	beq.n	800818e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800814c:	4b34      	ldr	r3, [pc, #208]	; (8008220 <HAL_RCC_OscConfig+0x244>)
 800814e:	2201      	movs	r2, #1
 8008150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008152:	f7fe fb11 	bl	8006778 <HAL_GetTick>
 8008156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008158:	e008      	b.n	800816c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800815a:	f7fe fb0d 	bl	8006778 <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	2b02      	cmp	r3, #2
 8008166:	d901      	bls.n	800816c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e1a8      	b.n	80084be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800816c:	4b2b      	ldr	r3, [pc, #172]	; (800821c <HAL_RCC_OscConfig+0x240>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0302 	and.w	r3, r3, #2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d0f0      	beq.n	800815a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008178:	4b28      	ldr	r3, [pc, #160]	; (800821c <HAL_RCC_OscConfig+0x240>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	00db      	lsls	r3, r3, #3
 8008186:	4925      	ldr	r1, [pc, #148]	; (800821c <HAL_RCC_OscConfig+0x240>)
 8008188:	4313      	orrs	r3, r2
 800818a:	600b      	str	r3, [r1, #0]
 800818c:	e015      	b.n	80081ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800818e:	4b24      	ldr	r3, [pc, #144]	; (8008220 <HAL_RCC_OscConfig+0x244>)
 8008190:	2200      	movs	r2, #0
 8008192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008194:	f7fe faf0 	bl	8006778 <HAL_GetTick>
 8008198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800819a:	e008      	b.n	80081ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800819c:	f7fe faec 	bl	8006778 <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d901      	bls.n	80081ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e187      	b.n	80084be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081ae:	4b1b      	ldr	r3, [pc, #108]	; (800821c <HAL_RCC_OscConfig+0x240>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0302 	and.w	r3, r3, #2
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1f0      	bne.n	800819c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0308 	and.w	r3, r3, #8
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d036      	beq.n	8008234 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d016      	beq.n	80081fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081ce:	4b15      	ldr	r3, [pc, #84]	; (8008224 <HAL_RCC_OscConfig+0x248>)
 80081d0:	2201      	movs	r2, #1
 80081d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081d4:	f7fe fad0 	bl	8006778 <HAL_GetTick>
 80081d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081da:	e008      	b.n	80081ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081dc:	f7fe facc 	bl	8006778 <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d901      	bls.n	80081ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e167      	b.n	80084be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081ee:	4b0b      	ldr	r3, [pc, #44]	; (800821c <HAL_RCC_OscConfig+0x240>)
 80081f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d0f0      	beq.n	80081dc <HAL_RCC_OscConfig+0x200>
 80081fa:	e01b      	b.n	8008234 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081fc:	4b09      	ldr	r3, [pc, #36]	; (8008224 <HAL_RCC_OscConfig+0x248>)
 80081fe:	2200      	movs	r2, #0
 8008200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008202:	f7fe fab9 	bl	8006778 <HAL_GetTick>
 8008206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008208:	e00e      	b.n	8008228 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800820a:	f7fe fab5 	bl	8006778 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	2b02      	cmp	r3, #2
 8008216:	d907      	bls.n	8008228 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e150      	b.n	80084be <HAL_RCC_OscConfig+0x4e2>
 800821c:	40023800 	.word	0x40023800
 8008220:	42470000 	.word	0x42470000
 8008224:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008228:	4b88      	ldr	r3, [pc, #544]	; (800844c <HAL_RCC_OscConfig+0x470>)
 800822a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800822c:	f003 0302 	and.w	r3, r3, #2
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1ea      	bne.n	800820a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0304 	and.w	r3, r3, #4
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 8097 	beq.w	8008370 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008242:	2300      	movs	r3, #0
 8008244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008246:	4b81      	ldr	r3, [pc, #516]	; (800844c <HAL_RCC_OscConfig+0x470>)
 8008248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10f      	bne.n	8008272 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008252:	2300      	movs	r3, #0
 8008254:	60bb      	str	r3, [r7, #8]
 8008256:	4b7d      	ldr	r3, [pc, #500]	; (800844c <HAL_RCC_OscConfig+0x470>)
 8008258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825a:	4a7c      	ldr	r2, [pc, #496]	; (800844c <HAL_RCC_OscConfig+0x470>)
 800825c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008260:	6413      	str	r3, [r2, #64]	; 0x40
 8008262:	4b7a      	ldr	r3, [pc, #488]	; (800844c <HAL_RCC_OscConfig+0x470>)
 8008264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800826a:	60bb      	str	r3, [r7, #8]
 800826c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800826e:	2301      	movs	r3, #1
 8008270:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008272:	4b77      	ldr	r3, [pc, #476]	; (8008450 <HAL_RCC_OscConfig+0x474>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827a:	2b00      	cmp	r3, #0
 800827c:	d118      	bne.n	80082b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800827e:	4b74      	ldr	r3, [pc, #464]	; (8008450 <HAL_RCC_OscConfig+0x474>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a73      	ldr	r2, [pc, #460]	; (8008450 <HAL_RCC_OscConfig+0x474>)
 8008284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800828a:	f7fe fa75 	bl	8006778 <HAL_GetTick>
 800828e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008290:	e008      	b.n	80082a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008292:	f7fe fa71 	bl	8006778 <HAL_GetTick>
 8008296:	4602      	mov	r2, r0
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	2b02      	cmp	r3, #2
 800829e:	d901      	bls.n	80082a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e10c      	b.n	80084be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082a4:	4b6a      	ldr	r3, [pc, #424]	; (8008450 <HAL_RCC_OscConfig+0x474>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d0f0      	beq.n	8008292 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d106      	bne.n	80082c6 <HAL_RCC_OscConfig+0x2ea>
 80082b8:	4b64      	ldr	r3, [pc, #400]	; (800844c <HAL_RCC_OscConfig+0x470>)
 80082ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082bc:	4a63      	ldr	r2, [pc, #396]	; (800844c <HAL_RCC_OscConfig+0x470>)
 80082be:	f043 0301 	orr.w	r3, r3, #1
 80082c2:	6713      	str	r3, [r2, #112]	; 0x70
 80082c4:	e01c      	b.n	8008300 <HAL_RCC_OscConfig+0x324>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	2b05      	cmp	r3, #5
 80082cc:	d10c      	bne.n	80082e8 <HAL_RCC_OscConfig+0x30c>
 80082ce:	4b5f      	ldr	r3, [pc, #380]	; (800844c <HAL_RCC_OscConfig+0x470>)
 80082d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082d2:	4a5e      	ldr	r2, [pc, #376]	; (800844c <HAL_RCC_OscConfig+0x470>)
 80082d4:	f043 0304 	orr.w	r3, r3, #4
 80082d8:	6713      	str	r3, [r2, #112]	; 0x70
 80082da:	4b5c      	ldr	r3, [pc, #368]	; (800844c <HAL_RCC_OscConfig+0x470>)
 80082dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082de:	4a5b      	ldr	r2, [pc, #364]	; (800844c <HAL_RCC_OscConfig+0x470>)
 80082e0:	f043 0301 	orr.w	r3, r3, #1
 80082e4:	6713      	str	r3, [r2, #112]	; 0x70
 80082e6:	e00b      	b.n	8008300 <HAL_RCC_OscConfig+0x324>
 80082e8:	4b58      	ldr	r3, [pc, #352]	; (800844c <HAL_RCC_OscConfig+0x470>)
 80082ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ec:	4a57      	ldr	r2, [pc, #348]	; (800844c <HAL_RCC_OscConfig+0x470>)
 80082ee:	f023 0301 	bic.w	r3, r3, #1
 80082f2:	6713      	str	r3, [r2, #112]	; 0x70
 80082f4:	4b55      	ldr	r3, [pc, #340]	; (800844c <HAL_RCC_OscConfig+0x470>)
 80082f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f8:	4a54      	ldr	r2, [pc, #336]	; (800844c <HAL_RCC_OscConfig+0x470>)
 80082fa:	f023 0304 	bic.w	r3, r3, #4
 80082fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d015      	beq.n	8008334 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008308:	f7fe fa36 	bl	8006778 <HAL_GetTick>
 800830c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800830e:	e00a      	b.n	8008326 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008310:	f7fe fa32 	bl	8006778 <HAL_GetTick>
 8008314:	4602      	mov	r2, r0
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	f241 3288 	movw	r2, #5000	; 0x1388
 800831e:	4293      	cmp	r3, r2
 8008320:	d901      	bls.n	8008326 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e0cb      	b.n	80084be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008326:	4b49      	ldr	r3, [pc, #292]	; (800844c <HAL_RCC_OscConfig+0x470>)
 8008328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	2b00      	cmp	r3, #0
 8008330:	d0ee      	beq.n	8008310 <HAL_RCC_OscConfig+0x334>
 8008332:	e014      	b.n	800835e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008334:	f7fe fa20 	bl	8006778 <HAL_GetTick>
 8008338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800833a:	e00a      	b.n	8008352 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800833c:	f7fe fa1c 	bl	8006778 <HAL_GetTick>
 8008340:	4602      	mov	r2, r0
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	f241 3288 	movw	r2, #5000	; 0x1388
 800834a:	4293      	cmp	r3, r2
 800834c:	d901      	bls.n	8008352 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e0b5      	b.n	80084be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008352:	4b3e      	ldr	r3, [pc, #248]	; (800844c <HAL_RCC_OscConfig+0x470>)
 8008354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1ee      	bne.n	800833c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800835e:	7dfb      	ldrb	r3, [r7, #23]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d105      	bne.n	8008370 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008364:	4b39      	ldr	r3, [pc, #228]	; (800844c <HAL_RCC_OscConfig+0x470>)
 8008366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008368:	4a38      	ldr	r2, [pc, #224]	; (800844c <HAL_RCC_OscConfig+0x470>)
 800836a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800836e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 80a1 	beq.w	80084bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800837a:	4b34      	ldr	r3, [pc, #208]	; (800844c <HAL_RCC_OscConfig+0x470>)
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f003 030c 	and.w	r3, r3, #12
 8008382:	2b08      	cmp	r3, #8
 8008384:	d05c      	beq.n	8008440 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	2b02      	cmp	r3, #2
 800838c:	d141      	bne.n	8008412 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800838e:	4b31      	ldr	r3, [pc, #196]	; (8008454 <HAL_RCC_OscConfig+0x478>)
 8008390:	2200      	movs	r2, #0
 8008392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008394:	f7fe f9f0 	bl	8006778 <HAL_GetTick>
 8008398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800839a:	e008      	b.n	80083ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800839c:	f7fe f9ec 	bl	8006778 <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d901      	bls.n	80083ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e087      	b.n	80084be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083ae:	4b27      	ldr	r3, [pc, #156]	; (800844c <HAL_RCC_OscConfig+0x470>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1f0      	bne.n	800839c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	69da      	ldr	r2, [r3, #28]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	431a      	orrs	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c8:	019b      	lsls	r3, r3, #6
 80083ca:	431a      	orrs	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d0:	085b      	lsrs	r3, r3, #1
 80083d2:	3b01      	subs	r3, #1
 80083d4:	041b      	lsls	r3, r3, #16
 80083d6:	431a      	orrs	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083dc:	061b      	lsls	r3, r3, #24
 80083de:	491b      	ldr	r1, [pc, #108]	; (800844c <HAL_RCC_OscConfig+0x470>)
 80083e0:	4313      	orrs	r3, r2
 80083e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083e4:	4b1b      	ldr	r3, [pc, #108]	; (8008454 <HAL_RCC_OscConfig+0x478>)
 80083e6:	2201      	movs	r2, #1
 80083e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083ea:	f7fe f9c5 	bl	8006778 <HAL_GetTick>
 80083ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083f0:	e008      	b.n	8008404 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083f2:	f7fe f9c1 	bl	8006778 <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d901      	bls.n	8008404 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e05c      	b.n	80084be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008404:	4b11      	ldr	r3, [pc, #68]	; (800844c <HAL_RCC_OscConfig+0x470>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0f0      	beq.n	80083f2 <HAL_RCC_OscConfig+0x416>
 8008410:	e054      	b.n	80084bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008412:	4b10      	ldr	r3, [pc, #64]	; (8008454 <HAL_RCC_OscConfig+0x478>)
 8008414:	2200      	movs	r2, #0
 8008416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008418:	f7fe f9ae 	bl	8006778 <HAL_GetTick>
 800841c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800841e:	e008      	b.n	8008432 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008420:	f7fe f9aa 	bl	8006778 <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	2b02      	cmp	r3, #2
 800842c:	d901      	bls.n	8008432 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e045      	b.n	80084be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008432:	4b06      	ldr	r3, [pc, #24]	; (800844c <HAL_RCC_OscConfig+0x470>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1f0      	bne.n	8008420 <HAL_RCC_OscConfig+0x444>
 800843e:	e03d      	b.n	80084bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d107      	bne.n	8008458 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e038      	b.n	80084be <HAL_RCC_OscConfig+0x4e2>
 800844c:	40023800 	.word	0x40023800
 8008450:	40007000 	.word	0x40007000
 8008454:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008458:	4b1b      	ldr	r3, [pc, #108]	; (80084c8 <HAL_RCC_OscConfig+0x4ec>)
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d028      	beq.n	80084b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008470:	429a      	cmp	r2, r3
 8008472:	d121      	bne.n	80084b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800847e:	429a      	cmp	r2, r3
 8008480:	d11a      	bne.n	80084b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008488:	4013      	ands	r3, r2
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800848e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008490:	4293      	cmp	r3, r2
 8008492:	d111      	bne.n	80084b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849e:	085b      	lsrs	r3, r3, #1
 80084a0:	3b01      	subs	r3, #1
 80084a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d107      	bne.n	80084b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d001      	beq.n	80084bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e000      	b.n	80084be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3718      	adds	r7, #24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	40023800 	.word	0x40023800

080084cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d101      	bne.n	80084e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e0cc      	b.n	800867a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084e0:	4b68      	ldr	r3, [pc, #416]	; (8008684 <HAL_RCC_ClockConfig+0x1b8>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 0307 	and.w	r3, r3, #7
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d90c      	bls.n	8008508 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084ee:	4b65      	ldr	r3, [pc, #404]	; (8008684 <HAL_RCC_ClockConfig+0x1b8>)
 80084f0:	683a      	ldr	r2, [r7, #0]
 80084f2:	b2d2      	uxtb	r2, r2
 80084f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084f6:	4b63      	ldr	r3, [pc, #396]	; (8008684 <HAL_RCC_ClockConfig+0x1b8>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0307 	and.w	r3, r3, #7
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	429a      	cmp	r2, r3
 8008502:	d001      	beq.n	8008508 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e0b8      	b.n	800867a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0302 	and.w	r3, r3, #2
 8008510:	2b00      	cmp	r3, #0
 8008512:	d020      	beq.n	8008556 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b00      	cmp	r3, #0
 800851e:	d005      	beq.n	800852c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008520:	4b59      	ldr	r3, [pc, #356]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	4a58      	ldr	r2, [pc, #352]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 8008526:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800852a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0308 	and.w	r3, r3, #8
 8008534:	2b00      	cmp	r3, #0
 8008536:	d005      	beq.n	8008544 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008538:	4b53      	ldr	r3, [pc, #332]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	4a52      	ldr	r2, [pc, #328]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 800853e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008542:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008544:	4b50      	ldr	r3, [pc, #320]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	494d      	ldr	r1, [pc, #308]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 8008552:	4313      	orrs	r3, r2
 8008554:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	d044      	beq.n	80085ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d107      	bne.n	800857a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800856a:	4b47      	ldr	r3, [pc, #284]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d119      	bne.n	80085aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e07f      	b.n	800867a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	2b02      	cmp	r3, #2
 8008580:	d003      	beq.n	800858a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008586:	2b03      	cmp	r3, #3
 8008588:	d107      	bne.n	800859a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800858a:	4b3f      	ldr	r3, [pc, #252]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d109      	bne.n	80085aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e06f      	b.n	800867a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800859a:	4b3b      	ldr	r3, [pc, #236]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e067      	b.n	800867a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80085aa:	4b37      	ldr	r3, [pc, #220]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f023 0203 	bic.w	r2, r3, #3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	4934      	ldr	r1, [pc, #208]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085bc:	f7fe f8dc 	bl	8006778 <HAL_GetTick>
 80085c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085c2:	e00a      	b.n	80085da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085c4:	f7fe f8d8 	bl	8006778 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d901      	bls.n	80085da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e04f      	b.n	800867a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085da:	4b2b      	ldr	r3, [pc, #172]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f003 020c 	and.w	r2, r3, #12
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d1eb      	bne.n	80085c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085ec:	4b25      	ldr	r3, [pc, #148]	; (8008684 <HAL_RCC_ClockConfig+0x1b8>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0307 	and.w	r3, r3, #7
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d20c      	bcs.n	8008614 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085fa:	4b22      	ldr	r3, [pc, #136]	; (8008684 <HAL_RCC_ClockConfig+0x1b8>)
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	b2d2      	uxtb	r2, r2
 8008600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008602:	4b20      	ldr	r3, [pc, #128]	; (8008684 <HAL_RCC_ClockConfig+0x1b8>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0307 	and.w	r3, r3, #7
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	429a      	cmp	r2, r3
 800860e:	d001      	beq.n	8008614 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e032      	b.n	800867a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b00      	cmp	r3, #0
 800861e:	d008      	beq.n	8008632 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008620:	4b19      	ldr	r3, [pc, #100]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	4916      	ldr	r1, [pc, #88]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 800862e:	4313      	orrs	r3, r2
 8008630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0308 	and.w	r3, r3, #8
 800863a:	2b00      	cmp	r3, #0
 800863c:	d009      	beq.n	8008652 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800863e:	4b12      	ldr	r3, [pc, #72]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	00db      	lsls	r3, r3, #3
 800864c:	490e      	ldr	r1, [pc, #56]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 800864e:	4313      	orrs	r3, r2
 8008650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008652:	f000 f821 	bl	8008698 <HAL_RCC_GetSysClockFreq>
 8008656:	4602      	mov	r2, r0
 8008658:	4b0b      	ldr	r3, [pc, #44]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	091b      	lsrs	r3, r3, #4
 800865e:	f003 030f 	and.w	r3, r3, #15
 8008662:	490a      	ldr	r1, [pc, #40]	; (800868c <HAL_RCC_ClockConfig+0x1c0>)
 8008664:	5ccb      	ldrb	r3, [r1, r3]
 8008666:	fa22 f303 	lsr.w	r3, r2, r3
 800866a:	4a09      	ldr	r2, [pc, #36]	; (8008690 <HAL_RCC_ClockConfig+0x1c4>)
 800866c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800866e:	4b09      	ldr	r3, [pc, #36]	; (8008694 <HAL_RCC_ClockConfig+0x1c8>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	f7fe f83c 	bl	80066f0 <HAL_InitTick>

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	40023c00 	.word	0x40023c00
 8008688:	40023800 	.word	0x40023800
 800868c:	0800b534 	.word	0x0800b534
 8008690:	200000e8 	.word	0x200000e8
 8008694:	200000ec 	.word	0x200000ec

08008698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800869c:	b094      	sub	sp, #80	; 0x50
 800869e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	647b      	str	r3, [r7, #68]	; 0x44
 80086a4:	2300      	movs	r3, #0
 80086a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086a8:	2300      	movs	r3, #0
 80086aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086b0:	4b79      	ldr	r3, [pc, #484]	; (8008898 <HAL_RCC_GetSysClockFreq+0x200>)
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	f003 030c 	and.w	r3, r3, #12
 80086b8:	2b08      	cmp	r3, #8
 80086ba:	d00d      	beq.n	80086d8 <HAL_RCC_GetSysClockFreq+0x40>
 80086bc:	2b08      	cmp	r3, #8
 80086be:	f200 80e1 	bhi.w	8008884 <HAL_RCC_GetSysClockFreq+0x1ec>
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d002      	beq.n	80086cc <HAL_RCC_GetSysClockFreq+0x34>
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	d003      	beq.n	80086d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80086ca:	e0db      	b.n	8008884 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80086cc:	4b73      	ldr	r3, [pc, #460]	; (800889c <HAL_RCC_GetSysClockFreq+0x204>)
 80086ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80086d0:	e0db      	b.n	800888a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80086d2:	4b73      	ldr	r3, [pc, #460]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80086d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80086d6:	e0d8      	b.n	800888a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80086d8:	4b6f      	ldr	r3, [pc, #444]	; (8008898 <HAL_RCC_GetSysClockFreq+0x200>)
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80086e2:	4b6d      	ldr	r3, [pc, #436]	; (8008898 <HAL_RCC_GetSysClockFreq+0x200>)
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d063      	beq.n	80087b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086ee:	4b6a      	ldr	r3, [pc, #424]	; (8008898 <HAL_RCC_GetSysClockFreq+0x200>)
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	099b      	lsrs	r3, r3, #6
 80086f4:	2200      	movs	r2, #0
 80086f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80086f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80086fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008700:	633b      	str	r3, [r7, #48]	; 0x30
 8008702:	2300      	movs	r3, #0
 8008704:	637b      	str	r3, [r7, #52]	; 0x34
 8008706:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800870a:	4622      	mov	r2, r4
 800870c:	462b      	mov	r3, r5
 800870e:	f04f 0000 	mov.w	r0, #0
 8008712:	f04f 0100 	mov.w	r1, #0
 8008716:	0159      	lsls	r1, r3, #5
 8008718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800871c:	0150      	lsls	r0, r2, #5
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	4621      	mov	r1, r4
 8008724:	1a51      	subs	r1, r2, r1
 8008726:	6139      	str	r1, [r7, #16]
 8008728:	4629      	mov	r1, r5
 800872a:	eb63 0301 	sbc.w	r3, r3, r1
 800872e:	617b      	str	r3, [r7, #20]
 8008730:	f04f 0200 	mov.w	r2, #0
 8008734:	f04f 0300 	mov.w	r3, #0
 8008738:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800873c:	4659      	mov	r1, fp
 800873e:	018b      	lsls	r3, r1, #6
 8008740:	4651      	mov	r1, sl
 8008742:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008746:	4651      	mov	r1, sl
 8008748:	018a      	lsls	r2, r1, #6
 800874a:	4651      	mov	r1, sl
 800874c:	ebb2 0801 	subs.w	r8, r2, r1
 8008750:	4659      	mov	r1, fp
 8008752:	eb63 0901 	sbc.w	r9, r3, r1
 8008756:	f04f 0200 	mov.w	r2, #0
 800875a:	f04f 0300 	mov.w	r3, #0
 800875e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008762:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008766:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800876a:	4690      	mov	r8, r2
 800876c:	4699      	mov	r9, r3
 800876e:	4623      	mov	r3, r4
 8008770:	eb18 0303 	adds.w	r3, r8, r3
 8008774:	60bb      	str	r3, [r7, #8]
 8008776:	462b      	mov	r3, r5
 8008778:	eb49 0303 	adc.w	r3, r9, r3
 800877c:	60fb      	str	r3, [r7, #12]
 800877e:	f04f 0200 	mov.w	r2, #0
 8008782:	f04f 0300 	mov.w	r3, #0
 8008786:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800878a:	4629      	mov	r1, r5
 800878c:	024b      	lsls	r3, r1, #9
 800878e:	4621      	mov	r1, r4
 8008790:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008794:	4621      	mov	r1, r4
 8008796:	024a      	lsls	r2, r1, #9
 8008798:	4610      	mov	r0, r2
 800879a:	4619      	mov	r1, r3
 800879c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800879e:	2200      	movs	r2, #0
 80087a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80087a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087a8:	f7f8 fa4e 	bl	8000c48 <__aeabi_uldivmod>
 80087ac:	4602      	mov	r2, r0
 80087ae:	460b      	mov	r3, r1
 80087b0:	4613      	mov	r3, r2
 80087b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087b4:	e058      	b.n	8008868 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087b6:	4b38      	ldr	r3, [pc, #224]	; (8008898 <HAL_RCC_GetSysClockFreq+0x200>)
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	099b      	lsrs	r3, r3, #6
 80087bc:	2200      	movs	r2, #0
 80087be:	4618      	mov	r0, r3
 80087c0:	4611      	mov	r1, r2
 80087c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80087c6:	623b      	str	r3, [r7, #32]
 80087c8:	2300      	movs	r3, #0
 80087ca:	627b      	str	r3, [r7, #36]	; 0x24
 80087cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80087d0:	4642      	mov	r2, r8
 80087d2:	464b      	mov	r3, r9
 80087d4:	f04f 0000 	mov.w	r0, #0
 80087d8:	f04f 0100 	mov.w	r1, #0
 80087dc:	0159      	lsls	r1, r3, #5
 80087de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80087e2:	0150      	lsls	r0, r2, #5
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	4641      	mov	r1, r8
 80087ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80087ee:	4649      	mov	r1, r9
 80087f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80087f4:	f04f 0200 	mov.w	r2, #0
 80087f8:	f04f 0300 	mov.w	r3, #0
 80087fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008800:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008804:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008808:	ebb2 040a 	subs.w	r4, r2, sl
 800880c:	eb63 050b 	sbc.w	r5, r3, fp
 8008810:	f04f 0200 	mov.w	r2, #0
 8008814:	f04f 0300 	mov.w	r3, #0
 8008818:	00eb      	lsls	r3, r5, #3
 800881a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800881e:	00e2      	lsls	r2, r4, #3
 8008820:	4614      	mov	r4, r2
 8008822:	461d      	mov	r5, r3
 8008824:	4643      	mov	r3, r8
 8008826:	18e3      	adds	r3, r4, r3
 8008828:	603b      	str	r3, [r7, #0]
 800882a:	464b      	mov	r3, r9
 800882c:	eb45 0303 	adc.w	r3, r5, r3
 8008830:	607b      	str	r3, [r7, #4]
 8008832:	f04f 0200 	mov.w	r2, #0
 8008836:	f04f 0300 	mov.w	r3, #0
 800883a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800883e:	4629      	mov	r1, r5
 8008840:	028b      	lsls	r3, r1, #10
 8008842:	4621      	mov	r1, r4
 8008844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008848:	4621      	mov	r1, r4
 800884a:	028a      	lsls	r2, r1, #10
 800884c:	4610      	mov	r0, r2
 800884e:	4619      	mov	r1, r3
 8008850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008852:	2200      	movs	r2, #0
 8008854:	61bb      	str	r3, [r7, #24]
 8008856:	61fa      	str	r2, [r7, #28]
 8008858:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800885c:	f7f8 f9f4 	bl	8000c48 <__aeabi_uldivmod>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	4613      	mov	r3, r2
 8008866:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008868:	4b0b      	ldr	r3, [pc, #44]	; (8008898 <HAL_RCC_GetSysClockFreq+0x200>)
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	0c1b      	lsrs	r3, r3, #16
 800886e:	f003 0303 	and.w	r3, r3, #3
 8008872:	3301      	adds	r3, #1
 8008874:	005b      	lsls	r3, r3, #1
 8008876:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008878:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800887a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800887c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008880:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008882:	e002      	b.n	800888a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008884:	4b05      	ldr	r3, [pc, #20]	; (800889c <HAL_RCC_GetSysClockFreq+0x204>)
 8008886:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800888a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800888c:	4618      	mov	r0, r3
 800888e:	3750      	adds	r7, #80	; 0x50
 8008890:	46bd      	mov	sp, r7
 8008892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008896:	bf00      	nop
 8008898:	40023800 	.word	0x40023800
 800889c:	00f42400 	.word	0x00f42400
 80088a0:	007a1200 	.word	0x007a1200

080088a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088a8:	4b03      	ldr	r3, [pc, #12]	; (80088b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80088aa:	681b      	ldr	r3, [r3, #0]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	200000e8 	.word	0x200000e8

080088bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80088c0:	f7ff fff0 	bl	80088a4 <HAL_RCC_GetHCLKFreq>
 80088c4:	4602      	mov	r2, r0
 80088c6:	4b05      	ldr	r3, [pc, #20]	; (80088dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	0a9b      	lsrs	r3, r3, #10
 80088cc:	f003 0307 	and.w	r3, r3, #7
 80088d0:	4903      	ldr	r1, [pc, #12]	; (80088e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80088d2:	5ccb      	ldrb	r3, [r1, r3]
 80088d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088d8:	4618      	mov	r0, r3
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	40023800 	.word	0x40023800
 80088e0:	0800b544 	.word	0x0800b544

080088e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80088e8:	f7ff ffdc 	bl	80088a4 <HAL_RCC_GetHCLKFreq>
 80088ec:	4602      	mov	r2, r0
 80088ee:	4b05      	ldr	r3, [pc, #20]	; (8008904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	0b5b      	lsrs	r3, r3, #13
 80088f4:	f003 0307 	and.w	r3, r3, #7
 80088f8:	4903      	ldr	r1, [pc, #12]	; (8008908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80088fa:	5ccb      	ldrb	r3, [r1, r3]
 80088fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008900:	4618      	mov	r0, r3
 8008902:	bd80      	pop	{r7, pc}
 8008904:	40023800 	.word	0x40023800
 8008908:	0800b544 	.word	0x0800b544

0800890c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e03f      	b.n	800899e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	d106      	bne.n	8008938 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f837 	bl	80089a6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2224      	movs	r2, #36	; 0x24
 800893c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68da      	ldr	r2, [r3, #12]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800894e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f933 	bl	8008bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	691a      	ldr	r2, [r3, #16]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008964:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	695a      	ldr	r2, [r3, #20]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008974:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68da      	ldr	r2, [r3, #12]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008984:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2220      	movs	r2, #32
 8008990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2220      	movs	r2, #32
 8008998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b083      	sub	sp, #12
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80089ae:	bf00      	nop
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b08a      	sub	sp, #40	; 0x28
 80089be:	af02      	add	r7, sp, #8
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	603b      	str	r3, [r7, #0]
 80089c6:	4613      	mov	r3, r2
 80089c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80089ca:	2300      	movs	r3, #0
 80089cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b20      	cmp	r3, #32
 80089d8:	d17c      	bne.n	8008ad4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <HAL_UART_Transmit+0x2c>
 80089e0:	88fb      	ldrh	r3, [r7, #6]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e075      	b.n	8008ad6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d101      	bne.n	80089f8 <HAL_UART_Transmit+0x3e>
 80089f4:	2302      	movs	r3, #2
 80089f6:	e06e      	b.n	8008ad6 <HAL_UART_Transmit+0x11c>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2221      	movs	r2, #33	; 0x21
 8008a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a0e:	f7fd feb3 	bl	8006778 <HAL_GetTick>
 8008a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	88fa      	ldrh	r2, [r7, #6]
 8008a18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	88fa      	ldrh	r2, [r7, #6]
 8008a1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a28:	d108      	bne.n	8008a3c <HAL_UART_Transmit+0x82>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d104      	bne.n	8008a3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	61bb      	str	r3, [r7, #24]
 8008a3a:	e003      	b.n	8008a44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a40:	2300      	movs	r3, #0
 8008a42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008a4c:	e02a      	b.n	8008aa4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2200      	movs	r2, #0
 8008a56:	2180      	movs	r1, #128	; 0x80
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 f840 	bl	8008ade <UART_WaitOnFlagUntilTimeout>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e036      	b.n	8008ad6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10b      	bne.n	8008a86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	881b      	ldrh	r3, [r3, #0]
 8008a72:	461a      	mov	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	3302      	adds	r3, #2
 8008a82:	61bb      	str	r3, [r7, #24]
 8008a84:	e007      	b.n	8008a96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	781a      	ldrb	r2, [r3, #0]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	3301      	adds	r3, #1
 8008a94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1cf      	bne.n	8008a4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2140      	movs	r1, #64	; 0x40
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 f810 	bl	8008ade <UART_WaitOnFlagUntilTimeout>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e006      	b.n	8008ad6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2220      	movs	r2, #32
 8008acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	e000      	b.n	8008ad6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008ad4:	2302      	movs	r3, #2
  }
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3720      	adds	r7, #32
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b090      	sub	sp, #64	; 0x40
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	60f8      	str	r0, [r7, #12]
 8008ae6:	60b9      	str	r1, [r7, #8]
 8008ae8:	603b      	str	r3, [r7, #0]
 8008aea:	4613      	mov	r3, r2
 8008aec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aee:	e050      	b.n	8008b92 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af6:	d04c      	beq.n	8008b92 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d007      	beq.n	8008b0e <UART_WaitOnFlagUntilTimeout+0x30>
 8008afe:	f7fd fe3b 	bl	8006778 <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d241      	bcs.n	8008b92 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	330c      	adds	r3, #12
 8008b14:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b18:	e853 3f00 	ldrex	r3, [r3]
 8008b1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	330c      	adds	r3, #12
 8008b2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b2e:	637a      	str	r2, [r7, #52]	; 0x34
 8008b30:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b36:	e841 2300 	strex	r3, r2, [r1]
 8008b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1e5      	bne.n	8008b0e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3314      	adds	r3, #20
 8008b48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	613b      	str	r3, [r7, #16]
   return(result);
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	f023 0301 	bic.w	r3, r3, #1
 8008b58:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3314      	adds	r3, #20
 8008b60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b62:	623a      	str	r2, [r7, #32]
 8008b64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	69f9      	ldr	r1, [r7, #28]
 8008b68:	6a3a      	ldr	r2, [r7, #32]
 8008b6a:	e841 2300 	strex	r3, r2, [r1]
 8008b6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e5      	bne.n	8008b42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2220      	movs	r2, #32
 8008b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2220      	movs	r2, #32
 8008b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e00f      	b.n	8008bb2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	bf0c      	ite	eq
 8008ba2:	2301      	moveq	r3, #1
 8008ba4:	2300      	movne	r3, #0
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	461a      	mov	r2, r3
 8008baa:	79fb      	ldrb	r3, [r7, #7]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d09f      	beq.n	8008af0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3740      	adds	r7, #64	; 0x40
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
	...

08008bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bc0:	b0c0      	sub	sp, #256	; 0x100
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd8:	68d9      	ldr	r1, [r3, #12]
 8008bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	ea40 0301 	orr.w	r3, r0, r1
 8008be4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bea:	689a      	ldr	r2, [r3, #8]
 8008bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	431a      	orrs	r2, r3
 8008bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c00:	69db      	ldr	r3, [r3, #28]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c14:	f021 010c 	bic.w	r1, r1, #12
 8008c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c22:	430b      	orrs	r3, r1
 8008c24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	695b      	ldr	r3, [r3, #20]
 8008c2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c36:	6999      	ldr	r1, [r3, #24]
 8008c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	ea40 0301 	orr.w	r3, r0, r1
 8008c42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	4b8f      	ldr	r3, [pc, #572]	; (8008e88 <UART_SetConfig+0x2cc>)
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d005      	beq.n	8008c5c <UART_SetConfig+0xa0>
 8008c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	4b8d      	ldr	r3, [pc, #564]	; (8008e8c <UART_SetConfig+0x2d0>)
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d104      	bne.n	8008c66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c5c:	f7ff fe42 	bl	80088e4 <HAL_RCC_GetPCLK2Freq>
 8008c60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008c64:	e003      	b.n	8008c6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c66:	f7ff fe29 	bl	80088bc <HAL_RCC_GetPCLK1Freq>
 8008c6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c72:	69db      	ldr	r3, [r3, #28]
 8008c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c78:	f040 810c 	bne.w	8008e94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c80:	2200      	movs	r2, #0
 8008c82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008c8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008c8e:	4622      	mov	r2, r4
 8008c90:	462b      	mov	r3, r5
 8008c92:	1891      	adds	r1, r2, r2
 8008c94:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c96:	415b      	adcs	r3, r3
 8008c98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	eb12 0801 	adds.w	r8, r2, r1
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	eb43 0901 	adc.w	r9, r3, r1
 8008caa:	f04f 0200 	mov.w	r2, #0
 8008cae:	f04f 0300 	mov.w	r3, #0
 8008cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cbe:	4690      	mov	r8, r2
 8008cc0:	4699      	mov	r9, r3
 8008cc2:	4623      	mov	r3, r4
 8008cc4:	eb18 0303 	adds.w	r3, r8, r3
 8008cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ccc:	462b      	mov	r3, r5
 8008cce:	eb49 0303 	adc.w	r3, r9, r3
 8008cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ce2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008ce6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008cea:	460b      	mov	r3, r1
 8008cec:	18db      	adds	r3, r3, r3
 8008cee:	653b      	str	r3, [r7, #80]	; 0x50
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	eb42 0303 	adc.w	r3, r2, r3
 8008cf6:	657b      	str	r3, [r7, #84]	; 0x54
 8008cf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008cfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008d00:	f7f7 ffa2 	bl	8000c48 <__aeabi_uldivmod>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	4b61      	ldr	r3, [pc, #388]	; (8008e90 <UART_SetConfig+0x2d4>)
 8008d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d0e:	095b      	lsrs	r3, r3, #5
 8008d10:	011c      	lsls	r4, r3, #4
 8008d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d24:	4642      	mov	r2, r8
 8008d26:	464b      	mov	r3, r9
 8008d28:	1891      	adds	r1, r2, r2
 8008d2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d2c:	415b      	adcs	r3, r3
 8008d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d34:	4641      	mov	r1, r8
 8008d36:	eb12 0a01 	adds.w	sl, r2, r1
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	eb43 0b01 	adc.w	fp, r3, r1
 8008d40:	f04f 0200 	mov.w	r2, #0
 8008d44:	f04f 0300 	mov.w	r3, #0
 8008d48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d54:	4692      	mov	sl, r2
 8008d56:	469b      	mov	fp, r3
 8008d58:	4643      	mov	r3, r8
 8008d5a:	eb1a 0303 	adds.w	r3, sl, r3
 8008d5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d62:	464b      	mov	r3, r9
 8008d64:	eb4b 0303 	adc.w	r3, fp, r3
 8008d68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008d7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008d80:	460b      	mov	r3, r1
 8008d82:	18db      	adds	r3, r3, r3
 8008d84:	643b      	str	r3, [r7, #64]	; 0x40
 8008d86:	4613      	mov	r3, r2
 8008d88:	eb42 0303 	adc.w	r3, r2, r3
 8008d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8008d8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d96:	f7f7 ff57 	bl	8000c48 <__aeabi_uldivmod>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	4611      	mov	r1, r2
 8008da0:	4b3b      	ldr	r3, [pc, #236]	; (8008e90 <UART_SetConfig+0x2d4>)
 8008da2:	fba3 2301 	umull	r2, r3, r3, r1
 8008da6:	095b      	lsrs	r3, r3, #5
 8008da8:	2264      	movs	r2, #100	; 0x64
 8008daa:	fb02 f303 	mul.w	r3, r2, r3
 8008dae:	1acb      	subs	r3, r1, r3
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008db6:	4b36      	ldr	r3, [pc, #216]	; (8008e90 <UART_SetConfig+0x2d4>)
 8008db8:	fba3 2302 	umull	r2, r3, r3, r2
 8008dbc:	095b      	lsrs	r3, r3, #5
 8008dbe:	005b      	lsls	r3, r3, #1
 8008dc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008dc4:	441c      	add	r4, r3
 8008dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008dd0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008dd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008dd8:	4642      	mov	r2, r8
 8008dda:	464b      	mov	r3, r9
 8008ddc:	1891      	adds	r1, r2, r2
 8008dde:	63b9      	str	r1, [r7, #56]	; 0x38
 8008de0:	415b      	adcs	r3, r3
 8008de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008de4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008de8:	4641      	mov	r1, r8
 8008dea:	1851      	adds	r1, r2, r1
 8008dec:	6339      	str	r1, [r7, #48]	; 0x30
 8008dee:	4649      	mov	r1, r9
 8008df0:	414b      	adcs	r3, r1
 8008df2:	637b      	str	r3, [r7, #52]	; 0x34
 8008df4:	f04f 0200 	mov.w	r2, #0
 8008df8:	f04f 0300 	mov.w	r3, #0
 8008dfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008e00:	4659      	mov	r1, fp
 8008e02:	00cb      	lsls	r3, r1, #3
 8008e04:	4651      	mov	r1, sl
 8008e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e0a:	4651      	mov	r1, sl
 8008e0c:	00ca      	lsls	r2, r1, #3
 8008e0e:	4610      	mov	r0, r2
 8008e10:	4619      	mov	r1, r3
 8008e12:	4603      	mov	r3, r0
 8008e14:	4642      	mov	r2, r8
 8008e16:	189b      	adds	r3, r3, r2
 8008e18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e1c:	464b      	mov	r3, r9
 8008e1e:	460a      	mov	r2, r1
 8008e20:	eb42 0303 	adc.w	r3, r2, r3
 8008e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	18db      	adds	r3, r3, r3
 8008e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e42:	4613      	mov	r3, r2
 8008e44:	eb42 0303 	adc.w	r3, r2, r3
 8008e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e52:	f7f7 fef9 	bl	8000c48 <__aeabi_uldivmod>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4b0d      	ldr	r3, [pc, #52]	; (8008e90 <UART_SetConfig+0x2d4>)
 8008e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e60:	095b      	lsrs	r3, r3, #5
 8008e62:	2164      	movs	r1, #100	; 0x64
 8008e64:	fb01 f303 	mul.w	r3, r1, r3
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	00db      	lsls	r3, r3, #3
 8008e6c:	3332      	adds	r3, #50	; 0x32
 8008e6e:	4a08      	ldr	r2, [pc, #32]	; (8008e90 <UART_SetConfig+0x2d4>)
 8008e70:	fba2 2303 	umull	r2, r3, r2, r3
 8008e74:	095b      	lsrs	r3, r3, #5
 8008e76:	f003 0207 	and.w	r2, r3, #7
 8008e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4422      	add	r2, r4
 8008e82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e84:	e105      	b.n	8009092 <UART_SetConfig+0x4d6>
 8008e86:	bf00      	nop
 8008e88:	40011000 	.word	0x40011000
 8008e8c:	40011400 	.word	0x40011400
 8008e90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008ea2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008ea6:	4642      	mov	r2, r8
 8008ea8:	464b      	mov	r3, r9
 8008eaa:	1891      	adds	r1, r2, r2
 8008eac:	6239      	str	r1, [r7, #32]
 8008eae:	415b      	adcs	r3, r3
 8008eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8008eb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008eb6:	4641      	mov	r1, r8
 8008eb8:	1854      	adds	r4, r2, r1
 8008eba:	4649      	mov	r1, r9
 8008ebc:	eb43 0501 	adc.w	r5, r3, r1
 8008ec0:	f04f 0200 	mov.w	r2, #0
 8008ec4:	f04f 0300 	mov.w	r3, #0
 8008ec8:	00eb      	lsls	r3, r5, #3
 8008eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ece:	00e2      	lsls	r2, r4, #3
 8008ed0:	4614      	mov	r4, r2
 8008ed2:	461d      	mov	r5, r3
 8008ed4:	4643      	mov	r3, r8
 8008ed6:	18e3      	adds	r3, r4, r3
 8008ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008edc:	464b      	mov	r3, r9
 8008ede:	eb45 0303 	adc.w	r3, r5, r3
 8008ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ef2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ef6:	f04f 0200 	mov.w	r2, #0
 8008efa:	f04f 0300 	mov.w	r3, #0
 8008efe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008f02:	4629      	mov	r1, r5
 8008f04:	008b      	lsls	r3, r1, #2
 8008f06:	4621      	mov	r1, r4
 8008f08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f0c:	4621      	mov	r1, r4
 8008f0e:	008a      	lsls	r2, r1, #2
 8008f10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f14:	f7f7 fe98 	bl	8000c48 <__aeabi_uldivmod>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	4b60      	ldr	r3, [pc, #384]	; (80090a0 <UART_SetConfig+0x4e4>)
 8008f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f22:	095b      	lsrs	r3, r3, #5
 8008f24:	011c      	lsls	r4, r3, #4
 8008f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f38:	4642      	mov	r2, r8
 8008f3a:	464b      	mov	r3, r9
 8008f3c:	1891      	adds	r1, r2, r2
 8008f3e:	61b9      	str	r1, [r7, #24]
 8008f40:	415b      	adcs	r3, r3
 8008f42:	61fb      	str	r3, [r7, #28]
 8008f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f48:	4641      	mov	r1, r8
 8008f4a:	1851      	adds	r1, r2, r1
 8008f4c:	6139      	str	r1, [r7, #16]
 8008f4e:	4649      	mov	r1, r9
 8008f50:	414b      	adcs	r3, r1
 8008f52:	617b      	str	r3, [r7, #20]
 8008f54:	f04f 0200 	mov.w	r2, #0
 8008f58:	f04f 0300 	mov.w	r3, #0
 8008f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f60:	4659      	mov	r1, fp
 8008f62:	00cb      	lsls	r3, r1, #3
 8008f64:	4651      	mov	r1, sl
 8008f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f6a:	4651      	mov	r1, sl
 8008f6c:	00ca      	lsls	r2, r1, #3
 8008f6e:	4610      	mov	r0, r2
 8008f70:	4619      	mov	r1, r3
 8008f72:	4603      	mov	r3, r0
 8008f74:	4642      	mov	r2, r8
 8008f76:	189b      	adds	r3, r3, r2
 8008f78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f7c:	464b      	mov	r3, r9
 8008f7e:	460a      	mov	r2, r1
 8008f80:	eb42 0303 	adc.w	r3, r2, r3
 8008f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f94:	f04f 0200 	mov.w	r2, #0
 8008f98:	f04f 0300 	mov.w	r3, #0
 8008f9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008fa0:	4649      	mov	r1, r9
 8008fa2:	008b      	lsls	r3, r1, #2
 8008fa4:	4641      	mov	r1, r8
 8008fa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008faa:	4641      	mov	r1, r8
 8008fac:	008a      	lsls	r2, r1, #2
 8008fae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008fb2:	f7f7 fe49 	bl	8000c48 <__aeabi_uldivmod>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	4b39      	ldr	r3, [pc, #228]	; (80090a0 <UART_SetConfig+0x4e4>)
 8008fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8008fc0:	095b      	lsrs	r3, r3, #5
 8008fc2:	2164      	movs	r1, #100	; 0x64
 8008fc4:	fb01 f303 	mul.w	r3, r1, r3
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	011b      	lsls	r3, r3, #4
 8008fcc:	3332      	adds	r3, #50	; 0x32
 8008fce:	4a34      	ldr	r2, [pc, #208]	; (80090a0 <UART_SetConfig+0x4e4>)
 8008fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd4:	095b      	lsrs	r3, r3, #5
 8008fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fda:	441c      	add	r4, r3
 8008fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	673b      	str	r3, [r7, #112]	; 0x70
 8008fe4:	677a      	str	r2, [r7, #116]	; 0x74
 8008fe6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008fea:	4642      	mov	r2, r8
 8008fec:	464b      	mov	r3, r9
 8008fee:	1891      	adds	r1, r2, r2
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	415b      	adcs	r3, r3
 8008ff4:	60fb      	str	r3, [r7, #12]
 8008ff6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ffa:	4641      	mov	r1, r8
 8008ffc:	1851      	adds	r1, r2, r1
 8008ffe:	6039      	str	r1, [r7, #0]
 8009000:	4649      	mov	r1, r9
 8009002:	414b      	adcs	r3, r1
 8009004:	607b      	str	r3, [r7, #4]
 8009006:	f04f 0200 	mov.w	r2, #0
 800900a:	f04f 0300 	mov.w	r3, #0
 800900e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009012:	4659      	mov	r1, fp
 8009014:	00cb      	lsls	r3, r1, #3
 8009016:	4651      	mov	r1, sl
 8009018:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800901c:	4651      	mov	r1, sl
 800901e:	00ca      	lsls	r2, r1, #3
 8009020:	4610      	mov	r0, r2
 8009022:	4619      	mov	r1, r3
 8009024:	4603      	mov	r3, r0
 8009026:	4642      	mov	r2, r8
 8009028:	189b      	adds	r3, r3, r2
 800902a:	66bb      	str	r3, [r7, #104]	; 0x68
 800902c:	464b      	mov	r3, r9
 800902e:	460a      	mov	r2, r1
 8009030:	eb42 0303 	adc.w	r3, r2, r3
 8009034:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	663b      	str	r3, [r7, #96]	; 0x60
 8009040:	667a      	str	r2, [r7, #100]	; 0x64
 8009042:	f04f 0200 	mov.w	r2, #0
 8009046:	f04f 0300 	mov.w	r3, #0
 800904a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800904e:	4649      	mov	r1, r9
 8009050:	008b      	lsls	r3, r1, #2
 8009052:	4641      	mov	r1, r8
 8009054:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009058:	4641      	mov	r1, r8
 800905a:	008a      	lsls	r2, r1, #2
 800905c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009060:	f7f7 fdf2 	bl	8000c48 <__aeabi_uldivmod>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	4b0d      	ldr	r3, [pc, #52]	; (80090a0 <UART_SetConfig+0x4e4>)
 800906a:	fba3 1302 	umull	r1, r3, r3, r2
 800906e:	095b      	lsrs	r3, r3, #5
 8009070:	2164      	movs	r1, #100	; 0x64
 8009072:	fb01 f303 	mul.w	r3, r1, r3
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	011b      	lsls	r3, r3, #4
 800907a:	3332      	adds	r3, #50	; 0x32
 800907c:	4a08      	ldr	r2, [pc, #32]	; (80090a0 <UART_SetConfig+0x4e4>)
 800907e:	fba2 2303 	umull	r2, r3, r2, r3
 8009082:	095b      	lsrs	r3, r3, #5
 8009084:	f003 020f 	and.w	r2, r3, #15
 8009088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4422      	add	r2, r4
 8009090:	609a      	str	r2, [r3, #8]
}
 8009092:	bf00      	nop
 8009094:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009098:	46bd      	mov	sp, r7
 800909a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800909e:	bf00      	nop
 80090a0:	51eb851f 	.word	0x51eb851f

080090a4 <__errno>:
 80090a4:	4b01      	ldr	r3, [pc, #4]	; (80090ac <__errno+0x8>)
 80090a6:	6818      	ldr	r0, [r3, #0]
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	200000f4 	.word	0x200000f4

080090b0 <__libc_init_array>:
 80090b0:	b570      	push	{r4, r5, r6, lr}
 80090b2:	4d0d      	ldr	r5, [pc, #52]	; (80090e8 <__libc_init_array+0x38>)
 80090b4:	4c0d      	ldr	r4, [pc, #52]	; (80090ec <__libc_init_array+0x3c>)
 80090b6:	1b64      	subs	r4, r4, r5
 80090b8:	10a4      	asrs	r4, r4, #2
 80090ba:	2600      	movs	r6, #0
 80090bc:	42a6      	cmp	r6, r4
 80090be:	d109      	bne.n	80090d4 <__libc_init_array+0x24>
 80090c0:	4d0b      	ldr	r5, [pc, #44]	; (80090f0 <__libc_init_array+0x40>)
 80090c2:	4c0c      	ldr	r4, [pc, #48]	; (80090f4 <__libc_init_array+0x44>)
 80090c4:	f002 f8ea 	bl	800b29c <_init>
 80090c8:	1b64      	subs	r4, r4, r5
 80090ca:	10a4      	asrs	r4, r4, #2
 80090cc:	2600      	movs	r6, #0
 80090ce:	42a6      	cmp	r6, r4
 80090d0:	d105      	bne.n	80090de <__libc_init_array+0x2e>
 80090d2:	bd70      	pop	{r4, r5, r6, pc}
 80090d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090d8:	4798      	blx	r3
 80090da:	3601      	adds	r6, #1
 80090dc:	e7ee      	b.n	80090bc <__libc_init_array+0xc>
 80090de:	f855 3b04 	ldr.w	r3, [r5], #4
 80090e2:	4798      	blx	r3
 80090e4:	3601      	adds	r6, #1
 80090e6:	e7f2      	b.n	80090ce <__libc_init_array+0x1e>
 80090e8:	0800b620 	.word	0x0800b620
 80090ec:	0800b620 	.word	0x0800b620
 80090f0:	0800b620 	.word	0x0800b620
 80090f4:	0800b624 	.word	0x0800b624

080090f8 <memset>:
 80090f8:	4402      	add	r2, r0
 80090fa:	4603      	mov	r3, r0
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d100      	bne.n	8009102 <memset+0xa>
 8009100:	4770      	bx	lr
 8009102:	f803 1b01 	strb.w	r1, [r3], #1
 8009106:	e7f9      	b.n	80090fc <memset+0x4>

08009108 <iprintf>:
 8009108:	b40f      	push	{r0, r1, r2, r3}
 800910a:	4b0a      	ldr	r3, [pc, #40]	; (8009134 <iprintf+0x2c>)
 800910c:	b513      	push	{r0, r1, r4, lr}
 800910e:	681c      	ldr	r4, [r3, #0]
 8009110:	b124      	cbz	r4, 800911c <iprintf+0x14>
 8009112:	69a3      	ldr	r3, [r4, #24]
 8009114:	b913      	cbnz	r3, 800911c <iprintf+0x14>
 8009116:	4620      	mov	r0, r4
 8009118:	f000 f89a 	bl	8009250 <__sinit>
 800911c:	ab05      	add	r3, sp, #20
 800911e:	9a04      	ldr	r2, [sp, #16]
 8009120:	68a1      	ldr	r1, [r4, #8]
 8009122:	9301      	str	r3, [sp, #4]
 8009124:	4620      	mov	r0, r4
 8009126:	f000 fb4d 	bl	80097c4 <_vfiprintf_r>
 800912a:	b002      	add	sp, #8
 800912c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009130:	b004      	add	sp, #16
 8009132:	4770      	bx	lr
 8009134:	200000f4 	.word	0x200000f4

08009138 <sniprintf>:
 8009138:	b40c      	push	{r2, r3}
 800913a:	b530      	push	{r4, r5, lr}
 800913c:	4b17      	ldr	r3, [pc, #92]	; (800919c <sniprintf+0x64>)
 800913e:	1e0c      	subs	r4, r1, #0
 8009140:	681d      	ldr	r5, [r3, #0]
 8009142:	b09d      	sub	sp, #116	; 0x74
 8009144:	da08      	bge.n	8009158 <sniprintf+0x20>
 8009146:	238b      	movs	r3, #139	; 0x8b
 8009148:	602b      	str	r3, [r5, #0]
 800914a:	f04f 30ff 	mov.w	r0, #4294967295
 800914e:	b01d      	add	sp, #116	; 0x74
 8009150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009154:	b002      	add	sp, #8
 8009156:	4770      	bx	lr
 8009158:	f44f 7302 	mov.w	r3, #520	; 0x208
 800915c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009160:	bf14      	ite	ne
 8009162:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009166:	4623      	moveq	r3, r4
 8009168:	9304      	str	r3, [sp, #16]
 800916a:	9307      	str	r3, [sp, #28]
 800916c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009170:	9002      	str	r0, [sp, #8]
 8009172:	9006      	str	r0, [sp, #24]
 8009174:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009178:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800917a:	ab21      	add	r3, sp, #132	; 0x84
 800917c:	a902      	add	r1, sp, #8
 800917e:	4628      	mov	r0, r5
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	f000 f9f5 	bl	8009570 <_svfiprintf_r>
 8009186:	1c43      	adds	r3, r0, #1
 8009188:	bfbc      	itt	lt
 800918a:	238b      	movlt	r3, #139	; 0x8b
 800918c:	602b      	strlt	r3, [r5, #0]
 800918e:	2c00      	cmp	r4, #0
 8009190:	d0dd      	beq.n	800914e <sniprintf+0x16>
 8009192:	9b02      	ldr	r3, [sp, #8]
 8009194:	2200      	movs	r2, #0
 8009196:	701a      	strb	r2, [r3, #0]
 8009198:	e7d9      	b.n	800914e <sniprintf+0x16>
 800919a:	bf00      	nop
 800919c:	200000f4 	.word	0x200000f4

080091a0 <std>:
 80091a0:	2300      	movs	r3, #0
 80091a2:	b510      	push	{r4, lr}
 80091a4:	4604      	mov	r4, r0
 80091a6:	e9c0 3300 	strd	r3, r3, [r0]
 80091aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091ae:	6083      	str	r3, [r0, #8]
 80091b0:	8181      	strh	r1, [r0, #12]
 80091b2:	6643      	str	r3, [r0, #100]	; 0x64
 80091b4:	81c2      	strh	r2, [r0, #14]
 80091b6:	6183      	str	r3, [r0, #24]
 80091b8:	4619      	mov	r1, r3
 80091ba:	2208      	movs	r2, #8
 80091bc:	305c      	adds	r0, #92	; 0x5c
 80091be:	f7ff ff9b 	bl	80090f8 <memset>
 80091c2:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <std+0x38>)
 80091c4:	6263      	str	r3, [r4, #36]	; 0x24
 80091c6:	4b05      	ldr	r3, [pc, #20]	; (80091dc <std+0x3c>)
 80091c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80091ca:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <std+0x40>)
 80091cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091ce:	4b05      	ldr	r3, [pc, #20]	; (80091e4 <std+0x44>)
 80091d0:	6224      	str	r4, [r4, #32]
 80091d2:	6323      	str	r3, [r4, #48]	; 0x30
 80091d4:	bd10      	pop	{r4, pc}
 80091d6:	bf00      	nop
 80091d8:	08009d6d 	.word	0x08009d6d
 80091dc:	08009d8f 	.word	0x08009d8f
 80091e0:	08009dc7 	.word	0x08009dc7
 80091e4:	08009deb 	.word	0x08009deb

080091e8 <_cleanup_r>:
 80091e8:	4901      	ldr	r1, [pc, #4]	; (80091f0 <_cleanup_r+0x8>)
 80091ea:	f000 b8af 	b.w	800934c <_fwalk_reent>
 80091ee:	bf00      	nop
 80091f0:	0800a0c5 	.word	0x0800a0c5

080091f4 <__sfmoreglue>:
 80091f4:	b570      	push	{r4, r5, r6, lr}
 80091f6:	2268      	movs	r2, #104	; 0x68
 80091f8:	1e4d      	subs	r5, r1, #1
 80091fa:	4355      	muls	r5, r2
 80091fc:	460e      	mov	r6, r1
 80091fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009202:	f000 f8e5 	bl	80093d0 <_malloc_r>
 8009206:	4604      	mov	r4, r0
 8009208:	b140      	cbz	r0, 800921c <__sfmoreglue+0x28>
 800920a:	2100      	movs	r1, #0
 800920c:	e9c0 1600 	strd	r1, r6, [r0]
 8009210:	300c      	adds	r0, #12
 8009212:	60a0      	str	r0, [r4, #8]
 8009214:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009218:	f7ff ff6e 	bl	80090f8 <memset>
 800921c:	4620      	mov	r0, r4
 800921e:	bd70      	pop	{r4, r5, r6, pc}

08009220 <__sfp_lock_acquire>:
 8009220:	4801      	ldr	r0, [pc, #4]	; (8009228 <__sfp_lock_acquire+0x8>)
 8009222:	f000 b8b3 	b.w	800938c <__retarget_lock_acquire_recursive>
 8009226:	bf00      	nop
 8009228:	20000451 	.word	0x20000451

0800922c <__sfp_lock_release>:
 800922c:	4801      	ldr	r0, [pc, #4]	; (8009234 <__sfp_lock_release+0x8>)
 800922e:	f000 b8ae 	b.w	800938e <__retarget_lock_release_recursive>
 8009232:	bf00      	nop
 8009234:	20000451 	.word	0x20000451

08009238 <__sinit_lock_acquire>:
 8009238:	4801      	ldr	r0, [pc, #4]	; (8009240 <__sinit_lock_acquire+0x8>)
 800923a:	f000 b8a7 	b.w	800938c <__retarget_lock_acquire_recursive>
 800923e:	bf00      	nop
 8009240:	20000452 	.word	0x20000452

08009244 <__sinit_lock_release>:
 8009244:	4801      	ldr	r0, [pc, #4]	; (800924c <__sinit_lock_release+0x8>)
 8009246:	f000 b8a2 	b.w	800938e <__retarget_lock_release_recursive>
 800924a:	bf00      	nop
 800924c:	20000452 	.word	0x20000452

08009250 <__sinit>:
 8009250:	b510      	push	{r4, lr}
 8009252:	4604      	mov	r4, r0
 8009254:	f7ff fff0 	bl	8009238 <__sinit_lock_acquire>
 8009258:	69a3      	ldr	r3, [r4, #24]
 800925a:	b11b      	cbz	r3, 8009264 <__sinit+0x14>
 800925c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009260:	f7ff bff0 	b.w	8009244 <__sinit_lock_release>
 8009264:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009268:	6523      	str	r3, [r4, #80]	; 0x50
 800926a:	4b13      	ldr	r3, [pc, #76]	; (80092b8 <__sinit+0x68>)
 800926c:	4a13      	ldr	r2, [pc, #76]	; (80092bc <__sinit+0x6c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	62a2      	str	r2, [r4, #40]	; 0x28
 8009272:	42a3      	cmp	r3, r4
 8009274:	bf04      	itt	eq
 8009276:	2301      	moveq	r3, #1
 8009278:	61a3      	streq	r3, [r4, #24]
 800927a:	4620      	mov	r0, r4
 800927c:	f000 f820 	bl	80092c0 <__sfp>
 8009280:	6060      	str	r0, [r4, #4]
 8009282:	4620      	mov	r0, r4
 8009284:	f000 f81c 	bl	80092c0 <__sfp>
 8009288:	60a0      	str	r0, [r4, #8]
 800928a:	4620      	mov	r0, r4
 800928c:	f000 f818 	bl	80092c0 <__sfp>
 8009290:	2200      	movs	r2, #0
 8009292:	60e0      	str	r0, [r4, #12]
 8009294:	2104      	movs	r1, #4
 8009296:	6860      	ldr	r0, [r4, #4]
 8009298:	f7ff ff82 	bl	80091a0 <std>
 800929c:	68a0      	ldr	r0, [r4, #8]
 800929e:	2201      	movs	r2, #1
 80092a0:	2109      	movs	r1, #9
 80092a2:	f7ff ff7d 	bl	80091a0 <std>
 80092a6:	68e0      	ldr	r0, [r4, #12]
 80092a8:	2202      	movs	r2, #2
 80092aa:	2112      	movs	r1, #18
 80092ac:	f7ff ff78 	bl	80091a0 <std>
 80092b0:	2301      	movs	r3, #1
 80092b2:	61a3      	str	r3, [r4, #24]
 80092b4:	e7d2      	b.n	800925c <__sinit+0xc>
 80092b6:	bf00      	nop
 80092b8:	0800b54c 	.word	0x0800b54c
 80092bc:	080091e9 	.word	0x080091e9

080092c0 <__sfp>:
 80092c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c2:	4607      	mov	r7, r0
 80092c4:	f7ff ffac 	bl	8009220 <__sfp_lock_acquire>
 80092c8:	4b1e      	ldr	r3, [pc, #120]	; (8009344 <__sfp+0x84>)
 80092ca:	681e      	ldr	r6, [r3, #0]
 80092cc:	69b3      	ldr	r3, [r6, #24]
 80092ce:	b913      	cbnz	r3, 80092d6 <__sfp+0x16>
 80092d0:	4630      	mov	r0, r6
 80092d2:	f7ff ffbd 	bl	8009250 <__sinit>
 80092d6:	3648      	adds	r6, #72	; 0x48
 80092d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092dc:	3b01      	subs	r3, #1
 80092de:	d503      	bpl.n	80092e8 <__sfp+0x28>
 80092e0:	6833      	ldr	r3, [r6, #0]
 80092e2:	b30b      	cbz	r3, 8009328 <__sfp+0x68>
 80092e4:	6836      	ldr	r6, [r6, #0]
 80092e6:	e7f7      	b.n	80092d8 <__sfp+0x18>
 80092e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092ec:	b9d5      	cbnz	r5, 8009324 <__sfp+0x64>
 80092ee:	4b16      	ldr	r3, [pc, #88]	; (8009348 <__sfp+0x88>)
 80092f0:	60e3      	str	r3, [r4, #12]
 80092f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092f6:	6665      	str	r5, [r4, #100]	; 0x64
 80092f8:	f000 f847 	bl	800938a <__retarget_lock_init_recursive>
 80092fc:	f7ff ff96 	bl	800922c <__sfp_lock_release>
 8009300:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009304:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009308:	6025      	str	r5, [r4, #0]
 800930a:	61a5      	str	r5, [r4, #24]
 800930c:	2208      	movs	r2, #8
 800930e:	4629      	mov	r1, r5
 8009310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009314:	f7ff fef0 	bl	80090f8 <memset>
 8009318:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800931c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009320:	4620      	mov	r0, r4
 8009322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009324:	3468      	adds	r4, #104	; 0x68
 8009326:	e7d9      	b.n	80092dc <__sfp+0x1c>
 8009328:	2104      	movs	r1, #4
 800932a:	4638      	mov	r0, r7
 800932c:	f7ff ff62 	bl	80091f4 <__sfmoreglue>
 8009330:	4604      	mov	r4, r0
 8009332:	6030      	str	r0, [r6, #0]
 8009334:	2800      	cmp	r0, #0
 8009336:	d1d5      	bne.n	80092e4 <__sfp+0x24>
 8009338:	f7ff ff78 	bl	800922c <__sfp_lock_release>
 800933c:	230c      	movs	r3, #12
 800933e:	603b      	str	r3, [r7, #0]
 8009340:	e7ee      	b.n	8009320 <__sfp+0x60>
 8009342:	bf00      	nop
 8009344:	0800b54c 	.word	0x0800b54c
 8009348:	ffff0001 	.word	0xffff0001

0800934c <_fwalk_reent>:
 800934c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009350:	4606      	mov	r6, r0
 8009352:	4688      	mov	r8, r1
 8009354:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009358:	2700      	movs	r7, #0
 800935a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800935e:	f1b9 0901 	subs.w	r9, r9, #1
 8009362:	d505      	bpl.n	8009370 <_fwalk_reent+0x24>
 8009364:	6824      	ldr	r4, [r4, #0]
 8009366:	2c00      	cmp	r4, #0
 8009368:	d1f7      	bne.n	800935a <_fwalk_reent+0xe>
 800936a:	4638      	mov	r0, r7
 800936c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009370:	89ab      	ldrh	r3, [r5, #12]
 8009372:	2b01      	cmp	r3, #1
 8009374:	d907      	bls.n	8009386 <_fwalk_reent+0x3a>
 8009376:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800937a:	3301      	adds	r3, #1
 800937c:	d003      	beq.n	8009386 <_fwalk_reent+0x3a>
 800937e:	4629      	mov	r1, r5
 8009380:	4630      	mov	r0, r6
 8009382:	47c0      	blx	r8
 8009384:	4307      	orrs	r7, r0
 8009386:	3568      	adds	r5, #104	; 0x68
 8009388:	e7e9      	b.n	800935e <_fwalk_reent+0x12>

0800938a <__retarget_lock_init_recursive>:
 800938a:	4770      	bx	lr

0800938c <__retarget_lock_acquire_recursive>:
 800938c:	4770      	bx	lr

0800938e <__retarget_lock_release_recursive>:
 800938e:	4770      	bx	lr

08009390 <sbrk_aligned>:
 8009390:	b570      	push	{r4, r5, r6, lr}
 8009392:	4e0e      	ldr	r6, [pc, #56]	; (80093cc <sbrk_aligned+0x3c>)
 8009394:	460c      	mov	r4, r1
 8009396:	6831      	ldr	r1, [r6, #0]
 8009398:	4605      	mov	r5, r0
 800939a:	b911      	cbnz	r1, 80093a2 <sbrk_aligned+0x12>
 800939c:	f000 fcd6 	bl	8009d4c <_sbrk_r>
 80093a0:	6030      	str	r0, [r6, #0]
 80093a2:	4621      	mov	r1, r4
 80093a4:	4628      	mov	r0, r5
 80093a6:	f000 fcd1 	bl	8009d4c <_sbrk_r>
 80093aa:	1c43      	adds	r3, r0, #1
 80093ac:	d00a      	beq.n	80093c4 <sbrk_aligned+0x34>
 80093ae:	1cc4      	adds	r4, r0, #3
 80093b0:	f024 0403 	bic.w	r4, r4, #3
 80093b4:	42a0      	cmp	r0, r4
 80093b6:	d007      	beq.n	80093c8 <sbrk_aligned+0x38>
 80093b8:	1a21      	subs	r1, r4, r0
 80093ba:	4628      	mov	r0, r5
 80093bc:	f000 fcc6 	bl	8009d4c <_sbrk_r>
 80093c0:	3001      	adds	r0, #1
 80093c2:	d101      	bne.n	80093c8 <sbrk_aligned+0x38>
 80093c4:	f04f 34ff 	mov.w	r4, #4294967295
 80093c8:	4620      	mov	r0, r4
 80093ca:	bd70      	pop	{r4, r5, r6, pc}
 80093cc:	20000458 	.word	0x20000458

080093d0 <_malloc_r>:
 80093d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d4:	1ccd      	adds	r5, r1, #3
 80093d6:	f025 0503 	bic.w	r5, r5, #3
 80093da:	3508      	adds	r5, #8
 80093dc:	2d0c      	cmp	r5, #12
 80093de:	bf38      	it	cc
 80093e0:	250c      	movcc	r5, #12
 80093e2:	2d00      	cmp	r5, #0
 80093e4:	4607      	mov	r7, r0
 80093e6:	db01      	blt.n	80093ec <_malloc_r+0x1c>
 80093e8:	42a9      	cmp	r1, r5
 80093ea:	d905      	bls.n	80093f8 <_malloc_r+0x28>
 80093ec:	230c      	movs	r3, #12
 80093ee:	603b      	str	r3, [r7, #0]
 80093f0:	2600      	movs	r6, #0
 80093f2:	4630      	mov	r0, r6
 80093f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f8:	4e2e      	ldr	r6, [pc, #184]	; (80094b4 <_malloc_r+0xe4>)
 80093fa:	f000 ff3f 	bl	800a27c <__malloc_lock>
 80093fe:	6833      	ldr	r3, [r6, #0]
 8009400:	461c      	mov	r4, r3
 8009402:	bb34      	cbnz	r4, 8009452 <_malloc_r+0x82>
 8009404:	4629      	mov	r1, r5
 8009406:	4638      	mov	r0, r7
 8009408:	f7ff ffc2 	bl	8009390 <sbrk_aligned>
 800940c:	1c43      	adds	r3, r0, #1
 800940e:	4604      	mov	r4, r0
 8009410:	d14d      	bne.n	80094ae <_malloc_r+0xde>
 8009412:	6834      	ldr	r4, [r6, #0]
 8009414:	4626      	mov	r6, r4
 8009416:	2e00      	cmp	r6, #0
 8009418:	d140      	bne.n	800949c <_malloc_r+0xcc>
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	4631      	mov	r1, r6
 800941e:	4638      	mov	r0, r7
 8009420:	eb04 0803 	add.w	r8, r4, r3
 8009424:	f000 fc92 	bl	8009d4c <_sbrk_r>
 8009428:	4580      	cmp	r8, r0
 800942a:	d13a      	bne.n	80094a2 <_malloc_r+0xd2>
 800942c:	6821      	ldr	r1, [r4, #0]
 800942e:	3503      	adds	r5, #3
 8009430:	1a6d      	subs	r5, r5, r1
 8009432:	f025 0503 	bic.w	r5, r5, #3
 8009436:	3508      	adds	r5, #8
 8009438:	2d0c      	cmp	r5, #12
 800943a:	bf38      	it	cc
 800943c:	250c      	movcc	r5, #12
 800943e:	4629      	mov	r1, r5
 8009440:	4638      	mov	r0, r7
 8009442:	f7ff ffa5 	bl	8009390 <sbrk_aligned>
 8009446:	3001      	adds	r0, #1
 8009448:	d02b      	beq.n	80094a2 <_malloc_r+0xd2>
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	442b      	add	r3, r5
 800944e:	6023      	str	r3, [r4, #0]
 8009450:	e00e      	b.n	8009470 <_malloc_r+0xa0>
 8009452:	6822      	ldr	r2, [r4, #0]
 8009454:	1b52      	subs	r2, r2, r5
 8009456:	d41e      	bmi.n	8009496 <_malloc_r+0xc6>
 8009458:	2a0b      	cmp	r2, #11
 800945a:	d916      	bls.n	800948a <_malloc_r+0xba>
 800945c:	1961      	adds	r1, r4, r5
 800945e:	42a3      	cmp	r3, r4
 8009460:	6025      	str	r5, [r4, #0]
 8009462:	bf18      	it	ne
 8009464:	6059      	strne	r1, [r3, #4]
 8009466:	6863      	ldr	r3, [r4, #4]
 8009468:	bf08      	it	eq
 800946a:	6031      	streq	r1, [r6, #0]
 800946c:	5162      	str	r2, [r4, r5]
 800946e:	604b      	str	r3, [r1, #4]
 8009470:	4638      	mov	r0, r7
 8009472:	f104 060b 	add.w	r6, r4, #11
 8009476:	f000 ff07 	bl	800a288 <__malloc_unlock>
 800947a:	f026 0607 	bic.w	r6, r6, #7
 800947e:	1d23      	adds	r3, r4, #4
 8009480:	1af2      	subs	r2, r6, r3
 8009482:	d0b6      	beq.n	80093f2 <_malloc_r+0x22>
 8009484:	1b9b      	subs	r3, r3, r6
 8009486:	50a3      	str	r3, [r4, r2]
 8009488:	e7b3      	b.n	80093f2 <_malloc_r+0x22>
 800948a:	6862      	ldr	r2, [r4, #4]
 800948c:	42a3      	cmp	r3, r4
 800948e:	bf0c      	ite	eq
 8009490:	6032      	streq	r2, [r6, #0]
 8009492:	605a      	strne	r2, [r3, #4]
 8009494:	e7ec      	b.n	8009470 <_malloc_r+0xa0>
 8009496:	4623      	mov	r3, r4
 8009498:	6864      	ldr	r4, [r4, #4]
 800949a:	e7b2      	b.n	8009402 <_malloc_r+0x32>
 800949c:	4634      	mov	r4, r6
 800949e:	6876      	ldr	r6, [r6, #4]
 80094a0:	e7b9      	b.n	8009416 <_malloc_r+0x46>
 80094a2:	230c      	movs	r3, #12
 80094a4:	603b      	str	r3, [r7, #0]
 80094a6:	4638      	mov	r0, r7
 80094a8:	f000 feee 	bl	800a288 <__malloc_unlock>
 80094ac:	e7a1      	b.n	80093f2 <_malloc_r+0x22>
 80094ae:	6025      	str	r5, [r4, #0]
 80094b0:	e7de      	b.n	8009470 <_malloc_r+0xa0>
 80094b2:	bf00      	nop
 80094b4:	20000454 	.word	0x20000454

080094b8 <__ssputs_r>:
 80094b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094bc:	688e      	ldr	r6, [r1, #8]
 80094be:	429e      	cmp	r6, r3
 80094c0:	4682      	mov	sl, r0
 80094c2:	460c      	mov	r4, r1
 80094c4:	4690      	mov	r8, r2
 80094c6:	461f      	mov	r7, r3
 80094c8:	d838      	bhi.n	800953c <__ssputs_r+0x84>
 80094ca:	898a      	ldrh	r2, [r1, #12]
 80094cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094d0:	d032      	beq.n	8009538 <__ssputs_r+0x80>
 80094d2:	6825      	ldr	r5, [r4, #0]
 80094d4:	6909      	ldr	r1, [r1, #16]
 80094d6:	eba5 0901 	sub.w	r9, r5, r1
 80094da:	6965      	ldr	r5, [r4, #20]
 80094dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094e4:	3301      	adds	r3, #1
 80094e6:	444b      	add	r3, r9
 80094e8:	106d      	asrs	r5, r5, #1
 80094ea:	429d      	cmp	r5, r3
 80094ec:	bf38      	it	cc
 80094ee:	461d      	movcc	r5, r3
 80094f0:	0553      	lsls	r3, r2, #21
 80094f2:	d531      	bpl.n	8009558 <__ssputs_r+0xa0>
 80094f4:	4629      	mov	r1, r5
 80094f6:	f7ff ff6b 	bl	80093d0 <_malloc_r>
 80094fa:	4606      	mov	r6, r0
 80094fc:	b950      	cbnz	r0, 8009514 <__ssputs_r+0x5c>
 80094fe:	230c      	movs	r3, #12
 8009500:	f8ca 3000 	str.w	r3, [sl]
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800950a:	81a3      	strh	r3, [r4, #12]
 800950c:	f04f 30ff 	mov.w	r0, #4294967295
 8009510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009514:	6921      	ldr	r1, [r4, #16]
 8009516:	464a      	mov	r2, r9
 8009518:	f000 fe88 	bl	800a22c <memcpy>
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009526:	81a3      	strh	r3, [r4, #12]
 8009528:	6126      	str	r6, [r4, #16]
 800952a:	6165      	str	r5, [r4, #20]
 800952c:	444e      	add	r6, r9
 800952e:	eba5 0509 	sub.w	r5, r5, r9
 8009532:	6026      	str	r6, [r4, #0]
 8009534:	60a5      	str	r5, [r4, #8]
 8009536:	463e      	mov	r6, r7
 8009538:	42be      	cmp	r6, r7
 800953a:	d900      	bls.n	800953e <__ssputs_r+0x86>
 800953c:	463e      	mov	r6, r7
 800953e:	6820      	ldr	r0, [r4, #0]
 8009540:	4632      	mov	r2, r6
 8009542:	4641      	mov	r1, r8
 8009544:	f000 fe80 	bl	800a248 <memmove>
 8009548:	68a3      	ldr	r3, [r4, #8]
 800954a:	1b9b      	subs	r3, r3, r6
 800954c:	60a3      	str	r3, [r4, #8]
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	4433      	add	r3, r6
 8009552:	6023      	str	r3, [r4, #0]
 8009554:	2000      	movs	r0, #0
 8009556:	e7db      	b.n	8009510 <__ssputs_r+0x58>
 8009558:	462a      	mov	r2, r5
 800955a:	f000 fee7 	bl	800a32c <_realloc_r>
 800955e:	4606      	mov	r6, r0
 8009560:	2800      	cmp	r0, #0
 8009562:	d1e1      	bne.n	8009528 <__ssputs_r+0x70>
 8009564:	6921      	ldr	r1, [r4, #16]
 8009566:	4650      	mov	r0, sl
 8009568:	f000 fe94 	bl	800a294 <_free_r>
 800956c:	e7c7      	b.n	80094fe <__ssputs_r+0x46>
	...

08009570 <_svfiprintf_r>:
 8009570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	4698      	mov	r8, r3
 8009576:	898b      	ldrh	r3, [r1, #12]
 8009578:	061b      	lsls	r3, r3, #24
 800957a:	b09d      	sub	sp, #116	; 0x74
 800957c:	4607      	mov	r7, r0
 800957e:	460d      	mov	r5, r1
 8009580:	4614      	mov	r4, r2
 8009582:	d50e      	bpl.n	80095a2 <_svfiprintf_r+0x32>
 8009584:	690b      	ldr	r3, [r1, #16]
 8009586:	b963      	cbnz	r3, 80095a2 <_svfiprintf_r+0x32>
 8009588:	2140      	movs	r1, #64	; 0x40
 800958a:	f7ff ff21 	bl	80093d0 <_malloc_r>
 800958e:	6028      	str	r0, [r5, #0]
 8009590:	6128      	str	r0, [r5, #16]
 8009592:	b920      	cbnz	r0, 800959e <_svfiprintf_r+0x2e>
 8009594:	230c      	movs	r3, #12
 8009596:	603b      	str	r3, [r7, #0]
 8009598:	f04f 30ff 	mov.w	r0, #4294967295
 800959c:	e0d1      	b.n	8009742 <_svfiprintf_r+0x1d2>
 800959e:	2340      	movs	r3, #64	; 0x40
 80095a0:	616b      	str	r3, [r5, #20]
 80095a2:	2300      	movs	r3, #0
 80095a4:	9309      	str	r3, [sp, #36]	; 0x24
 80095a6:	2320      	movs	r3, #32
 80095a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80095b0:	2330      	movs	r3, #48	; 0x30
 80095b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800975c <_svfiprintf_r+0x1ec>
 80095b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095ba:	f04f 0901 	mov.w	r9, #1
 80095be:	4623      	mov	r3, r4
 80095c0:	469a      	mov	sl, r3
 80095c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095c6:	b10a      	cbz	r2, 80095cc <_svfiprintf_r+0x5c>
 80095c8:	2a25      	cmp	r2, #37	; 0x25
 80095ca:	d1f9      	bne.n	80095c0 <_svfiprintf_r+0x50>
 80095cc:	ebba 0b04 	subs.w	fp, sl, r4
 80095d0:	d00b      	beq.n	80095ea <_svfiprintf_r+0x7a>
 80095d2:	465b      	mov	r3, fp
 80095d4:	4622      	mov	r2, r4
 80095d6:	4629      	mov	r1, r5
 80095d8:	4638      	mov	r0, r7
 80095da:	f7ff ff6d 	bl	80094b8 <__ssputs_r>
 80095de:	3001      	adds	r0, #1
 80095e0:	f000 80aa 	beq.w	8009738 <_svfiprintf_r+0x1c8>
 80095e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095e6:	445a      	add	r2, fp
 80095e8:	9209      	str	r2, [sp, #36]	; 0x24
 80095ea:	f89a 3000 	ldrb.w	r3, [sl]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 80a2 	beq.w	8009738 <_svfiprintf_r+0x1c8>
 80095f4:	2300      	movs	r3, #0
 80095f6:	f04f 32ff 	mov.w	r2, #4294967295
 80095fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095fe:	f10a 0a01 	add.w	sl, sl, #1
 8009602:	9304      	str	r3, [sp, #16]
 8009604:	9307      	str	r3, [sp, #28]
 8009606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800960a:	931a      	str	r3, [sp, #104]	; 0x68
 800960c:	4654      	mov	r4, sl
 800960e:	2205      	movs	r2, #5
 8009610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009614:	4851      	ldr	r0, [pc, #324]	; (800975c <_svfiprintf_r+0x1ec>)
 8009616:	f7f6 fde3 	bl	80001e0 <memchr>
 800961a:	9a04      	ldr	r2, [sp, #16]
 800961c:	b9d8      	cbnz	r0, 8009656 <_svfiprintf_r+0xe6>
 800961e:	06d0      	lsls	r0, r2, #27
 8009620:	bf44      	itt	mi
 8009622:	2320      	movmi	r3, #32
 8009624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009628:	0711      	lsls	r1, r2, #28
 800962a:	bf44      	itt	mi
 800962c:	232b      	movmi	r3, #43	; 0x2b
 800962e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009632:	f89a 3000 	ldrb.w	r3, [sl]
 8009636:	2b2a      	cmp	r3, #42	; 0x2a
 8009638:	d015      	beq.n	8009666 <_svfiprintf_r+0xf6>
 800963a:	9a07      	ldr	r2, [sp, #28]
 800963c:	4654      	mov	r4, sl
 800963e:	2000      	movs	r0, #0
 8009640:	f04f 0c0a 	mov.w	ip, #10
 8009644:	4621      	mov	r1, r4
 8009646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800964a:	3b30      	subs	r3, #48	; 0x30
 800964c:	2b09      	cmp	r3, #9
 800964e:	d94e      	bls.n	80096ee <_svfiprintf_r+0x17e>
 8009650:	b1b0      	cbz	r0, 8009680 <_svfiprintf_r+0x110>
 8009652:	9207      	str	r2, [sp, #28]
 8009654:	e014      	b.n	8009680 <_svfiprintf_r+0x110>
 8009656:	eba0 0308 	sub.w	r3, r0, r8
 800965a:	fa09 f303 	lsl.w	r3, r9, r3
 800965e:	4313      	orrs	r3, r2
 8009660:	9304      	str	r3, [sp, #16]
 8009662:	46a2      	mov	sl, r4
 8009664:	e7d2      	b.n	800960c <_svfiprintf_r+0x9c>
 8009666:	9b03      	ldr	r3, [sp, #12]
 8009668:	1d19      	adds	r1, r3, #4
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	9103      	str	r1, [sp, #12]
 800966e:	2b00      	cmp	r3, #0
 8009670:	bfbb      	ittet	lt
 8009672:	425b      	neglt	r3, r3
 8009674:	f042 0202 	orrlt.w	r2, r2, #2
 8009678:	9307      	strge	r3, [sp, #28]
 800967a:	9307      	strlt	r3, [sp, #28]
 800967c:	bfb8      	it	lt
 800967e:	9204      	strlt	r2, [sp, #16]
 8009680:	7823      	ldrb	r3, [r4, #0]
 8009682:	2b2e      	cmp	r3, #46	; 0x2e
 8009684:	d10c      	bne.n	80096a0 <_svfiprintf_r+0x130>
 8009686:	7863      	ldrb	r3, [r4, #1]
 8009688:	2b2a      	cmp	r3, #42	; 0x2a
 800968a:	d135      	bne.n	80096f8 <_svfiprintf_r+0x188>
 800968c:	9b03      	ldr	r3, [sp, #12]
 800968e:	1d1a      	adds	r2, r3, #4
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	9203      	str	r2, [sp, #12]
 8009694:	2b00      	cmp	r3, #0
 8009696:	bfb8      	it	lt
 8009698:	f04f 33ff 	movlt.w	r3, #4294967295
 800969c:	3402      	adds	r4, #2
 800969e:	9305      	str	r3, [sp, #20]
 80096a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800976c <_svfiprintf_r+0x1fc>
 80096a4:	7821      	ldrb	r1, [r4, #0]
 80096a6:	2203      	movs	r2, #3
 80096a8:	4650      	mov	r0, sl
 80096aa:	f7f6 fd99 	bl	80001e0 <memchr>
 80096ae:	b140      	cbz	r0, 80096c2 <_svfiprintf_r+0x152>
 80096b0:	2340      	movs	r3, #64	; 0x40
 80096b2:	eba0 000a 	sub.w	r0, r0, sl
 80096b6:	fa03 f000 	lsl.w	r0, r3, r0
 80096ba:	9b04      	ldr	r3, [sp, #16]
 80096bc:	4303      	orrs	r3, r0
 80096be:	3401      	adds	r4, #1
 80096c0:	9304      	str	r3, [sp, #16]
 80096c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c6:	4826      	ldr	r0, [pc, #152]	; (8009760 <_svfiprintf_r+0x1f0>)
 80096c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096cc:	2206      	movs	r2, #6
 80096ce:	f7f6 fd87 	bl	80001e0 <memchr>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d038      	beq.n	8009748 <_svfiprintf_r+0x1d8>
 80096d6:	4b23      	ldr	r3, [pc, #140]	; (8009764 <_svfiprintf_r+0x1f4>)
 80096d8:	bb1b      	cbnz	r3, 8009722 <_svfiprintf_r+0x1b2>
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	3307      	adds	r3, #7
 80096de:	f023 0307 	bic.w	r3, r3, #7
 80096e2:	3308      	adds	r3, #8
 80096e4:	9303      	str	r3, [sp, #12]
 80096e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e8:	4433      	add	r3, r6
 80096ea:	9309      	str	r3, [sp, #36]	; 0x24
 80096ec:	e767      	b.n	80095be <_svfiprintf_r+0x4e>
 80096ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80096f2:	460c      	mov	r4, r1
 80096f4:	2001      	movs	r0, #1
 80096f6:	e7a5      	b.n	8009644 <_svfiprintf_r+0xd4>
 80096f8:	2300      	movs	r3, #0
 80096fa:	3401      	adds	r4, #1
 80096fc:	9305      	str	r3, [sp, #20]
 80096fe:	4619      	mov	r1, r3
 8009700:	f04f 0c0a 	mov.w	ip, #10
 8009704:	4620      	mov	r0, r4
 8009706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800970a:	3a30      	subs	r2, #48	; 0x30
 800970c:	2a09      	cmp	r2, #9
 800970e:	d903      	bls.n	8009718 <_svfiprintf_r+0x1a8>
 8009710:	2b00      	cmp	r3, #0
 8009712:	d0c5      	beq.n	80096a0 <_svfiprintf_r+0x130>
 8009714:	9105      	str	r1, [sp, #20]
 8009716:	e7c3      	b.n	80096a0 <_svfiprintf_r+0x130>
 8009718:	fb0c 2101 	mla	r1, ip, r1, r2
 800971c:	4604      	mov	r4, r0
 800971e:	2301      	movs	r3, #1
 8009720:	e7f0      	b.n	8009704 <_svfiprintf_r+0x194>
 8009722:	ab03      	add	r3, sp, #12
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	462a      	mov	r2, r5
 8009728:	4b0f      	ldr	r3, [pc, #60]	; (8009768 <_svfiprintf_r+0x1f8>)
 800972a:	a904      	add	r1, sp, #16
 800972c:	4638      	mov	r0, r7
 800972e:	f3af 8000 	nop.w
 8009732:	1c42      	adds	r2, r0, #1
 8009734:	4606      	mov	r6, r0
 8009736:	d1d6      	bne.n	80096e6 <_svfiprintf_r+0x176>
 8009738:	89ab      	ldrh	r3, [r5, #12]
 800973a:	065b      	lsls	r3, r3, #25
 800973c:	f53f af2c 	bmi.w	8009598 <_svfiprintf_r+0x28>
 8009740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009742:	b01d      	add	sp, #116	; 0x74
 8009744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009748:	ab03      	add	r3, sp, #12
 800974a:	9300      	str	r3, [sp, #0]
 800974c:	462a      	mov	r2, r5
 800974e:	4b06      	ldr	r3, [pc, #24]	; (8009768 <_svfiprintf_r+0x1f8>)
 8009750:	a904      	add	r1, sp, #16
 8009752:	4638      	mov	r0, r7
 8009754:	f000 f9d4 	bl	8009b00 <_printf_i>
 8009758:	e7eb      	b.n	8009732 <_svfiprintf_r+0x1c2>
 800975a:	bf00      	nop
 800975c:	0800b5b0 	.word	0x0800b5b0
 8009760:	0800b5ba 	.word	0x0800b5ba
 8009764:	00000000 	.word	0x00000000
 8009768:	080094b9 	.word	0x080094b9
 800976c:	0800b5b6 	.word	0x0800b5b6

08009770 <__sfputc_r>:
 8009770:	6893      	ldr	r3, [r2, #8]
 8009772:	3b01      	subs	r3, #1
 8009774:	2b00      	cmp	r3, #0
 8009776:	b410      	push	{r4}
 8009778:	6093      	str	r3, [r2, #8]
 800977a:	da08      	bge.n	800978e <__sfputc_r+0x1e>
 800977c:	6994      	ldr	r4, [r2, #24]
 800977e:	42a3      	cmp	r3, r4
 8009780:	db01      	blt.n	8009786 <__sfputc_r+0x16>
 8009782:	290a      	cmp	r1, #10
 8009784:	d103      	bne.n	800978e <__sfputc_r+0x1e>
 8009786:	f85d 4b04 	ldr.w	r4, [sp], #4
 800978a:	f000 bb33 	b.w	8009df4 <__swbuf_r>
 800978e:	6813      	ldr	r3, [r2, #0]
 8009790:	1c58      	adds	r0, r3, #1
 8009792:	6010      	str	r0, [r2, #0]
 8009794:	7019      	strb	r1, [r3, #0]
 8009796:	4608      	mov	r0, r1
 8009798:	f85d 4b04 	ldr.w	r4, [sp], #4
 800979c:	4770      	bx	lr

0800979e <__sfputs_r>:
 800979e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a0:	4606      	mov	r6, r0
 80097a2:	460f      	mov	r7, r1
 80097a4:	4614      	mov	r4, r2
 80097a6:	18d5      	adds	r5, r2, r3
 80097a8:	42ac      	cmp	r4, r5
 80097aa:	d101      	bne.n	80097b0 <__sfputs_r+0x12>
 80097ac:	2000      	movs	r0, #0
 80097ae:	e007      	b.n	80097c0 <__sfputs_r+0x22>
 80097b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097b4:	463a      	mov	r2, r7
 80097b6:	4630      	mov	r0, r6
 80097b8:	f7ff ffda 	bl	8009770 <__sfputc_r>
 80097bc:	1c43      	adds	r3, r0, #1
 80097be:	d1f3      	bne.n	80097a8 <__sfputs_r+0xa>
 80097c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097c4 <_vfiprintf_r>:
 80097c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c8:	460d      	mov	r5, r1
 80097ca:	b09d      	sub	sp, #116	; 0x74
 80097cc:	4614      	mov	r4, r2
 80097ce:	4698      	mov	r8, r3
 80097d0:	4606      	mov	r6, r0
 80097d2:	b118      	cbz	r0, 80097dc <_vfiprintf_r+0x18>
 80097d4:	6983      	ldr	r3, [r0, #24]
 80097d6:	b90b      	cbnz	r3, 80097dc <_vfiprintf_r+0x18>
 80097d8:	f7ff fd3a 	bl	8009250 <__sinit>
 80097dc:	4b89      	ldr	r3, [pc, #548]	; (8009a04 <_vfiprintf_r+0x240>)
 80097de:	429d      	cmp	r5, r3
 80097e0:	d11b      	bne.n	800981a <_vfiprintf_r+0x56>
 80097e2:	6875      	ldr	r5, [r6, #4]
 80097e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097e6:	07d9      	lsls	r1, r3, #31
 80097e8:	d405      	bmi.n	80097f6 <_vfiprintf_r+0x32>
 80097ea:	89ab      	ldrh	r3, [r5, #12]
 80097ec:	059a      	lsls	r2, r3, #22
 80097ee:	d402      	bmi.n	80097f6 <_vfiprintf_r+0x32>
 80097f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097f2:	f7ff fdcb 	bl	800938c <__retarget_lock_acquire_recursive>
 80097f6:	89ab      	ldrh	r3, [r5, #12]
 80097f8:	071b      	lsls	r3, r3, #28
 80097fa:	d501      	bpl.n	8009800 <_vfiprintf_r+0x3c>
 80097fc:	692b      	ldr	r3, [r5, #16]
 80097fe:	b9eb      	cbnz	r3, 800983c <_vfiprintf_r+0x78>
 8009800:	4629      	mov	r1, r5
 8009802:	4630      	mov	r0, r6
 8009804:	f000 fb5a 	bl	8009ebc <__swsetup_r>
 8009808:	b1c0      	cbz	r0, 800983c <_vfiprintf_r+0x78>
 800980a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800980c:	07dc      	lsls	r4, r3, #31
 800980e:	d50e      	bpl.n	800982e <_vfiprintf_r+0x6a>
 8009810:	f04f 30ff 	mov.w	r0, #4294967295
 8009814:	b01d      	add	sp, #116	; 0x74
 8009816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981a:	4b7b      	ldr	r3, [pc, #492]	; (8009a08 <_vfiprintf_r+0x244>)
 800981c:	429d      	cmp	r5, r3
 800981e:	d101      	bne.n	8009824 <_vfiprintf_r+0x60>
 8009820:	68b5      	ldr	r5, [r6, #8]
 8009822:	e7df      	b.n	80097e4 <_vfiprintf_r+0x20>
 8009824:	4b79      	ldr	r3, [pc, #484]	; (8009a0c <_vfiprintf_r+0x248>)
 8009826:	429d      	cmp	r5, r3
 8009828:	bf08      	it	eq
 800982a:	68f5      	ldreq	r5, [r6, #12]
 800982c:	e7da      	b.n	80097e4 <_vfiprintf_r+0x20>
 800982e:	89ab      	ldrh	r3, [r5, #12]
 8009830:	0598      	lsls	r0, r3, #22
 8009832:	d4ed      	bmi.n	8009810 <_vfiprintf_r+0x4c>
 8009834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009836:	f7ff fdaa 	bl	800938e <__retarget_lock_release_recursive>
 800983a:	e7e9      	b.n	8009810 <_vfiprintf_r+0x4c>
 800983c:	2300      	movs	r3, #0
 800983e:	9309      	str	r3, [sp, #36]	; 0x24
 8009840:	2320      	movs	r3, #32
 8009842:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009846:	f8cd 800c 	str.w	r8, [sp, #12]
 800984a:	2330      	movs	r3, #48	; 0x30
 800984c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a10 <_vfiprintf_r+0x24c>
 8009850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009854:	f04f 0901 	mov.w	r9, #1
 8009858:	4623      	mov	r3, r4
 800985a:	469a      	mov	sl, r3
 800985c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009860:	b10a      	cbz	r2, 8009866 <_vfiprintf_r+0xa2>
 8009862:	2a25      	cmp	r2, #37	; 0x25
 8009864:	d1f9      	bne.n	800985a <_vfiprintf_r+0x96>
 8009866:	ebba 0b04 	subs.w	fp, sl, r4
 800986a:	d00b      	beq.n	8009884 <_vfiprintf_r+0xc0>
 800986c:	465b      	mov	r3, fp
 800986e:	4622      	mov	r2, r4
 8009870:	4629      	mov	r1, r5
 8009872:	4630      	mov	r0, r6
 8009874:	f7ff ff93 	bl	800979e <__sfputs_r>
 8009878:	3001      	adds	r0, #1
 800987a:	f000 80aa 	beq.w	80099d2 <_vfiprintf_r+0x20e>
 800987e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009880:	445a      	add	r2, fp
 8009882:	9209      	str	r2, [sp, #36]	; 0x24
 8009884:	f89a 3000 	ldrb.w	r3, [sl]
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 80a2 	beq.w	80099d2 <_vfiprintf_r+0x20e>
 800988e:	2300      	movs	r3, #0
 8009890:	f04f 32ff 	mov.w	r2, #4294967295
 8009894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009898:	f10a 0a01 	add.w	sl, sl, #1
 800989c:	9304      	str	r3, [sp, #16]
 800989e:	9307      	str	r3, [sp, #28]
 80098a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098a4:	931a      	str	r3, [sp, #104]	; 0x68
 80098a6:	4654      	mov	r4, sl
 80098a8:	2205      	movs	r2, #5
 80098aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ae:	4858      	ldr	r0, [pc, #352]	; (8009a10 <_vfiprintf_r+0x24c>)
 80098b0:	f7f6 fc96 	bl	80001e0 <memchr>
 80098b4:	9a04      	ldr	r2, [sp, #16]
 80098b6:	b9d8      	cbnz	r0, 80098f0 <_vfiprintf_r+0x12c>
 80098b8:	06d1      	lsls	r1, r2, #27
 80098ba:	bf44      	itt	mi
 80098bc:	2320      	movmi	r3, #32
 80098be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098c2:	0713      	lsls	r3, r2, #28
 80098c4:	bf44      	itt	mi
 80098c6:	232b      	movmi	r3, #43	; 0x2b
 80098c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098cc:	f89a 3000 	ldrb.w	r3, [sl]
 80098d0:	2b2a      	cmp	r3, #42	; 0x2a
 80098d2:	d015      	beq.n	8009900 <_vfiprintf_r+0x13c>
 80098d4:	9a07      	ldr	r2, [sp, #28]
 80098d6:	4654      	mov	r4, sl
 80098d8:	2000      	movs	r0, #0
 80098da:	f04f 0c0a 	mov.w	ip, #10
 80098de:	4621      	mov	r1, r4
 80098e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098e4:	3b30      	subs	r3, #48	; 0x30
 80098e6:	2b09      	cmp	r3, #9
 80098e8:	d94e      	bls.n	8009988 <_vfiprintf_r+0x1c4>
 80098ea:	b1b0      	cbz	r0, 800991a <_vfiprintf_r+0x156>
 80098ec:	9207      	str	r2, [sp, #28]
 80098ee:	e014      	b.n	800991a <_vfiprintf_r+0x156>
 80098f0:	eba0 0308 	sub.w	r3, r0, r8
 80098f4:	fa09 f303 	lsl.w	r3, r9, r3
 80098f8:	4313      	orrs	r3, r2
 80098fa:	9304      	str	r3, [sp, #16]
 80098fc:	46a2      	mov	sl, r4
 80098fe:	e7d2      	b.n	80098a6 <_vfiprintf_r+0xe2>
 8009900:	9b03      	ldr	r3, [sp, #12]
 8009902:	1d19      	adds	r1, r3, #4
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	9103      	str	r1, [sp, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	bfbb      	ittet	lt
 800990c:	425b      	neglt	r3, r3
 800990e:	f042 0202 	orrlt.w	r2, r2, #2
 8009912:	9307      	strge	r3, [sp, #28]
 8009914:	9307      	strlt	r3, [sp, #28]
 8009916:	bfb8      	it	lt
 8009918:	9204      	strlt	r2, [sp, #16]
 800991a:	7823      	ldrb	r3, [r4, #0]
 800991c:	2b2e      	cmp	r3, #46	; 0x2e
 800991e:	d10c      	bne.n	800993a <_vfiprintf_r+0x176>
 8009920:	7863      	ldrb	r3, [r4, #1]
 8009922:	2b2a      	cmp	r3, #42	; 0x2a
 8009924:	d135      	bne.n	8009992 <_vfiprintf_r+0x1ce>
 8009926:	9b03      	ldr	r3, [sp, #12]
 8009928:	1d1a      	adds	r2, r3, #4
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	9203      	str	r2, [sp, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	bfb8      	it	lt
 8009932:	f04f 33ff 	movlt.w	r3, #4294967295
 8009936:	3402      	adds	r4, #2
 8009938:	9305      	str	r3, [sp, #20]
 800993a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a20 <_vfiprintf_r+0x25c>
 800993e:	7821      	ldrb	r1, [r4, #0]
 8009940:	2203      	movs	r2, #3
 8009942:	4650      	mov	r0, sl
 8009944:	f7f6 fc4c 	bl	80001e0 <memchr>
 8009948:	b140      	cbz	r0, 800995c <_vfiprintf_r+0x198>
 800994a:	2340      	movs	r3, #64	; 0x40
 800994c:	eba0 000a 	sub.w	r0, r0, sl
 8009950:	fa03 f000 	lsl.w	r0, r3, r0
 8009954:	9b04      	ldr	r3, [sp, #16]
 8009956:	4303      	orrs	r3, r0
 8009958:	3401      	adds	r4, #1
 800995a:	9304      	str	r3, [sp, #16]
 800995c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009960:	482c      	ldr	r0, [pc, #176]	; (8009a14 <_vfiprintf_r+0x250>)
 8009962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009966:	2206      	movs	r2, #6
 8009968:	f7f6 fc3a 	bl	80001e0 <memchr>
 800996c:	2800      	cmp	r0, #0
 800996e:	d03f      	beq.n	80099f0 <_vfiprintf_r+0x22c>
 8009970:	4b29      	ldr	r3, [pc, #164]	; (8009a18 <_vfiprintf_r+0x254>)
 8009972:	bb1b      	cbnz	r3, 80099bc <_vfiprintf_r+0x1f8>
 8009974:	9b03      	ldr	r3, [sp, #12]
 8009976:	3307      	adds	r3, #7
 8009978:	f023 0307 	bic.w	r3, r3, #7
 800997c:	3308      	adds	r3, #8
 800997e:	9303      	str	r3, [sp, #12]
 8009980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009982:	443b      	add	r3, r7
 8009984:	9309      	str	r3, [sp, #36]	; 0x24
 8009986:	e767      	b.n	8009858 <_vfiprintf_r+0x94>
 8009988:	fb0c 3202 	mla	r2, ip, r2, r3
 800998c:	460c      	mov	r4, r1
 800998e:	2001      	movs	r0, #1
 8009990:	e7a5      	b.n	80098de <_vfiprintf_r+0x11a>
 8009992:	2300      	movs	r3, #0
 8009994:	3401      	adds	r4, #1
 8009996:	9305      	str	r3, [sp, #20]
 8009998:	4619      	mov	r1, r3
 800999a:	f04f 0c0a 	mov.w	ip, #10
 800999e:	4620      	mov	r0, r4
 80099a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099a4:	3a30      	subs	r2, #48	; 0x30
 80099a6:	2a09      	cmp	r2, #9
 80099a8:	d903      	bls.n	80099b2 <_vfiprintf_r+0x1ee>
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d0c5      	beq.n	800993a <_vfiprintf_r+0x176>
 80099ae:	9105      	str	r1, [sp, #20]
 80099b0:	e7c3      	b.n	800993a <_vfiprintf_r+0x176>
 80099b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80099b6:	4604      	mov	r4, r0
 80099b8:	2301      	movs	r3, #1
 80099ba:	e7f0      	b.n	800999e <_vfiprintf_r+0x1da>
 80099bc:	ab03      	add	r3, sp, #12
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	462a      	mov	r2, r5
 80099c2:	4b16      	ldr	r3, [pc, #88]	; (8009a1c <_vfiprintf_r+0x258>)
 80099c4:	a904      	add	r1, sp, #16
 80099c6:	4630      	mov	r0, r6
 80099c8:	f3af 8000 	nop.w
 80099cc:	4607      	mov	r7, r0
 80099ce:	1c78      	adds	r0, r7, #1
 80099d0:	d1d6      	bne.n	8009980 <_vfiprintf_r+0x1bc>
 80099d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099d4:	07d9      	lsls	r1, r3, #31
 80099d6:	d405      	bmi.n	80099e4 <_vfiprintf_r+0x220>
 80099d8:	89ab      	ldrh	r3, [r5, #12]
 80099da:	059a      	lsls	r2, r3, #22
 80099dc:	d402      	bmi.n	80099e4 <_vfiprintf_r+0x220>
 80099de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099e0:	f7ff fcd5 	bl	800938e <__retarget_lock_release_recursive>
 80099e4:	89ab      	ldrh	r3, [r5, #12]
 80099e6:	065b      	lsls	r3, r3, #25
 80099e8:	f53f af12 	bmi.w	8009810 <_vfiprintf_r+0x4c>
 80099ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099ee:	e711      	b.n	8009814 <_vfiprintf_r+0x50>
 80099f0:	ab03      	add	r3, sp, #12
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	462a      	mov	r2, r5
 80099f6:	4b09      	ldr	r3, [pc, #36]	; (8009a1c <_vfiprintf_r+0x258>)
 80099f8:	a904      	add	r1, sp, #16
 80099fa:	4630      	mov	r0, r6
 80099fc:	f000 f880 	bl	8009b00 <_printf_i>
 8009a00:	e7e4      	b.n	80099cc <_vfiprintf_r+0x208>
 8009a02:	bf00      	nop
 8009a04:	0800b570 	.word	0x0800b570
 8009a08:	0800b590 	.word	0x0800b590
 8009a0c:	0800b550 	.word	0x0800b550
 8009a10:	0800b5b0 	.word	0x0800b5b0
 8009a14:	0800b5ba 	.word	0x0800b5ba
 8009a18:	00000000 	.word	0x00000000
 8009a1c:	0800979f 	.word	0x0800979f
 8009a20:	0800b5b6 	.word	0x0800b5b6

08009a24 <_printf_common>:
 8009a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a28:	4616      	mov	r6, r2
 8009a2a:	4699      	mov	r9, r3
 8009a2c:	688a      	ldr	r2, [r1, #8]
 8009a2e:	690b      	ldr	r3, [r1, #16]
 8009a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a34:	4293      	cmp	r3, r2
 8009a36:	bfb8      	it	lt
 8009a38:	4613      	movlt	r3, r2
 8009a3a:	6033      	str	r3, [r6, #0]
 8009a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a40:	4607      	mov	r7, r0
 8009a42:	460c      	mov	r4, r1
 8009a44:	b10a      	cbz	r2, 8009a4a <_printf_common+0x26>
 8009a46:	3301      	adds	r3, #1
 8009a48:	6033      	str	r3, [r6, #0]
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	0699      	lsls	r1, r3, #26
 8009a4e:	bf42      	ittt	mi
 8009a50:	6833      	ldrmi	r3, [r6, #0]
 8009a52:	3302      	addmi	r3, #2
 8009a54:	6033      	strmi	r3, [r6, #0]
 8009a56:	6825      	ldr	r5, [r4, #0]
 8009a58:	f015 0506 	ands.w	r5, r5, #6
 8009a5c:	d106      	bne.n	8009a6c <_printf_common+0x48>
 8009a5e:	f104 0a19 	add.w	sl, r4, #25
 8009a62:	68e3      	ldr	r3, [r4, #12]
 8009a64:	6832      	ldr	r2, [r6, #0]
 8009a66:	1a9b      	subs	r3, r3, r2
 8009a68:	42ab      	cmp	r3, r5
 8009a6a:	dc26      	bgt.n	8009aba <_printf_common+0x96>
 8009a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a70:	1e13      	subs	r3, r2, #0
 8009a72:	6822      	ldr	r2, [r4, #0]
 8009a74:	bf18      	it	ne
 8009a76:	2301      	movne	r3, #1
 8009a78:	0692      	lsls	r2, r2, #26
 8009a7a:	d42b      	bmi.n	8009ad4 <_printf_common+0xb0>
 8009a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a80:	4649      	mov	r1, r9
 8009a82:	4638      	mov	r0, r7
 8009a84:	47c0      	blx	r8
 8009a86:	3001      	adds	r0, #1
 8009a88:	d01e      	beq.n	8009ac8 <_printf_common+0xa4>
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	68e5      	ldr	r5, [r4, #12]
 8009a8e:	6832      	ldr	r2, [r6, #0]
 8009a90:	f003 0306 	and.w	r3, r3, #6
 8009a94:	2b04      	cmp	r3, #4
 8009a96:	bf08      	it	eq
 8009a98:	1aad      	subeq	r5, r5, r2
 8009a9a:	68a3      	ldr	r3, [r4, #8]
 8009a9c:	6922      	ldr	r2, [r4, #16]
 8009a9e:	bf0c      	ite	eq
 8009aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009aa4:	2500      	movne	r5, #0
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	bfc4      	itt	gt
 8009aaa:	1a9b      	subgt	r3, r3, r2
 8009aac:	18ed      	addgt	r5, r5, r3
 8009aae:	2600      	movs	r6, #0
 8009ab0:	341a      	adds	r4, #26
 8009ab2:	42b5      	cmp	r5, r6
 8009ab4:	d11a      	bne.n	8009aec <_printf_common+0xc8>
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	e008      	b.n	8009acc <_printf_common+0xa8>
 8009aba:	2301      	movs	r3, #1
 8009abc:	4652      	mov	r2, sl
 8009abe:	4649      	mov	r1, r9
 8009ac0:	4638      	mov	r0, r7
 8009ac2:	47c0      	blx	r8
 8009ac4:	3001      	adds	r0, #1
 8009ac6:	d103      	bne.n	8009ad0 <_printf_common+0xac>
 8009ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8009acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ad0:	3501      	adds	r5, #1
 8009ad2:	e7c6      	b.n	8009a62 <_printf_common+0x3e>
 8009ad4:	18e1      	adds	r1, r4, r3
 8009ad6:	1c5a      	adds	r2, r3, #1
 8009ad8:	2030      	movs	r0, #48	; 0x30
 8009ada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ade:	4422      	add	r2, r4
 8009ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ae8:	3302      	adds	r3, #2
 8009aea:	e7c7      	b.n	8009a7c <_printf_common+0x58>
 8009aec:	2301      	movs	r3, #1
 8009aee:	4622      	mov	r2, r4
 8009af0:	4649      	mov	r1, r9
 8009af2:	4638      	mov	r0, r7
 8009af4:	47c0      	blx	r8
 8009af6:	3001      	adds	r0, #1
 8009af8:	d0e6      	beq.n	8009ac8 <_printf_common+0xa4>
 8009afa:	3601      	adds	r6, #1
 8009afc:	e7d9      	b.n	8009ab2 <_printf_common+0x8e>
	...

08009b00 <_printf_i>:
 8009b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b04:	7e0f      	ldrb	r7, [r1, #24]
 8009b06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b08:	2f78      	cmp	r7, #120	; 0x78
 8009b0a:	4691      	mov	r9, r2
 8009b0c:	4680      	mov	r8, r0
 8009b0e:	460c      	mov	r4, r1
 8009b10:	469a      	mov	sl, r3
 8009b12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b16:	d807      	bhi.n	8009b28 <_printf_i+0x28>
 8009b18:	2f62      	cmp	r7, #98	; 0x62
 8009b1a:	d80a      	bhi.n	8009b32 <_printf_i+0x32>
 8009b1c:	2f00      	cmp	r7, #0
 8009b1e:	f000 80d8 	beq.w	8009cd2 <_printf_i+0x1d2>
 8009b22:	2f58      	cmp	r7, #88	; 0x58
 8009b24:	f000 80a3 	beq.w	8009c6e <_printf_i+0x16e>
 8009b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b30:	e03a      	b.n	8009ba8 <_printf_i+0xa8>
 8009b32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b36:	2b15      	cmp	r3, #21
 8009b38:	d8f6      	bhi.n	8009b28 <_printf_i+0x28>
 8009b3a:	a101      	add	r1, pc, #4	; (adr r1, 8009b40 <_printf_i+0x40>)
 8009b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b40:	08009b99 	.word	0x08009b99
 8009b44:	08009bad 	.word	0x08009bad
 8009b48:	08009b29 	.word	0x08009b29
 8009b4c:	08009b29 	.word	0x08009b29
 8009b50:	08009b29 	.word	0x08009b29
 8009b54:	08009b29 	.word	0x08009b29
 8009b58:	08009bad 	.word	0x08009bad
 8009b5c:	08009b29 	.word	0x08009b29
 8009b60:	08009b29 	.word	0x08009b29
 8009b64:	08009b29 	.word	0x08009b29
 8009b68:	08009b29 	.word	0x08009b29
 8009b6c:	08009cb9 	.word	0x08009cb9
 8009b70:	08009bdd 	.word	0x08009bdd
 8009b74:	08009c9b 	.word	0x08009c9b
 8009b78:	08009b29 	.word	0x08009b29
 8009b7c:	08009b29 	.word	0x08009b29
 8009b80:	08009cdb 	.word	0x08009cdb
 8009b84:	08009b29 	.word	0x08009b29
 8009b88:	08009bdd 	.word	0x08009bdd
 8009b8c:	08009b29 	.word	0x08009b29
 8009b90:	08009b29 	.word	0x08009b29
 8009b94:	08009ca3 	.word	0x08009ca3
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	1d1a      	adds	r2, r3, #4
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	602a      	str	r2, [r5, #0]
 8009ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e0a3      	b.n	8009cf4 <_printf_i+0x1f4>
 8009bac:	6820      	ldr	r0, [r4, #0]
 8009bae:	6829      	ldr	r1, [r5, #0]
 8009bb0:	0606      	lsls	r6, r0, #24
 8009bb2:	f101 0304 	add.w	r3, r1, #4
 8009bb6:	d50a      	bpl.n	8009bce <_printf_i+0xce>
 8009bb8:	680e      	ldr	r6, [r1, #0]
 8009bba:	602b      	str	r3, [r5, #0]
 8009bbc:	2e00      	cmp	r6, #0
 8009bbe:	da03      	bge.n	8009bc8 <_printf_i+0xc8>
 8009bc0:	232d      	movs	r3, #45	; 0x2d
 8009bc2:	4276      	negs	r6, r6
 8009bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bc8:	485e      	ldr	r0, [pc, #376]	; (8009d44 <_printf_i+0x244>)
 8009bca:	230a      	movs	r3, #10
 8009bcc:	e019      	b.n	8009c02 <_printf_i+0x102>
 8009bce:	680e      	ldr	r6, [r1, #0]
 8009bd0:	602b      	str	r3, [r5, #0]
 8009bd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009bd6:	bf18      	it	ne
 8009bd8:	b236      	sxthne	r6, r6
 8009bda:	e7ef      	b.n	8009bbc <_printf_i+0xbc>
 8009bdc:	682b      	ldr	r3, [r5, #0]
 8009bde:	6820      	ldr	r0, [r4, #0]
 8009be0:	1d19      	adds	r1, r3, #4
 8009be2:	6029      	str	r1, [r5, #0]
 8009be4:	0601      	lsls	r1, r0, #24
 8009be6:	d501      	bpl.n	8009bec <_printf_i+0xec>
 8009be8:	681e      	ldr	r6, [r3, #0]
 8009bea:	e002      	b.n	8009bf2 <_printf_i+0xf2>
 8009bec:	0646      	lsls	r6, r0, #25
 8009bee:	d5fb      	bpl.n	8009be8 <_printf_i+0xe8>
 8009bf0:	881e      	ldrh	r6, [r3, #0]
 8009bf2:	4854      	ldr	r0, [pc, #336]	; (8009d44 <_printf_i+0x244>)
 8009bf4:	2f6f      	cmp	r7, #111	; 0x6f
 8009bf6:	bf0c      	ite	eq
 8009bf8:	2308      	moveq	r3, #8
 8009bfa:	230a      	movne	r3, #10
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c02:	6865      	ldr	r5, [r4, #4]
 8009c04:	60a5      	str	r5, [r4, #8]
 8009c06:	2d00      	cmp	r5, #0
 8009c08:	bfa2      	ittt	ge
 8009c0a:	6821      	ldrge	r1, [r4, #0]
 8009c0c:	f021 0104 	bicge.w	r1, r1, #4
 8009c10:	6021      	strge	r1, [r4, #0]
 8009c12:	b90e      	cbnz	r6, 8009c18 <_printf_i+0x118>
 8009c14:	2d00      	cmp	r5, #0
 8009c16:	d04d      	beq.n	8009cb4 <_printf_i+0x1b4>
 8009c18:	4615      	mov	r5, r2
 8009c1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c1e:	fb03 6711 	mls	r7, r3, r1, r6
 8009c22:	5dc7      	ldrb	r7, [r0, r7]
 8009c24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c28:	4637      	mov	r7, r6
 8009c2a:	42bb      	cmp	r3, r7
 8009c2c:	460e      	mov	r6, r1
 8009c2e:	d9f4      	bls.n	8009c1a <_printf_i+0x11a>
 8009c30:	2b08      	cmp	r3, #8
 8009c32:	d10b      	bne.n	8009c4c <_printf_i+0x14c>
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	07de      	lsls	r6, r3, #31
 8009c38:	d508      	bpl.n	8009c4c <_printf_i+0x14c>
 8009c3a:	6923      	ldr	r3, [r4, #16]
 8009c3c:	6861      	ldr	r1, [r4, #4]
 8009c3e:	4299      	cmp	r1, r3
 8009c40:	bfde      	ittt	le
 8009c42:	2330      	movle	r3, #48	; 0x30
 8009c44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c4c:	1b52      	subs	r2, r2, r5
 8009c4e:	6122      	str	r2, [r4, #16]
 8009c50:	f8cd a000 	str.w	sl, [sp]
 8009c54:	464b      	mov	r3, r9
 8009c56:	aa03      	add	r2, sp, #12
 8009c58:	4621      	mov	r1, r4
 8009c5a:	4640      	mov	r0, r8
 8009c5c:	f7ff fee2 	bl	8009a24 <_printf_common>
 8009c60:	3001      	adds	r0, #1
 8009c62:	d14c      	bne.n	8009cfe <_printf_i+0x1fe>
 8009c64:	f04f 30ff 	mov.w	r0, #4294967295
 8009c68:	b004      	add	sp, #16
 8009c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c6e:	4835      	ldr	r0, [pc, #212]	; (8009d44 <_printf_i+0x244>)
 8009c70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c74:	6829      	ldr	r1, [r5, #0]
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c7c:	6029      	str	r1, [r5, #0]
 8009c7e:	061d      	lsls	r5, r3, #24
 8009c80:	d514      	bpl.n	8009cac <_printf_i+0x1ac>
 8009c82:	07df      	lsls	r7, r3, #31
 8009c84:	bf44      	itt	mi
 8009c86:	f043 0320 	orrmi.w	r3, r3, #32
 8009c8a:	6023      	strmi	r3, [r4, #0]
 8009c8c:	b91e      	cbnz	r6, 8009c96 <_printf_i+0x196>
 8009c8e:	6823      	ldr	r3, [r4, #0]
 8009c90:	f023 0320 	bic.w	r3, r3, #32
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	2310      	movs	r3, #16
 8009c98:	e7b0      	b.n	8009bfc <_printf_i+0xfc>
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	f043 0320 	orr.w	r3, r3, #32
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	2378      	movs	r3, #120	; 0x78
 8009ca4:	4828      	ldr	r0, [pc, #160]	; (8009d48 <_printf_i+0x248>)
 8009ca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009caa:	e7e3      	b.n	8009c74 <_printf_i+0x174>
 8009cac:	0659      	lsls	r1, r3, #25
 8009cae:	bf48      	it	mi
 8009cb0:	b2b6      	uxthmi	r6, r6
 8009cb2:	e7e6      	b.n	8009c82 <_printf_i+0x182>
 8009cb4:	4615      	mov	r5, r2
 8009cb6:	e7bb      	b.n	8009c30 <_printf_i+0x130>
 8009cb8:	682b      	ldr	r3, [r5, #0]
 8009cba:	6826      	ldr	r6, [r4, #0]
 8009cbc:	6961      	ldr	r1, [r4, #20]
 8009cbe:	1d18      	adds	r0, r3, #4
 8009cc0:	6028      	str	r0, [r5, #0]
 8009cc2:	0635      	lsls	r5, r6, #24
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	d501      	bpl.n	8009ccc <_printf_i+0x1cc>
 8009cc8:	6019      	str	r1, [r3, #0]
 8009cca:	e002      	b.n	8009cd2 <_printf_i+0x1d2>
 8009ccc:	0670      	lsls	r0, r6, #25
 8009cce:	d5fb      	bpl.n	8009cc8 <_printf_i+0x1c8>
 8009cd0:	8019      	strh	r1, [r3, #0]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	6123      	str	r3, [r4, #16]
 8009cd6:	4615      	mov	r5, r2
 8009cd8:	e7ba      	b.n	8009c50 <_printf_i+0x150>
 8009cda:	682b      	ldr	r3, [r5, #0]
 8009cdc:	1d1a      	adds	r2, r3, #4
 8009cde:	602a      	str	r2, [r5, #0]
 8009ce0:	681d      	ldr	r5, [r3, #0]
 8009ce2:	6862      	ldr	r2, [r4, #4]
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	f7f6 fa7a 	bl	80001e0 <memchr>
 8009cec:	b108      	cbz	r0, 8009cf2 <_printf_i+0x1f2>
 8009cee:	1b40      	subs	r0, r0, r5
 8009cf0:	6060      	str	r0, [r4, #4]
 8009cf2:	6863      	ldr	r3, [r4, #4]
 8009cf4:	6123      	str	r3, [r4, #16]
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cfc:	e7a8      	b.n	8009c50 <_printf_i+0x150>
 8009cfe:	6923      	ldr	r3, [r4, #16]
 8009d00:	462a      	mov	r2, r5
 8009d02:	4649      	mov	r1, r9
 8009d04:	4640      	mov	r0, r8
 8009d06:	47d0      	blx	sl
 8009d08:	3001      	adds	r0, #1
 8009d0a:	d0ab      	beq.n	8009c64 <_printf_i+0x164>
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	079b      	lsls	r3, r3, #30
 8009d10:	d413      	bmi.n	8009d3a <_printf_i+0x23a>
 8009d12:	68e0      	ldr	r0, [r4, #12]
 8009d14:	9b03      	ldr	r3, [sp, #12]
 8009d16:	4298      	cmp	r0, r3
 8009d18:	bfb8      	it	lt
 8009d1a:	4618      	movlt	r0, r3
 8009d1c:	e7a4      	b.n	8009c68 <_printf_i+0x168>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	4632      	mov	r2, r6
 8009d22:	4649      	mov	r1, r9
 8009d24:	4640      	mov	r0, r8
 8009d26:	47d0      	blx	sl
 8009d28:	3001      	adds	r0, #1
 8009d2a:	d09b      	beq.n	8009c64 <_printf_i+0x164>
 8009d2c:	3501      	adds	r5, #1
 8009d2e:	68e3      	ldr	r3, [r4, #12]
 8009d30:	9903      	ldr	r1, [sp, #12]
 8009d32:	1a5b      	subs	r3, r3, r1
 8009d34:	42ab      	cmp	r3, r5
 8009d36:	dcf2      	bgt.n	8009d1e <_printf_i+0x21e>
 8009d38:	e7eb      	b.n	8009d12 <_printf_i+0x212>
 8009d3a:	2500      	movs	r5, #0
 8009d3c:	f104 0619 	add.w	r6, r4, #25
 8009d40:	e7f5      	b.n	8009d2e <_printf_i+0x22e>
 8009d42:	bf00      	nop
 8009d44:	0800b5c1 	.word	0x0800b5c1
 8009d48:	0800b5d2 	.word	0x0800b5d2

08009d4c <_sbrk_r>:
 8009d4c:	b538      	push	{r3, r4, r5, lr}
 8009d4e:	4d06      	ldr	r5, [pc, #24]	; (8009d68 <_sbrk_r+0x1c>)
 8009d50:	2300      	movs	r3, #0
 8009d52:	4604      	mov	r4, r0
 8009d54:	4608      	mov	r0, r1
 8009d56:	602b      	str	r3, [r5, #0]
 8009d58:	f7f8 f83a 	bl	8001dd0 <_sbrk>
 8009d5c:	1c43      	adds	r3, r0, #1
 8009d5e:	d102      	bne.n	8009d66 <_sbrk_r+0x1a>
 8009d60:	682b      	ldr	r3, [r5, #0]
 8009d62:	b103      	cbz	r3, 8009d66 <_sbrk_r+0x1a>
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	bd38      	pop	{r3, r4, r5, pc}
 8009d68:	2000045c 	.word	0x2000045c

08009d6c <__sread>:
 8009d6c:	b510      	push	{r4, lr}
 8009d6e:	460c      	mov	r4, r1
 8009d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d74:	f000 fb0a 	bl	800a38c <_read_r>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	bfab      	itete	ge
 8009d7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d7e:	89a3      	ldrhlt	r3, [r4, #12]
 8009d80:	181b      	addge	r3, r3, r0
 8009d82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d86:	bfac      	ite	ge
 8009d88:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d8a:	81a3      	strhlt	r3, [r4, #12]
 8009d8c:	bd10      	pop	{r4, pc}

08009d8e <__swrite>:
 8009d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d92:	461f      	mov	r7, r3
 8009d94:	898b      	ldrh	r3, [r1, #12]
 8009d96:	05db      	lsls	r3, r3, #23
 8009d98:	4605      	mov	r5, r0
 8009d9a:	460c      	mov	r4, r1
 8009d9c:	4616      	mov	r6, r2
 8009d9e:	d505      	bpl.n	8009dac <__swrite+0x1e>
 8009da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da4:	2302      	movs	r3, #2
 8009da6:	2200      	movs	r2, #0
 8009da8:	f000 f9c8 	bl	800a13c <_lseek_r>
 8009dac:	89a3      	ldrh	r3, [r4, #12]
 8009dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009db2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009db6:	81a3      	strh	r3, [r4, #12]
 8009db8:	4632      	mov	r2, r6
 8009dba:	463b      	mov	r3, r7
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc2:	f000 b869 	b.w	8009e98 <_write_r>

08009dc6 <__sseek>:
 8009dc6:	b510      	push	{r4, lr}
 8009dc8:	460c      	mov	r4, r1
 8009dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dce:	f000 f9b5 	bl	800a13c <_lseek_r>
 8009dd2:	1c43      	adds	r3, r0, #1
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	bf15      	itete	ne
 8009dd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009dda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009dde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009de2:	81a3      	strheq	r3, [r4, #12]
 8009de4:	bf18      	it	ne
 8009de6:	81a3      	strhne	r3, [r4, #12]
 8009de8:	bd10      	pop	{r4, pc}

08009dea <__sclose>:
 8009dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dee:	f000 b8d3 	b.w	8009f98 <_close_r>
	...

08009df4 <__swbuf_r>:
 8009df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df6:	460e      	mov	r6, r1
 8009df8:	4614      	mov	r4, r2
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	b118      	cbz	r0, 8009e06 <__swbuf_r+0x12>
 8009dfe:	6983      	ldr	r3, [r0, #24]
 8009e00:	b90b      	cbnz	r3, 8009e06 <__swbuf_r+0x12>
 8009e02:	f7ff fa25 	bl	8009250 <__sinit>
 8009e06:	4b21      	ldr	r3, [pc, #132]	; (8009e8c <__swbuf_r+0x98>)
 8009e08:	429c      	cmp	r4, r3
 8009e0a:	d12b      	bne.n	8009e64 <__swbuf_r+0x70>
 8009e0c:	686c      	ldr	r4, [r5, #4]
 8009e0e:	69a3      	ldr	r3, [r4, #24]
 8009e10:	60a3      	str	r3, [r4, #8]
 8009e12:	89a3      	ldrh	r3, [r4, #12]
 8009e14:	071a      	lsls	r2, r3, #28
 8009e16:	d52f      	bpl.n	8009e78 <__swbuf_r+0x84>
 8009e18:	6923      	ldr	r3, [r4, #16]
 8009e1a:	b36b      	cbz	r3, 8009e78 <__swbuf_r+0x84>
 8009e1c:	6923      	ldr	r3, [r4, #16]
 8009e1e:	6820      	ldr	r0, [r4, #0]
 8009e20:	1ac0      	subs	r0, r0, r3
 8009e22:	6963      	ldr	r3, [r4, #20]
 8009e24:	b2f6      	uxtb	r6, r6
 8009e26:	4283      	cmp	r3, r0
 8009e28:	4637      	mov	r7, r6
 8009e2a:	dc04      	bgt.n	8009e36 <__swbuf_r+0x42>
 8009e2c:	4621      	mov	r1, r4
 8009e2e:	4628      	mov	r0, r5
 8009e30:	f000 f948 	bl	800a0c4 <_fflush_r>
 8009e34:	bb30      	cbnz	r0, 8009e84 <__swbuf_r+0x90>
 8009e36:	68a3      	ldr	r3, [r4, #8]
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	60a3      	str	r3, [r4, #8]
 8009e3c:	6823      	ldr	r3, [r4, #0]
 8009e3e:	1c5a      	adds	r2, r3, #1
 8009e40:	6022      	str	r2, [r4, #0]
 8009e42:	701e      	strb	r6, [r3, #0]
 8009e44:	6963      	ldr	r3, [r4, #20]
 8009e46:	3001      	adds	r0, #1
 8009e48:	4283      	cmp	r3, r0
 8009e4a:	d004      	beq.n	8009e56 <__swbuf_r+0x62>
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	07db      	lsls	r3, r3, #31
 8009e50:	d506      	bpl.n	8009e60 <__swbuf_r+0x6c>
 8009e52:	2e0a      	cmp	r6, #10
 8009e54:	d104      	bne.n	8009e60 <__swbuf_r+0x6c>
 8009e56:	4621      	mov	r1, r4
 8009e58:	4628      	mov	r0, r5
 8009e5a:	f000 f933 	bl	800a0c4 <_fflush_r>
 8009e5e:	b988      	cbnz	r0, 8009e84 <__swbuf_r+0x90>
 8009e60:	4638      	mov	r0, r7
 8009e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e64:	4b0a      	ldr	r3, [pc, #40]	; (8009e90 <__swbuf_r+0x9c>)
 8009e66:	429c      	cmp	r4, r3
 8009e68:	d101      	bne.n	8009e6e <__swbuf_r+0x7a>
 8009e6a:	68ac      	ldr	r4, [r5, #8]
 8009e6c:	e7cf      	b.n	8009e0e <__swbuf_r+0x1a>
 8009e6e:	4b09      	ldr	r3, [pc, #36]	; (8009e94 <__swbuf_r+0xa0>)
 8009e70:	429c      	cmp	r4, r3
 8009e72:	bf08      	it	eq
 8009e74:	68ec      	ldreq	r4, [r5, #12]
 8009e76:	e7ca      	b.n	8009e0e <__swbuf_r+0x1a>
 8009e78:	4621      	mov	r1, r4
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	f000 f81e 	bl	8009ebc <__swsetup_r>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d0cb      	beq.n	8009e1c <__swbuf_r+0x28>
 8009e84:	f04f 37ff 	mov.w	r7, #4294967295
 8009e88:	e7ea      	b.n	8009e60 <__swbuf_r+0x6c>
 8009e8a:	bf00      	nop
 8009e8c:	0800b570 	.word	0x0800b570
 8009e90:	0800b590 	.word	0x0800b590
 8009e94:	0800b550 	.word	0x0800b550

08009e98 <_write_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	4d07      	ldr	r5, [pc, #28]	; (8009eb8 <_write_r+0x20>)
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	4608      	mov	r0, r1
 8009ea0:	4611      	mov	r1, r2
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	602a      	str	r2, [r5, #0]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	f7f7 ff41 	bl	8001d2e <_write>
 8009eac:	1c43      	adds	r3, r0, #1
 8009eae:	d102      	bne.n	8009eb6 <_write_r+0x1e>
 8009eb0:	682b      	ldr	r3, [r5, #0]
 8009eb2:	b103      	cbz	r3, 8009eb6 <_write_r+0x1e>
 8009eb4:	6023      	str	r3, [r4, #0]
 8009eb6:	bd38      	pop	{r3, r4, r5, pc}
 8009eb8:	2000045c 	.word	0x2000045c

08009ebc <__swsetup_r>:
 8009ebc:	4b32      	ldr	r3, [pc, #200]	; (8009f88 <__swsetup_r+0xcc>)
 8009ebe:	b570      	push	{r4, r5, r6, lr}
 8009ec0:	681d      	ldr	r5, [r3, #0]
 8009ec2:	4606      	mov	r6, r0
 8009ec4:	460c      	mov	r4, r1
 8009ec6:	b125      	cbz	r5, 8009ed2 <__swsetup_r+0x16>
 8009ec8:	69ab      	ldr	r3, [r5, #24]
 8009eca:	b913      	cbnz	r3, 8009ed2 <__swsetup_r+0x16>
 8009ecc:	4628      	mov	r0, r5
 8009ece:	f7ff f9bf 	bl	8009250 <__sinit>
 8009ed2:	4b2e      	ldr	r3, [pc, #184]	; (8009f8c <__swsetup_r+0xd0>)
 8009ed4:	429c      	cmp	r4, r3
 8009ed6:	d10f      	bne.n	8009ef8 <__swsetup_r+0x3c>
 8009ed8:	686c      	ldr	r4, [r5, #4]
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ee0:	0719      	lsls	r1, r3, #28
 8009ee2:	d42c      	bmi.n	8009f3e <__swsetup_r+0x82>
 8009ee4:	06dd      	lsls	r5, r3, #27
 8009ee6:	d411      	bmi.n	8009f0c <__swsetup_r+0x50>
 8009ee8:	2309      	movs	r3, #9
 8009eea:	6033      	str	r3, [r6, #0]
 8009eec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ef0:	81a3      	strh	r3, [r4, #12]
 8009ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef6:	e03e      	b.n	8009f76 <__swsetup_r+0xba>
 8009ef8:	4b25      	ldr	r3, [pc, #148]	; (8009f90 <__swsetup_r+0xd4>)
 8009efa:	429c      	cmp	r4, r3
 8009efc:	d101      	bne.n	8009f02 <__swsetup_r+0x46>
 8009efe:	68ac      	ldr	r4, [r5, #8]
 8009f00:	e7eb      	b.n	8009eda <__swsetup_r+0x1e>
 8009f02:	4b24      	ldr	r3, [pc, #144]	; (8009f94 <__swsetup_r+0xd8>)
 8009f04:	429c      	cmp	r4, r3
 8009f06:	bf08      	it	eq
 8009f08:	68ec      	ldreq	r4, [r5, #12]
 8009f0a:	e7e6      	b.n	8009eda <__swsetup_r+0x1e>
 8009f0c:	0758      	lsls	r0, r3, #29
 8009f0e:	d512      	bpl.n	8009f36 <__swsetup_r+0x7a>
 8009f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f12:	b141      	cbz	r1, 8009f26 <__swsetup_r+0x6a>
 8009f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f18:	4299      	cmp	r1, r3
 8009f1a:	d002      	beq.n	8009f22 <__swsetup_r+0x66>
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	f000 f9b9 	bl	800a294 <_free_r>
 8009f22:	2300      	movs	r3, #0
 8009f24:	6363      	str	r3, [r4, #52]	; 0x34
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f2c:	81a3      	strh	r3, [r4, #12]
 8009f2e:	2300      	movs	r3, #0
 8009f30:	6063      	str	r3, [r4, #4]
 8009f32:	6923      	ldr	r3, [r4, #16]
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	f043 0308 	orr.w	r3, r3, #8
 8009f3c:	81a3      	strh	r3, [r4, #12]
 8009f3e:	6923      	ldr	r3, [r4, #16]
 8009f40:	b94b      	cbnz	r3, 8009f56 <__swsetup_r+0x9a>
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f4c:	d003      	beq.n	8009f56 <__swsetup_r+0x9a>
 8009f4e:	4621      	mov	r1, r4
 8009f50:	4630      	mov	r0, r6
 8009f52:	f000 f92b 	bl	800a1ac <__smakebuf_r>
 8009f56:	89a0      	ldrh	r0, [r4, #12]
 8009f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f5c:	f010 0301 	ands.w	r3, r0, #1
 8009f60:	d00a      	beq.n	8009f78 <__swsetup_r+0xbc>
 8009f62:	2300      	movs	r3, #0
 8009f64:	60a3      	str	r3, [r4, #8]
 8009f66:	6963      	ldr	r3, [r4, #20]
 8009f68:	425b      	negs	r3, r3
 8009f6a:	61a3      	str	r3, [r4, #24]
 8009f6c:	6923      	ldr	r3, [r4, #16]
 8009f6e:	b943      	cbnz	r3, 8009f82 <__swsetup_r+0xc6>
 8009f70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f74:	d1ba      	bne.n	8009eec <__swsetup_r+0x30>
 8009f76:	bd70      	pop	{r4, r5, r6, pc}
 8009f78:	0781      	lsls	r1, r0, #30
 8009f7a:	bf58      	it	pl
 8009f7c:	6963      	ldrpl	r3, [r4, #20]
 8009f7e:	60a3      	str	r3, [r4, #8]
 8009f80:	e7f4      	b.n	8009f6c <__swsetup_r+0xb0>
 8009f82:	2000      	movs	r0, #0
 8009f84:	e7f7      	b.n	8009f76 <__swsetup_r+0xba>
 8009f86:	bf00      	nop
 8009f88:	200000f4 	.word	0x200000f4
 8009f8c:	0800b570 	.word	0x0800b570
 8009f90:	0800b590 	.word	0x0800b590
 8009f94:	0800b550 	.word	0x0800b550

08009f98 <_close_r>:
 8009f98:	b538      	push	{r3, r4, r5, lr}
 8009f9a:	4d06      	ldr	r5, [pc, #24]	; (8009fb4 <_close_r+0x1c>)
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	4608      	mov	r0, r1
 8009fa2:	602b      	str	r3, [r5, #0]
 8009fa4:	f7f7 fedf 	bl	8001d66 <_close>
 8009fa8:	1c43      	adds	r3, r0, #1
 8009faa:	d102      	bne.n	8009fb2 <_close_r+0x1a>
 8009fac:	682b      	ldr	r3, [r5, #0]
 8009fae:	b103      	cbz	r3, 8009fb2 <_close_r+0x1a>
 8009fb0:	6023      	str	r3, [r4, #0]
 8009fb2:	bd38      	pop	{r3, r4, r5, pc}
 8009fb4:	2000045c 	.word	0x2000045c

08009fb8 <__sflush_r>:
 8009fb8:	898a      	ldrh	r2, [r1, #12]
 8009fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	0710      	lsls	r0, r2, #28
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	d458      	bmi.n	800a078 <__sflush_r+0xc0>
 8009fc6:	684b      	ldr	r3, [r1, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	dc05      	bgt.n	8009fd8 <__sflush_r+0x20>
 8009fcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	dc02      	bgt.n	8009fd8 <__sflush_r+0x20>
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fda:	2e00      	cmp	r6, #0
 8009fdc:	d0f9      	beq.n	8009fd2 <__sflush_r+0x1a>
 8009fde:	2300      	movs	r3, #0
 8009fe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fe4:	682f      	ldr	r7, [r5, #0]
 8009fe6:	602b      	str	r3, [r5, #0]
 8009fe8:	d032      	beq.n	800a050 <__sflush_r+0x98>
 8009fea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009fec:	89a3      	ldrh	r3, [r4, #12]
 8009fee:	075a      	lsls	r2, r3, #29
 8009ff0:	d505      	bpl.n	8009ffe <__sflush_r+0x46>
 8009ff2:	6863      	ldr	r3, [r4, #4]
 8009ff4:	1ac0      	subs	r0, r0, r3
 8009ff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ff8:	b10b      	cbz	r3, 8009ffe <__sflush_r+0x46>
 8009ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ffc:	1ac0      	subs	r0, r0, r3
 8009ffe:	2300      	movs	r3, #0
 800a000:	4602      	mov	r2, r0
 800a002:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a004:	6a21      	ldr	r1, [r4, #32]
 800a006:	4628      	mov	r0, r5
 800a008:	47b0      	blx	r6
 800a00a:	1c43      	adds	r3, r0, #1
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	d106      	bne.n	800a01e <__sflush_r+0x66>
 800a010:	6829      	ldr	r1, [r5, #0]
 800a012:	291d      	cmp	r1, #29
 800a014:	d82c      	bhi.n	800a070 <__sflush_r+0xb8>
 800a016:	4a2a      	ldr	r2, [pc, #168]	; (800a0c0 <__sflush_r+0x108>)
 800a018:	40ca      	lsrs	r2, r1
 800a01a:	07d6      	lsls	r6, r2, #31
 800a01c:	d528      	bpl.n	800a070 <__sflush_r+0xb8>
 800a01e:	2200      	movs	r2, #0
 800a020:	6062      	str	r2, [r4, #4]
 800a022:	04d9      	lsls	r1, r3, #19
 800a024:	6922      	ldr	r2, [r4, #16]
 800a026:	6022      	str	r2, [r4, #0]
 800a028:	d504      	bpl.n	800a034 <__sflush_r+0x7c>
 800a02a:	1c42      	adds	r2, r0, #1
 800a02c:	d101      	bne.n	800a032 <__sflush_r+0x7a>
 800a02e:	682b      	ldr	r3, [r5, #0]
 800a030:	b903      	cbnz	r3, 800a034 <__sflush_r+0x7c>
 800a032:	6560      	str	r0, [r4, #84]	; 0x54
 800a034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a036:	602f      	str	r7, [r5, #0]
 800a038:	2900      	cmp	r1, #0
 800a03a:	d0ca      	beq.n	8009fd2 <__sflush_r+0x1a>
 800a03c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a040:	4299      	cmp	r1, r3
 800a042:	d002      	beq.n	800a04a <__sflush_r+0x92>
 800a044:	4628      	mov	r0, r5
 800a046:	f000 f925 	bl	800a294 <_free_r>
 800a04a:	2000      	movs	r0, #0
 800a04c:	6360      	str	r0, [r4, #52]	; 0x34
 800a04e:	e7c1      	b.n	8009fd4 <__sflush_r+0x1c>
 800a050:	6a21      	ldr	r1, [r4, #32]
 800a052:	2301      	movs	r3, #1
 800a054:	4628      	mov	r0, r5
 800a056:	47b0      	blx	r6
 800a058:	1c41      	adds	r1, r0, #1
 800a05a:	d1c7      	bne.n	8009fec <__sflush_r+0x34>
 800a05c:	682b      	ldr	r3, [r5, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d0c4      	beq.n	8009fec <__sflush_r+0x34>
 800a062:	2b1d      	cmp	r3, #29
 800a064:	d001      	beq.n	800a06a <__sflush_r+0xb2>
 800a066:	2b16      	cmp	r3, #22
 800a068:	d101      	bne.n	800a06e <__sflush_r+0xb6>
 800a06a:	602f      	str	r7, [r5, #0]
 800a06c:	e7b1      	b.n	8009fd2 <__sflush_r+0x1a>
 800a06e:	89a3      	ldrh	r3, [r4, #12]
 800a070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a074:	81a3      	strh	r3, [r4, #12]
 800a076:	e7ad      	b.n	8009fd4 <__sflush_r+0x1c>
 800a078:	690f      	ldr	r7, [r1, #16]
 800a07a:	2f00      	cmp	r7, #0
 800a07c:	d0a9      	beq.n	8009fd2 <__sflush_r+0x1a>
 800a07e:	0793      	lsls	r3, r2, #30
 800a080:	680e      	ldr	r6, [r1, #0]
 800a082:	bf08      	it	eq
 800a084:	694b      	ldreq	r3, [r1, #20]
 800a086:	600f      	str	r7, [r1, #0]
 800a088:	bf18      	it	ne
 800a08a:	2300      	movne	r3, #0
 800a08c:	eba6 0807 	sub.w	r8, r6, r7
 800a090:	608b      	str	r3, [r1, #8]
 800a092:	f1b8 0f00 	cmp.w	r8, #0
 800a096:	dd9c      	ble.n	8009fd2 <__sflush_r+0x1a>
 800a098:	6a21      	ldr	r1, [r4, #32]
 800a09a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a09c:	4643      	mov	r3, r8
 800a09e:	463a      	mov	r2, r7
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	47b0      	blx	r6
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	dc06      	bgt.n	800a0b6 <__sflush_r+0xfe>
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ae:	81a3      	strh	r3, [r4, #12]
 800a0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b4:	e78e      	b.n	8009fd4 <__sflush_r+0x1c>
 800a0b6:	4407      	add	r7, r0
 800a0b8:	eba8 0800 	sub.w	r8, r8, r0
 800a0bc:	e7e9      	b.n	800a092 <__sflush_r+0xda>
 800a0be:	bf00      	nop
 800a0c0:	20400001 	.word	0x20400001

0800a0c4 <_fflush_r>:
 800a0c4:	b538      	push	{r3, r4, r5, lr}
 800a0c6:	690b      	ldr	r3, [r1, #16]
 800a0c8:	4605      	mov	r5, r0
 800a0ca:	460c      	mov	r4, r1
 800a0cc:	b913      	cbnz	r3, 800a0d4 <_fflush_r+0x10>
 800a0ce:	2500      	movs	r5, #0
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	bd38      	pop	{r3, r4, r5, pc}
 800a0d4:	b118      	cbz	r0, 800a0de <_fflush_r+0x1a>
 800a0d6:	6983      	ldr	r3, [r0, #24]
 800a0d8:	b90b      	cbnz	r3, 800a0de <_fflush_r+0x1a>
 800a0da:	f7ff f8b9 	bl	8009250 <__sinit>
 800a0de:	4b14      	ldr	r3, [pc, #80]	; (800a130 <_fflush_r+0x6c>)
 800a0e0:	429c      	cmp	r4, r3
 800a0e2:	d11b      	bne.n	800a11c <_fflush_r+0x58>
 800a0e4:	686c      	ldr	r4, [r5, #4]
 800a0e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d0ef      	beq.n	800a0ce <_fflush_r+0xa>
 800a0ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0f0:	07d0      	lsls	r0, r2, #31
 800a0f2:	d404      	bmi.n	800a0fe <_fflush_r+0x3a>
 800a0f4:	0599      	lsls	r1, r3, #22
 800a0f6:	d402      	bmi.n	800a0fe <_fflush_r+0x3a>
 800a0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0fa:	f7ff f947 	bl	800938c <__retarget_lock_acquire_recursive>
 800a0fe:	4628      	mov	r0, r5
 800a100:	4621      	mov	r1, r4
 800a102:	f7ff ff59 	bl	8009fb8 <__sflush_r>
 800a106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a108:	07da      	lsls	r2, r3, #31
 800a10a:	4605      	mov	r5, r0
 800a10c:	d4e0      	bmi.n	800a0d0 <_fflush_r+0xc>
 800a10e:	89a3      	ldrh	r3, [r4, #12]
 800a110:	059b      	lsls	r3, r3, #22
 800a112:	d4dd      	bmi.n	800a0d0 <_fflush_r+0xc>
 800a114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a116:	f7ff f93a 	bl	800938e <__retarget_lock_release_recursive>
 800a11a:	e7d9      	b.n	800a0d0 <_fflush_r+0xc>
 800a11c:	4b05      	ldr	r3, [pc, #20]	; (800a134 <_fflush_r+0x70>)
 800a11e:	429c      	cmp	r4, r3
 800a120:	d101      	bne.n	800a126 <_fflush_r+0x62>
 800a122:	68ac      	ldr	r4, [r5, #8]
 800a124:	e7df      	b.n	800a0e6 <_fflush_r+0x22>
 800a126:	4b04      	ldr	r3, [pc, #16]	; (800a138 <_fflush_r+0x74>)
 800a128:	429c      	cmp	r4, r3
 800a12a:	bf08      	it	eq
 800a12c:	68ec      	ldreq	r4, [r5, #12]
 800a12e:	e7da      	b.n	800a0e6 <_fflush_r+0x22>
 800a130:	0800b570 	.word	0x0800b570
 800a134:	0800b590 	.word	0x0800b590
 800a138:	0800b550 	.word	0x0800b550

0800a13c <_lseek_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4d07      	ldr	r5, [pc, #28]	; (800a15c <_lseek_r+0x20>)
 800a140:	4604      	mov	r4, r0
 800a142:	4608      	mov	r0, r1
 800a144:	4611      	mov	r1, r2
 800a146:	2200      	movs	r2, #0
 800a148:	602a      	str	r2, [r5, #0]
 800a14a:	461a      	mov	r2, r3
 800a14c:	f7f7 fe32 	bl	8001db4 <_lseek>
 800a150:	1c43      	adds	r3, r0, #1
 800a152:	d102      	bne.n	800a15a <_lseek_r+0x1e>
 800a154:	682b      	ldr	r3, [r5, #0]
 800a156:	b103      	cbz	r3, 800a15a <_lseek_r+0x1e>
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	bd38      	pop	{r3, r4, r5, pc}
 800a15c:	2000045c 	.word	0x2000045c

0800a160 <__swhatbuf_r>:
 800a160:	b570      	push	{r4, r5, r6, lr}
 800a162:	460e      	mov	r6, r1
 800a164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a168:	2900      	cmp	r1, #0
 800a16a:	b096      	sub	sp, #88	; 0x58
 800a16c:	4614      	mov	r4, r2
 800a16e:	461d      	mov	r5, r3
 800a170:	da08      	bge.n	800a184 <__swhatbuf_r+0x24>
 800a172:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	602a      	str	r2, [r5, #0]
 800a17a:	061a      	lsls	r2, r3, #24
 800a17c:	d410      	bmi.n	800a1a0 <__swhatbuf_r+0x40>
 800a17e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a182:	e00e      	b.n	800a1a2 <__swhatbuf_r+0x42>
 800a184:	466a      	mov	r2, sp
 800a186:	f000 f913 	bl	800a3b0 <_fstat_r>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	dbf1      	blt.n	800a172 <__swhatbuf_r+0x12>
 800a18e:	9a01      	ldr	r2, [sp, #4]
 800a190:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a194:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a198:	425a      	negs	r2, r3
 800a19a:	415a      	adcs	r2, r3
 800a19c:	602a      	str	r2, [r5, #0]
 800a19e:	e7ee      	b.n	800a17e <__swhatbuf_r+0x1e>
 800a1a0:	2340      	movs	r3, #64	; 0x40
 800a1a2:	2000      	movs	r0, #0
 800a1a4:	6023      	str	r3, [r4, #0]
 800a1a6:	b016      	add	sp, #88	; 0x58
 800a1a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a1ac <__smakebuf_r>:
 800a1ac:	898b      	ldrh	r3, [r1, #12]
 800a1ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1b0:	079d      	lsls	r5, r3, #30
 800a1b2:	4606      	mov	r6, r0
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	d507      	bpl.n	800a1c8 <__smakebuf_r+0x1c>
 800a1b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	6123      	str	r3, [r4, #16]
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	6163      	str	r3, [r4, #20]
 800a1c4:	b002      	add	sp, #8
 800a1c6:	bd70      	pop	{r4, r5, r6, pc}
 800a1c8:	ab01      	add	r3, sp, #4
 800a1ca:	466a      	mov	r2, sp
 800a1cc:	f7ff ffc8 	bl	800a160 <__swhatbuf_r>
 800a1d0:	9900      	ldr	r1, [sp, #0]
 800a1d2:	4605      	mov	r5, r0
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	f7ff f8fb 	bl	80093d0 <_malloc_r>
 800a1da:	b948      	cbnz	r0, 800a1f0 <__smakebuf_r+0x44>
 800a1dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1e0:	059a      	lsls	r2, r3, #22
 800a1e2:	d4ef      	bmi.n	800a1c4 <__smakebuf_r+0x18>
 800a1e4:	f023 0303 	bic.w	r3, r3, #3
 800a1e8:	f043 0302 	orr.w	r3, r3, #2
 800a1ec:	81a3      	strh	r3, [r4, #12]
 800a1ee:	e7e3      	b.n	800a1b8 <__smakebuf_r+0xc>
 800a1f0:	4b0d      	ldr	r3, [pc, #52]	; (800a228 <__smakebuf_r+0x7c>)
 800a1f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1f4:	89a3      	ldrh	r3, [r4, #12]
 800a1f6:	6020      	str	r0, [r4, #0]
 800a1f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1fc:	81a3      	strh	r3, [r4, #12]
 800a1fe:	9b00      	ldr	r3, [sp, #0]
 800a200:	6163      	str	r3, [r4, #20]
 800a202:	9b01      	ldr	r3, [sp, #4]
 800a204:	6120      	str	r0, [r4, #16]
 800a206:	b15b      	cbz	r3, 800a220 <__smakebuf_r+0x74>
 800a208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a20c:	4630      	mov	r0, r6
 800a20e:	f000 f8e1 	bl	800a3d4 <_isatty_r>
 800a212:	b128      	cbz	r0, 800a220 <__smakebuf_r+0x74>
 800a214:	89a3      	ldrh	r3, [r4, #12]
 800a216:	f023 0303 	bic.w	r3, r3, #3
 800a21a:	f043 0301 	orr.w	r3, r3, #1
 800a21e:	81a3      	strh	r3, [r4, #12]
 800a220:	89a0      	ldrh	r0, [r4, #12]
 800a222:	4305      	orrs	r5, r0
 800a224:	81a5      	strh	r5, [r4, #12]
 800a226:	e7cd      	b.n	800a1c4 <__smakebuf_r+0x18>
 800a228:	080091e9 	.word	0x080091e9

0800a22c <memcpy>:
 800a22c:	440a      	add	r2, r1
 800a22e:	4291      	cmp	r1, r2
 800a230:	f100 33ff 	add.w	r3, r0, #4294967295
 800a234:	d100      	bne.n	800a238 <memcpy+0xc>
 800a236:	4770      	bx	lr
 800a238:	b510      	push	{r4, lr}
 800a23a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a23e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a242:	4291      	cmp	r1, r2
 800a244:	d1f9      	bne.n	800a23a <memcpy+0xe>
 800a246:	bd10      	pop	{r4, pc}

0800a248 <memmove>:
 800a248:	4288      	cmp	r0, r1
 800a24a:	b510      	push	{r4, lr}
 800a24c:	eb01 0402 	add.w	r4, r1, r2
 800a250:	d902      	bls.n	800a258 <memmove+0x10>
 800a252:	4284      	cmp	r4, r0
 800a254:	4623      	mov	r3, r4
 800a256:	d807      	bhi.n	800a268 <memmove+0x20>
 800a258:	1e43      	subs	r3, r0, #1
 800a25a:	42a1      	cmp	r1, r4
 800a25c:	d008      	beq.n	800a270 <memmove+0x28>
 800a25e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a262:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a266:	e7f8      	b.n	800a25a <memmove+0x12>
 800a268:	4402      	add	r2, r0
 800a26a:	4601      	mov	r1, r0
 800a26c:	428a      	cmp	r2, r1
 800a26e:	d100      	bne.n	800a272 <memmove+0x2a>
 800a270:	bd10      	pop	{r4, pc}
 800a272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a276:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a27a:	e7f7      	b.n	800a26c <memmove+0x24>

0800a27c <__malloc_lock>:
 800a27c:	4801      	ldr	r0, [pc, #4]	; (800a284 <__malloc_lock+0x8>)
 800a27e:	f7ff b885 	b.w	800938c <__retarget_lock_acquire_recursive>
 800a282:	bf00      	nop
 800a284:	20000450 	.word	0x20000450

0800a288 <__malloc_unlock>:
 800a288:	4801      	ldr	r0, [pc, #4]	; (800a290 <__malloc_unlock+0x8>)
 800a28a:	f7ff b880 	b.w	800938e <__retarget_lock_release_recursive>
 800a28e:	bf00      	nop
 800a290:	20000450 	.word	0x20000450

0800a294 <_free_r>:
 800a294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a296:	2900      	cmp	r1, #0
 800a298:	d044      	beq.n	800a324 <_free_r+0x90>
 800a29a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a29e:	9001      	str	r0, [sp, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f1a1 0404 	sub.w	r4, r1, #4
 800a2a6:	bfb8      	it	lt
 800a2a8:	18e4      	addlt	r4, r4, r3
 800a2aa:	f7ff ffe7 	bl	800a27c <__malloc_lock>
 800a2ae:	4a1e      	ldr	r2, [pc, #120]	; (800a328 <_free_r+0x94>)
 800a2b0:	9801      	ldr	r0, [sp, #4]
 800a2b2:	6813      	ldr	r3, [r2, #0]
 800a2b4:	b933      	cbnz	r3, 800a2c4 <_free_r+0x30>
 800a2b6:	6063      	str	r3, [r4, #4]
 800a2b8:	6014      	str	r4, [r2, #0]
 800a2ba:	b003      	add	sp, #12
 800a2bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2c0:	f7ff bfe2 	b.w	800a288 <__malloc_unlock>
 800a2c4:	42a3      	cmp	r3, r4
 800a2c6:	d908      	bls.n	800a2da <_free_r+0x46>
 800a2c8:	6825      	ldr	r5, [r4, #0]
 800a2ca:	1961      	adds	r1, r4, r5
 800a2cc:	428b      	cmp	r3, r1
 800a2ce:	bf01      	itttt	eq
 800a2d0:	6819      	ldreq	r1, [r3, #0]
 800a2d2:	685b      	ldreq	r3, [r3, #4]
 800a2d4:	1949      	addeq	r1, r1, r5
 800a2d6:	6021      	streq	r1, [r4, #0]
 800a2d8:	e7ed      	b.n	800a2b6 <_free_r+0x22>
 800a2da:	461a      	mov	r2, r3
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	b10b      	cbz	r3, 800a2e4 <_free_r+0x50>
 800a2e0:	42a3      	cmp	r3, r4
 800a2e2:	d9fa      	bls.n	800a2da <_free_r+0x46>
 800a2e4:	6811      	ldr	r1, [r2, #0]
 800a2e6:	1855      	adds	r5, r2, r1
 800a2e8:	42a5      	cmp	r5, r4
 800a2ea:	d10b      	bne.n	800a304 <_free_r+0x70>
 800a2ec:	6824      	ldr	r4, [r4, #0]
 800a2ee:	4421      	add	r1, r4
 800a2f0:	1854      	adds	r4, r2, r1
 800a2f2:	42a3      	cmp	r3, r4
 800a2f4:	6011      	str	r1, [r2, #0]
 800a2f6:	d1e0      	bne.n	800a2ba <_free_r+0x26>
 800a2f8:	681c      	ldr	r4, [r3, #0]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	6053      	str	r3, [r2, #4]
 800a2fe:	4421      	add	r1, r4
 800a300:	6011      	str	r1, [r2, #0]
 800a302:	e7da      	b.n	800a2ba <_free_r+0x26>
 800a304:	d902      	bls.n	800a30c <_free_r+0x78>
 800a306:	230c      	movs	r3, #12
 800a308:	6003      	str	r3, [r0, #0]
 800a30a:	e7d6      	b.n	800a2ba <_free_r+0x26>
 800a30c:	6825      	ldr	r5, [r4, #0]
 800a30e:	1961      	adds	r1, r4, r5
 800a310:	428b      	cmp	r3, r1
 800a312:	bf04      	itt	eq
 800a314:	6819      	ldreq	r1, [r3, #0]
 800a316:	685b      	ldreq	r3, [r3, #4]
 800a318:	6063      	str	r3, [r4, #4]
 800a31a:	bf04      	itt	eq
 800a31c:	1949      	addeq	r1, r1, r5
 800a31e:	6021      	streq	r1, [r4, #0]
 800a320:	6054      	str	r4, [r2, #4]
 800a322:	e7ca      	b.n	800a2ba <_free_r+0x26>
 800a324:	b003      	add	sp, #12
 800a326:	bd30      	pop	{r4, r5, pc}
 800a328:	20000454 	.word	0x20000454

0800a32c <_realloc_r>:
 800a32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a330:	4680      	mov	r8, r0
 800a332:	4614      	mov	r4, r2
 800a334:	460e      	mov	r6, r1
 800a336:	b921      	cbnz	r1, 800a342 <_realloc_r+0x16>
 800a338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a33c:	4611      	mov	r1, r2
 800a33e:	f7ff b847 	b.w	80093d0 <_malloc_r>
 800a342:	b92a      	cbnz	r2, 800a350 <_realloc_r+0x24>
 800a344:	f7ff ffa6 	bl	800a294 <_free_r>
 800a348:	4625      	mov	r5, r4
 800a34a:	4628      	mov	r0, r5
 800a34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a350:	f000 f850 	bl	800a3f4 <_malloc_usable_size_r>
 800a354:	4284      	cmp	r4, r0
 800a356:	4607      	mov	r7, r0
 800a358:	d802      	bhi.n	800a360 <_realloc_r+0x34>
 800a35a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a35e:	d812      	bhi.n	800a386 <_realloc_r+0x5a>
 800a360:	4621      	mov	r1, r4
 800a362:	4640      	mov	r0, r8
 800a364:	f7ff f834 	bl	80093d0 <_malloc_r>
 800a368:	4605      	mov	r5, r0
 800a36a:	2800      	cmp	r0, #0
 800a36c:	d0ed      	beq.n	800a34a <_realloc_r+0x1e>
 800a36e:	42bc      	cmp	r4, r7
 800a370:	4622      	mov	r2, r4
 800a372:	4631      	mov	r1, r6
 800a374:	bf28      	it	cs
 800a376:	463a      	movcs	r2, r7
 800a378:	f7ff ff58 	bl	800a22c <memcpy>
 800a37c:	4631      	mov	r1, r6
 800a37e:	4640      	mov	r0, r8
 800a380:	f7ff ff88 	bl	800a294 <_free_r>
 800a384:	e7e1      	b.n	800a34a <_realloc_r+0x1e>
 800a386:	4635      	mov	r5, r6
 800a388:	e7df      	b.n	800a34a <_realloc_r+0x1e>
	...

0800a38c <_read_r>:
 800a38c:	b538      	push	{r3, r4, r5, lr}
 800a38e:	4d07      	ldr	r5, [pc, #28]	; (800a3ac <_read_r+0x20>)
 800a390:	4604      	mov	r4, r0
 800a392:	4608      	mov	r0, r1
 800a394:	4611      	mov	r1, r2
 800a396:	2200      	movs	r2, #0
 800a398:	602a      	str	r2, [r5, #0]
 800a39a:	461a      	mov	r2, r3
 800a39c:	f7f7 fcaa 	bl	8001cf4 <_read>
 800a3a0:	1c43      	adds	r3, r0, #1
 800a3a2:	d102      	bne.n	800a3aa <_read_r+0x1e>
 800a3a4:	682b      	ldr	r3, [r5, #0]
 800a3a6:	b103      	cbz	r3, 800a3aa <_read_r+0x1e>
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	bd38      	pop	{r3, r4, r5, pc}
 800a3ac:	2000045c 	.word	0x2000045c

0800a3b0 <_fstat_r>:
 800a3b0:	b538      	push	{r3, r4, r5, lr}
 800a3b2:	4d07      	ldr	r5, [pc, #28]	; (800a3d0 <_fstat_r+0x20>)
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	4608      	mov	r0, r1
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	602b      	str	r3, [r5, #0]
 800a3be:	f7f7 fcde 	bl	8001d7e <_fstat>
 800a3c2:	1c43      	adds	r3, r0, #1
 800a3c4:	d102      	bne.n	800a3cc <_fstat_r+0x1c>
 800a3c6:	682b      	ldr	r3, [r5, #0]
 800a3c8:	b103      	cbz	r3, 800a3cc <_fstat_r+0x1c>
 800a3ca:	6023      	str	r3, [r4, #0]
 800a3cc:	bd38      	pop	{r3, r4, r5, pc}
 800a3ce:	bf00      	nop
 800a3d0:	2000045c 	.word	0x2000045c

0800a3d4 <_isatty_r>:
 800a3d4:	b538      	push	{r3, r4, r5, lr}
 800a3d6:	4d06      	ldr	r5, [pc, #24]	; (800a3f0 <_isatty_r+0x1c>)
 800a3d8:	2300      	movs	r3, #0
 800a3da:	4604      	mov	r4, r0
 800a3dc:	4608      	mov	r0, r1
 800a3de:	602b      	str	r3, [r5, #0]
 800a3e0:	f7f7 fcdd 	bl	8001d9e <_isatty>
 800a3e4:	1c43      	adds	r3, r0, #1
 800a3e6:	d102      	bne.n	800a3ee <_isatty_r+0x1a>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	b103      	cbz	r3, 800a3ee <_isatty_r+0x1a>
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	bd38      	pop	{r3, r4, r5, pc}
 800a3f0:	2000045c 	.word	0x2000045c

0800a3f4 <_malloc_usable_size_r>:
 800a3f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3f8:	1f18      	subs	r0, r3, #4
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	bfbc      	itt	lt
 800a3fe:	580b      	ldrlt	r3, [r1, r0]
 800a400:	18c0      	addlt	r0, r0, r3
 800a402:	4770      	bx	lr

0800a404 <trunc>:
 800a404:	ec51 0b10 	vmov	r0, r1, d0
 800a408:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a40c:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800a410:	2b13      	cmp	r3, #19
 800a412:	b5d0      	push	{r4, r6, r7, lr}
 800a414:	460c      	mov	r4, r1
 800a416:	dc10      	bgt.n	800a43a <trunc+0x36>
 800a418:	2b00      	cmp	r3, #0
 800a41a:	bfa5      	ittet	ge
 800a41c:	4a11      	ldrge	r2, [pc, #68]	; (800a464 <trunc+0x60>)
 800a41e:	fa42 f303 	asrge.w	r3, r2, r3
 800a422:	2100      	movlt	r1, #0
 800a424:	2100      	movge	r1, #0
 800a426:	bfb9      	ittee	lt
 800a428:	2000      	movlt	r0, #0
 800a42a:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800a42e:	2000      	movge	r0, #0
 800a430:	ea24 0103 	bicge.w	r1, r4, r3
 800a434:	ec41 0b10 	vmov	d0, r0, r1
 800a438:	bdd0      	pop	{r4, r6, r7, pc}
 800a43a:	2b33      	cmp	r3, #51	; 0x33
 800a43c:	dd08      	ble.n	800a450 <trunc+0x4c>
 800a43e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a442:	d1f7      	bne.n	800a434 <trunc+0x30>
 800a444:	ee10 2a10 	vmov	r2, s0
 800a448:	460b      	mov	r3, r1
 800a44a:	f7f5 ff1f 	bl	800028c <__adddf3>
 800a44e:	e7f1      	b.n	800a434 <trunc+0x30>
 800a450:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a454:	f04f 33ff 	mov.w	r3, #4294967295
 800a458:	fa23 f202 	lsr.w	r2, r3, r2
 800a45c:	ea20 0602 	bic.w	r6, r0, r2
 800a460:	4630      	mov	r0, r6
 800a462:	e7e7      	b.n	800a434 <trunc+0x30>
 800a464:	000fffff 	.word	0x000fffff

0800a468 <pow>:
 800a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46a:	ed2d 8b02 	vpush	{d8}
 800a46e:	eeb0 8a40 	vmov.f32	s16, s0
 800a472:	eef0 8a60 	vmov.f32	s17, s1
 800a476:	ec55 4b11 	vmov	r4, r5, d1
 800a47a:	f000 f865 	bl	800a548 <__ieee754_pow>
 800a47e:	4622      	mov	r2, r4
 800a480:	462b      	mov	r3, r5
 800a482:	4620      	mov	r0, r4
 800a484:	4629      	mov	r1, r5
 800a486:	ec57 6b10 	vmov	r6, r7, d0
 800a48a:	f7f6 fb4f 	bl	8000b2c <__aeabi_dcmpun>
 800a48e:	2800      	cmp	r0, #0
 800a490:	d13b      	bne.n	800a50a <pow+0xa2>
 800a492:	ec51 0b18 	vmov	r0, r1, d8
 800a496:	2200      	movs	r2, #0
 800a498:	2300      	movs	r3, #0
 800a49a:	f7f6 fb15 	bl	8000ac8 <__aeabi_dcmpeq>
 800a49e:	b1b8      	cbz	r0, 800a4d0 <pow+0x68>
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	f7f6 fb0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d146      	bne.n	800a53e <pow+0xd6>
 800a4b0:	ec45 4b10 	vmov	d0, r4, r5
 800a4b4:	f000 fe61 	bl	800b17a <finite>
 800a4b8:	b338      	cbz	r0, 800a50a <pow+0xa2>
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	2300      	movs	r3, #0
 800a4be:	4620      	mov	r0, r4
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	f7f6 fb0b 	bl	8000adc <__aeabi_dcmplt>
 800a4c6:	b300      	cbz	r0, 800a50a <pow+0xa2>
 800a4c8:	f7fe fdec 	bl	80090a4 <__errno>
 800a4cc:	2322      	movs	r3, #34	; 0x22
 800a4ce:	e01b      	b.n	800a508 <pow+0xa0>
 800a4d0:	ec47 6b10 	vmov	d0, r6, r7
 800a4d4:	f000 fe51 	bl	800b17a <finite>
 800a4d8:	b9e0      	cbnz	r0, 800a514 <pow+0xac>
 800a4da:	eeb0 0a48 	vmov.f32	s0, s16
 800a4de:	eef0 0a68 	vmov.f32	s1, s17
 800a4e2:	f000 fe4a 	bl	800b17a <finite>
 800a4e6:	b1a8      	cbz	r0, 800a514 <pow+0xac>
 800a4e8:	ec45 4b10 	vmov	d0, r4, r5
 800a4ec:	f000 fe45 	bl	800b17a <finite>
 800a4f0:	b180      	cbz	r0, 800a514 <pow+0xac>
 800a4f2:	4632      	mov	r2, r6
 800a4f4:	463b      	mov	r3, r7
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	4639      	mov	r1, r7
 800a4fa:	f7f6 fb17 	bl	8000b2c <__aeabi_dcmpun>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d0e2      	beq.n	800a4c8 <pow+0x60>
 800a502:	f7fe fdcf 	bl	80090a4 <__errno>
 800a506:	2321      	movs	r3, #33	; 0x21
 800a508:	6003      	str	r3, [r0, #0]
 800a50a:	ecbd 8b02 	vpop	{d8}
 800a50e:	ec47 6b10 	vmov	d0, r6, r7
 800a512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a514:	2200      	movs	r2, #0
 800a516:	2300      	movs	r3, #0
 800a518:	4630      	mov	r0, r6
 800a51a:	4639      	mov	r1, r7
 800a51c:	f7f6 fad4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a520:	2800      	cmp	r0, #0
 800a522:	d0f2      	beq.n	800a50a <pow+0xa2>
 800a524:	eeb0 0a48 	vmov.f32	s0, s16
 800a528:	eef0 0a68 	vmov.f32	s1, s17
 800a52c:	f000 fe25 	bl	800b17a <finite>
 800a530:	2800      	cmp	r0, #0
 800a532:	d0ea      	beq.n	800a50a <pow+0xa2>
 800a534:	ec45 4b10 	vmov	d0, r4, r5
 800a538:	f000 fe1f 	bl	800b17a <finite>
 800a53c:	e7c3      	b.n	800a4c6 <pow+0x5e>
 800a53e:	4f01      	ldr	r7, [pc, #4]	; (800a544 <pow+0xdc>)
 800a540:	2600      	movs	r6, #0
 800a542:	e7e2      	b.n	800a50a <pow+0xa2>
 800a544:	3ff00000 	.word	0x3ff00000

0800a548 <__ieee754_pow>:
 800a548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54c:	ed2d 8b06 	vpush	{d8-d10}
 800a550:	b089      	sub	sp, #36	; 0x24
 800a552:	ed8d 1b00 	vstr	d1, [sp]
 800a556:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a55a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a55e:	ea58 0102 	orrs.w	r1, r8, r2
 800a562:	ec57 6b10 	vmov	r6, r7, d0
 800a566:	d115      	bne.n	800a594 <__ieee754_pow+0x4c>
 800a568:	19b3      	adds	r3, r6, r6
 800a56a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a56e:	4152      	adcs	r2, r2
 800a570:	4299      	cmp	r1, r3
 800a572:	4b89      	ldr	r3, [pc, #548]	; (800a798 <__ieee754_pow+0x250>)
 800a574:	4193      	sbcs	r3, r2
 800a576:	f080 84d2 	bcs.w	800af1e <__ieee754_pow+0x9d6>
 800a57a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a57e:	4630      	mov	r0, r6
 800a580:	4639      	mov	r1, r7
 800a582:	f7f5 fe83 	bl	800028c <__adddf3>
 800a586:	ec41 0b10 	vmov	d0, r0, r1
 800a58a:	b009      	add	sp, #36	; 0x24
 800a58c:	ecbd 8b06 	vpop	{d8-d10}
 800a590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a594:	4b81      	ldr	r3, [pc, #516]	; (800a79c <__ieee754_pow+0x254>)
 800a596:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a59a:	429c      	cmp	r4, r3
 800a59c:	ee10 aa10 	vmov	sl, s0
 800a5a0:	463d      	mov	r5, r7
 800a5a2:	dc06      	bgt.n	800a5b2 <__ieee754_pow+0x6a>
 800a5a4:	d101      	bne.n	800a5aa <__ieee754_pow+0x62>
 800a5a6:	2e00      	cmp	r6, #0
 800a5a8:	d1e7      	bne.n	800a57a <__ieee754_pow+0x32>
 800a5aa:	4598      	cmp	r8, r3
 800a5ac:	dc01      	bgt.n	800a5b2 <__ieee754_pow+0x6a>
 800a5ae:	d10f      	bne.n	800a5d0 <__ieee754_pow+0x88>
 800a5b0:	b172      	cbz	r2, 800a5d0 <__ieee754_pow+0x88>
 800a5b2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a5b6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a5ba:	ea55 050a 	orrs.w	r5, r5, sl
 800a5be:	d1dc      	bne.n	800a57a <__ieee754_pow+0x32>
 800a5c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a5c4:	18db      	adds	r3, r3, r3
 800a5c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a5ca:	4152      	adcs	r2, r2
 800a5cc:	429d      	cmp	r5, r3
 800a5ce:	e7d0      	b.n	800a572 <__ieee754_pow+0x2a>
 800a5d0:	2d00      	cmp	r5, #0
 800a5d2:	da3b      	bge.n	800a64c <__ieee754_pow+0x104>
 800a5d4:	4b72      	ldr	r3, [pc, #456]	; (800a7a0 <__ieee754_pow+0x258>)
 800a5d6:	4598      	cmp	r8, r3
 800a5d8:	dc51      	bgt.n	800a67e <__ieee754_pow+0x136>
 800a5da:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a5de:	4598      	cmp	r8, r3
 800a5e0:	f340 84ac 	ble.w	800af3c <__ieee754_pow+0x9f4>
 800a5e4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a5e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a5ec:	2b14      	cmp	r3, #20
 800a5ee:	dd0f      	ble.n	800a610 <__ieee754_pow+0xc8>
 800a5f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a5f4:	fa22 f103 	lsr.w	r1, r2, r3
 800a5f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	f040 849d 	bne.w	800af3c <__ieee754_pow+0x9f4>
 800a602:	f001 0101 	and.w	r1, r1, #1
 800a606:	f1c1 0302 	rsb	r3, r1, #2
 800a60a:	9304      	str	r3, [sp, #16]
 800a60c:	b182      	cbz	r2, 800a630 <__ieee754_pow+0xe8>
 800a60e:	e05f      	b.n	800a6d0 <__ieee754_pow+0x188>
 800a610:	2a00      	cmp	r2, #0
 800a612:	d15b      	bne.n	800a6cc <__ieee754_pow+0x184>
 800a614:	f1c3 0314 	rsb	r3, r3, #20
 800a618:	fa48 f103 	asr.w	r1, r8, r3
 800a61c:	fa01 f303 	lsl.w	r3, r1, r3
 800a620:	4543      	cmp	r3, r8
 800a622:	f040 8488 	bne.w	800af36 <__ieee754_pow+0x9ee>
 800a626:	f001 0101 	and.w	r1, r1, #1
 800a62a:	f1c1 0302 	rsb	r3, r1, #2
 800a62e:	9304      	str	r3, [sp, #16]
 800a630:	4b5c      	ldr	r3, [pc, #368]	; (800a7a4 <__ieee754_pow+0x25c>)
 800a632:	4598      	cmp	r8, r3
 800a634:	d132      	bne.n	800a69c <__ieee754_pow+0x154>
 800a636:	f1b9 0f00 	cmp.w	r9, #0
 800a63a:	f280 8478 	bge.w	800af2e <__ieee754_pow+0x9e6>
 800a63e:	4959      	ldr	r1, [pc, #356]	; (800a7a4 <__ieee754_pow+0x25c>)
 800a640:	4632      	mov	r2, r6
 800a642:	463b      	mov	r3, r7
 800a644:	2000      	movs	r0, #0
 800a646:	f7f6 f901 	bl	800084c <__aeabi_ddiv>
 800a64a:	e79c      	b.n	800a586 <__ieee754_pow+0x3e>
 800a64c:	2300      	movs	r3, #0
 800a64e:	9304      	str	r3, [sp, #16]
 800a650:	2a00      	cmp	r2, #0
 800a652:	d13d      	bne.n	800a6d0 <__ieee754_pow+0x188>
 800a654:	4b51      	ldr	r3, [pc, #324]	; (800a79c <__ieee754_pow+0x254>)
 800a656:	4598      	cmp	r8, r3
 800a658:	d1ea      	bne.n	800a630 <__ieee754_pow+0xe8>
 800a65a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a65e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a662:	ea53 030a 	orrs.w	r3, r3, sl
 800a666:	f000 845a 	beq.w	800af1e <__ieee754_pow+0x9d6>
 800a66a:	4b4f      	ldr	r3, [pc, #316]	; (800a7a8 <__ieee754_pow+0x260>)
 800a66c:	429c      	cmp	r4, r3
 800a66e:	dd08      	ble.n	800a682 <__ieee754_pow+0x13a>
 800a670:	f1b9 0f00 	cmp.w	r9, #0
 800a674:	f2c0 8457 	blt.w	800af26 <__ieee754_pow+0x9de>
 800a678:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a67c:	e783      	b.n	800a586 <__ieee754_pow+0x3e>
 800a67e:	2302      	movs	r3, #2
 800a680:	e7e5      	b.n	800a64e <__ieee754_pow+0x106>
 800a682:	f1b9 0f00 	cmp.w	r9, #0
 800a686:	f04f 0000 	mov.w	r0, #0
 800a68a:	f04f 0100 	mov.w	r1, #0
 800a68e:	f6bf af7a 	bge.w	800a586 <__ieee754_pow+0x3e>
 800a692:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a696:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a69a:	e774      	b.n	800a586 <__ieee754_pow+0x3e>
 800a69c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a6a0:	d106      	bne.n	800a6b0 <__ieee754_pow+0x168>
 800a6a2:	4632      	mov	r2, r6
 800a6a4:	463b      	mov	r3, r7
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	4639      	mov	r1, r7
 800a6aa:	f7f5 ffa5 	bl	80005f8 <__aeabi_dmul>
 800a6ae:	e76a      	b.n	800a586 <__ieee754_pow+0x3e>
 800a6b0:	4b3e      	ldr	r3, [pc, #248]	; (800a7ac <__ieee754_pow+0x264>)
 800a6b2:	4599      	cmp	r9, r3
 800a6b4:	d10c      	bne.n	800a6d0 <__ieee754_pow+0x188>
 800a6b6:	2d00      	cmp	r5, #0
 800a6b8:	db0a      	blt.n	800a6d0 <__ieee754_pow+0x188>
 800a6ba:	ec47 6b10 	vmov	d0, r6, r7
 800a6be:	b009      	add	sp, #36	; 0x24
 800a6c0:	ecbd 8b06 	vpop	{d8-d10}
 800a6c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c8:	f000 bc6c 	b.w	800afa4 <__ieee754_sqrt>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	9304      	str	r3, [sp, #16]
 800a6d0:	ec47 6b10 	vmov	d0, r6, r7
 800a6d4:	f000 fd48 	bl	800b168 <fabs>
 800a6d8:	ec51 0b10 	vmov	r0, r1, d0
 800a6dc:	f1ba 0f00 	cmp.w	sl, #0
 800a6e0:	d129      	bne.n	800a736 <__ieee754_pow+0x1ee>
 800a6e2:	b124      	cbz	r4, 800a6ee <__ieee754_pow+0x1a6>
 800a6e4:	4b2f      	ldr	r3, [pc, #188]	; (800a7a4 <__ieee754_pow+0x25c>)
 800a6e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d123      	bne.n	800a736 <__ieee754_pow+0x1ee>
 800a6ee:	f1b9 0f00 	cmp.w	r9, #0
 800a6f2:	da05      	bge.n	800a700 <__ieee754_pow+0x1b8>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	492a      	ldr	r1, [pc, #168]	; (800a7a4 <__ieee754_pow+0x25c>)
 800a6fc:	f7f6 f8a6 	bl	800084c <__aeabi_ddiv>
 800a700:	2d00      	cmp	r5, #0
 800a702:	f6bf af40 	bge.w	800a586 <__ieee754_pow+0x3e>
 800a706:	9b04      	ldr	r3, [sp, #16]
 800a708:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a70c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a710:	4323      	orrs	r3, r4
 800a712:	d108      	bne.n	800a726 <__ieee754_pow+0x1de>
 800a714:	4602      	mov	r2, r0
 800a716:	460b      	mov	r3, r1
 800a718:	4610      	mov	r0, r2
 800a71a:	4619      	mov	r1, r3
 800a71c:	f7f5 fdb4 	bl	8000288 <__aeabi_dsub>
 800a720:	4602      	mov	r2, r0
 800a722:	460b      	mov	r3, r1
 800a724:	e78f      	b.n	800a646 <__ieee754_pow+0xfe>
 800a726:	9b04      	ldr	r3, [sp, #16]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	f47f af2c 	bne.w	800a586 <__ieee754_pow+0x3e>
 800a72e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a732:	4619      	mov	r1, r3
 800a734:	e727      	b.n	800a586 <__ieee754_pow+0x3e>
 800a736:	0feb      	lsrs	r3, r5, #31
 800a738:	3b01      	subs	r3, #1
 800a73a:	9306      	str	r3, [sp, #24]
 800a73c:	9a06      	ldr	r2, [sp, #24]
 800a73e:	9b04      	ldr	r3, [sp, #16]
 800a740:	4313      	orrs	r3, r2
 800a742:	d102      	bne.n	800a74a <__ieee754_pow+0x202>
 800a744:	4632      	mov	r2, r6
 800a746:	463b      	mov	r3, r7
 800a748:	e7e6      	b.n	800a718 <__ieee754_pow+0x1d0>
 800a74a:	4b19      	ldr	r3, [pc, #100]	; (800a7b0 <__ieee754_pow+0x268>)
 800a74c:	4598      	cmp	r8, r3
 800a74e:	f340 80fb 	ble.w	800a948 <__ieee754_pow+0x400>
 800a752:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a756:	4598      	cmp	r8, r3
 800a758:	4b13      	ldr	r3, [pc, #76]	; (800a7a8 <__ieee754_pow+0x260>)
 800a75a:	dd0c      	ble.n	800a776 <__ieee754_pow+0x22e>
 800a75c:	429c      	cmp	r4, r3
 800a75e:	dc0f      	bgt.n	800a780 <__ieee754_pow+0x238>
 800a760:	f1b9 0f00 	cmp.w	r9, #0
 800a764:	da0f      	bge.n	800a786 <__ieee754_pow+0x23e>
 800a766:	2000      	movs	r0, #0
 800a768:	b009      	add	sp, #36	; 0x24
 800a76a:	ecbd 8b06 	vpop	{d8-d10}
 800a76e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a772:	f000 bcf0 	b.w	800b156 <__math_oflow>
 800a776:	429c      	cmp	r4, r3
 800a778:	dbf2      	blt.n	800a760 <__ieee754_pow+0x218>
 800a77a:	4b0a      	ldr	r3, [pc, #40]	; (800a7a4 <__ieee754_pow+0x25c>)
 800a77c:	429c      	cmp	r4, r3
 800a77e:	dd19      	ble.n	800a7b4 <__ieee754_pow+0x26c>
 800a780:	f1b9 0f00 	cmp.w	r9, #0
 800a784:	dcef      	bgt.n	800a766 <__ieee754_pow+0x21e>
 800a786:	2000      	movs	r0, #0
 800a788:	b009      	add	sp, #36	; 0x24
 800a78a:	ecbd 8b06 	vpop	{d8-d10}
 800a78e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a792:	f000 bcd7 	b.w	800b144 <__math_uflow>
 800a796:	bf00      	nop
 800a798:	fff00000 	.word	0xfff00000
 800a79c:	7ff00000 	.word	0x7ff00000
 800a7a0:	433fffff 	.word	0x433fffff
 800a7a4:	3ff00000 	.word	0x3ff00000
 800a7a8:	3fefffff 	.word	0x3fefffff
 800a7ac:	3fe00000 	.word	0x3fe00000
 800a7b0:	41e00000 	.word	0x41e00000
 800a7b4:	4b60      	ldr	r3, [pc, #384]	; (800a938 <__ieee754_pow+0x3f0>)
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f7f5 fd66 	bl	8000288 <__aeabi_dsub>
 800a7bc:	a354      	add	r3, pc, #336	; (adr r3, 800a910 <__ieee754_pow+0x3c8>)
 800a7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	460d      	mov	r5, r1
 800a7c6:	f7f5 ff17 	bl	80005f8 <__aeabi_dmul>
 800a7ca:	a353      	add	r3, pc, #332	; (adr r3, 800a918 <__ieee754_pow+0x3d0>)
 800a7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d0:	4606      	mov	r6, r0
 800a7d2:	460f      	mov	r7, r1
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	f7f5 ff0e 	bl	80005f8 <__aeabi_dmul>
 800a7dc:	4b57      	ldr	r3, [pc, #348]	; (800a93c <__ieee754_pow+0x3f4>)
 800a7de:	4682      	mov	sl, r0
 800a7e0:	468b      	mov	fp, r1
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	4629      	mov	r1, r5
 800a7e8:	f7f5 ff06 	bl	80005f8 <__aeabi_dmul>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	a14b      	add	r1, pc, #300	; (adr r1, 800a920 <__ieee754_pow+0x3d8>)
 800a7f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7f6:	f7f5 fd47 	bl	8000288 <__aeabi_dsub>
 800a7fa:	4622      	mov	r2, r4
 800a7fc:	462b      	mov	r3, r5
 800a7fe:	f7f5 fefb 	bl	80005f8 <__aeabi_dmul>
 800a802:	4602      	mov	r2, r0
 800a804:	460b      	mov	r3, r1
 800a806:	2000      	movs	r0, #0
 800a808:	494d      	ldr	r1, [pc, #308]	; (800a940 <__ieee754_pow+0x3f8>)
 800a80a:	f7f5 fd3d 	bl	8000288 <__aeabi_dsub>
 800a80e:	4622      	mov	r2, r4
 800a810:	4680      	mov	r8, r0
 800a812:	4689      	mov	r9, r1
 800a814:	462b      	mov	r3, r5
 800a816:	4620      	mov	r0, r4
 800a818:	4629      	mov	r1, r5
 800a81a:	f7f5 feed 	bl	80005f8 <__aeabi_dmul>
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	4640      	mov	r0, r8
 800a824:	4649      	mov	r1, r9
 800a826:	f7f5 fee7 	bl	80005f8 <__aeabi_dmul>
 800a82a:	a33f      	add	r3, pc, #252	; (adr r3, 800a928 <__ieee754_pow+0x3e0>)
 800a82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a830:	f7f5 fee2 	bl	80005f8 <__aeabi_dmul>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4650      	mov	r0, sl
 800a83a:	4659      	mov	r1, fp
 800a83c:	f7f5 fd24 	bl	8000288 <__aeabi_dsub>
 800a840:	4602      	mov	r2, r0
 800a842:	460b      	mov	r3, r1
 800a844:	4680      	mov	r8, r0
 800a846:	4689      	mov	r9, r1
 800a848:	4630      	mov	r0, r6
 800a84a:	4639      	mov	r1, r7
 800a84c:	f7f5 fd1e 	bl	800028c <__adddf3>
 800a850:	2000      	movs	r0, #0
 800a852:	4632      	mov	r2, r6
 800a854:	463b      	mov	r3, r7
 800a856:	4604      	mov	r4, r0
 800a858:	460d      	mov	r5, r1
 800a85a:	f7f5 fd15 	bl	8000288 <__aeabi_dsub>
 800a85e:	4602      	mov	r2, r0
 800a860:	460b      	mov	r3, r1
 800a862:	4640      	mov	r0, r8
 800a864:	4649      	mov	r1, r9
 800a866:	f7f5 fd0f 	bl	8000288 <__aeabi_dsub>
 800a86a:	9b04      	ldr	r3, [sp, #16]
 800a86c:	9a06      	ldr	r2, [sp, #24]
 800a86e:	3b01      	subs	r3, #1
 800a870:	4313      	orrs	r3, r2
 800a872:	4682      	mov	sl, r0
 800a874:	468b      	mov	fp, r1
 800a876:	f040 81e7 	bne.w	800ac48 <__ieee754_pow+0x700>
 800a87a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a930 <__ieee754_pow+0x3e8>
 800a87e:	eeb0 8a47 	vmov.f32	s16, s14
 800a882:	eef0 8a67 	vmov.f32	s17, s15
 800a886:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a88a:	2600      	movs	r6, #0
 800a88c:	4632      	mov	r2, r6
 800a88e:	463b      	mov	r3, r7
 800a890:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a894:	f7f5 fcf8 	bl	8000288 <__aeabi_dsub>
 800a898:	4622      	mov	r2, r4
 800a89a:	462b      	mov	r3, r5
 800a89c:	f7f5 feac 	bl	80005f8 <__aeabi_dmul>
 800a8a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8a4:	4680      	mov	r8, r0
 800a8a6:	4689      	mov	r9, r1
 800a8a8:	4650      	mov	r0, sl
 800a8aa:	4659      	mov	r1, fp
 800a8ac:	f7f5 fea4 	bl	80005f8 <__aeabi_dmul>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	4640      	mov	r0, r8
 800a8b6:	4649      	mov	r1, r9
 800a8b8:	f7f5 fce8 	bl	800028c <__adddf3>
 800a8bc:	4632      	mov	r2, r6
 800a8be:	463b      	mov	r3, r7
 800a8c0:	4680      	mov	r8, r0
 800a8c2:	4689      	mov	r9, r1
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	f7f5 fe96 	bl	80005f8 <__aeabi_dmul>
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	460d      	mov	r5, r1
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	4649      	mov	r1, r9
 800a8d6:	4640      	mov	r0, r8
 800a8d8:	f7f5 fcd8 	bl	800028c <__adddf3>
 800a8dc:	4b19      	ldr	r3, [pc, #100]	; (800a944 <__ieee754_pow+0x3fc>)
 800a8de:	4299      	cmp	r1, r3
 800a8e0:	ec45 4b19 	vmov	d9, r4, r5
 800a8e4:	4606      	mov	r6, r0
 800a8e6:	460f      	mov	r7, r1
 800a8e8:	468b      	mov	fp, r1
 800a8ea:	f340 82f1 	ble.w	800aed0 <__ieee754_pow+0x988>
 800a8ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a8f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a8f6:	4303      	orrs	r3, r0
 800a8f8:	f000 81e4 	beq.w	800acc4 <__ieee754_pow+0x77c>
 800a8fc:	ec51 0b18 	vmov	r0, r1, d8
 800a900:	2200      	movs	r2, #0
 800a902:	2300      	movs	r3, #0
 800a904:	f7f6 f8ea 	bl	8000adc <__aeabi_dcmplt>
 800a908:	3800      	subs	r0, #0
 800a90a:	bf18      	it	ne
 800a90c:	2001      	movne	r0, #1
 800a90e:	e72b      	b.n	800a768 <__ieee754_pow+0x220>
 800a910:	60000000 	.word	0x60000000
 800a914:	3ff71547 	.word	0x3ff71547
 800a918:	f85ddf44 	.word	0xf85ddf44
 800a91c:	3e54ae0b 	.word	0x3e54ae0b
 800a920:	55555555 	.word	0x55555555
 800a924:	3fd55555 	.word	0x3fd55555
 800a928:	652b82fe 	.word	0x652b82fe
 800a92c:	3ff71547 	.word	0x3ff71547
 800a930:	00000000 	.word	0x00000000
 800a934:	bff00000 	.word	0xbff00000
 800a938:	3ff00000 	.word	0x3ff00000
 800a93c:	3fd00000 	.word	0x3fd00000
 800a940:	3fe00000 	.word	0x3fe00000
 800a944:	408fffff 	.word	0x408fffff
 800a948:	4bd5      	ldr	r3, [pc, #852]	; (800aca0 <__ieee754_pow+0x758>)
 800a94a:	402b      	ands	r3, r5
 800a94c:	2200      	movs	r2, #0
 800a94e:	b92b      	cbnz	r3, 800a95c <__ieee754_pow+0x414>
 800a950:	4bd4      	ldr	r3, [pc, #848]	; (800aca4 <__ieee754_pow+0x75c>)
 800a952:	f7f5 fe51 	bl	80005f8 <__aeabi_dmul>
 800a956:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a95a:	460c      	mov	r4, r1
 800a95c:	1523      	asrs	r3, r4, #20
 800a95e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a962:	4413      	add	r3, r2
 800a964:	9305      	str	r3, [sp, #20]
 800a966:	4bd0      	ldr	r3, [pc, #832]	; (800aca8 <__ieee754_pow+0x760>)
 800a968:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a96c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a970:	429c      	cmp	r4, r3
 800a972:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a976:	dd08      	ble.n	800a98a <__ieee754_pow+0x442>
 800a978:	4bcc      	ldr	r3, [pc, #816]	; (800acac <__ieee754_pow+0x764>)
 800a97a:	429c      	cmp	r4, r3
 800a97c:	f340 8162 	ble.w	800ac44 <__ieee754_pow+0x6fc>
 800a980:	9b05      	ldr	r3, [sp, #20]
 800a982:	3301      	adds	r3, #1
 800a984:	9305      	str	r3, [sp, #20]
 800a986:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a98a:	2400      	movs	r4, #0
 800a98c:	00e3      	lsls	r3, r4, #3
 800a98e:	9307      	str	r3, [sp, #28]
 800a990:	4bc7      	ldr	r3, [pc, #796]	; (800acb0 <__ieee754_pow+0x768>)
 800a992:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a996:	ed93 7b00 	vldr	d7, [r3]
 800a99a:	4629      	mov	r1, r5
 800a99c:	ec53 2b17 	vmov	r2, r3, d7
 800a9a0:	eeb0 9a47 	vmov.f32	s18, s14
 800a9a4:	eef0 9a67 	vmov.f32	s19, s15
 800a9a8:	4682      	mov	sl, r0
 800a9aa:	f7f5 fc6d 	bl	8000288 <__aeabi_dsub>
 800a9ae:	4652      	mov	r2, sl
 800a9b0:	4606      	mov	r6, r0
 800a9b2:	460f      	mov	r7, r1
 800a9b4:	462b      	mov	r3, r5
 800a9b6:	ec51 0b19 	vmov	r0, r1, d9
 800a9ba:	f7f5 fc67 	bl	800028c <__adddf3>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	49bb      	ldr	r1, [pc, #748]	; (800acb4 <__ieee754_pow+0x76c>)
 800a9c6:	f7f5 ff41 	bl	800084c <__aeabi_ddiv>
 800a9ca:	ec41 0b1a 	vmov	d10, r0, r1
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	4639      	mov	r1, r7
 800a9d6:	f7f5 fe0f 	bl	80005f8 <__aeabi_dmul>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9e0:	9302      	str	r3, [sp, #8]
 800a9e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a9e6:	46ab      	mov	fp, r5
 800a9e8:	106d      	asrs	r5, r5, #1
 800a9ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a9ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a9f2:	ec41 0b18 	vmov	d8, r0, r1
 800a9f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	4640      	mov	r0, r8
 800a9fe:	4649      	mov	r1, r9
 800aa00:	4614      	mov	r4, r2
 800aa02:	461d      	mov	r5, r3
 800aa04:	f7f5 fdf8 	bl	80005f8 <__aeabi_dmul>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	4639      	mov	r1, r7
 800aa10:	f7f5 fc3a 	bl	8000288 <__aeabi_dsub>
 800aa14:	ec53 2b19 	vmov	r2, r3, d9
 800aa18:	4606      	mov	r6, r0
 800aa1a:	460f      	mov	r7, r1
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	4629      	mov	r1, r5
 800aa20:	f7f5 fc32 	bl	8000288 <__aeabi_dsub>
 800aa24:	4602      	mov	r2, r0
 800aa26:	460b      	mov	r3, r1
 800aa28:	4650      	mov	r0, sl
 800aa2a:	4659      	mov	r1, fp
 800aa2c:	f7f5 fc2c 	bl	8000288 <__aeabi_dsub>
 800aa30:	4642      	mov	r2, r8
 800aa32:	464b      	mov	r3, r9
 800aa34:	f7f5 fde0 	bl	80005f8 <__aeabi_dmul>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	4639      	mov	r1, r7
 800aa40:	f7f5 fc22 	bl	8000288 <__aeabi_dsub>
 800aa44:	ec53 2b1a 	vmov	r2, r3, d10
 800aa48:	f7f5 fdd6 	bl	80005f8 <__aeabi_dmul>
 800aa4c:	ec53 2b18 	vmov	r2, r3, d8
 800aa50:	ec41 0b19 	vmov	d9, r0, r1
 800aa54:	ec51 0b18 	vmov	r0, r1, d8
 800aa58:	f7f5 fdce 	bl	80005f8 <__aeabi_dmul>
 800aa5c:	a37c      	add	r3, pc, #496	; (adr r3, 800ac50 <__ieee754_pow+0x708>)
 800aa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa62:	4604      	mov	r4, r0
 800aa64:	460d      	mov	r5, r1
 800aa66:	f7f5 fdc7 	bl	80005f8 <__aeabi_dmul>
 800aa6a:	a37b      	add	r3, pc, #492	; (adr r3, 800ac58 <__ieee754_pow+0x710>)
 800aa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa70:	f7f5 fc0c 	bl	800028c <__adddf3>
 800aa74:	4622      	mov	r2, r4
 800aa76:	462b      	mov	r3, r5
 800aa78:	f7f5 fdbe 	bl	80005f8 <__aeabi_dmul>
 800aa7c:	a378      	add	r3, pc, #480	; (adr r3, 800ac60 <__ieee754_pow+0x718>)
 800aa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa82:	f7f5 fc03 	bl	800028c <__adddf3>
 800aa86:	4622      	mov	r2, r4
 800aa88:	462b      	mov	r3, r5
 800aa8a:	f7f5 fdb5 	bl	80005f8 <__aeabi_dmul>
 800aa8e:	a376      	add	r3, pc, #472	; (adr r3, 800ac68 <__ieee754_pow+0x720>)
 800aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa94:	f7f5 fbfa 	bl	800028c <__adddf3>
 800aa98:	4622      	mov	r2, r4
 800aa9a:	462b      	mov	r3, r5
 800aa9c:	f7f5 fdac 	bl	80005f8 <__aeabi_dmul>
 800aaa0:	a373      	add	r3, pc, #460	; (adr r3, 800ac70 <__ieee754_pow+0x728>)
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	f7f5 fbf1 	bl	800028c <__adddf3>
 800aaaa:	4622      	mov	r2, r4
 800aaac:	462b      	mov	r3, r5
 800aaae:	f7f5 fda3 	bl	80005f8 <__aeabi_dmul>
 800aab2:	a371      	add	r3, pc, #452	; (adr r3, 800ac78 <__ieee754_pow+0x730>)
 800aab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab8:	f7f5 fbe8 	bl	800028c <__adddf3>
 800aabc:	4622      	mov	r2, r4
 800aabe:	4606      	mov	r6, r0
 800aac0:	460f      	mov	r7, r1
 800aac2:	462b      	mov	r3, r5
 800aac4:	4620      	mov	r0, r4
 800aac6:	4629      	mov	r1, r5
 800aac8:	f7f5 fd96 	bl	80005f8 <__aeabi_dmul>
 800aacc:	4602      	mov	r2, r0
 800aace:	460b      	mov	r3, r1
 800aad0:	4630      	mov	r0, r6
 800aad2:	4639      	mov	r1, r7
 800aad4:	f7f5 fd90 	bl	80005f8 <__aeabi_dmul>
 800aad8:	4642      	mov	r2, r8
 800aada:	4604      	mov	r4, r0
 800aadc:	460d      	mov	r5, r1
 800aade:	464b      	mov	r3, r9
 800aae0:	ec51 0b18 	vmov	r0, r1, d8
 800aae4:	f7f5 fbd2 	bl	800028c <__adddf3>
 800aae8:	ec53 2b19 	vmov	r2, r3, d9
 800aaec:	f7f5 fd84 	bl	80005f8 <__aeabi_dmul>
 800aaf0:	4622      	mov	r2, r4
 800aaf2:	462b      	mov	r3, r5
 800aaf4:	f7f5 fbca 	bl	800028c <__adddf3>
 800aaf8:	4642      	mov	r2, r8
 800aafa:	4682      	mov	sl, r0
 800aafc:	468b      	mov	fp, r1
 800aafe:	464b      	mov	r3, r9
 800ab00:	4640      	mov	r0, r8
 800ab02:	4649      	mov	r1, r9
 800ab04:	f7f5 fd78 	bl	80005f8 <__aeabi_dmul>
 800ab08:	4b6b      	ldr	r3, [pc, #428]	; (800acb8 <__ieee754_pow+0x770>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	4606      	mov	r6, r0
 800ab0e:	460f      	mov	r7, r1
 800ab10:	f7f5 fbbc 	bl	800028c <__adddf3>
 800ab14:	4652      	mov	r2, sl
 800ab16:	465b      	mov	r3, fp
 800ab18:	f7f5 fbb8 	bl	800028c <__adddf3>
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	4604      	mov	r4, r0
 800ab20:	460d      	mov	r5, r1
 800ab22:	4602      	mov	r2, r0
 800ab24:	460b      	mov	r3, r1
 800ab26:	4640      	mov	r0, r8
 800ab28:	4649      	mov	r1, r9
 800ab2a:	f7f5 fd65 	bl	80005f8 <__aeabi_dmul>
 800ab2e:	4b62      	ldr	r3, [pc, #392]	; (800acb8 <__ieee754_pow+0x770>)
 800ab30:	4680      	mov	r8, r0
 800ab32:	4689      	mov	r9, r1
 800ab34:	2200      	movs	r2, #0
 800ab36:	4620      	mov	r0, r4
 800ab38:	4629      	mov	r1, r5
 800ab3a:	f7f5 fba5 	bl	8000288 <__aeabi_dsub>
 800ab3e:	4632      	mov	r2, r6
 800ab40:	463b      	mov	r3, r7
 800ab42:	f7f5 fba1 	bl	8000288 <__aeabi_dsub>
 800ab46:	4602      	mov	r2, r0
 800ab48:	460b      	mov	r3, r1
 800ab4a:	4650      	mov	r0, sl
 800ab4c:	4659      	mov	r1, fp
 800ab4e:	f7f5 fb9b 	bl	8000288 <__aeabi_dsub>
 800ab52:	ec53 2b18 	vmov	r2, r3, d8
 800ab56:	f7f5 fd4f 	bl	80005f8 <__aeabi_dmul>
 800ab5a:	4622      	mov	r2, r4
 800ab5c:	4606      	mov	r6, r0
 800ab5e:	460f      	mov	r7, r1
 800ab60:	462b      	mov	r3, r5
 800ab62:	ec51 0b19 	vmov	r0, r1, d9
 800ab66:	f7f5 fd47 	bl	80005f8 <__aeabi_dmul>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	4630      	mov	r0, r6
 800ab70:	4639      	mov	r1, r7
 800ab72:	f7f5 fb8b 	bl	800028c <__adddf3>
 800ab76:	4606      	mov	r6, r0
 800ab78:	460f      	mov	r7, r1
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	4640      	mov	r0, r8
 800ab80:	4649      	mov	r1, r9
 800ab82:	f7f5 fb83 	bl	800028c <__adddf3>
 800ab86:	a33e      	add	r3, pc, #248	; (adr r3, 800ac80 <__ieee754_pow+0x738>)
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	4604      	mov	r4, r0
 800ab90:	460d      	mov	r5, r1
 800ab92:	f7f5 fd31 	bl	80005f8 <__aeabi_dmul>
 800ab96:	4642      	mov	r2, r8
 800ab98:	ec41 0b18 	vmov	d8, r0, r1
 800ab9c:	464b      	mov	r3, r9
 800ab9e:	4620      	mov	r0, r4
 800aba0:	4629      	mov	r1, r5
 800aba2:	f7f5 fb71 	bl	8000288 <__aeabi_dsub>
 800aba6:	4602      	mov	r2, r0
 800aba8:	460b      	mov	r3, r1
 800abaa:	4630      	mov	r0, r6
 800abac:	4639      	mov	r1, r7
 800abae:	f7f5 fb6b 	bl	8000288 <__aeabi_dsub>
 800abb2:	a335      	add	r3, pc, #212	; (adr r3, 800ac88 <__ieee754_pow+0x740>)
 800abb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb8:	f7f5 fd1e 	bl	80005f8 <__aeabi_dmul>
 800abbc:	a334      	add	r3, pc, #208	; (adr r3, 800ac90 <__ieee754_pow+0x748>)
 800abbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc2:	4606      	mov	r6, r0
 800abc4:	460f      	mov	r7, r1
 800abc6:	4620      	mov	r0, r4
 800abc8:	4629      	mov	r1, r5
 800abca:	f7f5 fd15 	bl	80005f8 <__aeabi_dmul>
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	4630      	mov	r0, r6
 800abd4:	4639      	mov	r1, r7
 800abd6:	f7f5 fb59 	bl	800028c <__adddf3>
 800abda:	9a07      	ldr	r2, [sp, #28]
 800abdc:	4b37      	ldr	r3, [pc, #220]	; (800acbc <__ieee754_pow+0x774>)
 800abde:	4413      	add	r3, r2
 800abe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe4:	f7f5 fb52 	bl	800028c <__adddf3>
 800abe8:	4682      	mov	sl, r0
 800abea:	9805      	ldr	r0, [sp, #20]
 800abec:	468b      	mov	fp, r1
 800abee:	f7f5 fc99 	bl	8000524 <__aeabi_i2d>
 800abf2:	9a07      	ldr	r2, [sp, #28]
 800abf4:	4b32      	ldr	r3, [pc, #200]	; (800acc0 <__ieee754_pow+0x778>)
 800abf6:	4413      	add	r3, r2
 800abf8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abfc:	4606      	mov	r6, r0
 800abfe:	460f      	mov	r7, r1
 800ac00:	4652      	mov	r2, sl
 800ac02:	465b      	mov	r3, fp
 800ac04:	ec51 0b18 	vmov	r0, r1, d8
 800ac08:	f7f5 fb40 	bl	800028c <__adddf3>
 800ac0c:	4642      	mov	r2, r8
 800ac0e:	464b      	mov	r3, r9
 800ac10:	f7f5 fb3c 	bl	800028c <__adddf3>
 800ac14:	4632      	mov	r2, r6
 800ac16:	463b      	mov	r3, r7
 800ac18:	f7f5 fb38 	bl	800028c <__adddf3>
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	4632      	mov	r2, r6
 800ac20:	463b      	mov	r3, r7
 800ac22:	4604      	mov	r4, r0
 800ac24:	460d      	mov	r5, r1
 800ac26:	f7f5 fb2f 	bl	8000288 <__aeabi_dsub>
 800ac2a:	4642      	mov	r2, r8
 800ac2c:	464b      	mov	r3, r9
 800ac2e:	f7f5 fb2b 	bl	8000288 <__aeabi_dsub>
 800ac32:	ec53 2b18 	vmov	r2, r3, d8
 800ac36:	f7f5 fb27 	bl	8000288 <__aeabi_dsub>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	4650      	mov	r0, sl
 800ac40:	4659      	mov	r1, fp
 800ac42:	e610      	b.n	800a866 <__ieee754_pow+0x31e>
 800ac44:	2401      	movs	r4, #1
 800ac46:	e6a1      	b.n	800a98c <__ieee754_pow+0x444>
 800ac48:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ac98 <__ieee754_pow+0x750>
 800ac4c:	e617      	b.n	800a87e <__ieee754_pow+0x336>
 800ac4e:	bf00      	nop
 800ac50:	4a454eef 	.word	0x4a454eef
 800ac54:	3fca7e28 	.word	0x3fca7e28
 800ac58:	93c9db65 	.word	0x93c9db65
 800ac5c:	3fcd864a 	.word	0x3fcd864a
 800ac60:	a91d4101 	.word	0xa91d4101
 800ac64:	3fd17460 	.word	0x3fd17460
 800ac68:	518f264d 	.word	0x518f264d
 800ac6c:	3fd55555 	.word	0x3fd55555
 800ac70:	db6fabff 	.word	0xdb6fabff
 800ac74:	3fdb6db6 	.word	0x3fdb6db6
 800ac78:	33333303 	.word	0x33333303
 800ac7c:	3fe33333 	.word	0x3fe33333
 800ac80:	e0000000 	.word	0xe0000000
 800ac84:	3feec709 	.word	0x3feec709
 800ac88:	dc3a03fd 	.word	0xdc3a03fd
 800ac8c:	3feec709 	.word	0x3feec709
 800ac90:	145b01f5 	.word	0x145b01f5
 800ac94:	be3e2fe0 	.word	0xbe3e2fe0
 800ac98:	00000000 	.word	0x00000000
 800ac9c:	3ff00000 	.word	0x3ff00000
 800aca0:	7ff00000 	.word	0x7ff00000
 800aca4:	43400000 	.word	0x43400000
 800aca8:	0003988e 	.word	0x0003988e
 800acac:	000bb679 	.word	0x000bb679
 800acb0:	0800b5e8 	.word	0x0800b5e8
 800acb4:	3ff00000 	.word	0x3ff00000
 800acb8:	40080000 	.word	0x40080000
 800acbc:	0800b608 	.word	0x0800b608
 800acc0:	0800b5f8 	.word	0x0800b5f8
 800acc4:	a3b5      	add	r3, pc, #724	; (adr r3, 800af9c <__ieee754_pow+0xa54>)
 800acc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acca:	4640      	mov	r0, r8
 800accc:	4649      	mov	r1, r9
 800acce:	f7f5 fadd 	bl	800028c <__adddf3>
 800acd2:	4622      	mov	r2, r4
 800acd4:	ec41 0b1a 	vmov	d10, r0, r1
 800acd8:	462b      	mov	r3, r5
 800acda:	4630      	mov	r0, r6
 800acdc:	4639      	mov	r1, r7
 800acde:	f7f5 fad3 	bl	8000288 <__aeabi_dsub>
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	ec51 0b1a 	vmov	r0, r1, d10
 800acea:	f7f5 ff15 	bl	8000b18 <__aeabi_dcmpgt>
 800acee:	2800      	cmp	r0, #0
 800acf0:	f47f ae04 	bne.w	800a8fc <__ieee754_pow+0x3b4>
 800acf4:	4aa4      	ldr	r2, [pc, #656]	; (800af88 <__ieee754_pow+0xa40>)
 800acf6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800acfa:	4293      	cmp	r3, r2
 800acfc:	f340 8108 	ble.w	800af10 <__ieee754_pow+0x9c8>
 800ad00:	151b      	asrs	r3, r3, #20
 800ad02:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ad06:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ad0a:	fa4a f303 	asr.w	r3, sl, r3
 800ad0e:	445b      	add	r3, fp
 800ad10:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ad14:	4e9d      	ldr	r6, [pc, #628]	; (800af8c <__ieee754_pow+0xa44>)
 800ad16:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ad1a:	4116      	asrs	r6, r2
 800ad1c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ad20:	2000      	movs	r0, #0
 800ad22:	ea23 0106 	bic.w	r1, r3, r6
 800ad26:	f1c2 0214 	rsb	r2, r2, #20
 800ad2a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ad2e:	fa4a fa02 	asr.w	sl, sl, r2
 800ad32:	f1bb 0f00 	cmp.w	fp, #0
 800ad36:	4602      	mov	r2, r0
 800ad38:	460b      	mov	r3, r1
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	bfb8      	it	lt
 800ad40:	f1ca 0a00 	rsblt	sl, sl, #0
 800ad44:	f7f5 faa0 	bl	8000288 <__aeabi_dsub>
 800ad48:	ec41 0b19 	vmov	d9, r0, r1
 800ad4c:	4642      	mov	r2, r8
 800ad4e:	464b      	mov	r3, r9
 800ad50:	ec51 0b19 	vmov	r0, r1, d9
 800ad54:	f7f5 fa9a 	bl	800028c <__adddf3>
 800ad58:	a37b      	add	r3, pc, #492	; (adr r3, 800af48 <__ieee754_pow+0xa00>)
 800ad5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5e:	2000      	movs	r0, #0
 800ad60:	4604      	mov	r4, r0
 800ad62:	460d      	mov	r5, r1
 800ad64:	f7f5 fc48 	bl	80005f8 <__aeabi_dmul>
 800ad68:	ec53 2b19 	vmov	r2, r3, d9
 800ad6c:	4606      	mov	r6, r0
 800ad6e:	460f      	mov	r7, r1
 800ad70:	4620      	mov	r0, r4
 800ad72:	4629      	mov	r1, r5
 800ad74:	f7f5 fa88 	bl	8000288 <__aeabi_dsub>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	4640      	mov	r0, r8
 800ad7e:	4649      	mov	r1, r9
 800ad80:	f7f5 fa82 	bl	8000288 <__aeabi_dsub>
 800ad84:	a372      	add	r3, pc, #456	; (adr r3, 800af50 <__ieee754_pow+0xa08>)
 800ad86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8a:	f7f5 fc35 	bl	80005f8 <__aeabi_dmul>
 800ad8e:	a372      	add	r3, pc, #456	; (adr r3, 800af58 <__ieee754_pow+0xa10>)
 800ad90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad94:	4680      	mov	r8, r0
 800ad96:	4689      	mov	r9, r1
 800ad98:	4620      	mov	r0, r4
 800ad9a:	4629      	mov	r1, r5
 800ad9c:	f7f5 fc2c 	bl	80005f8 <__aeabi_dmul>
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	4640      	mov	r0, r8
 800ada6:	4649      	mov	r1, r9
 800ada8:	f7f5 fa70 	bl	800028c <__adddf3>
 800adac:	4604      	mov	r4, r0
 800adae:	460d      	mov	r5, r1
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4630      	mov	r0, r6
 800adb6:	4639      	mov	r1, r7
 800adb8:	f7f5 fa68 	bl	800028c <__adddf3>
 800adbc:	4632      	mov	r2, r6
 800adbe:	463b      	mov	r3, r7
 800adc0:	4680      	mov	r8, r0
 800adc2:	4689      	mov	r9, r1
 800adc4:	f7f5 fa60 	bl	8000288 <__aeabi_dsub>
 800adc8:	4602      	mov	r2, r0
 800adca:	460b      	mov	r3, r1
 800adcc:	4620      	mov	r0, r4
 800adce:	4629      	mov	r1, r5
 800add0:	f7f5 fa5a 	bl	8000288 <__aeabi_dsub>
 800add4:	4642      	mov	r2, r8
 800add6:	4606      	mov	r6, r0
 800add8:	460f      	mov	r7, r1
 800adda:	464b      	mov	r3, r9
 800addc:	4640      	mov	r0, r8
 800adde:	4649      	mov	r1, r9
 800ade0:	f7f5 fc0a 	bl	80005f8 <__aeabi_dmul>
 800ade4:	a35e      	add	r3, pc, #376	; (adr r3, 800af60 <__ieee754_pow+0xa18>)
 800ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adea:	4604      	mov	r4, r0
 800adec:	460d      	mov	r5, r1
 800adee:	f7f5 fc03 	bl	80005f8 <__aeabi_dmul>
 800adf2:	a35d      	add	r3, pc, #372	; (adr r3, 800af68 <__ieee754_pow+0xa20>)
 800adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf8:	f7f5 fa46 	bl	8000288 <__aeabi_dsub>
 800adfc:	4622      	mov	r2, r4
 800adfe:	462b      	mov	r3, r5
 800ae00:	f7f5 fbfa 	bl	80005f8 <__aeabi_dmul>
 800ae04:	a35a      	add	r3, pc, #360	; (adr r3, 800af70 <__ieee754_pow+0xa28>)
 800ae06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0a:	f7f5 fa3f 	bl	800028c <__adddf3>
 800ae0e:	4622      	mov	r2, r4
 800ae10:	462b      	mov	r3, r5
 800ae12:	f7f5 fbf1 	bl	80005f8 <__aeabi_dmul>
 800ae16:	a358      	add	r3, pc, #352	; (adr r3, 800af78 <__ieee754_pow+0xa30>)
 800ae18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1c:	f7f5 fa34 	bl	8000288 <__aeabi_dsub>
 800ae20:	4622      	mov	r2, r4
 800ae22:	462b      	mov	r3, r5
 800ae24:	f7f5 fbe8 	bl	80005f8 <__aeabi_dmul>
 800ae28:	a355      	add	r3, pc, #340	; (adr r3, 800af80 <__ieee754_pow+0xa38>)
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	f7f5 fa2d 	bl	800028c <__adddf3>
 800ae32:	4622      	mov	r2, r4
 800ae34:	462b      	mov	r3, r5
 800ae36:	f7f5 fbdf 	bl	80005f8 <__aeabi_dmul>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	4640      	mov	r0, r8
 800ae40:	4649      	mov	r1, r9
 800ae42:	f7f5 fa21 	bl	8000288 <__aeabi_dsub>
 800ae46:	4604      	mov	r4, r0
 800ae48:	460d      	mov	r5, r1
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	4640      	mov	r0, r8
 800ae50:	4649      	mov	r1, r9
 800ae52:	f7f5 fbd1 	bl	80005f8 <__aeabi_dmul>
 800ae56:	2200      	movs	r2, #0
 800ae58:	ec41 0b19 	vmov	d9, r0, r1
 800ae5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae60:	4620      	mov	r0, r4
 800ae62:	4629      	mov	r1, r5
 800ae64:	f7f5 fa10 	bl	8000288 <__aeabi_dsub>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	ec51 0b19 	vmov	r0, r1, d9
 800ae70:	f7f5 fcec 	bl	800084c <__aeabi_ddiv>
 800ae74:	4632      	mov	r2, r6
 800ae76:	4604      	mov	r4, r0
 800ae78:	460d      	mov	r5, r1
 800ae7a:	463b      	mov	r3, r7
 800ae7c:	4640      	mov	r0, r8
 800ae7e:	4649      	mov	r1, r9
 800ae80:	f7f5 fbba 	bl	80005f8 <__aeabi_dmul>
 800ae84:	4632      	mov	r2, r6
 800ae86:	463b      	mov	r3, r7
 800ae88:	f7f5 fa00 	bl	800028c <__adddf3>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	460b      	mov	r3, r1
 800ae90:	4620      	mov	r0, r4
 800ae92:	4629      	mov	r1, r5
 800ae94:	f7f5 f9f8 	bl	8000288 <__aeabi_dsub>
 800ae98:	4642      	mov	r2, r8
 800ae9a:	464b      	mov	r3, r9
 800ae9c:	f7f5 f9f4 	bl	8000288 <__aeabi_dsub>
 800aea0:	460b      	mov	r3, r1
 800aea2:	4602      	mov	r2, r0
 800aea4:	493a      	ldr	r1, [pc, #232]	; (800af90 <__ieee754_pow+0xa48>)
 800aea6:	2000      	movs	r0, #0
 800aea8:	f7f5 f9ee 	bl	8000288 <__aeabi_dsub>
 800aeac:	ec41 0b10 	vmov	d0, r0, r1
 800aeb0:	ee10 3a90 	vmov	r3, s1
 800aeb4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800aeb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aebc:	da2b      	bge.n	800af16 <__ieee754_pow+0x9ce>
 800aebe:	4650      	mov	r0, sl
 800aec0:	f000 f966 	bl	800b190 <scalbn>
 800aec4:	ec51 0b10 	vmov	r0, r1, d0
 800aec8:	ec53 2b18 	vmov	r2, r3, d8
 800aecc:	f7ff bbed 	b.w	800a6aa <__ieee754_pow+0x162>
 800aed0:	4b30      	ldr	r3, [pc, #192]	; (800af94 <__ieee754_pow+0xa4c>)
 800aed2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800aed6:	429e      	cmp	r6, r3
 800aed8:	f77f af0c 	ble.w	800acf4 <__ieee754_pow+0x7ac>
 800aedc:	4b2e      	ldr	r3, [pc, #184]	; (800af98 <__ieee754_pow+0xa50>)
 800aede:	440b      	add	r3, r1
 800aee0:	4303      	orrs	r3, r0
 800aee2:	d009      	beq.n	800aef8 <__ieee754_pow+0x9b0>
 800aee4:	ec51 0b18 	vmov	r0, r1, d8
 800aee8:	2200      	movs	r2, #0
 800aeea:	2300      	movs	r3, #0
 800aeec:	f7f5 fdf6 	bl	8000adc <__aeabi_dcmplt>
 800aef0:	3800      	subs	r0, #0
 800aef2:	bf18      	it	ne
 800aef4:	2001      	movne	r0, #1
 800aef6:	e447      	b.n	800a788 <__ieee754_pow+0x240>
 800aef8:	4622      	mov	r2, r4
 800aefa:	462b      	mov	r3, r5
 800aefc:	f7f5 f9c4 	bl	8000288 <__aeabi_dsub>
 800af00:	4642      	mov	r2, r8
 800af02:	464b      	mov	r3, r9
 800af04:	f7f5 fdfe 	bl	8000b04 <__aeabi_dcmpge>
 800af08:	2800      	cmp	r0, #0
 800af0a:	f43f aef3 	beq.w	800acf4 <__ieee754_pow+0x7ac>
 800af0e:	e7e9      	b.n	800aee4 <__ieee754_pow+0x99c>
 800af10:	f04f 0a00 	mov.w	sl, #0
 800af14:	e71a      	b.n	800ad4c <__ieee754_pow+0x804>
 800af16:	ec51 0b10 	vmov	r0, r1, d0
 800af1a:	4619      	mov	r1, r3
 800af1c:	e7d4      	b.n	800aec8 <__ieee754_pow+0x980>
 800af1e:	491c      	ldr	r1, [pc, #112]	; (800af90 <__ieee754_pow+0xa48>)
 800af20:	2000      	movs	r0, #0
 800af22:	f7ff bb30 	b.w	800a586 <__ieee754_pow+0x3e>
 800af26:	2000      	movs	r0, #0
 800af28:	2100      	movs	r1, #0
 800af2a:	f7ff bb2c 	b.w	800a586 <__ieee754_pow+0x3e>
 800af2e:	4630      	mov	r0, r6
 800af30:	4639      	mov	r1, r7
 800af32:	f7ff bb28 	b.w	800a586 <__ieee754_pow+0x3e>
 800af36:	9204      	str	r2, [sp, #16]
 800af38:	f7ff bb7a 	b.w	800a630 <__ieee754_pow+0xe8>
 800af3c:	2300      	movs	r3, #0
 800af3e:	f7ff bb64 	b.w	800a60a <__ieee754_pow+0xc2>
 800af42:	bf00      	nop
 800af44:	f3af 8000 	nop.w
 800af48:	00000000 	.word	0x00000000
 800af4c:	3fe62e43 	.word	0x3fe62e43
 800af50:	fefa39ef 	.word	0xfefa39ef
 800af54:	3fe62e42 	.word	0x3fe62e42
 800af58:	0ca86c39 	.word	0x0ca86c39
 800af5c:	be205c61 	.word	0xbe205c61
 800af60:	72bea4d0 	.word	0x72bea4d0
 800af64:	3e663769 	.word	0x3e663769
 800af68:	c5d26bf1 	.word	0xc5d26bf1
 800af6c:	3ebbbd41 	.word	0x3ebbbd41
 800af70:	af25de2c 	.word	0xaf25de2c
 800af74:	3f11566a 	.word	0x3f11566a
 800af78:	16bebd93 	.word	0x16bebd93
 800af7c:	3f66c16c 	.word	0x3f66c16c
 800af80:	5555553e 	.word	0x5555553e
 800af84:	3fc55555 	.word	0x3fc55555
 800af88:	3fe00000 	.word	0x3fe00000
 800af8c:	000fffff 	.word	0x000fffff
 800af90:	3ff00000 	.word	0x3ff00000
 800af94:	4090cbff 	.word	0x4090cbff
 800af98:	3f6f3400 	.word	0x3f6f3400
 800af9c:	652b82fe 	.word	0x652b82fe
 800afa0:	3c971547 	.word	0x3c971547

0800afa4 <__ieee754_sqrt>:
 800afa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afa8:	ec55 4b10 	vmov	r4, r5, d0
 800afac:	4e55      	ldr	r6, [pc, #340]	; (800b104 <__ieee754_sqrt+0x160>)
 800afae:	43ae      	bics	r6, r5
 800afb0:	ee10 0a10 	vmov	r0, s0
 800afb4:	ee10 3a10 	vmov	r3, s0
 800afb8:	462a      	mov	r2, r5
 800afba:	4629      	mov	r1, r5
 800afbc:	d110      	bne.n	800afe0 <__ieee754_sqrt+0x3c>
 800afbe:	ee10 2a10 	vmov	r2, s0
 800afc2:	462b      	mov	r3, r5
 800afc4:	f7f5 fb18 	bl	80005f8 <__aeabi_dmul>
 800afc8:	4602      	mov	r2, r0
 800afca:	460b      	mov	r3, r1
 800afcc:	4620      	mov	r0, r4
 800afce:	4629      	mov	r1, r5
 800afd0:	f7f5 f95c 	bl	800028c <__adddf3>
 800afd4:	4604      	mov	r4, r0
 800afd6:	460d      	mov	r5, r1
 800afd8:	ec45 4b10 	vmov	d0, r4, r5
 800afdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe0:	2d00      	cmp	r5, #0
 800afe2:	dc10      	bgt.n	800b006 <__ieee754_sqrt+0x62>
 800afe4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800afe8:	4330      	orrs	r0, r6
 800afea:	d0f5      	beq.n	800afd8 <__ieee754_sqrt+0x34>
 800afec:	b15d      	cbz	r5, 800b006 <__ieee754_sqrt+0x62>
 800afee:	ee10 2a10 	vmov	r2, s0
 800aff2:	462b      	mov	r3, r5
 800aff4:	ee10 0a10 	vmov	r0, s0
 800aff8:	f7f5 f946 	bl	8000288 <__aeabi_dsub>
 800affc:	4602      	mov	r2, r0
 800affe:	460b      	mov	r3, r1
 800b000:	f7f5 fc24 	bl	800084c <__aeabi_ddiv>
 800b004:	e7e6      	b.n	800afd4 <__ieee754_sqrt+0x30>
 800b006:	1512      	asrs	r2, r2, #20
 800b008:	d074      	beq.n	800b0f4 <__ieee754_sqrt+0x150>
 800b00a:	07d4      	lsls	r4, r2, #31
 800b00c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b010:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b014:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b018:	bf5e      	ittt	pl
 800b01a:	0fda      	lsrpl	r2, r3, #31
 800b01c:	005b      	lslpl	r3, r3, #1
 800b01e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b022:	2400      	movs	r4, #0
 800b024:	0fda      	lsrs	r2, r3, #31
 800b026:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b02a:	107f      	asrs	r7, r7, #1
 800b02c:	005b      	lsls	r3, r3, #1
 800b02e:	2516      	movs	r5, #22
 800b030:	4620      	mov	r0, r4
 800b032:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b036:	1886      	adds	r6, r0, r2
 800b038:	428e      	cmp	r6, r1
 800b03a:	bfde      	ittt	le
 800b03c:	1b89      	suble	r1, r1, r6
 800b03e:	18b0      	addle	r0, r6, r2
 800b040:	18a4      	addle	r4, r4, r2
 800b042:	0049      	lsls	r1, r1, #1
 800b044:	3d01      	subs	r5, #1
 800b046:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b04a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b04e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b052:	d1f0      	bne.n	800b036 <__ieee754_sqrt+0x92>
 800b054:	462a      	mov	r2, r5
 800b056:	f04f 0e20 	mov.w	lr, #32
 800b05a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b05e:	4281      	cmp	r1, r0
 800b060:	eb06 0c05 	add.w	ip, r6, r5
 800b064:	dc02      	bgt.n	800b06c <__ieee754_sqrt+0xc8>
 800b066:	d113      	bne.n	800b090 <__ieee754_sqrt+0xec>
 800b068:	459c      	cmp	ip, r3
 800b06a:	d811      	bhi.n	800b090 <__ieee754_sqrt+0xec>
 800b06c:	f1bc 0f00 	cmp.w	ip, #0
 800b070:	eb0c 0506 	add.w	r5, ip, r6
 800b074:	da43      	bge.n	800b0fe <__ieee754_sqrt+0x15a>
 800b076:	2d00      	cmp	r5, #0
 800b078:	db41      	blt.n	800b0fe <__ieee754_sqrt+0x15a>
 800b07a:	f100 0801 	add.w	r8, r0, #1
 800b07e:	1a09      	subs	r1, r1, r0
 800b080:	459c      	cmp	ip, r3
 800b082:	bf88      	it	hi
 800b084:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b088:	eba3 030c 	sub.w	r3, r3, ip
 800b08c:	4432      	add	r2, r6
 800b08e:	4640      	mov	r0, r8
 800b090:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b094:	f1be 0e01 	subs.w	lr, lr, #1
 800b098:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b09c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b0a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b0a4:	d1db      	bne.n	800b05e <__ieee754_sqrt+0xba>
 800b0a6:	430b      	orrs	r3, r1
 800b0a8:	d006      	beq.n	800b0b8 <__ieee754_sqrt+0x114>
 800b0aa:	1c50      	adds	r0, r2, #1
 800b0ac:	bf13      	iteet	ne
 800b0ae:	3201      	addne	r2, #1
 800b0b0:	3401      	addeq	r4, #1
 800b0b2:	4672      	moveq	r2, lr
 800b0b4:	f022 0201 	bicne.w	r2, r2, #1
 800b0b8:	1063      	asrs	r3, r4, #1
 800b0ba:	0852      	lsrs	r2, r2, #1
 800b0bc:	07e1      	lsls	r1, r4, #31
 800b0be:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b0c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b0c6:	bf48      	it	mi
 800b0c8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b0cc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b0d0:	4614      	mov	r4, r2
 800b0d2:	e781      	b.n	800afd8 <__ieee754_sqrt+0x34>
 800b0d4:	0ad9      	lsrs	r1, r3, #11
 800b0d6:	3815      	subs	r0, #21
 800b0d8:	055b      	lsls	r3, r3, #21
 800b0da:	2900      	cmp	r1, #0
 800b0dc:	d0fa      	beq.n	800b0d4 <__ieee754_sqrt+0x130>
 800b0de:	02cd      	lsls	r5, r1, #11
 800b0e0:	d50a      	bpl.n	800b0f8 <__ieee754_sqrt+0x154>
 800b0e2:	f1c2 0420 	rsb	r4, r2, #32
 800b0e6:	fa23 f404 	lsr.w	r4, r3, r4
 800b0ea:	1e55      	subs	r5, r2, #1
 800b0ec:	4093      	lsls	r3, r2
 800b0ee:	4321      	orrs	r1, r4
 800b0f0:	1b42      	subs	r2, r0, r5
 800b0f2:	e78a      	b.n	800b00a <__ieee754_sqrt+0x66>
 800b0f4:	4610      	mov	r0, r2
 800b0f6:	e7f0      	b.n	800b0da <__ieee754_sqrt+0x136>
 800b0f8:	0049      	lsls	r1, r1, #1
 800b0fa:	3201      	adds	r2, #1
 800b0fc:	e7ef      	b.n	800b0de <__ieee754_sqrt+0x13a>
 800b0fe:	4680      	mov	r8, r0
 800b100:	e7bd      	b.n	800b07e <__ieee754_sqrt+0xda>
 800b102:	bf00      	nop
 800b104:	7ff00000 	.word	0x7ff00000

0800b108 <with_errno>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	4604      	mov	r4, r0
 800b10c:	460d      	mov	r5, r1
 800b10e:	4616      	mov	r6, r2
 800b110:	f7fd ffc8 	bl	80090a4 <__errno>
 800b114:	4629      	mov	r1, r5
 800b116:	6006      	str	r6, [r0, #0]
 800b118:	4620      	mov	r0, r4
 800b11a:	bd70      	pop	{r4, r5, r6, pc}

0800b11c <xflow>:
 800b11c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b11e:	4614      	mov	r4, r2
 800b120:	461d      	mov	r5, r3
 800b122:	b108      	cbz	r0, 800b128 <xflow+0xc>
 800b124:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b128:	e9cd 2300 	strd	r2, r3, [sp]
 800b12c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b130:	4620      	mov	r0, r4
 800b132:	4629      	mov	r1, r5
 800b134:	f7f5 fa60 	bl	80005f8 <__aeabi_dmul>
 800b138:	2222      	movs	r2, #34	; 0x22
 800b13a:	b003      	add	sp, #12
 800b13c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b140:	f7ff bfe2 	b.w	800b108 <with_errno>

0800b144 <__math_uflow>:
 800b144:	b508      	push	{r3, lr}
 800b146:	2200      	movs	r2, #0
 800b148:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b14c:	f7ff ffe6 	bl	800b11c <xflow>
 800b150:	ec41 0b10 	vmov	d0, r0, r1
 800b154:	bd08      	pop	{r3, pc}

0800b156 <__math_oflow>:
 800b156:	b508      	push	{r3, lr}
 800b158:	2200      	movs	r2, #0
 800b15a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b15e:	f7ff ffdd 	bl	800b11c <xflow>
 800b162:	ec41 0b10 	vmov	d0, r0, r1
 800b166:	bd08      	pop	{r3, pc}

0800b168 <fabs>:
 800b168:	ec51 0b10 	vmov	r0, r1, d0
 800b16c:	ee10 2a10 	vmov	r2, s0
 800b170:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b174:	ec43 2b10 	vmov	d0, r2, r3
 800b178:	4770      	bx	lr

0800b17a <finite>:
 800b17a:	b082      	sub	sp, #8
 800b17c:	ed8d 0b00 	vstr	d0, [sp]
 800b180:	9801      	ldr	r0, [sp, #4]
 800b182:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b186:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b18a:	0fc0      	lsrs	r0, r0, #31
 800b18c:	b002      	add	sp, #8
 800b18e:	4770      	bx	lr

0800b190 <scalbn>:
 800b190:	b570      	push	{r4, r5, r6, lr}
 800b192:	ec55 4b10 	vmov	r4, r5, d0
 800b196:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b19a:	4606      	mov	r6, r0
 800b19c:	462b      	mov	r3, r5
 800b19e:	b99a      	cbnz	r2, 800b1c8 <scalbn+0x38>
 800b1a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b1a4:	4323      	orrs	r3, r4
 800b1a6:	d036      	beq.n	800b216 <scalbn+0x86>
 800b1a8:	4b39      	ldr	r3, [pc, #228]	; (800b290 <scalbn+0x100>)
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	ee10 0a10 	vmov	r0, s0
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f7f5 fa21 	bl	80005f8 <__aeabi_dmul>
 800b1b6:	4b37      	ldr	r3, [pc, #220]	; (800b294 <scalbn+0x104>)
 800b1b8:	429e      	cmp	r6, r3
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	460d      	mov	r5, r1
 800b1be:	da10      	bge.n	800b1e2 <scalbn+0x52>
 800b1c0:	a32b      	add	r3, pc, #172	; (adr r3, 800b270 <scalbn+0xe0>)
 800b1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c6:	e03a      	b.n	800b23e <scalbn+0xae>
 800b1c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b1cc:	428a      	cmp	r2, r1
 800b1ce:	d10c      	bne.n	800b1ea <scalbn+0x5a>
 800b1d0:	ee10 2a10 	vmov	r2, s0
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	f7f5 f858 	bl	800028c <__adddf3>
 800b1dc:	4604      	mov	r4, r0
 800b1de:	460d      	mov	r5, r1
 800b1e0:	e019      	b.n	800b216 <scalbn+0x86>
 800b1e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	3a36      	subs	r2, #54	; 0x36
 800b1ea:	4432      	add	r2, r6
 800b1ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b1f0:	428a      	cmp	r2, r1
 800b1f2:	dd08      	ble.n	800b206 <scalbn+0x76>
 800b1f4:	2d00      	cmp	r5, #0
 800b1f6:	a120      	add	r1, pc, #128	; (adr r1, 800b278 <scalbn+0xe8>)
 800b1f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1fc:	da1c      	bge.n	800b238 <scalbn+0xa8>
 800b1fe:	a120      	add	r1, pc, #128	; (adr r1, 800b280 <scalbn+0xf0>)
 800b200:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b204:	e018      	b.n	800b238 <scalbn+0xa8>
 800b206:	2a00      	cmp	r2, #0
 800b208:	dd08      	ble.n	800b21c <scalbn+0x8c>
 800b20a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b20e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b212:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b216:	ec45 4b10 	vmov	d0, r4, r5
 800b21a:	bd70      	pop	{r4, r5, r6, pc}
 800b21c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b220:	da19      	bge.n	800b256 <scalbn+0xc6>
 800b222:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b226:	429e      	cmp	r6, r3
 800b228:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b22c:	dd0a      	ble.n	800b244 <scalbn+0xb4>
 800b22e:	a112      	add	r1, pc, #72	; (adr r1, 800b278 <scalbn+0xe8>)
 800b230:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1e2      	bne.n	800b1fe <scalbn+0x6e>
 800b238:	a30f      	add	r3, pc, #60	; (adr r3, 800b278 <scalbn+0xe8>)
 800b23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23e:	f7f5 f9db 	bl	80005f8 <__aeabi_dmul>
 800b242:	e7cb      	b.n	800b1dc <scalbn+0x4c>
 800b244:	a10a      	add	r1, pc, #40	; (adr r1, 800b270 <scalbn+0xe0>)
 800b246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d0b8      	beq.n	800b1c0 <scalbn+0x30>
 800b24e:	a10e      	add	r1, pc, #56	; (adr r1, 800b288 <scalbn+0xf8>)
 800b250:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b254:	e7b4      	b.n	800b1c0 <scalbn+0x30>
 800b256:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b25a:	3236      	adds	r2, #54	; 0x36
 800b25c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b260:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b264:	4620      	mov	r0, r4
 800b266:	4b0c      	ldr	r3, [pc, #48]	; (800b298 <scalbn+0x108>)
 800b268:	2200      	movs	r2, #0
 800b26a:	e7e8      	b.n	800b23e <scalbn+0xae>
 800b26c:	f3af 8000 	nop.w
 800b270:	c2f8f359 	.word	0xc2f8f359
 800b274:	01a56e1f 	.word	0x01a56e1f
 800b278:	8800759c 	.word	0x8800759c
 800b27c:	7e37e43c 	.word	0x7e37e43c
 800b280:	8800759c 	.word	0x8800759c
 800b284:	fe37e43c 	.word	0xfe37e43c
 800b288:	c2f8f359 	.word	0xc2f8f359
 800b28c:	81a56e1f 	.word	0x81a56e1f
 800b290:	43500000 	.word	0x43500000
 800b294:	ffff3cb0 	.word	0xffff3cb0
 800b298:	3c900000 	.word	0x3c900000

0800b29c <_init>:
 800b29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29e:	bf00      	nop
 800b2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2a2:	bc08      	pop	{r3}
 800b2a4:	469e      	mov	lr, r3
 800b2a6:	4770      	bx	lr

0800b2a8 <_fini>:
 800b2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2aa:	bf00      	nop
 800b2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ae:	bc08      	pop	{r3}
 800b2b0:	469e      	mov	lr, r3
 800b2b2:	4770      	bx	lr
